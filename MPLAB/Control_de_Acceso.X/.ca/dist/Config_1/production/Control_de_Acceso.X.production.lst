

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Jan 29 15:14:19 2025

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F1937
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext13,global,class=STRCODE,delta=2,noexec
    18                           	psect	stringtext14,global,class=STRCODE,delta=2,noexec
    19                           	psect	cinit,global,class=CODE,merge=1,delta=2
    20                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    25                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    26                           	psect	clrtext,global,class=CODE,delta=2
    27                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    33                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    39                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    40                           	psect	text9,local,class=CODE,merge=1,delta=2,group=3
    41                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    42                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    43                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text23,local,class=CODE,merge=1,delta=2,group=3
    55                           	psect	text24,local,class=CODE,merge=1,delta=2,group=3
    56                           	psect	text25,local,class=CODE,merge=1,delta=2,group=3
    57                           	psect	text26,local,class=CODE,merge=1,delta=2,group=3
    58                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,delta=2
    72                           	psect	intentry,global,class=CODE,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2,group=3
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    83                           	dabs	1,0x7E,2
    84     0000                     
    85                           ; Generated 06/07/2023 GMT
    86                           ; 
    87                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    88                           ; All rights reserved.
    89                           ; 
    90                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    91                           ; 
    92                           ; Redistribution and use in source and binary forms, with or without modification, are
    93                           ; permitted provided that the following conditions are met:
    94                           ; 
    95                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    96                           ;        conditions and the following disclaimer.
    97                           ; 
    98                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    99                           ;        of conditions and the following disclaimer in the documentation and/or other
   100                           ;        materials provided with the distribution. Publication is not required when
   101                           ;        this file is used in an embedded application.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC16F1937 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119     0000                     	;# 
   120     0001                     	;# 
   121     0002                     	;# 
   122     0003                     	;# 
   123     0004                     	;# 
   124     0005                     	;# 
   125     0006                     	;# 
   126     0007                     	;# 
   127     0008                     	;# 
   128     0009                     	;# 
   129     000A                     	;# 
   130     000B                     	;# 
   131     000C                     	;# 
   132     000D                     	;# 
   133     000E                     	;# 
   134     000F                     	;# 
   135     0010                     	;# 
   136     0011                     	;# 
   137     0012                     	;# 
   138     0013                     	;# 
   139     0015                     	;# 
   140     0016                     	;# 
   141     0016                     	;# 
   142     0017                     	;# 
   143     0018                     	;# 
   144     0019                     	;# 
   145     001A                     	;# 
   146     001B                     	;# 
   147     001C                     	;# 
   148     001E                     	;# 
   149     001F                     	;# 
   150     008C                     	;# 
   151     008D                     	;# 
   152     008E                     	;# 
   153     008F                     	;# 
   154     0090                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0095                     	;# 
   159     0096                     	;# 
   160     0097                     	;# 
   161     0098                     	;# 
   162     0099                     	;# 
   163     009A                     	;# 
   164     009B                     	;# 
   165     009B                     	;# 
   166     009C                     	;# 
   167     009D                     	;# 
   168     009E                     	;# 
   169     010C                     	;# 
   170     010D                     	;# 
   171     010E                     	;# 
   172     010F                     	;# 
   173     0110                     	;# 
   174     0111                     	;# 
   175     0112                     	;# 
   176     0113                     	;# 
   177     0114                     	;# 
   178     0115                     	;# 
   179     0116                     	;# 
   180     0117                     	;# 
   181     0118                     	;# 
   182     0119                     	;# 
   183     011A                     	;# 
   184     011B                     	;# 
   185     011D                     	;# 
   186     018C                     	;# 
   187     018D                     	;# 
   188     018F                     	;# 
   189     0190                     	;# 
   190     0191                     	;# 
   191     0191                     	;# 
   192     0192                     	;# 
   193     0193                     	;# 
   194     0193                     	;# 
   195     0193                     	;# 
   196     0194                     	;# 
   197     0195                     	;# 
   198     0196                     	;# 
   199     0199                     	;# 
   200     019A                     	;# 
   201     019B                     	;# 
   202     019B                     	;# 
   203     019B                     	;# 
   204     019B                     	;# 
   205     019C                     	;# 
   206     019C                     	;# 
   207     019D                     	;# 
   208     019E                     	;# 
   209     019F                     	;# 
   210     020D                     	;# 
   211     0210                     	;# 
   212     0211                     	;# 
   213     0212                     	;# 
   214     0213                     	;# 
   215     0214                     	;# 
   216     0215                     	;# 
   217     0215                     	;# 
   218     0216                     	;# 
   219     0217                     	;# 
   220     0291                     	;# 
   221     0291                     	;# 
   222     0292                     	;# 
   223     0293                     	;# 
   224     0294                     	;# 
   225     0295                     	;# 
   226     0295                     	;# 
   227     0296                     	;# 
   228     0298                     	;# 
   229     0298                     	;# 
   230     0299                     	;# 
   231     029A                     	;# 
   232     029B                     	;# 
   233     029C                     	;# 
   234     029C                     	;# 
   235     029D                     	;# 
   236     029E                     	;# 
   237     029F                     	;# 
   238     0311                     	;# 
   239     0311                     	;# 
   240     0312                     	;# 
   241     0313                     	;# 
   242     0314                     	;# 
   243     0315                     	;# 
   244     0315                     	;# 
   245     0316                     	;# 
   246     0318                     	;# 
   247     0318                     	;# 
   248     0319                     	;# 
   249     031A                     	;# 
   250     031C                     	;# 
   251     031C                     	;# 
   252     031D                     	;# 
   253     031E                     	;# 
   254     0394                     	;# 
   255     0395                     	;# 
   256     0396                     	;# 
   257     0415                     	;# 
   258     0416                     	;# 
   259     0417                     	;# 
   260     041C                     	;# 
   261     041D                     	;# 
   262     041E                     	;# 
   263     0791                     	;# 
   264     0792                     	;# 
   265     0793                     	;# 
   266     0794                     	;# 
   267     0795                     	;# 
   268     0798                     	;# 
   269     0799                     	;# 
   270     079A                     	;# 
   271     07A0                     	;# 
   272     07A1                     	;# 
   273     07A2                     	;# 
   274     07A3                     	;# 
   275     07A4                     	;# 
   276     07A5                     	;# 
   277     07A6                     	;# 
   278     07A7                     	;# 
   279     07A8                     	;# 
   280     07A9                     	;# 
   281     07AA                     	;# 
   282     07AB                     	;# 
   283     0FE4                     	;# 
   284     0FE5                     	;# 
   285     0FE6                     	;# 
   286     0FE7                     	;# 
   287     0FE8                     	;# 
   288     0FE9                     	;# 
   289     0FEA                     	;# 
   290     0FEB                     	;# 
   291     0FED                     	;# 
   292     0FEE                     	;# 
   293     0FEF                     	;# 
   294     0000                     	;# 
   295     0001                     	;# 
   296     0002                     	;# 
   297     0003                     	;# 
   298     0004                     	;# 
   299     0005                     	;# 
   300     0006                     	;# 
   301     0007                     	;# 
   302     0008                     	;# 
   303     0009                     	;# 
   304     000A                     	;# 
   305     000B                     	;# 
   306     000C                     	;# 
   307     000D                     	;# 
   308     000E                     	;# 
   309     000F                     	;# 
   310     0010                     	;# 
   311     0011                     	;# 
   312     0012                     	;# 
   313     0013                     	;# 
   314     0015                     	;# 
   315     0016                     	;# 
   316     0016                     	;# 
   317     0017                     	;# 
   318     0018                     	;# 
   319     0019                     	;# 
   320     001A                     	;# 
   321     001B                     	;# 
   322     001C                     	;# 
   323     001E                     	;# 
   324     001F                     	;# 
   325     008C                     	;# 
   326     008D                     	;# 
   327     008E                     	;# 
   328     008F                     	;# 
   329     0090                     	;# 
   330     0091                     	;# 
   331     0092                     	;# 
   332     0093                     	;# 
   333     0095                     	;# 
   334     0096                     	;# 
   335     0097                     	;# 
   336     0098                     	;# 
   337     0099                     	;# 
   338     009A                     	;# 
   339     009B                     	;# 
   340     009B                     	;# 
   341     009C                     	;# 
   342     009D                     	;# 
   343     009E                     	;# 
   344     010C                     	;# 
   345     010D                     	;# 
   346     010E                     	;# 
   347     010F                     	;# 
   348     0110                     	;# 
   349     0111                     	;# 
   350     0112                     	;# 
   351     0113                     	;# 
   352     0114                     	;# 
   353     0115                     	;# 
   354     0116                     	;# 
   355     0117                     	;# 
   356     0118                     	;# 
   357     0119                     	;# 
   358     011A                     	;# 
   359     011B                     	;# 
   360     011D                     	;# 
   361     018C                     	;# 
   362     018D                     	;# 
   363     018F                     	;# 
   364     0190                     	;# 
   365     0191                     	;# 
   366     0191                     	;# 
   367     0192                     	;# 
   368     0193                     	;# 
   369     0193                     	;# 
   370     0193                     	;# 
   371     0194                     	;# 
   372     0195                     	;# 
   373     0196                     	;# 
   374     0199                     	;# 
   375     019A                     	;# 
   376     019B                     	;# 
   377     019B                     	;# 
   378     019B                     	;# 
   379     019B                     	;# 
   380     019C                     	;# 
   381     019C                     	;# 
   382     019D                     	;# 
   383     019E                     	;# 
   384     019F                     	;# 
   385     020D                     	;# 
   386     0210                     	;# 
   387     0211                     	;# 
   388     0212                     	;# 
   389     0213                     	;# 
   390     0214                     	;# 
   391     0215                     	;# 
   392     0215                     	;# 
   393     0216                     	;# 
   394     0217                     	;# 
   395     0291                     	;# 
   396     0291                     	;# 
   397     0292                     	;# 
   398     0293                     	;# 
   399     0294                     	;# 
   400     0295                     	;# 
   401     0295                     	;# 
   402     0296                     	;# 
   403     0298                     	;# 
   404     0298                     	;# 
   405     0299                     	;# 
   406     029A                     	;# 
   407     029B                     	;# 
   408     029C                     	;# 
   409     029C                     	;# 
   410     029D                     	;# 
   411     029E                     	;# 
   412     029F                     	;# 
   413     0311                     	;# 
   414     0311                     	;# 
   415     0312                     	;# 
   416     0313                     	;# 
   417     0314                     	;# 
   418     0315                     	;# 
   419     0315                     	;# 
   420     0316                     	;# 
   421     0318                     	;# 
   422     0318                     	;# 
   423     0319                     	;# 
   424     031A                     	;# 
   425     031C                     	;# 
   426     031C                     	;# 
   427     031D                     	;# 
   428     031E                     	;# 
   429     0394                     	;# 
   430     0395                     	;# 
   431     0396                     	;# 
   432     0415                     	;# 
   433     0416                     	;# 
   434     0417                     	;# 
   435     041C                     	;# 
   436     041D                     	;# 
   437     041E                     	;# 
   438     0791                     	;# 
   439     0792                     	;# 
   440     0793                     	;# 
   441     0794                     	;# 
   442     0795                     	;# 
   443     0798                     	;# 
   444     0799                     	;# 
   445     079A                     	;# 
   446     07A0                     	;# 
   447     07A1                     	;# 
   448     07A2                     	;# 
   449     07A3                     	;# 
   450     07A4                     	;# 
   451     07A5                     	;# 
   452     07A6                     	;# 
   453     07A7                     	;# 
   454     07A8                     	;# 
   455     07A9                     	;# 
   456     07AA                     	;# 
   457     07AB                     	;# 
   458     0FE4                     	;# 
   459     0FE5                     	;# 
   460     0FE6                     	;# 
   461     0FE7                     	;# 
   462     0FE8                     	;# 
   463     0FE9                     	;# 
   464     0FEA                     	;# 
   465     0FEB                     	;# 
   466     0FED                     	;# 
   467     0FEE                     	;# 
   468     0FEF                     	;# 
   469     0000                     	;# 
   470     0001                     	;# 
   471     0002                     	;# 
   472     0003                     	;# 
   473     0004                     	;# 
   474     0005                     	;# 
   475     0006                     	;# 
   476     0007                     	;# 
   477     0008                     	;# 
   478     0009                     	;# 
   479     000A                     	;# 
   480     000B                     	;# 
   481     000C                     	;# 
   482     000D                     	;# 
   483     000E                     	;# 
   484     000F                     	;# 
   485     0010                     	;# 
   486     0011                     	;# 
   487     0012                     	;# 
   488     0013                     	;# 
   489     0015                     	;# 
   490     0016                     	;# 
   491     0016                     	;# 
   492     0017                     	;# 
   493     0018                     	;# 
   494     0019                     	;# 
   495     001A                     	;# 
   496     001B                     	;# 
   497     001C                     	;# 
   498     001E                     	;# 
   499     001F                     	;# 
   500     008C                     	;# 
   501     008D                     	;# 
   502     008E                     	;# 
   503     008F                     	;# 
   504     0090                     	;# 
   505     0091                     	;# 
   506     0092                     	;# 
   507     0093                     	;# 
   508     0095                     	;# 
   509     0096                     	;# 
   510     0097                     	;# 
   511     0098                     	;# 
   512     0099                     	;# 
   513     009A                     	;# 
   514     009B                     	;# 
   515     009B                     	;# 
   516     009C                     	;# 
   517     009D                     	;# 
   518     009E                     	;# 
   519     010C                     	;# 
   520     010D                     	;# 
   521     010E                     	;# 
   522     010F                     	;# 
   523     0110                     	;# 
   524     0111                     	;# 
   525     0112                     	;# 
   526     0113                     	;# 
   527     0114                     	;# 
   528     0115                     	;# 
   529     0116                     	;# 
   530     0117                     	;# 
   531     0118                     	;# 
   532     0119                     	;# 
   533     011A                     	;# 
   534     011B                     	;# 
   535     011D                     	;# 
   536     018C                     	;# 
   537     018D                     	;# 
   538     018F                     	;# 
   539     0190                     	;# 
   540     0191                     	;# 
   541     0191                     	;# 
   542     0192                     	;# 
   543     0193                     	;# 
   544     0193                     	;# 
   545     0193                     	;# 
   546     0194                     	;# 
   547     0195                     	;# 
   548     0196                     	;# 
   549     0199                     	;# 
   550     019A                     	;# 
   551     019B                     	;# 
   552     019B                     	;# 
   553     019B                     	;# 
   554     019B                     	;# 
   555     019C                     	;# 
   556     019C                     	;# 
   557     019D                     	;# 
   558     019E                     	;# 
   559     019F                     	;# 
   560     020D                     	;# 
   561     0210                     	;# 
   562     0211                     	;# 
   563     0212                     	;# 
   564     0213                     	;# 
   565     0214                     	;# 
   566     0215                     	;# 
   567     0215                     	;# 
   568     0216                     	;# 
   569     0217                     	;# 
   570     0291                     	;# 
   571     0291                     	;# 
   572     0292                     	;# 
   573     0293                     	;# 
   574     0294                     	;# 
   575     0295                     	;# 
   576     0295                     	;# 
   577     0296                     	;# 
   578     0298                     	;# 
   579     0298                     	;# 
   580     0299                     	;# 
   581     029A                     	;# 
   582     029B                     	;# 
   583     029C                     	;# 
   584     029C                     	;# 
   585     029D                     	;# 
   586     029E                     	;# 
   587     029F                     	;# 
   588     0311                     	;# 
   589     0311                     	;# 
   590     0312                     	;# 
   591     0313                     	;# 
   592     0314                     	;# 
   593     0315                     	;# 
   594     0315                     	;# 
   595     0316                     	;# 
   596     0318                     	;# 
   597     0318                     	;# 
   598     0319                     	;# 
   599     031A                     	;# 
   600     031C                     	;# 
   601     031C                     	;# 
   602     031D                     	;# 
   603     031E                     	;# 
   604     0394                     	;# 
   605     0395                     	;# 
   606     0396                     	;# 
   607     0415                     	;# 
   608     0416                     	;# 
   609     0417                     	;# 
   610     041C                     	;# 
   611     041D                     	;# 
   612     041E                     	;# 
   613     0791                     	;# 
   614     0792                     	;# 
   615     0793                     	;# 
   616     0794                     	;# 
   617     0795                     	;# 
   618     0798                     	;# 
   619     0799                     	;# 
   620     079A                     	;# 
   621     07A0                     	;# 
   622     07A1                     	;# 
   623     07A2                     	;# 
   624     07A3                     	;# 
   625     07A4                     	;# 
   626     07A5                     	;# 
   627     07A6                     	;# 
   628     07A7                     	;# 
   629     07A8                     	;# 
   630     07A9                     	;# 
   631     07AA                     	;# 
   632     07AB                     	;# 
   633     0FE4                     	;# 
   634     0FE5                     	;# 
   635     0FE6                     	;# 
   636     0FE7                     	;# 
   637     0FE8                     	;# 
   638     0FE9                     	;# 
   639     0FEA                     	;# 
   640     0FEB                     	;# 
   641     0FED                     	;# 
   642     0FEE                     	;# 
   643     0FEF                     	;# 
   644     0000                     	;# 
   645     0001                     	;# 
   646     0002                     	;# 
   647     0003                     	;# 
   648     0004                     	;# 
   649     0005                     	;# 
   650     0006                     	;# 
   651     0007                     	;# 
   652     0008                     	;# 
   653     0009                     	;# 
   654     000A                     	;# 
   655     000B                     	;# 
   656     000C                     	;# 
   657     000D                     	;# 
   658     000E                     	;# 
   659     000F                     	;# 
   660     0010                     	;# 
   661     0011                     	;# 
   662     0012                     	;# 
   663     0013                     	;# 
   664     0015                     	;# 
   665     0016                     	;# 
   666     0016                     	;# 
   667     0017                     	;# 
   668     0018                     	;# 
   669     0019                     	;# 
   670     001A                     	;# 
   671     001B                     	;# 
   672     001C                     	;# 
   673     001E                     	;# 
   674     001F                     	;# 
   675     008C                     	;# 
   676     008D                     	;# 
   677     008E                     	;# 
   678     008F                     	;# 
   679     0090                     	;# 
   680     0091                     	;# 
   681     0092                     	;# 
   682     0093                     	;# 
   683     0095                     	;# 
   684     0096                     	;# 
   685     0097                     	;# 
   686     0098                     	;# 
   687     0099                     	;# 
   688     009A                     	;# 
   689     009B                     	;# 
   690     009B                     	;# 
   691     009C                     	;# 
   692     009D                     	;# 
   693     009E                     	;# 
   694     010C                     	;# 
   695     010D                     	;# 
   696     010E                     	;# 
   697     010F                     	;# 
   698     0110                     	;# 
   699     0111                     	;# 
   700     0112                     	;# 
   701     0113                     	;# 
   702     0114                     	;# 
   703     0115                     	;# 
   704     0116                     	;# 
   705     0117                     	;# 
   706     0118                     	;# 
   707     0119                     	;# 
   708     011A                     	;# 
   709     011B                     	;# 
   710     011D                     	;# 
   711     018C                     	;# 
   712     018D                     	;# 
   713     018F                     	;# 
   714     0190                     	;# 
   715     0191                     	;# 
   716     0191                     	;# 
   717     0192                     	;# 
   718     0193                     	;# 
   719     0193                     	;# 
   720     0193                     	;# 
   721     0194                     	;# 
   722     0195                     	;# 
   723     0196                     	;# 
   724     0199                     	;# 
   725     019A                     	;# 
   726     019B                     	;# 
   727     019B                     	;# 
   728     019B                     	;# 
   729     019B                     	;# 
   730     019C                     	;# 
   731     019C                     	;# 
   732     019D                     	;# 
   733     019E                     	;# 
   734     019F                     	;# 
   735     020D                     	;# 
   736     0210                     	;# 
   737     0211                     	;# 
   738     0212                     	;# 
   739     0213                     	;# 
   740     0214                     	;# 
   741     0215                     	;# 
   742     0215                     	;# 
   743     0216                     	;# 
   744     0217                     	;# 
   745     0291                     	;# 
   746     0291                     	;# 
   747     0292                     	;# 
   748     0293                     	;# 
   749     0294                     	;# 
   750     0295                     	;# 
   751     0295                     	;# 
   752     0296                     	;# 
   753     0298                     	;# 
   754     0298                     	;# 
   755     0299                     	;# 
   756     029A                     	;# 
   757     029B                     	;# 
   758     029C                     	;# 
   759     029C                     	;# 
   760     029D                     	;# 
   761     029E                     	;# 
   762     029F                     	;# 
   763     0311                     	;# 
   764     0311                     	;# 
   765     0312                     	;# 
   766     0313                     	;# 
   767     0314                     	;# 
   768     0315                     	;# 
   769     0315                     	;# 
   770     0316                     	;# 
   771     0318                     	;# 
   772     0318                     	;# 
   773     0319                     	;# 
   774     031A                     	;# 
   775     031C                     	;# 
   776     031C                     	;# 
   777     031D                     	;# 
   778     031E                     	;# 
   779     0394                     	;# 
   780     0395                     	;# 
   781     0396                     	;# 
   782     0415                     	;# 
   783     0416                     	;# 
   784     0417                     	;# 
   785     041C                     	;# 
   786     041D                     	;# 
   787     041E                     	;# 
   788     0791                     	;# 
   789     0792                     	;# 
   790     0793                     	;# 
   791     0794                     	;# 
   792     0795                     	;# 
   793     0798                     	;# 
   794     0799                     	;# 
   795     079A                     	;# 
   796     07A0                     	;# 
   797     07A1                     	;# 
   798     07A2                     	;# 
   799     07A3                     	;# 
   800     07A4                     	;# 
   801     07A5                     	;# 
   802     07A6                     	;# 
   803     07A7                     	;# 
   804     07A8                     	;# 
   805     07A9                     	;# 
   806     07AA                     	;# 
   807     07AB                     	;# 
   808     0FE4                     	;# 
   809     0FE5                     	;# 
   810     0FE6                     	;# 
   811     0FE7                     	;# 
   812     0FE8                     	;# 
   813     0FE9                     	;# 
   814     0FEA                     	;# 
   815     0FEB                     	;# 
   816     0FED                     	;# 
   817     0FEE                     	;# 
   818     0FEF                     	;# 
   819     0000                     	;# 
   820     0001                     	;# 
   821     0002                     	;# 
   822     0003                     	;# 
   823     0004                     	;# 
   824     0005                     	;# 
   825     0006                     	;# 
   826     0007                     	;# 
   827     0008                     	;# 
   828     0009                     	;# 
   829     000A                     	;# 
   830     000B                     	;# 
   831     000C                     	;# 
   832     000D                     	;# 
   833     000E                     	;# 
   834     000F                     	;# 
   835     0010                     	;# 
   836     0011                     	;# 
   837     0012                     	;# 
   838     0013                     	;# 
   839     0015                     	;# 
   840     0016                     	;# 
   841     0016                     	;# 
   842     0017                     	;# 
   843     0018                     	;# 
   844     0019                     	;# 
   845     001A                     	;# 
   846     001B                     	;# 
   847     001C                     	;# 
   848     001E                     	;# 
   849     001F                     	;# 
   850     008C                     	;# 
   851     008D                     	;# 
   852     008E                     	;# 
   853     008F                     	;# 
   854     0090                     	;# 
   855     0091                     	;# 
   856     0092                     	;# 
   857     0093                     	;# 
   858     0095                     	;# 
   859     0096                     	;# 
   860     0097                     	;# 
   861     0098                     	;# 
   862     0099                     	;# 
   863     009A                     	;# 
   864     009B                     	;# 
   865     009B                     	;# 
   866     009C                     	;# 
   867     009D                     	;# 
   868     009E                     	;# 
   869     010C                     	;# 
   870     010D                     	;# 
   871     010E                     	;# 
   872     010F                     	;# 
   873     0110                     	;# 
   874     0111                     	;# 
   875     0112                     	;# 
   876     0113                     	;# 
   877     0114                     	;# 
   878     0115                     	;# 
   879     0116                     	;# 
   880     0117                     	;# 
   881     0118                     	;# 
   882     0119                     	;# 
   883     011A                     	;# 
   884     011B                     	;# 
   885     011D                     	;# 
   886     018C                     	;# 
   887     018D                     	;# 
   888     018F                     	;# 
   889     0190                     	;# 
   890     0191                     	;# 
   891     0191                     	;# 
   892     0192                     	;# 
   893     0193                     	;# 
   894     0193                     	;# 
   895     0193                     	;# 
   896     0194                     	;# 
   897     0195                     	;# 
   898     0196                     	;# 
   899     0199                     	;# 
   900     019A                     	;# 
   901     019B                     	;# 
   902     019B                     	;# 
   903     019B                     	;# 
   904     019B                     	;# 
   905     019C                     	;# 
   906     019C                     	;# 
   907     019D                     	;# 
   908     019E                     	;# 
   909     019F                     	;# 
   910     020D                     	;# 
   911     0210                     	;# 
   912     0211                     	;# 
   913     0212                     	;# 
   914     0213                     	;# 
   915     0214                     	;# 
   916     0215                     	;# 
   917     0215                     	;# 
   918     0216                     	;# 
   919     0217                     	;# 
   920     0291                     	;# 
   921     0291                     	;# 
   922     0292                     	;# 
   923     0293                     	;# 
   924     0294                     	;# 
   925     0295                     	;# 
   926     0295                     	;# 
   927     0296                     	;# 
   928     0298                     	;# 
   929     0298                     	;# 
   930     0299                     	;# 
   931     029A                     	;# 
   932     029B                     	;# 
   933     029C                     	;# 
   934     029C                     	;# 
   935     029D                     	;# 
   936     029E                     	;# 
   937     029F                     	;# 
   938     0311                     	;# 
   939     0311                     	;# 
   940     0312                     	;# 
   941     0313                     	;# 
   942     0314                     	;# 
   943     0315                     	;# 
   944     0315                     	;# 
   945     0316                     	;# 
   946     0318                     	;# 
   947     0318                     	;# 
   948     0319                     	;# 
   949     031A                     	;# 
   950     031C                     	;# 
   951     031C                     	;# 
   952     031D                     	;# 
   953     031E                     	;# 
   954     0394                     	;# 
   955     0395                     	;# 
   956     0396                     	;# 
   957     0415                     	;# 
   958     0416                     	;# 
   959     0417                     	;# 
   960     041C                     	;# 
   961     041D                     	;# 
   962     041E                     	;# 
   963     0791                     	;# 
   964     0792                     	;# 
   965     0793                     	;# 
   966     0794                     	;# 
   967     0795                     	;# 
   968     0798                     	;# 
   969     0799                     	;# 
   970     079A                     	;# 
   971     07A0                     	;# 
   972     07A1                     	;# 
   973     07A2                     	;# 
   974     07A3                     	;# 
   975     07A4                     	;# 
   976     07A5                     	;# 
   977     07A6                     	;# 
   978     07A7                     	;# 
   979     07A8                     	;# 
   980     07A9                     	;# 
   981     07AA                     	;# 
   982     07AB                     	;# 
   983     0FE4                     	;# 
   984     0FE5                     	;# 
   985     0FE6                     	;# 
   986     0FE7                     	;# 
   987     0FE8                     	;# 
   988     0FE9                     	;# 
   989     0FEA                     	;# 
   990     0FEB                     	;# 
   991     0FED                     	;# 
   992     0FEE                     	;# 
   993     0FEF                     	;# 
   994     0000                     	;# 
   995     0001                     	;# 
   996     0002                     	;# 
   997     0003                     	;# 
   998     0004                     	;# 
   999     0005                     	;# 
  1000     0006                     	;# 
  1001     0007                     	;# 
  1002     0008                     	;# 
  1003     0009                     	;# 
  1004     000A                     	;# 
  1005     000B                     	;# 
  1006     000C                     	;# 
  1007     000D                     	;# 
  1008     000E                     	;# 
  1009     000F                     	;# 
  1010     0010                     	;# 
  1011     0011                     	;# 
  1012     0012                     	;# 
  1013     0013                     	;# 
  1014     0015                     	;# 
  1015     0016                     	;# 
  1016     0016                     	;# 
  1017     0017                     	;# 
  1018     0018                     	;# 
  1019     0019                     	;# 
  1020     001A                     	;# 
  1021     001B                     	;# 
  1022     001C                     	;# 
  1023     001E                     	;# 
  1024     001F                     	;# 
  1025     008C                     	;# 
  1026     008D                     	;# 
  1027     008E                     	;# 
  1028     008F                     	;# 
  1029     0090                     	;# 
  1030     0091                     	;# 
  1031     0092                     	;# 
  1032     0093                     	;# 
  1033     0095                     	;# 
  1034     0096                     	;# 
  1035     0097                     	;# 
  1036     0098                     	;# 
  1037     0099                     	;# 
  1038     009A                     	;# 
  1039     009B                     	;# 
  1040     009B                     	;# 
  1041     009C                     	;# 
  1042     009D                     	;# 
  1043     009E                     	;# 
  1044     010C                     	;# 
  1045     010D                     	;# 
  1046     010E                     	;# 
  1047     010F                     	;# 
  1048     0110                     	;# 
  1049     0111                     	;# 
  1050     0112                     	;# 
  1051     0113                     	;# 
  1052     0114                     	;# 
  1053     0115                     	;# 
  1054     0116                     	;# 
  1055     0117                     	;# 
  1056     0118                     	;# 
  1057     0119                     	;# 
  1058     011A                     	;# 
  1059     011B                     	;# 
  1060     011D                     	;# 
  1061     018C                     	;# 
  1062     018D                     	;# 
  1063     018F                     	;# 
  1064     0190                     	;# 
  1065     0191                     	;# 
  1066     0191                     	;# 
  1067     0192                     	;# 
  1068     0193                     	;# 
  1069     0193                     	;# 
  1070     0193                     	;# 
  1071     0194                     	;# 
  1072     0195                     	;# 
  1073     0196                     	;# 
  1074     0199                     	;# 
  1075     019A                     	;# 
  1076     019B                     	;# 
  1077     019B                     	;# 
  1078     019B                     	;# 
  1079     019B                     	;# 
  1080     019C                     	;# 
  1081     019C                     	;# 
  1082     019D                     	;# 
  1083     019E                     	;# 
  1084     019F                     	;# 
  1085     020D                     	;# 
  1086     0210                     	;# 
  1087     0211                     	;# 
  1088     0212                     	;# 
  1089     0213                     	;# 
  1090     0214                     	;# 
  1091     0215                     	;# 
  1092     0215                     	;# 
  1093     0216                     	;# 
  1094     0217                     	;# 
  1095     0291                     	;# 
  1096     0291                     	;# 
  1097     0292                     	;# 
  1098     0293                     	;# 
  1099     0294                     	;# 
  1100     0295                     	;# 
  1101     0295                     	;# 
  1102     0296                     	;# 
  1103     0298                     	;# 
  1104     0298                     	;# 
  1105     0299                     	;# 
  1106     029A                     	;# 
  1107     029B                     	;# 
  1108     029C                     	;# 
  1109     029C                     	;# 
  1110     029D                     	;# 
  1111     029E                     	;# 
  1112     029F                     	;# 
  1113     0311                     	;# 
  1114     0311                     	;# 
  1115     0312                     	;# 
  1116     0313                     	;# 
  1117     0314                     	;# 
  1118     0315                     	;# 
  1119     0315                     	;# 
  1120     0316                     	;# 
  1121     0318                     	;# 
  1122     0318                     	;# 
  1123     0319                     	;# 
  1124     031A                     	;# 
  1125     031C                     	;# 
  1126     031C                     	;# 
  1127     031D                     	;# 
  1128     031E                     	;# 
  1129     0394                     	;# 
  1130     0395                     	;# 
  1131     0396                     	;# 
  1132     0415                     	;# 
  1133     0416                     	;# 
  1134     0417                     	;# 
  1135     041C                     	;# 
  1136     041D                     	;# 
  1137     041E                     	;# 
  1138     0791                     	;# 
  1139     0792                     	;# 
  1140     0793                     	;# 
  1141     0794                     	;# 
  1142     0795                     	;# 
  1143     0798                     	;# 
  1144     0799                     	;# 
  1145     079A                     	;# 
  1146     07A0                     	;# 
  1147     07A1                     	;# 
  1148     07A2                     	;# 
  1149     07A3                     	;# 
  1150     07A4                     	;# 
  1151     07A5                     	;# 
  1152     07A6                     	;# 
  1153     07A7                     	;# 
  1154     07A8                     	;# 
  1155     07A9                     	;# 
  1156     07AA                     	;# 
  1157     07AB                     	;# 
  1158     0FE4                     	;# 
  1159     0FE5                     	;# 
  1160     0FE6                     	;# 
  1161     0FE7                     	;# 
  1162     0FE8                     	;# 
  1163     0FE9                     	;# 
  1164     0FEA                     	;# 
  1165     0FEB                     	;# 
  1166     0FED                     	;# 
  1167     0FEE                     	;# 
  1168     0FEF                     	;# 
  1169     0000                     	;# 
  1170     0001                     	;# 
  1171     0002                     	;# 
  1172     0003                     	;# 
  1173     0004                     	;# 
  1174     0005                     	;# 
  1175     0006                     	;# 
  1176     0007                     	;# 
  1177     0008                     	;# 
  1178     0009                     	;# 
  1179     000A                     	;# 
  1180     000B                     	;# 
  1181     000C                     	;# 
  1182     000D                     	;# 
  1183     000E                     	;# 
  1184     000F                     	;# 
  1185     0010                     	;# 
  1186     0011                     	;# 
  1187     0012                     	;# 
  1188     0013                     	;# 
  1189     0015                     	;# 
  1190     0016                     	;# 
  1191     0016                     	;# 
  1192     0017                     	;# 
  1193     0018                     	;# 
  1194     0019                     	;# 
  1195     001A                     	;# 
  1196     001B                     	;# 
  1197     001C                     	;# 
  1198     001E                     	;# 
  1199     001F                     	;# 
  1200     008C                     	;# 
  1201     008D                     	;# 
  1202     008E                     	;# 
  1203     008F                     	;# 
  1204     0090                     	;# 
  1205     0091                     	;# 
  1206     0092                     	;# 
  1207     0093                     	;# 
  1208     0095                     	;# 
  1209     0096                     	;# 
  1210     0097                     	;# 
  1211     0098                     	;# 
  1212     0099                     	;# 
  1213     009A                     	;# 
  1214     009B                     	;# 
  1215     009B                     	;# 
  1216     009C                     	;# 
  1217     009D                     	;# 
  1218     009E                     	;# 
  1219     010C                     	;# 
  1220     010D                     	;# 
  1221     010E                     	;# 
  1222     010F                     	;# 
  1223     0110                     	;# 
  1224     0111                     	;# 
  1225     0112                     	;# 
  1226     0113                     	;# 
  1227     0114                     	;# 
  1228     0115                     	;# 
  1229     0116                     	;# 
  1230     0117                     	;# 
  1231     0118                     	;# 
  1232     0119                     	;# 
  1233     011A                     	;# 
  1234     011B                     	;# 
  1235     011D                     	;# 
  1236     018C                     	;# 
  1237     018D                     	;# 
  1238     018F                     	;# 
  1239     0190                     	;# 
  1240     0191                     	;# 
  1241     0191                     	;# 
  1242     0192                     	;# 
  1243     0193                     	;# 
  1244     0193                     	;# 
  1245     0193                     	;# 
  1246     0194                     	;# 
  1247     0195                     	;# 
  1248     0196                     	;# 
  1249     0199                     	;# 
  1250     019A                     	;# 
  1251     019B                     	;# 
  1252     019B                     	;# 
  1253     019B                     	;# 
  1254     019B                     	;# 
  1255     019C                     	;# 
  1256     019C                     	;# 
  1257     019D                     	;# 
  1258     019E                     	;# 
  1259     019F                     	;# 
  1260     020D                     	;# 
  1261     0210                     	;# 
  1262     0211                     	;# 
  1263     0212                     	;# 
  1264     0213                     	;# 
  1265     0214                     	;# 
  1266     0215                     	;# 
  1267     0215                     	;# 
  1268     0216                     	;# 
  1269     0217                     	;# 
  1270     0291                     	;# 
  1271     0291                     	;# 
  1272     0292                     	;# 
  1273     0293                     	;# 
  1274     0294                     	;# 
  1275     0295                     	;# 
  1276     0295                     	;# 
  1277     0296                     	;# 
  1278     0298                     	;# 
  1279     0298                     	;# 
  1280     0299                     	;# 
  1281     029A                     	;# 
  1282     029B                     	;# 
  1283     029C                     	;# 
  1284     029C                     	;# 
  1285     029D                     	;# 
  1286     029E                     	;# 
  1287     029F                     	;# 
  1288     0311                     	;# 
  1289     0311                     	;# 
  1290     0312                     	;# 
  1291     0313                     	;# 
  1292     0314                     	;# 
  1293     0315                     	;# 
  1294     0315                     	;# 
  1295     0316                     	;# 
  1296     0318                     	;# 
  1297     0318                     	;# 
  1298     0319                     	;# 
  1299     031A                     	;# 
  1300     031C                     	;# 
  1301     031C                     	;# 
  1302     031D                     	;# 
  1303     031E                     	;# 
  1304     0394                     	;# 
  1305     0395                     	;# 
  1306     0396                     	;# 
  1307     0415                     	;# 
  1308     0416                     	;# 
  1309     0417                     	;# 
  1310     041C                     	;# 
  1311     041D                     	;# 
  1312     041E                     	;# 
  1313     0791                     	;# 
  1314     0792                     	;# 
  1315     0793                     	;# 
  1316     0794                     	;# 
  1317     0795                     	;# 
  1318     0798                     	;# 
  1319     0799                     	;# 
  1320     079A                     	;# 
  1321     07A0                     	;# 
  1322     07A1                     	;# 
  1323     07A2                     	;# 
  1324     07A3                     	;# 
  1325     07A4                     	;# 
  1326     07A5                     	;# 
  1327     07A6                     	;# 
  1328     07A7                     	;# 
  1329     07A8                     	;# 
  1330     07A9                     	;# 
  1331     07AA                     	;# 
  1332     07AB                     	;# 
  1333     0FE4                     	;# 
  1334     0FE5                     	;# 
  1335     0FE6                     	;# 
  1336     0FE7                     	;# 
  1337     0FE8                     	;# 
  1338     0FE9                     	;# 
  1339     0FEA                     	;# 
  1340     0FEB                     	;# 
  1341     0FED                     	;# 
  1342     0FEE                     	;# 
  1343     0FEF                     	;# 
  1344                           
  1345                           	psect	idataBANK2
  1346     1BFD                     __pidataBANK2:
  1347                           
  1348                           ;initializer for _clave_enter
  1349     1BFD  3431               	retlw	49
  1350     1BFE  3432               	retlw	50
  1351     1BFF  3433               	retlw	51
  1352     1C00  3434               	retlw	52
  1353     1C01  3400               	retlw	0
  1354     000D                     _PORTBbits	set	13
  1355     000B                     _INTCONbits	set	11
  1356     008F                     _TRISDbits	set	143
  1357     008D                     _TRISBbits	set	141
  1358     008E                     _TRISCbits	set	142
  1359     008C                     _TRISAbits	set	140
  1360     0095                     _OPTION_REGbits	set	149
  1361     008F                     _TRISD	set	143
  1362     008E                     _TRISC	set	142
  1363     008D                     _TRISB	set	141
  1364     008C                     _TRISA	set	140
  1365     0090                     _TRISE	set	144
  1366     0097                     _WDTCON	set	151
  1367     0098                     _OSCTUNE	set	152
  1368     0099                     _OSCCON	set	153
  1369     009D                     _ADCON0bits	set	157
  1370     009D                     _ADCON0	set	157
  1371     009C                     _ADRESH	set	156
  1372     009B                     _ADRESL	set	155
  1373     009E                     _ADCON1	set	158
  1374     010F                     _LATDbits	set	271
  1375     010D                     _LATBbits	set	269
  1376     010E                     _LATCbits	set	270
  1377     010C                     _LATAbits	set	268
  1378     011D                     _APFCON	set	285
  1379     010E                     _LATC	set	270
  1380     010D                     _LATB	set	269
  1381     010C                     _LATA	set	268
  1382     010F                     _LATD	set	271
  1383     0110                     _LATE	set	272
  1384     0116                     _BORCON	set	278
  1385     018C                     _ANSELA	set	396
  1386     0190                     _ANSELE	set	400
  1387     018D                     _ANSELB	set	397
  1388     018F                     _ANSELD	set	399
  1389     0214                     _SSPSTATbits	set	532
  1390     0211                     _SSPBUF	set	529
  1391     0216                     _SSPCON2bits	set	534
  1392     0212                     _SSPADD	set	530
  1393     0215                     _SSPCONbits	set	533
  1394     0215                     _SSPCON1bits	set	533
  1395     020D                     _WPUB	set	525
  1396     0210                     _WPUE	set	528
  1397     0396                     _IOCBF	set	918
  1398     0395                     _IOCBN	set	917
  1399                           
  1400                           	psect	stringtext1
  1401     1800                     __pstringtext1:
  1402     1800                     STR_17:
  1403     1800  3443               	retlw	67	;'C'
  1404     1801  344C               	retlw	76	;'L'
  1405     1802  3441               	retlw	65	;'A'
  1406     1803  3456               	retlw	86	;'V'
  1407     1804  3445               	retlw	69	;'E'
  1408     1805  3420               	retlw	32	;' '
  1409     1806  3449               	retlw	73	;'I'
  1410     1807  344E               	retlw	78	;'N'
  1411     1808  3443               	retlw	67	;'C'
  1412     1809  344F               	retlw	79	;'O'
  1413     180A  3452               	retlw	82	;'R'
  1414     180B  3452               	retlw	82	;'R'
  1415     180C  3445               	retlw	69	;'E'
  1416     180D  3443               	retlw	67	;'C'
  1417     180E  3454               	retlw	84	;'T'
  1418     180F  3441               	retlw	65	;'A'
  1419     1810  3400               	retlw	0
  1420                           
  1421                           	psect	stringtext2
  1422     1811                     __pstringtext2:
  1423     1811                     STR_7:
  1424     1811  3431               	retlw	49	;'1'
  1425     1812  343A               	retlw	58	;':'
  1426     1813  3449               	retlw	73	;'I'
  1427     1814  344E               	retlw	78	;'N'
  1428     1815  3447               	retlw	71	;'G'
  1429     1816  3452               	retlw	82	;'R'
  1430     1817  3445               	retlw	69	;'E'
  1431     1818  3453               	retlw	83	;'S'
  1432     1819  3441               	retlw	65	;'A'
  1433     181A  3452               	retlw	82	;'R'
  1434     181B  3420               	retlw	32	;' '
  1435     181C  3443               	retlw	67	;'C'
  1436     181D  344C               	retlw	76	;'L'
  1437     181E  3441               	retlw	65	;'A'
  1438     181F  3456               	retlw	86	;'V'
  1439     1820  3445               	retlw	69	;'E'
  1440     1821  3400               	retlw	0
  1441                           
  1442                           	psect	stringtext3
  1443     1822                     __pstringtext3:
  1444     1822                     STR_8:
  1445     1822  3432               	retlw	50	;'2'
  1446     1823  343A               	retlw	58	;':'
  1447     1824  3443               	retlw	67	;'C'
  1448     1825  3441               	retlw	65	;'A'
  1449     1826  344D               	retlw	77	;'M'
  1450     1827  3442               	retlw	66	;'B'
  1451     1828  3449               	retlw	73	;'I'
  1452     1829  3441               	retlw	65	;'A'
  1453     182A  3452               	retlw	82	;'R'
  1454     182B  3420               	retlw	32	;' '
  1455     182C  3443               	retlw	67	;'C'
  1456     182D  344C               	retlw	76	;'L'
  1457     182E  3441               	retlw	65	;'A'
  1458     182F  3456               	retlw	86	;'V'
  1459     1830  3445               	retlw	69	;'E'
  1460     1831  3400               	retlw	0
  1461                           
  1462                           	psect	stringtext4
  1463     1832                     __pstringtext4:
  1464     1832                     STR_1:
  1465     1832  3443               	retlw	67	;'C'
  1466     1833  346F               	retlw	111	;'o'
  1467     1834  346E               	retlw	110	;'n'
  1468     1835  3474               	retlw	116	;'t'
  1469     1836  3472               	retlw	114	;'r'
  1470     1837  346F               	retlw	111	;'o'
  1471     1838  346C               	retlw	108	;'l'
  1472     1839  3454               	retlw	84	;'T'
  1473     183A  3465               	retlw	101	;'e'
  1474     183B  3463               	retlw	99	;'c'
  1475     183C  3468               	retlw	104	;'h'
  1476     183D  3420               	retlw	32	;' '
  1477     183E  3443               	retlw	67	;'C'
  1478     183F  3441               	retlw	65	;'A'
  1479     1840  3400               	retlw	0
  1480                           
  1481                           	psect	stringtext5
  1482     1841                     __pstringtext5:
  1483     1841                     STR_16:
  1484     1841  3443               	retlw	67	;'C'
  1485     1842  344C               	retlw	76	;'L'
  1486     1843  3441               	retlw	65	;'A'
  1487     1844  3456               	retlw	86	;'V'
  1488     1845  3445               	retlw	69	;'E'
  1489     1846  3420               	retlw	32	;' '
  1490     1847  3443               	retlw	67	;'C'
  1491     1848  3441               	retlw	65	;'A'
  1492     1849  344D               	retlw	77	;'M'
  1493     184A  3442               	retlw	66	;'B'
  1494     184B  3449               	retlw	73	;'I'
  1495     184C  3441               	retlw	65	;'A'
  1496     184D  3444               	retlw	68	;'D'
  1497     184E  3441               	retlw	65	;'A'
  1498     184F  3400               	retlw	0
  1499                           
  1500                           	psect	stringtext6
  1501     1850                     __pstringtext6:
  1502     1850                     STR_2:
  1503     1850  3425               	retlw	37	;'%'
  1504     1851  3464               	retlw	100	;'d'
  1505     1852  3425               	retlw	37	;'%'
  1506     1853  3464               	retlw	100	;'d'
  1507     1854  343A               	retlw	58	;':'
  1508     1855  3425               	retlw	37	;'%'
  1509     1856  3464               	retlw	100	;'d'
  1510     1857  3425               	retlw	37	;'%'
  1511     1858  3464               	retlw	100	;'d'
  1512     1859  343A               	retlw	58	;':'
  1513     185A  3425               	retlw	37	;'%'
  1514     185B  3464               	retlw	100	;'d'
  1515     185C  3425               	retlw	37	;'%'
  1516     185D  3464               	retlw	100	;'d'
  1517     185E  3400               	retlw	0
  1518                           
  1519                           	psect	stringtext7
  1520     185F                     __pstringtext7:
  1521     185F                     STR_11:
  1522     185F  3441               	retlw	65	;'A'
  1523     1860  3450               	retlw	80	;'P'
  1524     1861  3452               	retlw	82	;'R'
  1525     1862  344F               	retlw	79	;'O'
  1526     1863  3442               	retlw	66	;'B'
  1527     1864  3441               	retlw	65	;'A'
  1528     1865  3444               	retlw	68	;'D'
  1529     1866  344F               	retlw	79	;'O'
  1530     1867  3400               	retlw	0
  1531                           
  1532                           	psect	stringtext8
  1533     1868                     __pstringtext8:
  1534     1868                     STR_13:
  1535     1868  3444               	retlw	68	;'D'
  1536     1869  3445               	retlw	69	;'E'
  1537     186A  344E               	retlw	78	;'N'
  1538     186B  3445               	retlw	69	;'E'
  1539     186C  3447               	retlw	71	;'G'
  1540     186D  3441               	retlw	65	;'A'
  1541     186E  3444               	retlw	68	;'D'
  1542     186F  344F               	retlw	79	;'O'
  1543     1870  3400               	retlw	0
  1544                           
  1545                           	psect	stringtext9
  1546     1871                     __pstringtext9:
  1547     1871                     STR_3:
  1548     1871  3425               	retlw	37	;'%'
  1549     1872  3430               	retlw	48	;'0'
  1550     1873  342E               	retlw	46	;'.'
  1551     1874  3432               	retlw	50	;'2'
  1552     1875  3466               	retlw	102	;'f'
  1553     1876  34DF               	retlw	-33
  1554     1877  3400               	retlw	0
  1555                           
  1556                           	psect	stringtext10
  1557     1878                     __pstringtext10:
  1558     1878                     STR_10:
  1559     1878  3441               	retlw	65	;'A'
  1560     1879  3443               	retlw	67	;'C'
  1561     187A  3443               	retlw	67	;'C'
  1562     187B  3445               	retlw	69	;'E'
  1563     187C  3453               	retlw	83	;'S'
  1564     187D  344F               	retlw	79	;'O'
  1565     187E  3400               	retlw	0
  1566                           
  1567                           	psect	stringtext11
  1568     187F                     __pstringtext11:
  1569     187F                     STR_18:
  1570     187F  3469               	retlw	105	;'i'
  1571     1880  346E               	retlw	110	;'n'
  1572     1881  3466               	retlw	102	;'f'
  1573     1882  3400               	retlw	0
  1574                           
  1575                           	psect	stringtext12
  1576     1883                     __pstringtext12:
  1577     1883                     STR_21:
  1578     1883  346E               	retlw	110	;'n'
  1579     1884  3461               	retlw	97	;'a'
  1580     1885  346E               	retlw	110	;'n'
  1581     1886  3400               	retlw	0
  1582                           
  1583                           	psect	stringtext13
  1584     1887                     __pstringtext13:
  1585     1887                     STR_4:
  1586     1887  3443               	retlw	67	;'C'
  1587     1888  3400               	retlw	0
  1588                           
  1589                           	psect	stringtext14
  1590     0000                     __pstringtext14:
  1591     1871                     
  1592                           	psect	cinit
  1593     021F                     start_initialization:	
  1594                           ; #config settings
  1595                           
  1596     021F                     __initialization:
  1597                           
  1598                           ; Initialize objects allocated to BANK2
  1599     021F  30FD               	movlw	low __pidataBANK2
  1600     0220  0084               	movwf	4
  1601     0221  309B               	movlw	(high __pidataBANK2)| (0+128)
  1602     0222  0085               	movwf	5
  1603     0223  0022               	movlb	2	; select bank2
  1604     0224  0012               	moviw fsr0++
  1605     0225  00DE               	movwf	__pdataBANK2& (0+127)
  1606     0226  0012               	moviw fsr0++
  1607     0227  00DF               	movwf	(__pdataBANK2+1)& (0+127)
  1608     0228  0012               	moviw fsr0++
  1609     0229  00E0               	movwf	(__pdataBANK2+2)& (0+127)
  1610     022A  0012               	moviw fsr0++
  1611     022B  00E1               	movwf	(__pdataBANK2+3)& (0+127)
  1612     022C  0012               	moviw fsr0++
  1613     022D  00E2               	movwf	(__pdataBANK2+4)& (0+127)
  1614                           
  1615                           ; Clear objects allocated to COMMON
  1616     022E  01FC               	clrf	__pbssCOMMON& (0+127)
  1617     022F  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  1618                           
  1619                           ; Clear objects allocated to BANK1
  1620     0230  0021               	movlb	1	; select bank1
  1621     0231  01EF               	clrf	__pbssBANK1& (0+127)
  1622                           
  1623                           ; Clear objects allocated to BANK2
  1624     0232  3020               	movlw	low __pbssBANK2
  1625     0233  0084               	movwf	4
  1626     0234  3001               	movlw	high __pbssBANK2
  1627     0235  0085               	movwf	5
  1628     0236  301F               	movlw	31
  1629     0237  319C  2402  3182   	fcall	clear_ram0
  1630                           
  1631                           ; Clear objects allocated to BANK3
  1632     023A  30A0               	movlw	low __pbssBANK3
  1633     023B  0084               	movwf	4
  1634     023C  3001               	movlw	high __pbssBANK3
  1635     023D  0085               	movwf	5
  1636     023E  3014               	movlw	20
  1637     023F  319C  2402  3182   	fcall	clear_ram0
  1638                           
  1639                           ; Clear objects allocated to BANK4
  1640     0242  3020               	movlw	low __pbssBANK4
  1641     0243  0084               	movwf	4
  1642     0244  3002               	movlw	high __pbssBANK4
  1643     0245  0085               	movwf	5
  1644     0246  3050               	movlw	80
  1645     0247  319C  2402         	fcall	clear_ram0
  1646     0249                     end_of_initialization:	
  1647                           ;End of C runtime variable initialization code
  1648                           
  1649     0249                     __end_of__initialization:
  1650     0249  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1651     024A  0020               	movlb	0
  1652     024B  3182  2A4D         	ljmp	_main	;jump to C main() function
  1653                           
  1654                           	psect	bssCOMMON
  1655     007C                     __pbssCOMMON:
  1656     007C                     _flags:
  1657     007C                     	ds	1
  1658     007D                     _tecla:
  1659     007D                     	ds	1
  1660                           
  1661                           	psect	bssBANK1
  1662     00EF                     __pbssBANK1:
  1663     00EF                     _seg:
  1664     00EF                     	ds	1
  1665                           
  1666                           	psect	bssBANK2
  1667     0120                     __pbssBANK2:
  1668     0120                     floorf@F521:
  1669     0120                     	ds	4
  1670     0124                     ___fpclassifyf@F465:
  1671     0124                     	ds	4
  1672     0128                     _temp:
  1673     0128                     	ds	4
  1674     012C                     _width:
  1675     012C                     	ds	2
  1676     012E                     _prec:
  1677     012E                     	ds	2
  1678     0130                     _estado:
  1679     0130                     	ds	2
  1680     0132                     _cont_key:
  1681     0132                     	ds	2
  1682     0134                     _ADC_InterruptHandler:
  1683     0134                     	ds	2
  1684     0136                     _hor:
  1685     0136                     	ds	1
  1686     0137                     _min:
  1687     0137                     	ds	1
  1688     0138                     _clave:
  1689     0138                     	ds	5
  1690     013D                     _convertedValue:
  1691     013D                     	ds	2
  1692                           
  1693                           	psect	dataBANK2
  1694     015E                     __pdataBANK2:
  1695     015E                     _clave_enter:
  1696     015E                     	ds	5
  1697                           
  1698                           	psect	bssBANK3
  1699     01A0                     __pbssBANK3:
  1700     01A0                     _buffer:
  1701     01A0                     	ds	20
  1702                           
  1703                           	psect	bssBANK4
  1704     0220                     __pbssBANK4:
  1705     0220                     _dbuf:
  1706     0220                     	ds	80
  1707                           
  1708                           	psect	clrtext
  1709     1C02                     clear_ram0:	
  1710                           ;	Called with FSR0 containing the base address, and
  1711                           ;	WREG with the size to clear
  1712                           
  1713     1C02  0064               	clrwdt	;clear the watchdog before getting into this loop
  1714     1C03                     clrloop0:
  1715     1C03  0180               	clrf	0	;clear RAM location pointed to by FSR
  1716     1C04  3101               	addfsr 0,1
  1717     1C05  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1718     1C06  2C03               	goto	clrloop0	;have we reached the end yet?
  1719     1C07  3400               	retlw	0	;all done for this memory range, return
  1720                           
  1721                           	psect	cstackBANK2
  1722     013F                     __pcstackBANK2:
  1723     013F                     sprintf@s:
  1724                           
  1725                           ; 1 bytes @ 0x0
  1726     013F                     	ds	1
  1727     0140                     sprintf@ap:
  1728                           
  1729                           ; 1 bytes @ 0x1
  1730     0140                     	ds	1
  1731     0141                     sprintf@f:
  1732                           
  1733                           ; 11 bytes @ 0x2
  1734     0141                     	ds	11
  1735     014C                     ??_main:
  1736                           
  1737                           ; 1 bytes @ 0xD
  1738     014C                     	ds	18
  1739                           
  1740                           	psect	cstackBANK1
  1741     00A0                     __pcstackBANK1:
  1742     00A0                     efgtoa@ne:
  1743                           
  1744                           ; 2 bytes @ 0x0
  1745     00A0                     	ds	2
  1746     00A2                     efgtoa@p:
  1747                           
  1748                           ; 2 bytes @ 0x2
  1749     00A2                     	ds	2
  1750     00A4                     efgtoa@t:
  1751                           
  1752                           ; 2 bytes @ 0x4
  1753     00A4                     	ds	2
  1754     00A6                     _efgtoa$1370:
  1755                           
  1756                           ; 2 bytes @ 0x6
  1757     00A6                     	ds	2
  1758     00A8                     efgtoa@pp:
  1759                           
  1760                           ; 1 bytes @ 0x8
  1761     00A8                     	ds	1
  1762     00A9                     efgtoa@mode:
  1763                           
  1764                           ; 1 bytes @ 0x9
  1765     00A9                     	ds	1
  1766     00AA                     efgtoa@nmode:
  1767                           
  1768                           ; 1 bytes @ 0xA
  1769     00AA                     	ds	1
  1770     00AB                     efgtoa@d:
  1771                           
  1772                           ; 2 bytes @ 0xB
  1773     00AB                     	ds	2
  1774     00AD                     efgtoa@m:
  1775                           
  1776                           ; 2 bytes @ 0xD
  1777     00AD                     	ds	2
  1778     00AF                     efgtoa@fp:
  1779                           
  1780                           ; 1 bytes @ 0xF
  1781     00AF                     	ds	1
  1782     00B0                     efgtoa@e:
  1783                           
  1784                           ; 2 bytes @ 0x10
  1785     00B0                     	ds	2
  1786     00B2                     efgtoa@w:
  1787                           
  1788                           ; 2 bytes @ 0x12
  1789     00B2                     	ds	2
  1790     00B4                     efgtoa@ou:
  1791                           
  1792                           ; 4 bytes @ 0x14
  1793     00B4                     	ds	4
  1794     00B8                     efgtoa@h:
  1795                           
  1796                           ; 4 bytes @ 0x18
  1797     00B8                     	ds	4
  1798     00BC                     efgtoa@l:
  1799                           
  1800                           ; 4 bytes @ 0x1C
  1801     00BC                     	ds	4
  1802     00C0                     efgtoa@i:
  1803                           
  1804                           ; 2 bytes @ 0x20
  1805     00C0                     	ds	2
  1806     00C2                     efgtoa@sign:
  1807                           
  1808                           ; 1 bytes @ 0x22
  1809     00C2                     	ds	1
  1810     00C3                     efgtoa@g:
  1811                           
  1812                           ; 4 bytes @ 0x23
  1813     00C3                     	ds	4
  1814     00C7                     efgtoa@n:
  1815                           
  1816                           ; 2 bytes @ 0x27
  1817     00C7                     	ds	2
  1818     00C9                     efgtoa@u:
  1819                           
  1820                           ; 4 bytes @ 0x29
  1821     00C9                     	ds	4
  1822     00CD                     ??_vfpfcnvrt:
  1823                           
  1824                           ; 1 bytes @ 0x2D
  1825     00CD                     	ds	4
  1826     00D1                     vfpfcnvrt@done:
  1827                           
  1828                           ; 1 bytes @ 0x31
  1829     00D1                     	ds	1
  1830     00D2                     vfpfcnvrt@convarg:
  1831                           
  1832                           ; 4 bytes @ 0x32
  1833     00D2                     	ds	4
  1834     00D6                     vfpfcnvrt@c:
  1835                           
  1836                           ; 1 bytes @ 0x36
  1837     00D6                     	ds	1
  1838     00D7                     vfpfcnvrt@fp:
  1839                           
  1840                           ; 1 bytes @ 0x37
  1841     00D7                     	ds	1
  1842     00D8                     vfpfcnvrt@cp:
  1843                           
  1844                           ; 2 bytes @ 0x38
  1845     00D8                     	ds	2
  1846     00DA                     ??_vfprintf:
  1847                           
  1848                           ; 1 bytes @ 0x3A
  1849     00DA                     	ds	1
  1850     00DB                     vfprintf@fp:
  1851                           
  1852                           ; 1 bytes @ 0x3B
  1853     00DB                     	ds	1
  1854     00DC                     vfprintf@cfmt:
  1855                           
  1856                           ; 2 bytes @ 0x3C
  1857     00DC                     	ds	2
  1858     00DE                     ?_sprintf:
  1859     00DE                     sprintf@fmt:	
  1860                           ; 2 bytes @ 0x3E
  1861                           
  1862                           
  1863                           ; 2 bytes @ 0x3E
  1864     00DE                     	ds	14
  1865     00EC                     ??_sprintf:
  1866                           
  1867                           ; 1 bytes @ 0x4C
  1868     00EC                     	ds	1
  1869     00ED                     main@contadorTemp:
  1870                           
  1871                           ; 2 bytes @ 0x4D
  1872     00ED                     	ds	2
  1873                           
  1874                           	psect	cstackCOMMON
  1875     0070                     __pcstackCOMMON:
  1876     0070                     ?_Lcd_Init:
  1877     0070                     ?_Lcd_Clear:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880     0070                     ?_Keypad_Init:	
  1881                           ; 1 bytes @ 0x0
  1882                           
  1883     0070                     ??_Keypad_Init:	
  1884                           ; 1 bytes @ 0x0
  1885                           
  1886     0070                     ?_Keypad_Get_Char:	
  1887                           ; 1 bytes @ 0x0
  1888                           
  1889     0070                     ??_Keypad_Get_Char:	
  1890                           ; 1 bytes @ 0x0
  1891                           
  1892     0070                     ?_Lcd_Write_Char:	
  1893                           ; 1 bytes @ 0x0
  1894                           
  1895     0070                     ?_putch:	
  1896                           ; 1 bytes @ 0x0
  1897                           
  1898     0070                     ?_ADC_Initialize:	
  1899                           ; 1 bytes @ 0x0
  1900                           
  1901     0070                     ?_ADC_StartConversion:	
  1902                           ; 1 bytes @ 0x0
  1903                           
  1904     0070                     ?_ADC_IsConversionDone:	
  1905                           ; 1 bytes @ 0x0
  1906                           
  1907     0070                     ?_main:	
  1908                           ; 1 bytes @ 0x0
  1909                           
  1910     0070                     ?_IOC:	
  1911                           ; 1 bytes @ 0x0
  1912                           
  1913     0070                     ?_Lcd_Port:	
  1914                           ; 1 bytes @ 0x0
  1915                           
  1916     0070                     ?_Lcd_Cmd:	
  1917                           ; 1 bytes @ 0x0
  1918                           
  1919     0070                     ?i1_Lcd_Port:	
  1920                           ; 1 bytes @ 0x0
  1921                           
  1922     0070                     ??i1_Lcd_Port:	
  1923                           ; 1 bytes @ 0x0
  1924                           
  1925     0070                     ?i1_Lcd_Cmd:	
  1926                           ; 1 bytes @ 0x0
  1927                           
  1928     0070                     ?i1_Lcd_Clear:	
  1929                           ; 1 bytes @ 0x0
  1930                           
  1931     0070                     ?i1_Lcd_Write_Char:	
  1932                           ; 1 bytes @ 0x0
  1933                           
  1934     0070                     ?_strcmp:	
  1935                           ; 1 bytes @ 0x0
  1936                           
  1937     0070                     putch@c:	
  1938                           ; 2 bytes @ 0x0
  1939                           
  1940     0070                     strcmp@r:	
  1941                           ; 1 bytes @ 0x0
  1942                           
  1943     0070                     i1Lcd_Port@a:	
  1944                           ; 1 bytes @ 0x0
  1945                           
  1946                           
  1947                           ; 1 bytes @ 0x0
  1948     0070                     	ds	1
  1949     0071                     ??i1_Lcd_Cmd:
  1950     0071                     ??i1_Lcd_Write_Char:	
  1951                           ; 1 bytes @ 0x1
  1952                           
  1953                           
  1954                           ; 1 bytes @ 0x1
  1955     0071                     	ds	1
  1956     0072                     ??_strcmp:
  1957     0072                     i1Lcd_Cmd@a:	
  1958                           ; 1 bytes @ 0x2
  1959                           
  1960     0072                     i1Lcd_Write_Char@temp:	
  1961                           ; 1 bytes @ 0x2
  1962                           
  1963                           
  1964                           ; 1 bytes @ 0x2
  1965     0072                     	ds	1
  1966     0073                     ??i1_Lcd_Clear:
  1967     0073                     ?i1_Lcd_Set_Cursor:	
  1968                           ; 1 bytes @ 0x3
  1969                           
  1970     0073                     strcmp@l:	
  1971                           ; 1 bytes @ 0x3
  1972                           
  1973     0073                     i1Lcd_Set_Cursor@b:	
  1974                           ; 1 bytes @ 0x3
  1975                           
  1976     0073                     i1Lcd_Write_Char@y:	
  1977                           ; 1 bytes @ 0x3
  1978                           
  1979                           
  1980                           ; 1 bytes @ 0x3
  1981     0073                     	ds	1
  1982     0074                     ??i1_Lcd_Set_Cursor:
  1983     0074                     i1Lcd_Write_Char@a:	
  1984                           ; 1 bytes @ 0x4
  1985                           
  1986                           
  1987                           ; 1 bytes @ 0x4
  1988     0074                     	ds	1
  1989     0075                     ?i1_Lcd_Write_String:
  1990     0075                     i1Lcd_Set_Cursor@a:	
  1991                           ; 1 bytes @ 0x5
  1992                           
  1993     0075                     i1Lcd_Write_String@a:	
  1994                           ; 1 bytes @ 0x5
  1995                           
  1996                           
  1997                           ; 2 bytes @ 0x5
  1998     0075                     	ds	1
  1999     0076                     i1Lcd_Set_Cursor@z:
  2000                           
  2001                           ; 1 bytes @ 0x6
  2002     0076                     	ds	1
  2003     0077                     ??i1_Lcd_Write_String:
  2004     0077                     i1Lcd_Set_Cursor@y:	
  2005                           ; 1 bytes @ 0x7
  2006                           
  2007                           
  2008                           ; 1 bytes @ 0x7
  2009     0077                     	ds	1
  2010     0078                     i1Lcd_Set_Cursor@temp:
  2011     0078                     i1Lcd_Write_String@i:	
  2012                           ; 1 bytes @ 0x8
  2013                           
  2014                           
  2015                           ; 2 bytes @ 0x8
  2016     0078                     	ds	2
  2017     007A                     ??_IOC:
  2018                           
  2019                           ; 1 bytes @ 0xA
  2020     007A                     	ds	2
  2021                           
  2022                           	psect	cstackBANK0
  2023     0020                     __pcstackBANK0:
  2024     0020                     ?___fleq:
  2025     0020                     ?_strcpy:	
  2026                           ; 1 bit 
  2027                           
  2028     0020                     ?_memcpy:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031     0020                     ??_putch:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034     0020                     ??_ADC_Initialize:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037     0020                     ??_ADC_StartConversion:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040     0020                     ??_ADC_IsConversionDone:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043     0020                     ??_Lcd_Port:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046     0020                     ?__Umul8_16:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049     0020                     ?_fputc:	
  2050                           ; 2 bytes @ 0x0
  2051                           
  2052     0020                     ?___fpclassifyf:	
  2053                           ; 2 bytes @ 0x0
  2054                           
  2055     0020                     ?_ADC_GetConversionResult:	
  2056                           ; 2 bytes @ 0x0
  2057                           
  2058     0020                     ?___wmul:	
  2059                           ; 2 bytes @ 0x0
  2060                           
  2061     0020                     ?___awdiv:	
  2062                           ; 2 bytes @ 0x0
  2063                           
  2064     0020                     ?___awmod:	
  2065                           ; 2 bytes @ 0x0
  2066                           
  2067     0020                     ?_labs:	
  2068                           ; 2 bytes @ 0x0
  2069                           
  2070     0020                     ?___flneg:	
  2071                           ; 4 bytes @ 0x0
  2072                           
  2073     0020                     ?___fltol:	
  2074                           ; 4 bytes @ 0x0
  2075                           
  2076     0020                     ?___fladd:	
  2077                           ; 4 bytes @ 0x0
  2078                           
  2079     0020                     Lcd_Port@a:	
  2080                           ; 4 bytes @ 0x0
  2081                           
  2082     0020                     __Umul8_16@multiplicand:	
  2083                           ; 1 bytes @ 0x0
  2084                           
  2085     0020                     memcpy@s1:	
  2086                           ; 1 bytes @ 0x0
  2087                           
  2088     0020                     ___wmul@multiplier:	
  2089                           ; 1 bytes @ 0x0
  2090                           
  2091     0020                     ___awdiv@divisor:	
  2092                           ; 2 bytes @ 0x0
  2093                           
  2094     0020                     ___awmod@divisor:	
  2095                           ; 2 bytes @ 0x0
  2096                           
  2097     0020                     fputc@c:	
  2098                           ; 2 bytes @ 0x0
  2099                           
  2100     0020                     strcpy@src:	
  2101                           ; 2 bytes @ 0x0
  2102                           
  2103     0020                     ___fleq@ff1:	
  2104                           ; 2 bytes @ 0x0
  2105                           
  2106     0020                     ___flneg@f1:	
  2107                           ; 4 bytes @ 0x0
  2108                           
  2109     0020                     ___fltol@f1:	
  2110                           ; 4 bytes @ 0x0
  2111                           
  2112     0020                     ___fladd@b:	
  2113                           ; 4 bytes @ 0x0
  2114                           
  2115     0020                     ___fpclassifyf@x:	
  2116                           ; 4 bytes @ 0x0
  2117                           
  2118     0020                     labs@a:	
  2119                           ; 4 bytes @ 0x0
  2120                           
  2121                           
  2122                           ; 4 bytes @ 0x0
  2123     0020                     	ds	1
  2124     0021                     ??_Lcd_Write_Char:
  2125     0021                     ??_Lcd_Cmd:	
  2126                           ; 1 bytes @ 0x1
  2127                           
  2128     0021                     memcpy@n:	
  2129                           ; 1 bytes @ 0x1
  2130                           
  2131                           
  2132                           ; 2 bytes @ 0x1
  2133     0021                     	ds	1
  2134     0022                     ??__Umul8_16:
  2135     0022                     ??_strcpy:	
  2136                           ; 1 bytes @ 0x2
  2137                           
  2138     0022                     ??_ADC_GetConversionResult:	
  2139                           ; 1 bytes @ 0x2
  2140                           
  2141     0022                     Lcd_Cmd@a:	
  2142                           ; 1 bytes @ 0x2
  2143                           
  2144     0022                     Lcd_Write_Char@temp:	
  2145                           ; 1 bytes @ 0x2
  2146                           
  2147     0022                     fputc@fp:	
  2148                           ; 1 bytes @ 0x2
  2149                           
  2150     0022                     ___wmul@multiplicand:	
  2151                           ; 1 bytes @ 0x2
  2152                           
  2153     0022                     ___awdiv@dividend:	
  2154                           ; 2 bytes @ 0x2
  2155                           
  2156     0022                     ___awmod@dividend:	
  2157                           ; 2 bytes @ 0x2
  2158                           
  2159                           
  2160                           ; 2 bytes @ 0x2
  2161     0022                     	ds	1
  2162     0023                     ??_Lcd_Init:
  2163     0023                     ??_Lcd_Clear:	
  2164                           ; 1 bytes @ 0x3
  2165                           
  2166     0023                     ?_Lcd_Set_Cursor:	
  2167                           ; 1 bytes @ 0x3
  2168                           
  2169     0023                     ??_fputc:	
  2170                           ; 1 bytes @ 0x3
  2171                           
  2172     0023                     ??_memcpy:	
  2173                           ; 1 bytes @ 0x3
  2174                           
  2175     0023                     Lcd_Set_Cursor@b:	
  2176                           ; 1 bytes @ 0x3
  2177                           
  2178     0023                     Lcd_Write_Char@y:	
  2179                           ; 1 bytes @ 0x3
  2180                           
  2181                           
  2182                           ; 1 bytes @ 0x3
  2183     0023                     	ds	1
  2184     0024                     ??_Lcd_Set_Cursor:
  2185     0024                     ??___fpclassifyf:	
  2186                           ; 1 bytes @ 0x4
  2187                           
  2188     0024                     ??_labs:	
  2189                           ; 1 bytes @ 0x4
  2190                           
  2191     0024                     ??___wmul:	
  2192                           ; 1 bytes @ 0x4
  2193                           
  2194     0024                     ??___awdiv:	
  2195                           ; 1 bytes @ 0x4
  2196                           
  2197     0024                     ??___awmod:	
  2198                           ; 1 bytes @ 0x4
  2199                           
  2200     0024                     ??___flneg:	
  2201                           ; 1 bytes @ 0x4
  2202                           
  2203     0024                     ??___fltol:	
  2204                           ; 1 bytes @ 0x4
  2205                           
  2206     0024                     Lcd_Write_Char@a:	
  2207                           ; 1 bytes @ 0x4
  2208                           
  2209     0024                     memcpy@tmp:	
  2210                           ; 1 bytes @ 0x4
  2211                           
  2212     0024                     strcpy@d:	
  2213                           ; 1 bytes @ 0x4
  2214                           
  2215     0024                     ___wmul@product:	
  2216                           ; 1 bytes @ 0x4
  2217                           
  2218     0024                     __Umul8_16@product:	
  2219                           ; 2 bytes @ 0x4
  2220                           
  2221     0024                     ___fleq@ff2:	
  2222                           ; 2 bytes @ 0x4
  2223                           
  2224     0024                     ___fladd@a:	
  2225                           ; 4 bytes @ 0x4
  2226                           
  2227                           
  2228                           ; 4 bytes @ 0x4
  2229     0024                     	ds	1
  2230     0025                     ?_Lcd_Write_String:
  2231     0025                     Lcd_Set_Cursor@a:	
  2232                           ; 1 bytes @ 0x5
  2233                           
  2234     0025                     ___awdiv@counter:	
  2235                           ; 1 bytes @ 0x5
  2236                           
  2237     0025                     ___awmod@counter:	
  2238                           ; 1 bytes @ 0x5
  2239                           
  2240     0025                     memcpy@d1:	
  2241                           ; 1 bytes @ 0x5
  2242                           
  2243     0025                     strcpy@dest:	
  2244                           ; 1 bytes @ 0x5
  2245                           
  2246     0025                     Lcd_Write_String@a:	
  2247                           ; 1 bytes @ 0x5
  2248                           
  2249                           
  2250                           ; 2 bytes @ 0x5
  2251     0025                     	ds	1
  2252     0026                     ?_read_prec_or_width:
  2253     0026                     ?___xxtofl:	
  2254                           ; 2 bytes @ 0x6
  2255                           
  2256     0026                     Lcd_Set_Cursor@z:	
  2257                           ; 4 bytes @ 0x6
  2258                           
  2259     0026                     ___awdiv@sign:	
  2260                           ; 1 bytes @ 0x6
  2261                           
  2262     0026                     ___awmod@sign:	
  2263                           ; 1 bytes @ 0x6
  2264                           
  2265     0026                     read_prec_or_width@ap:	
  2266                           ; 1 bytes @ 0x6
  2267                           
  2268     0026                     memcpy@d:	
  2269                           ; 1 bytes @ 0x6
  2270                           
  2271     0026                     __Umul8_16@word_mpld:	
  2272                           ; 1 bytes @ 0x6
  2273                           
  2274     0026                     ___xxtofl@val:	
  2275                           ; 2 bytes @ 0x6
  2276                           
  2277                           
  2278                           ; 4 bytes @ 0x6
  2279     0026                     	ds	1
  2280     0027                     ??_Lcd_Write_String:
  2281     0027                     ?_abs:	
  2282                           ; 1 bytes @ 0x7
  2283                           
  2284     0027                     Lcd_Set_Cursor@y:	
  2285                           ; 2 bytes @ 0x7
  2286                           
  2287     0027                     memcpy@s:	
  2288                           ; 1 bytes @ 0x7
  2289                           
  2290     0027                     ___awdiv@quotient:	
  2291                           ; 1 bytes @ 0x7
  2292                           
  2293     0027                     abs@a:	
  2294                           ; 2 bytes @ 0x7
  2295                           
  2296                           
  2297                           ; 2 bytes @ 0x7
  2298     0027                     	ds	1
  2299     0028                     ??___fleq:
  2300     0028                     ??___fladd:	
  2301                           ; 1 bytes @ 0x8
  2302                           
  2303     0028                     ??_read_prec_or_width:	
  2304                           ; 1 bytes @ 0x8
  2305                           
  2306     0028                     ?_fputs:	
  2307                           ; 1 bytes @ 0x8
  2308                           
  2309     0028                     Lcd_Set_Cursor@temp:	
  2310                           ; 2 bytes @ 0x8
  2311                           
  2312     0028                     ___fltol@sign1:	
  2313                           ; 1 bytes @ 0x8
  2314                           
  2315     0028                     __Umul8_16@multiplier:	
  2316                           ; 1 bytes @ 0x8
  2317                           
  2318     0028                     fputs@fp:	
  2319                           ; 1 bytes @ 0x8
  2320                           
  2321     0028                     Lcd_Write_String@i:	
  2322                           ; 1 bytes @ 0x8
  2323                           
  2324                           
  2325                           ; 2 bytes @ 0x8
  2326     0028                     	ds	1
  2327     0029                     ??_fputs:
  2328     0029                     ??_abs:	
  2329                           ; 1 bytes @ 0x9
  2330                           
  2331     0029                     ?___flmul:	
  2332                           ; 1 bytes @ 0x9
  2333                           
  2334     0029                     ___fltol@exp1:	
  2335                           ; 4 bytes @ 0x9
  2336                           
  2337     0029                     ___flmul@b:	
  2338                           ; 1 bytes @ 0x9
  2339                           
  2340                           
  2341                           ; 4 bytes @ 0x9
  2342     0029                     	ds	1
  2343     002A                     ??___xxtofl:
  2344     002A                     ___fpclassifyf@e:	
  2345                           ; 1 bytes @ 0xA
  2346                           
  2347                           
  2348                           ; 2 bytes @ 0xA
  2349     002A                     	ds	1
  2350     002B                     read_prec_or_width@c:
  2351     002B                     fputs@c:	
  2352                           ; 1 bytes @ 0xB
  2353                           
  2354                           
  2355                           ; 1 bytes @ 0xB
  2356     002B                     	ds	1
  2357     002C                     read_prec_or_width@n:
  2358     002C                     fputs@i:	
  2359                           ; 2 bytes @ 0xC
  2360                           
  2361     002C                     ___fpclassifyf@u:	
  2362                           ; 2 bytes @ 0xC
  2363                           
  2364                           
  2365                           ; 4 bytes @ 0xC
  2366     002C                     	ds	1
  2367     002D                     ___flmul@a:
  2368                           
  2369                           ; 4 bytes @ 0xD
  2370     002D                     	ds	1
  2371     002E                     ___xxtofl@sign:
  2372     002E                     read_prec_or_width@fmt:	
  2373                           ; 1 bytes @ 0xE
  2374                           
  2375     002E                     fputs@s:	
  2376                           ; 1 bytes @ 0xE
  2377                           
  2378                           
  2379                           ; 1 bytes @ 0xE
  2380     002E                     	ds	1
  2381     002F                     ?_pad:
  2382     002F                     ___xxtofl@exp:	
  2383                           ; 1 bytes @ 0xF
  2384                           
  2385     002F                     pad@buf:	
  2386                           ; 1 bytes @ 0xF
  2387                           
  2388                           
  2389                           ; 1 bytes @ 0xF
  2390     002F                     	ds	1
  2391     0030                     ___fladd@signs:
  2392     0030                     pad@p:	
  2393                           ; 1 bytes @ 0x10
  2394                           
  2395     0030                     ___xxtofl@arg:	
  2396                           ; 2 bytes @ 0x10
  2397                           
  2398                           
  2399                           ; 4 bytes @ 0x10
  2400     0030                     	ds	1
  2401     0031                     ??___flmul:
  2402     0031                     ___fladd@aexp:	
  2403                           ; 1 bytes @ 0x11
  2404                           
  2405                           
  2406                           ; 1 bytes @ 0x11
  2407     0031                     	ds	1
  2408     0032                     ??_pad:
  2409     0032                     ___fladd@bexp:	
  2410                           ; 1 bytes @ 0x12
  2411                           
  2412                           
  2413                           ; 1 bytes @ 0x12
  2414     0032                     	ds	1
  2415     0033                     ___fladd@grs:
  2416     0033                     pad@i:	
  2417                           ; 1 bytes @ 0x13
  2418                           
  2419                           
  2420                           ; 2 bytes @ 0x13
  2421     0033                     	ds	1
  2422     0034                     ?___fldiv:
  2423     0034                     ___fldiv@a:	
  2424                           ; 4 bytes @ 0x14
  2425                           
  2426                           
  2427                           ; 4 bytes @ 0x14
  2428     0034                     	ds	1
  2429     0035                     pad@fp:
  2430                           
  2431                           ; 1 bytes @ 0x15
  2432     0035                     	ds	1
  2433     0036                     ?_dtoa:
  2434     0036                     ___flmul@sign:	
  2435                           ; 1 bytes @ 0x16
  2436                           
  2437     0036                     dtoa@d:	
  2438                           ; 1 bytes @ 0x16
  2439                           
  2440                           
  2441                           ; 2 bytes @ 0x16
  2442     0036                     	ds	1
  2443     0037                     ___flmul@grs:
  2444                           
  2445                           ; 4 bytes @ 0x17
  2446     0037                     	ds	1
  2447     0038                     ??_dtoa:
  2448     0038                     ___fldiv@b:	
  2449                           ; 1 bytes @ 0x18
  2450                           
  2451                           
  2452                           ; 4 bytes @ 0x18
  2453     0038                     	ds	1
  2454     0039                     _dtoa$1339:
  2455                           
  2456                           ; 2 bytes @ 0x19
  2457     0039                     	ds	2
  2458     003B                     ___flmul@aexp:
  2459     003B                     dtoa@fp:	
  2460                           ; 1 bytes @ 0x1B
  2461                           
  2462                           
  2463                           ; 1 bytes @ 0x1B
  2464     003B                     	ds	1
  2465     003C                     ??___fldiv:
  2466     003C                     ___flmul@bexp:	
  2467                           ; 1 bytes @ 0x1C
  2468                           
  2469     003C                     dtoa@p:	
  2470                           ; 1 bytes @ 0x1C
  2471                           
  2472                           
  2473                           ; 2 bytes @ 0x1C
  2474     003C                     	ds	1
  2475     003D                     ___flmul@prod:
  2476                           
  2477                           ; 4 bytes @ 0x1D
  2478     003D                     	ds	1
  2479     003E                     dtoa@w:
  2480                           
  2481                           ; 2 bytes @ 0x1E
  2482     003E                     	ds	2
  2483     0040                     dtoa@s:
  2484                           
  2485                           ; 1 bytes @ 0x20
  2486     0040                     	ds	1
  2487     0041                     ___flmul@temp:
  2488     0041                     dtoa@i:	
  2489                           ; 2 bytes @ 0x21
  2490                           
  2491     0041                     ___fldiv@rem:	
  2492                           ; 2 bytes @ 0x21
  2493                           
  2494                           
  2495                           ; 4 bytes @ 0x21
  2496     0041                     	ds	2
  2497     0043                     ?___flge:
  2498     0043                     ?___flsub:	
  2499                           ; 1 bit 
  2500                           
  2501     0043                     ___flge@ff1:	
  2502                           ; 4 bytes @ 0x23
  2503                           
  2504     0043                     ___flsub@a:	
  2505                           ; 4 bytes @ 0x23
  2506                           
  2507                           
  2508                           ; 4 bytes @ 0x23
  2509     0043                     	ds	2
  2510     0045                     ___fldiv@sign:
  2511                           
  2512                           ; 1 bytes @ 0x25
  2513     0045                     	ds	1
  2514     0046                     ___fldiv@new_exp:
  2515                           
  2516                           ; 2 bytes @ 0x26
  2517     0046                     	ds	1
  2518     0047                     ___flge@ff2:
  2519     0047                     ___flsub@b:	
  2520                           ; 4 bytes @ 0x27
  2521                           
  2522                           
  2523                           ; 4 bytes @ 0x27
  2524     0047                     	ds	1
  2525     0048                     ___fldiv@grs:
  2526                           
  2527                           ; 4 bytes @ 0x28
  2528     0048                     	ds	3
  2529     004B                     ??___flge:
  2530     004B                     ??___flsub:	
  2531                           ; 1 bytes @ 0x2B
  2532                           
  2533                           
  2534                           ; 1 bytes @ 0x2B
  2535     004B                     	ds	1
  2536     004C                     ___fldiv@bexp:
  2537                           
  2538                           ; 1 bytes @ 0x2C
  2539     004C                     	ds	1
  2540     004D                     ___fldiv@aexp:
  2541                           
  2542                           ; 1 bytes @ 0x2D
  2543     004D                     	ds	1
  2544     004E                     ?_floorf:
  2545     004E                     floorf@x:	
  2546                           ; 4 bytes @ 0x2E
  2547                           
  2548                           
  2549                           ; 4 bytes @ 0x2E
  2550     004E                     	ds	4
  2551     0052                     ??_floorf:
  2552                           
  2553                           ; 1 bytes @ 0x32
  2554     0052                     	ds	6
  2555     0058                     floorf@m:
  2556                           
  2557                           ; 4 bytes @ 0x38
  2558     0058                     	ds	4
  2559     005C                     floorf@e:
  2560                           
  2561                           ; 2 bytes @ 0x3C
  2562     005C                     	ds	2
  2563     005E                     floorf@u:
  2564                           
  2565                           ; 4 bytes @ 0x3E
  2566     005E                     	ds	4
  2567     0062                     ?_efgtoa:
  2568     0062                     efgtoa@f:	
  2569                           ; 1 bytes @ 0x42
  2570                           
  2571                           
  2572                           ; 4 bytes @ 0x42
  2573     0062                     	ds	4
  2574     0066                     efgtoa@c:
  2575                           
  2576                           ; 1 bytes @ 0x46
  2577     0066                     	ds	1
  2578     0067                     ??_efgtoa:
  2579                           
  2580                           ; 1 bytes @ 0x47
  2581     0067                     	ds	4
  2582     006B                     ?_vfpfcnvrt:
  2583     006B                     vfpfcnvrt@fmt:	
  2584                           ; 1 bytes @ 0x4B
  2585                           
  2586                           
  2587                           ; 1 bytes @ 0x4B
  2588     006B                     	ds	1
  2589     006C                     vfpfcnvrt@ap:
  2590                           
  2591                           ; 1 bytes @ 0x4C
  2592     006C                     	ds	1
  2593     006D                     ?_vfprintf:
  2594     006D                     vfprintf@fmt:	
  2595                           ; 2 bytes @ 0x4D
  2596                           
  2597                           
  2598                           ; 2 bytes @ 0x4D
  2599     006D                     	ds	2
  2600     006F                     vfprintf@ap:
  2601                           
  2602                           ; 1 bytes @ 0x4F
  2603     006F                     	ds	1
  2604                           
  2605                           	psect	maintext
  2606     024D                     __pmaintext:	
  2607 ;;
  2608 ;;Main: autosize = 0, tempsize = 18, incstack = 0, save=0
  2609 ;;
  2610 ;; *************** function _main *****************
  2611 ;; Defined at:
  2612 ;;		line 34 in file "main.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;		None
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;  contadorTemp    2   77[BANK1 ] int 
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  1    wreg      void 
  2619 ;; Registers used:
  2620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2621 ;; Tracked objects:
  2622 ;;		On entry : B1F/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2626 ;;      Params:         0       0       0       0       0       0       0       0
  2627 ;;      Locals:         0       0       2       0       0       0       0       0
  2628 ;;      Temps:          0       0       0      18       0       0       0       0
  2629 ;;      Totals:         0       0       2      18       0       0       0       0
  2630 ;;Total ram usage:       20 bytes
  2631 ;; Hardware stack levels required when called: 12
  2632 ;; This function calls:
  2633 ;;		_ADC_GetConversionResult
  2634 ;;		_ADC_Initialize
  2635 ;;		_ADC_IsConversionDone
  2636 ;;		_ADC_StartConversion
  2637 ;;		_Lcd_Clear
  2638 ;;		_Lcd_Init
  2639 ;;		_Lcd_Set_Cursor
  2640 ;;		_Lcd_Write_String
  2641 ;;		___fldiv
  2642 ;;		___wmul
  2643 ;;		___xxtofl
  2644 ;;		_sprintf
  2645 ;; This function is called by:
  2646 ;;		Startup code after reset
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650     024D                     _main:	
  2651                           ;psect for function _main
  2652                           
  2653                           
  2654                           ;main.c: 37:     ANSELB = 0;
  2655                           
  2656                           ;incstack = 0
  2657                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2658     024D  0023               	movlb	3	; select bank3
  2659     024E  018D               	clrf	13	;volatile
  2660                           
  2661                           ;main.c: 38:     TRISAbits.TRISA1 = 0;
  2662     024F  0021               	movlb	1	; select bank1
  2663     0250  108C               	bcf	12,1	;volatile
  2664                           
  2665                           ;main.c: 39:     TRISAbits.TRISA2 = 0;
  2666     0251  110C               	bcf	12,2	;volatile
  2667                           
  2668                           ;main.c: 40:     TRISAbits.TRISA3 = 0;
  2669     0252  118C               	bcf	12,3	;volatile
  2670                           
  2671                           ;main.c: 41:     TRISCbits.TRISC2 = 0;
  2672     0253  110E               	bcf	14,2	;volatile
  2673                           
  2674                           ;main.c: 42:     TRISCbits.TRISC5 = 0;
  2675     0254  128E               	bcf	14,5	;volatile
  2676                           
  2677                           ;main.c: 43:     TRISCbits.TRISC3 = 1;
  2678     0255  158E               	bsf	14,3	;volatile
  2679                           
  2680                           ;main.c: 44:     TRISCbits.TRISC4 = 1;
  2681     0256  160E               	bsf	14,4	;volatile
  2682                           
  2683                           ;main.c: 45:     LATAbits.LATA1 = 1;
  2684     0257  0022               	movlb	2	; select bank2
  2685     0258  148C               	bsf	12,1	;volatile
  2686                           
  2687                           ;main.c: 46:     LATAbits.LATA2 = 1;
  2688     0259  150C               	bsf	12,2	;volatile
  2689                           
  2690                           ;main.c: 47:     LATAbits.LATA3 = 1;
  2691     025A  158C               	bsf	12,3	;volatile
  2692                           
  2693                           ;main.c: 48:     LATCbits.LATC2 = 0;
  2694     025B  110E               	bcf	14,2	;volatile
  2695                           
  2696                           ;main.c: 49:     LATCbits.LATC5 = 1;
  2697     025C  168E               	bsf	14,5	;volatile
  2698                           
  2699                           ;main.c: 52:     OPTION_REGbits.nWPUEN = 0;
  2700     025D  0021               	movlb	1	; select bank1
  2701     025E  1395               	bcf	21,7	;volatile
  2702                           
  2703                           ;main.c: 53:     WPUB = 0b00001110;
  2704     025F  300E               	movlw	14
  2705     0260  0024               	movlb	4	; select bank4
  2706     0261  008D               	movwf	13	;volatile
  2707                           
  2708                           ;main.c: 56:     TRISBbits.TRISB1 = 0;
  2709     0262  0021               	movlb	1	; select bank1
  2710     0263  108D               	bcf	13,1	;volatile
  2711                           
  2712                           ;main.c: 57:     LATBbits.LATB1 = 0;
  2713     0264  0022               	movlb	2	; select bank2
  2714     0265  108D               	bcf	13,1	;volatile
  2715                           
  2716                           ;main.c: 58:     TRISBbits.TRISB2 = 0;
  2717     0266  0021               	movlb	1	; select bank1
  2718     0267  110D               	bcf	13,2	;volatile
  2719                           
  2720                           ;main.c: 59:     LATBbits.LATB2 = 0;
  2721     0268  0022               	movlb	2	; select bank2
  2722     0269  110D               	bcf	13,2	;volatile
  2723                           
  2724                           ;main.c: 60:     TRISBbits.TRISB3 = 0;
  2725     026A  0021               	movlb	1	; select bank1
  2726     026B  118D               	bcf	13,3	;volatile
  2727                           
  2728                           ;main.c: 61:     LATBbits.LATB3 = 0;
  2729     026C  0022               	movlb	2	; select bank2
  2730     026D  118D               	bcf	13,3	;volatile
  2731                           
  2732                           ;main.c: 64:     INTCONbits.GIE = 1;
  2733     026E  178B               	bsf	11,7	;volatile
  2734                           
  2735                           ;main.c: 65:     INTCONbits.IOCIE = 0;
  2736     026F  118B               	bcf	11,3	;volatile
  2737                           
  2738                           ;main.c: 66:     INTCONbits.IOCIE = 1;
  2739     0270  158B               	bsf	11,3	;volatile
  2740                           
  2741                           ;main.c: 68:     IOCBN = 0b11110000;
  2742     0271  30F0               	movlw	240
  2743     0272  0027               	movlb	7	; select bank7
  2744     0273  0095               	movwf	21	;volatile
  2745                           
  2746                           ;main.c: 69:     IOCBF = 0;
  2747     0274  0196               	clrf	22	;volatile
  2748                           
  2749                           ;main.c: 72:     SSPCON1bits.SSPEN = 1;
  2750     0275  0024               	movlb	4	; select bank4
  2751     0276  1695               	bsf	21,5	;volatile
  2752                           
  2753                           ;main.c: 73:     SSPCON1bits.SSPM3 = 1;
  2754     0277  1595               	bsf	21,3	;volatile
  2755                           
  2756                           ;main.c: 74:     SSPCONbits.SSPM2 = 0;
  2757     0278  1115               	bcf	21,2	;volatile
  2758                           
  2759                           ;main.c: 75:     SSPCONbits.SSPM1 = 0;
  2760     0279  1095               	bcf	21,1	;volatile
  2761                           
  2762                           ;main.c: 76:     SSPCON1bits.SSPM0 = 0;
  2763     027A  1015               	bcf	21,0	;volatile
  2764                           
  2765                           ;main.c: 77:     SSPADD = 0x4F;
  2766     027B  304F               	movlw	79
  2767     027C  0092               	movwf	18	;volatile
  2768                           
  2769                           ;main.c: 80:     ADC_Initialize();
  2770     027D  319C  2417  3182   	fcall	_ADC_Initialize
  2771                           
  2772                           ;main.c: 81:     Lcd_Init();
  2773     0280  319F  275E  3182   	fcall	_Lcd_Init
  2774                           
  2775                           ;main.c: 82:     Lcd_Clear();
  2776     0283  319C  241F  3182   	fcall	_Lcd_Clear
  2777                           
  2778                           ;main.c: 84:     _delay((unsigned long)((200)*(4000000/4000.0)));
  2779     0286  3002               	movlw	2
  2780     0287  0022               	movlb	2	; select bank2
  2781     0288  00CD               	movwf	(??_main^(0+256)+1)
  2782     0289  3004               	movlw	4
  2783     028A  00CC               	movwf	??_main^(0+256)
  2784     028B  30BA               	movlw	186
  2785     028C                     u6587:
  2786     028C  0B89               	decfsz	9,f
  2787     028D  2A8C               	goto	u6587
  2788     028E  0BCC               	decfsz	??_main^(0+256),f
  2789     028F  2A8C               	goto	u6587
  2790     0290  0BCD               	decfsz	(??_main^(0+256)+1),f
  2791     0291  2A8C               	goto	u6587
  2792     0292  0000               	nop
  2793                           
  2794                           ;main.c: 87:     ADC_StartConversion();
  2795     0293  3190  2001  3182   	fcall	_ADC_StartConversion
  2796     0296                     l5063:	
  2797                           ;main.c: 88:     while (!ADC_IsConversionDone());
  2798                           
  2799     0296  319C  2408  3182   	fcall	_ADC_IsConversionDone
  2800     0299  3A00               	xorlw	0
  2801     029A  1903               	skipnz
  2802     029B  2A96               	goto	l5063
  2803                           
  2804                           ;main.c: 89:     convertedValue = ADC_GetConversionResult();
  2805     029C  319C  2430  3182   	fcall	_ADC_GetConversionResult
  2806     029F  0020               	movlb	0	; select bank0
  2807     02A0  0821               	movf	?_ADC_GetConversionResult+1,w
  2808     02A1  0022               	movlb	2	; select bank2
  2809     02A2  00BE               	movwf	(_convertedValue+1)^(0+256)
  2810     02A3  0020               	movlb	0	; select bank0
  2811     02A4  0820               	movf	?_ADC_GetConversionResult,w
  2812     02A5  0022               	movlb	2	; select bank2
  2813     02A6  00BD               	movwf	_convertedValue^(0+256)
  2814                           
  2815                           ;main.c: 90:     temp = (float)(convertedValue*5*100)/1024;
  2816     02A7  3044               	movlw	68
  2817     02A8  0020               	movlb	0	; select bank0
  2818     02A9  00B7               	movwf	___fldiv@a+3
  2819     02AA  3080               	movlw	128
  2820     02AB  00B6               	movwf	___fldiv@a+2
  2821     02AC  3000               	movlw	0
  2822     02AD  00B5               	movwf	___fldiv@a+1
  2823     02AE  3000               	movlw	0
  2824     02AF  00B4               	movwf	___fldiv@a
  2825     02B0  30F4               	movlw	244
  2826     02B1  00A2               	movwf	___wmul@multiplicand
  2827     02B2  3001               	movlw	1
  2828     02B3  00A3               	movwf	___wmul@multiplicand+1
  2829     02B4  0022               	movlb	2	; select bank2
  2830     02B5  083E               	movf	(_convertedValue+1)^(0+256),w
  2831     02B6  0020               	movlb	0	; select bank0
  2832     02B7  00A1               	movwf	___wmul@multiplier+1
  2833     02B8  0022               	movlb	2	; select bank2
  2834     02B9  083D               	movf	_convertedValue^(0+256),w
  2835     02BA  0020               	movlb	0	; select bank0
  2836     02BB  00A0               	movwf	___wmul@multiplier
  2837     02BC  319C  24F8  3182   	fcall	___wmul
  2838     02BF  0020               	movlb	0	; select bank0
  2839     02C0  0820               	movf	?___wmul,w
  2840     02C1  0022               	movlb	2	; select bank2
  2841     02C2  00CC               	movwf	??_main^(0+256)
  2842     02C3  0020               	movlb	0	; select bank0
  2843     02C4  0821               	movf	?___wmul+1,w
  2844     02C5  0022               	movlb	2	; select bank2
  2845     02C6  00CD               	movwf	(??_main^(0+256)+1)
  2846     02C7  01CE               	clrf	(??_main^(0+256)+2)
  2847     02C8  01CF               	clrf	(??_main^(0+256)+3)
  2848     02C9  084F               	movf	(??_main+3)^(0+256),w
  2849     02CA  0020               	movlb	0	; select bank0
  2850     02CB  00A9               	movwf	___xxtofl@val+3
  2851     02CC  0022               	movlb	2	; select bank2
  2852     02CD  084E               	movf	(??_main+2)^(0+256),w
  2853     02CE  0020               	movlb	0	; select bank0
  2854     02CF  00A8               	movwf	___xxtofl@val+2
  2855     02D0  0022               	movlb	2	; select bank2
  2856     02D1  084D               	movf	(??_main+1)^(0+256),w
  2857     02D2  0020               	movlb	0	; select bank0
  2858     02D3  00A7               	movwf	___xxtofl@val+1
  2859     02D4  0022               	movlb	2	; select bank2
  2860     02D5  084C               	movf	??_main^(0+256),w
  2861     02D6  0020               	movlb	0	; select bank0
  2862     02D7  00A6               	movwf	___xxtofl@val
  2863     02D8  3000               	movlw	0
  2864     02D9  3188  2000  3182   	fcall	___xxtofl
  2865     02DC  0020               	movlb	0	; select bank0
  2866     02DD  0829               	movf	?___xxtofl+3,w
  2867     02DE  00BB               	movwf	___fldiv@b+3
  2868     02DF  0828               	movf	?___xxtofl+2,w
  2869     02E0  00BA               	movwf	___fldiv@b+2
  2870     02E1  0827               	movf	?___xxtofl+1,w
  2871     02E2  00B9               	movwf	___fldiv@b+1
  2872     02E3  0826               	movf	?___xxtofl,w
  2873     02E4  00B8               	movwf	___fldiv@b
  2874     02E5  3193  2349  3182   	fcall	___fldiv
  2875     02E8  0020               	movlb	0	; select bank0
  2876     02E9  0837               	movf	?___fldiv+3,w
  2877     02EA  0022               	movlb	2	; select bank2
  2878     02EB  00AB               	movwf	(_temp+3)^(0+256)
  2879     02EC  0020               	movlb	0	; select bank0
  2880     02ED  0836               	movf	?___fldiv+2,w
  2881     02EE  0022               	movlb	2	; select bank2
  2882     02EF  00AA               	movwf	(_temp+2)^(0+256)
  2883     02F0  0020               	movlb	0	; select bank0
  2884     02F1  0835               	movf	?___fldiv+1,w
  2885     02F2  0022               	movlb	2	; select bank2
  2886     02F3  00A9               	movwf	(_temp+1)^(0+256)
  2887     02F4  0020               	movlb	0	; select bank0
  2888     02F5  0834               	movf	?___fldiv,w
  2889     02F6  0022               	movlb	2	; select bank2
  2890     02F7  00A8               	movwf	_temp^(0+256)
  2891     02F8                     l5069:
  2892                           
  2893                           ;main.c: 95:         Lcd_Set_Cursor(1,2);
  2894     02F8  3002               	movlw	2
  2895     02F9  0020               	movlb	0	; select bank0
  2896     02FA  00A3               	movwf	Lcd_Set_Cursor@b
  2897     02FB  3001               	movlw	1
  2898     02FC  3191  212B  3182   	fcall	_Lcd_Set_Cursor
  2899                           
  2900                           ;main.c: 96:         Lcd_Write_String("ControlTech CA");
  2901     02FF  3032               	movlw	low (STR_1| (0+32768))
  2902     0300  0020               	movlb	0	; select bank0
  2903     0301  00A5               	movwf	Lcd_Write_String@a
  2904     0302  3098               	movlw	high (STR_1| (0+32768))
  2905     0303  00A6               	movwf	Lcd_Write_String@a+1
  2906     0304  319C  24DC  3182   	fcall	_Lcd_Write_String
  2907                           
  2908                           ;main.c: 99:         SSPCON2bits.SEN = 1;
  2909     0307  0024               	movlb	4	; select bank4
  2910     0308  1416               	bsf	22,0	;volatile
  2911     0309                     l200:	
  2912                           ;main.c: 100:         while(SSPCON2bits.SEN);
  2913                           
  2914     0309  1816               	btfsc	22,0	;volatile
  2915     030A  2B09               	goto	l200
  2916                           
  2917                           ;main.c: 101:         SSPBUF = 0b11010000;
  2918     030B  30D0               	movlw	208
  2919     030C  0091               	movwf	17	;volatile
  2920     030D                     l203:	
  2921                           ;main.c: 102:         while(SSPSTATbits.BF);
  2922                           
  2923     030D  1814               	btfsc	20,0	;volatile
  2924     030E  2B0D               	goto	l203
  2925     030F                     l206:
  2926     030F  1914               	btfsc	20,2	;volatile
  2927     0310  2B0F               	goto	l206
  2928                           
  2929                           ;main.c: 104:         SSPBUF = 0;
  2930     0311  0191               	clrf	17	;volatile
  2931     0312                     l209:	
  2932                           ;main.c: 105:         while(SSPSTATbits.BF);
  2933                           
  2934     0312  1814               	btfsc	20,0	;volatile
  2935     0313  2B12               	goto	l209
  2936     0314                     l212:
  2937     0314  1914               	btfsc	20,2	;volatile
  2938     0315  2B14               	goto	l212
  2939                           
  2940                           ;main.c: 107:         SSPCON2bits.RSEN = 1;
  2941     0316  1496               	bsf	22,1	;volatile
  2942     0317                     l215:	
  2943                           ;main.c: 108:         while(SSPCON2bits.RSEN);
  2944                           
  2945     0317  1896               	btfsc	22,1	;volatile
  2946     0318  2B17               	goto	l215
  2947                           
  2948                           ;main.c: 109:         SSPBUF = 0b11010001;
  2949     0319  30D1               	movlw	209
  2950     031A  0091               	movwf	17	;volatile
  2951     031B                     l218:	
  2952                           ;main.c: 110:         while(SSPSTATbits.BF);
  2953                           
  2954     031B  1814               	btfsc	20,0	;volatile
  2955     031C  2B1B               	goto	l218
  2956     031D                     l221:
  2957     031D  1914               	btfsc	20,2	;volatile
  2958     031E  2B1D               	goto	l221
  2959                           
  2960                           ;main.c: 112:         SSPCON2bits.RCEN = 1;
  2961     031F  1596               	bsf	22,3	;volatile
  2962     0320                     l224:	
  2963                           ;main.c: 113:         while(SSPSTATbits.BF==0);
  2964                           
  2965     0320  1C14               	btfss	20,0	;volatile
  2966     0321  2B20               	goto	l224
  2967                           
  2968                           ;main.c: 114:         seg = SSPBUF;
  2969     0322  0811               	movf	17,w	;volatile
  2970     0323  0021               	movlb	1	; select bank1
  2971     0324  00EF               	movwf	_seg^(0+128)
  2972                           
  2973                           ;main.c: 115:         SSPCON2bits.ACKDT = 0;
  2974     0325  0024               	movlb	4	; select bank4
  2975     0326  1296               	bcf	22,5	;volatile
  2976                           
  2977                           ;main.c: 116:         SSPCON2bits.ACKEN = 1;
  2978     0327  1616               	bsf	22,4	;volatile
  2979     0328                     l227:	
  2980                           ;main.c: 117:         while(SSPCON2bits.ACKEN);
  2981                           
  2982     0328  1A16               	btfsc	22,4	;volatile
  2983     0329  2B28               	goto	l227
  2984                           
  2985                           ;main.c: 118:         SSPCON2bits.RCEN = 1;
  2986     032A  1596               	bsf	22,3	;volatile
  2987     032B                     l230:	
  2988                           ;main.c: 119:         while(SSPSTATbits.BF==0);
  2989                           
  2990     032B  1C14               	btfss	20,0	;volatile
  2991     032C  2B2B               	goto	l230
  2992                           
  2993                           ;main.c: 120:         min = SSPBUF;
  2994     032D  0811               	movf	17,w	;volatile
  2995     032E  0022               	movlb	2	; select bank2
  2996     032F  00B7               	movwf	_min^(0+256)
  2997                           
  2998                           ;main.c: 121:         SSPCON2bits.ACKDT = 0;
  2999     0330  0024               	movlb	4	; select bank4
  3000     0331  1296               	bcf	22,5	;volatile
  3001                           
  3002                           ;main.c: 122:         SSPCON2bits.ACKEN = 1;
  3003     0332  1616               	bsf	22,4	;volatile
  3004     0333                     l233:	
  3005                           ;main.c: 123:         while(SSPCON2bits.ACKEN);
  3006                           
  3007     0333  1A16               	btfsc	22,4	;volatile
  3008     0334  2B33               	goto	l233
  3009                           
  3010                           ;main.c: 124:         SSPCON2bits.RCEN = 1;
  3011     0335  1596               	bsf	22,3	;volatile
  3012     0336                     l236:	
  3013                           ;main.c: 125:         while(SSPSTATbits.BF==0);
  3014                           
  3015     0336  1C14               	btfss	20,0	;volatile
  3016     0337  2B36               	goto	l236
  3017                           
  3018                           ;main.c: 126:         hor = SSPBUF;
  3019     0338  0811               	movf	17,w	;volatile
  3020     0339  0022               	movlb	2	; select bank2
  3021     033A  00B6               	movwf	_hor^(0+256)
  3022                           
  3023                           ;main.c: 127:         SSPCON2bits.ACKDT = 1;
  3024     033B  0024               	movlb	4	; select bank4
  3025     033C  1696               	bsf	22,5	;volatile
  3026                           
  3027                           ;main.c: 128:         SSPCON2bits.ACKEN = 1;
  3028     033D  1616               	bsf	22,4	;volatile
  3029     033E                     l239:	
  3030                           ;main.c: 129:         while(SSPCON2bits.ACKEN);
  3031                           
  3032     033E  1A16               	btfsc	22,4	;volatile
  3033     033F  2B3E               	goto	l239
  3034                           
  3035                           ;main.c: 130:         SSPCON2bits.PEN = 1;
  3036     0340  1516               	bsf	22,2	;volatile
  3037     0341                     l242:	
  3038                           ;main.c: 131:         while(SSPCON2bits.PEN);
  3039                           
  3040     0341  1916               	btfsc	22,2	;volatile
  3041     0342  2B41               	goto	l242
  3042                           
  3043                           ;main.c: 134:         sprintf(buffer,"%d%d:%d%d:%d%d",hor>>4,hor&=0x0F,min>>4,min&=0x0F,
      +                          seg>>4,seg&=0x0F);
  3044     0343  3050               	movlw	low (STR_2| (0+32768))
  3045     0344  0021               	movlb	1	; select bank1
  3046     0345  00DE               	movwf	sprintf@fmt^(0+128)
  3047     0346  3098               	movlw	high (STR_2| (0+32768))
  3048     0347  00DF               	movwf	(sprintf@fmt^(0+128)+1)
  3049     0348  0022               	movlb	2	; select bank2
  3050     0349  0836               	movf	_hor^(0+256),w
  3051     034A  00CC               	movwf	??_main^(0+256)
  3052     034B  3004               	movlw	4
  3053     034C                     u6435:
  3054     034C  36CC               	lsrf	??_main^(0+256),f
  3055     034D  0B89               	decfsz	9,f
  3056     034E  2B4C               	goto	u6435
  3057     034F  084C               	movf	??_main^(0+256),w
  3058     0350  00CD               	movwf	(??_main+1)^(0+256)
  3059     0351  01CE               	clrf	((??_main+1)^(0+256)+1)
  3060     0352  084D               	movf	(??_main+1)^(0+256),w
  3061     0353  0021               	movlb	1	; select bank1
  3062     0354  00E0               	movwf	(?_sprintf^(0+128)+2)
  3063     0355  0022               	movlb	2	; select bank2
  3064     0356  084E               	movf	(??_main+2)^(0+256),w
  3065     0357  0021               	movlb	1	; select bank1
  3066     0358  00E1               	movwf	((?_sprintf+1)^(0+128)+2)
  3067     0359  300F               	movlw	15
  3068     035A  0022               	movlb	2	; select bank2
  3069     035B  00CF               	movwf	(??_main+3)^(0+256)
  3070     035C  084F               	movf	(??_main+3)^(0+256),w
  3071     035D  05B6               	andwf	_hor^(0+256),f
  3072     035E  0836               	movf	_hor^(0+256),w
  3073     035F  00D0               	movwf	(??_main+4)^(0+256)
  3074     0360  01D1               	clrf	((??_main+4)^(0+256)+1)
  3075     0361  0850               	movf	(??_main+4)^(0+256),w
  3076     0362  0021               	movlb	1	; select bank1
  3077     0363  00E2               	movwf	(?_sprintf^(0+128)+4)
  3078     0364  0022               	movlb	2	; select bank2
  3079     0365  0851               	movf	(??_main+5)^(0+256),w
  3080     0366  0021               	movlb	1	; select bank1
  3081     0367  00E3               	movwf	((?_sprintf+1)^(0+128)+4)
  3082     0368  0022               	movlb	2	; select bank2
  3083     0369  0837               	movf	_min^(0+256),w
  3084     036A  00D2               	movwf	(??_main+6)^(0+256)
  3085     036B  3004               	movlw	4
  3086     036C                     u6445:
  3087     036C  36D2               	lsrf	(??_main+6)^(0+256),f
  3088     036D  0B89               	decfsz	9,f
  3089     036E  2B6C               	goto	u6445
  3090     036F  0852               	movf	(??_main+6)^(0+256),w
  3091     0370  00D3               	movwf	(??_main+7)^(0+256)
  3092     0371  01D4               	clrf	((??_main+7)^(0+256)+1)
  3093     0372  0853               	movf	(??_main+7)^(0+256),w
  3094     0373  0021               	movlb	1	; select bank1
  3095     0374  00E4               	movwf	(?_sprintf^(0+128)+6)
  3096     0375  0022               	movlb	2	; select bank2
  3097     0376  0854               	movf	(??_main+8)^(0+256),w
  3098     0377  0021               	movlb	1	; select bank1
  3099     0378  00E5               	movwf	((?_sprintf+1)^(0+128)+6)
  3100     0379  300F               	movlw	15
  3101     037A  0022               	movlb	2	; select bank2
  3102     037B  00D5               	movwf	(??_main+9)^(0+256)
  3103     037C  0855               	movf	(??_main+9)^(0+256),w
  3104     037D  05B7               	andwf	_min^(0+256),f
  3105     037E  0837               	movf	_min^(0+256),w
  3106     037F  00D6               	movwf	(??_main+10)^(0+256)
  3107     0380  01D7               	clrf	((??_main+10)^(0+256)+1)
  3108     0381  0856               	movf	(??_main+10)^(0+256),w
  3109     0382  0021               	movlb	1	; select bank1
  3110     0383  00E6               	movwf	(?_sprintf^(0+128)+8)
  3111     0384  0022               	movlb	2	; select bank2
  3112     0385  0857               	movf	(??_main+11)^(0+256),w
  3113     0386  0021               	movlb	1	; select bank1
  3114     0387  00E7               	movwf	((?_sprintf+1)^(0+128)+8)
  3115     0388  086F               	movf	_seg^(0+128),w
  3116     0389  0022               	movlb	2	; select bank2
  3117     038A  00D8               	movwf	(??_main+12)^(0+256)
  3118     038B  3004               	movlw	4
  3119     038C                     u6455:
  3120     038C  36D8               	lsrf	(??_main+12)^(0+256),f
  3121     038D  0B89               	decfsz	9,f
  3122     038E  2B8C               	goto	u6455
  3123     038F  0858               	movf	(??_main+12)^(0+256),w
  3124     0390  00D9               	movwf	(??_main+13)^(0+256)
  3125     0391  01DA               	clrf	((??_main+13)^(0+256)+1)
  3126     0392  0859               	movf	(??_main+13)^(0+256),w
  3127     0393  0021               	movlb	1	; select bank1
  3128     0394  00E8               	movwf	(?_sprintf^(0+128)+10)
  3129     0395  0022               	movlb	2	; select bank2
  3130     0396  085A               	movf	(??_main+14)^(0+256),w
  3131     0397  0021               	movlb	1	; select bank1
  3132     0398  00E9               	movwf	((?_sprintf+1)^(0+128)+10)
  3133     0399  300F               	movlw	15
  3134     039A  0022               	movlb	2	; select bank2
  3135     039B  00DB               	movwf	(??_main+15)^(0+256)
  3136     039C  085B               	movf	(??_main+15)^(0+256),w
  3137     039D  0021               	movlb	1	; select bank1
  3138     039E  05EF               	andwf	_seg^(0+128),f
  3139     039F  086F               	movf	_seg^(0+128),w
  3140     03A0  0022               	movlb	2	; select bank2
  3141     03A1  00DC               	movwf	(??_main+16)^(0+256)
  3142     03A2  01DD               	clrf	((??_main+16)^(0+256)+1)
  3143     03A3  085C               	movf	(??_main+16)^(0+256),w
  3144     03A4  0021               	movlb	1	; select bank1
  3145     03A5  00EA               	movwf	(?_sprintf^(0+128)+12)
  3146     03A6  0022               	movlb	2	; select bank2
  3147     03A7  085D               	movf	(??_main+17)^(0+256),w
  3148     03A8  0021               	movlb	1	; select bank1
  3149     03A9  00EB               	movwf	((?_sprintf+1)^(0+128)+12)
  3150     03AA  30A0               	movlw	(low (_buffer| (0+256)))& (0+255)
  3151     03AB  319D  25B8  3182   	fcall	_sprintf
  3152                           
  3153                           ;main.c: 135:         Lcd_Set_Cursor(2,1);
  3154     03AE  0020               	movlb	0	; select bank0
  3155     03AF  01A3               	clrf	Lcd_Set_Cursor@b
  3156     03B0  0AA3               	incf	Lcd_Set_Cursor@b,f
  3157     03B1  3002               	movlw	2
  3158     03B2  3191  212B  3182   	fcall	_Lcd_Set_Cursor
  3159                           
  3160                           ;main.c: 136:         Lcd_Write_String(buffer);
  3161     03B5  30A0               	movlw	low _buffer
  3162     03B6  0020               	movlb	0	; select bank0
  3163     03B7  00A5               	movwf	Lcd_Write_String@a
  3164     03B8  3001               	movlw	high _buffer
  3165     03B9  00A6               	movwf	Lcd_Write_String@a+1
  3166     03BA  319C  24DC  3182   	fcall	_Lcd_Write_String
  3167                           
  3168                           ;main.c: 139:         contadorTemp++;
  3169     03BD  3001               	movlw	1
  3170     03BE  0021               	movlb	1	; select bank1
  3171     03BF  07ED               	addwf	main@contadorTemp^(0+128),f
  3172     03C0  3000               	movlw	0
  3173     03C1  3DEE               	addwfc	(main@contadorTemp+1)^(0+128),f
  3174                           
  3175                           ;main.c: 142:         if (contadorTemp >= 300) {
  3176     03C2  086E               	movf	(main@contadorTemp+1)^(0+128),w
  3177     03C3  3A80               	xorlw	128
  3178     03C4  0022               	movlb	2	; select bank2
  3179     03C5  00CC               	movwf	??_main^(0+256)
  3180     03C6  3081               	movlw	129
  3181     03C7  024C               	subwf	??_main^(0+256),w
  3182     03C8  1D03               	skipz
  3183     03C9  2BCD               	goto	u6465
  3184     03CA  302C               	movlw	44
  3185     03CB  0021               	movlb	1	; select bank1
  3186     03CC  026D               	subwf	main@contadorTemp^(0+128),w
  3187     03CD                     u6465:
  3188     03CD  1C03               	skipc
  3189     03CE  2C6F               	goto	l5129
  3190                           
  3191                           ;main.c: 144:             ADC_StartConversion();
  3192     03CF  3190  2001  3182   	fcall	_ADC_StartConversion
  3193     03D2                     l5111:	
  3194                           ;main.c: 145:             while(!ADC_IsConversionDone());
  3195                           
  3196     03D2  319C  2408  3182   	fcall	_ADC_IsConversionDone
  3197     03D5  3A00               	xorlw	0
  3198     03D6  1903               	skipnz
  3199     03D7  2BD2               	goto	l5111
  3200                           
  3201                           ;main.c: 146:             convertedValue = ADC_GetConversionResult();
  3202     03D8  319C  2430  3182   	fcall	_ADC_GetConversionResult
  3203     03DB  0020               	movlb	0	; select bank0
  3204     03DC  0821               	movf	?_ADC_GetConversionResult+1,w
  3205     03DD  0022               	movlb	2	; select bank2
  3206     03DE  00BE               	movwf	(_convertedValue+1)^(0+256)
  3207     03DF  0020               	movlb	0	; select bank0
  3208     03E0  0820               	movf	?_ADC_GetConversionResult,w
  3209     03E1  0022               	movlb	2	; select bank2
  3210     03E2  00BD               	movwf	_convertedValue^(0+256)
  3211                           
  3212                           ;main.c: 147:             temp = (float) (convertedValue*5*100)/1024;
  3213     03E3  3044               	movlw	68
  3214     03E4  0020               	movlb	0	; select bank0
  3215     03E5  00B7               	movwf	___fldiv@a+3
  3216     03E6  3080               	movlw	128
  3217     03E7  00B6               	movwf	___fldiv@a+2
  3218     03E8  3000               	movlw	0
  3219     03E9  00B5               	movwf	___fldiv@a+1
  3220     03EA  3000               	movlw	0
  3221     03EB  00B4               	movwf	___fldiv@a
  3222     03EC  30F4               	movlw	244
  3223     03ED  00A2               	movwf	___wmul@multiplicand
  3224     03EE  3001               	movlw	1
  3225     03EF  00A3               	movwf	___wmul@multiplicand+1
  3226     03F0  0022               	movlb	2	; select bank2
  3227     03F1  083E               	movf	(_convertedValue+1)^(0+256),w
  3228     03F2  0020               	movlb	0	; select bank0
  3229     03F3  00A1               	movwf	___wmul@multiplier+1
  3230     03F4  0022               	movlb	2	; select bank2
  3231     03F5  083D               	movf	_convertedValue^(0+256),w
  3232     03F6  0020               	movlb	0	; select bank0
  3233     03F7  00A0               	movwf	___wmul@multiplier
  3234     03F8  319C  24F8  3182   	fcall	___wmul
  3235     03FB  0020               	movlb	0	; select bank0
  3236     03FC  0820               	movf	?___wmul,w
  3237     03FD  0022               	movlb	2	; select bank2
  3238     03FE  00CC               	movwf	??_main^(0+256)
  3239     03FF  0020               	movlb	0	; select bank0
  3240     0400  0821               	movf	?___wmul+1,w
  3241     0401  0022               	movlb	2	; select bank2
  3242     0402  00CD               	movwf	(??_main^(0+256)+1)
  3243     0403  01CE               	clrf	(??_main^(0+256)+2)
  3244     0404  01CF               	clrf	(??_main^(0+256)+3)
  3245     0405  084F               	movf	(??_main+3)^(0+256),w
  3246     0406  0020               	movlb	0	; select bank0
  3247     0407  00A9               	movwf	___xxtofl@val+3
  3248     0408  0022               	movlb	2	; select bank2
  3249     0409  084E               	movf	(??_main+2)^(0+256),w
  3250     040A  0020               	movlb	0	; select bank0
  3251     040B  00A8               	movwf	___xxtofl@val+2
  3252     040C  0022               	movlb	2	; select bank2
  3253     040D  084D               	movf	(??_main+1)^(0+256),w
  3254     040E  0020               	movlb	0	; select bank0
  3255     040F  00A7               	movwf	___xxtofl@val+1
  3256     0410  0022               	movlb	2	; select bank2
  3257     0411  084C               	movf	??_main^(0+256),w
  3258     0412  0020               	movlb	0	; select bank0
  3259     0413  00A6               	movwf	___xxtofl@val
  3260     0414  3000               	movlw	0
  3261     0415  3188  2000  3182   	fcall	___xxtofl
  3262     0418  0020               	movlb	0	; select bank0
  3263     0419  0829               	movf	?___xxtofl+3,w
  3264     041A  00BB               	movwf	___fldiv@b+3
  3265     041B  0828               	movf	?___xxtofl+2,w
  3266     041C  00BA               	movwf	___fldiv@b+2
  3267     041D  0827               	movf	?___xxtofl+1,w
  3268     041E  00B9               	movwf	___fldiv@b+1
  3269     041F  0826               	movf	?___xxtofl,w
  3270     0420  00B8               	movwf	___fldiv@b
  3271     0421  3193  2349  3182   	fcall	___fldiv
  3272     0424  0020               	movlb	0	; select bank0
  3273     0425  0837               	movf	?___fldiv+3,w
  3274     0426  0022               	movlb	2	; select bank2
  3275     0427  00AB               	movwf	(_temp+3)^(0+256)
  3276     0428  0020               	movlb	0	; select bank0
  3277     0429  0836               	movf	?___fldiv+2,w
  3278     042A  0022               	movlb	2	; select bank2
  3279     042B  00AA               	movwf	(_temp+2)^(0+256)
  3280     042C  0020               	movlb	0	; select bank0
  3281     042D  0835               	movf	?___fldiv+1,w
  3282     042E  0022               	movlb	2	; select bank2
  3283     042F  00A9               	movwf	(_temp+1)^(0+256)
  3284     0430  0020               	movlb	0	; select bank0
  3285     0431  0834               	movf	?___fldiv,w
  3286     0432  0022               	movlb	2	; select bank2
  3287     0433  00A8               	movwf	_temp^(0+256)
  3288                           
  3289                           ;main.c: 150:             Lcd_Set_Cursor(2,10);
  3290     0434  300A               	movlw	10
  3291     0435  0020               	movlb	0	; select bank0
  3292     0436  00A3               	movwf	Lcd_Set_Cursor@b
  3293     0437  3002               	movlw	2
  3294     0438  3191  212B  3182   	fcall	_Lcd_Set_Cursor
  3295                           
  3296                           ;main.c: 151:             sprintf(buffer,"%0.2f\xDF",temp);
  3297     043B  3071               	movlw	low (STR_3| (0+32768))
  3298     043C  0021               	movlb	1	; select bank1
  3299     043D  00DE               	movwf	sprintf@fmt^(0+128)
  3300     043E  3098               	movlw	high (STR_3| (0+32768))
  3301     043F  00DF               	movwf	(sprintf@fmt^(0+128)+1)
  3302     0440  0022               	movlb	2	; select bank2
  3303     0441  082B               	movf	(_temp+3)^(0+256),w
  3304     0442  0021               	movlb	1	; select bank1
  3305     0443  00E3               	movwf	((?_sprintf+3)^(0+128)+2)
  3306     0444  0022               	movlb	2	; select bank2
  3307     0445  082A               	movf	(_temp+2)^(0+256),w
  3308     0446  0021               	movlb	1	; select bank1
  3309     0447  00E2               	movwf	((?_sprintf+2)^(0+128)+2)
  3310     0448  0022               	movlb	2	; select bank2
  3311     0449  0829               	movf	(_temp+1)^(0+256),w
  3312     044A  0021               	movlb	1	; select bank1
  3313     044B  00E1               	movwf	((?_sprintf+1)^(0+128)+2)
  3314     044C  0022               	movlb	2	; select bank2
  3315     044D  0828               	movf	_temp^(0+256),w
  3316     044E  0021               	movlb	1	; select bank1
  3317     044F  00E0               	movwf	(?_sprintf^(0+128)+2)
  3318     0450  30A0               	movlw	(low (_buffer| (0+256)))& (0+255)
  3319     0451  319D  25B8  3182   	fcall	_sprintf
  3320                           
  3321                           ;main.c: 152:             Lcd_Write_String(buffer);
  3322     0454  30A0               	movlw	low _buffer
  3323     0455  0020               	movlb	0	; select bank0
  3324     0456  00A5               	movwf	Lcd_Write_String@a
  3325     0457  3001               	movlw	high _buffer
  3326     0458  00A6               	movwf	Lcd_Write_String@a+1
  3327     0459  319C  24DC  3182   	fcall	_Lcd_Write_String
  3328                           
  3329                           ;main.c: 153:             Lcd_Set_Cursor(2,16);
  3330     045C  3010               	movlw	16
  3331     045D  0020               	movlb	0	; select bank0
  3332     045E  00A3               	movwf	Lcd_Set_Cursor@b
  3333     045F  3002               	movlw	2
  3334     0460  3191  212B  3182   	fcall	_Lcd_Set_Cursor
  3335                           
  3336                           ;main.c: 154:             Lcd_Write_String("C");
  3337     0463  3087               	movlw	low (STR_4| (0+32768))
  3338     0464  0020               	movlb	0	; select bank0
  3339     0465  00A5               	movwf	Lcd_Write_String@a
  3340     0466  3098               	movlw	high (STR_4| (0+32768))
  3341     0467  00A6               	movwf	Lcd_Write_String@a+1
  3342     0468  319C  24DC  3182   	fcall	_Lcd_Write_String
  3343                           
  3344                           ;main.c: 157:             contadorTemp = 0;
  3345     046B  0021               	movlb	1	; select bank1
  3346     046C  01ED               	clrf	main@contadorTemp^(0+128)
  3347     046D  01EE               	clrf	(main@contadorTemp+1)^(0+128)
  3348                           
  3349                           ;main.c: 158:         } else {
  3350     046E  2CA6               	goto	l5139
  3351     046F                     l5129:
  3352                           
  3353                           ;main.c: 160:             Lcd_Set_Cursor(2,10);
  3354     046F  300A               	movlw	10
  3355     0470  0020               	movlb	0	; select bank0
  3356     0471  00A3               	movwf	Lcd_Set_Cursor@b
  3357     0472  3002               	movlw	2
  3358     0473  3191  212B  3182   	fcall	_Lcd_Set_Cursor
  3359                           
  3360                           ;main.c: 161:             sprintf(buffer,"%0.2f\xDF",temp);
  3361     0476  3071               	movlw	low (STR_3| (0+32768))
  3362     0477  0021               	movlb	1	; select bank1
  3363     0478  00DE               	movwf	sprintf@fmt^(0+128)
  3364     0479  3098               	movlw	high (STR_3| (0+32768))
  3365     047A  00DF               	movwf	(sprintf@fmt^(0+128)+1)
  3366     047B  0022               	movlb	2	; select bank2
  3367     047C  082B               	movf	(_temp+3)^(0+256),w
  3368     047D  0021               	movlb	1	; select bank1
  3369     047E  00E3               	movwf	((?_sprintf+3)^(0+128)+2)
  3370     047F  0022               	movlb	2	; select bank2
  3371     0480  082A               	movf	(_temp+2)^(0+256),w
  3372     0481  0021               	movlb	1	; select bank1
  3373     0482  00E2               	movwf	((?_sprintf+2)^(0+128)+2)
  3374     0483  0022               	movlb	2	; select bank2
  3375     0484  0829               	movf	(_temp+1)^(0+256),w
  3376     0485  0021               	movlb	1	; select bank1
  3377     0486  00E1               	movwf	((?_sprintf+1)^(0+128)+2)
  3378     0487  0022               	movlb	2	; select bank2
  3379     0488  0828               	movf	_temp^(0+256),w
  3380     0489  0021               	movlb	1	; select bank1
  3381     048A  00E0               	movwf	(?_sprintf^(0+128)+2)
  3382     048B  30A0               	movlw	(low (_buffer| (0+256)))& (0+255)
  3383     048C  319D  25B8  3182   	fcall	_sprintf
  3384                           
  3385                           ;main.c: 162:             Lcd_Write_String(buffer);
  3386     048F  30A0               	movlw	low _buffer
  3387     0490  0020               	movlb	0	; select bank0
  3388     0491  00A5               	movwf	Lcd_Write_String@a
  3389     0492  3001               	movlw	high _buffer
  3390     0493  00A6               	movwf	Lcd_Write_String@a+1
  3391     0494  319C  24DC  3182   	fcall	_Lcd_Write_String
  3392                           
  3393                           ;main.c: 163:             Lcd_Set_Cursor(2,16);
  3394     0497  3010               	movlw	16
  3395     0498  0020               	movlb	0	; select bank0
  3396     0499  00A3               	movwf	Lcd_Set_Cursor@b
  3397     049A  3002               	movlw	2
  3398     049B  3191  212B  3182   	fcall	_Lcd_Set_Cursor
  3399                           
  3400                           ;main.c: 164:             Lcd_Write_String("C");
  3401     049E  3087               	movlw	low (STR_4| (0+32768))
  3402     049F  0020               	movlb	0	; select bank0
  3403     04A0  00A5               	movwf	Lcd_Write_String@a
  3404     04A1  3098               	movlw	high (STR_4| (0+32768))
  3405     04A2  00A6               	movwf	Lcd_Write_String@a+1
  3406     04A3  319C  24DC  3182   	fcall	_Lcd_Write_String
  3407     04A6                     l5139:
  3408                           
  3409                           ;main.c: 166:         _delay((unsigned long)((1000)*(4000000/4000.0)));
  3410     04A6  3006               	movlw	6
  3411     04A7  0022               	movlb	2	; select bank2
  3412     04A8  00CD               	movwf	(??_main^(0+256)+1)
  3413     04A9  3013               	movlw	19
  3414     04AA  00CC               	movwf	??_main^(0+256)
  3415     04AB  30AD               	movlw	173
  3416     04AC                     u6597:
  3417     04AC  0B89               	decfsz	9,f
  3418     04AD  2CAC               	goto	u6597
  3419     04AE  0BCC               	decfsz	??_main^(0+256),f
  3420     04AF  2CAC               	goto	u6597
  3421     04B0  0BCD               	decfsz	(??_main^(0+256)+1),f
  3422     04B1  2CAC               	goto	u6597
  3423     04B2  3200               	nop2
  3424     04B3  2AF8               	goto	l5069
  3425     04B4                     __end_of_main:
  3426                           
  3427                           	psect	text1
  3428     1DB8                     __ptext1:	
  3429 ;; *************** function _sprintf *****************
  3430 ;; Defined at:
  3431 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  s               1    wreg     PTR unsigned char 
  3434 ;;		 -> buffer(20), 
  3435 ;;  fmt             2   62[BANK1 ] PTR const unsigned char 
  3436 ;;		 -> STR_5(7), STR_3(7), STR_2(15), 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  s               1    0[BANK2 ] PTR unsigned char 
  3439 ;;		 -> buffer(20), 
  3440 ;;  f              11    2[BANK2 ] struct _IO_FILE
  3441 ;;  ret             2    0        int 
  3442 ;;  ap              1    1[BANK2 ] PTR void [1]
  3443 ;;		 -> ?_sprintf(2), 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  2   62[BANK1 ] int 
  3446 ;; Registers used:
  3447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3453 ;;      Params:         0       0      14       0       0       0       0       0
  3454 ;;      Locals:         0       0       0      13       0       0       0       0
  3455 ;;      Temps:          0       0       1       0       0       0       0       0
  3456 ;;      Totals:         0       0      15      13       0       0       0       0
  3457 ;;Total ram usage:       28 bytes
  3458 ;; Hardware stack levels used: 1
  3459 ;; Hardware stack levels required when called: 11
  3460 ;; This function calls:
  3461 ;;		_vfprintf
  3462 ;; This function is called by:
  3463 ;;		_main
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467     1DB8                     _sprintf:	
  3468                           ;psect for function _sprintf
  3469                           
  3470                           
  3471                           ;incstack = 0
  3472                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3473                           ;sprintf@s stored from wreg
  3474     1DB8  0022               	movlb	2	; select bank2
  3475     1DB9  00BF               	movwf	sprintf@s^(0+256)
  3476     1DBA  30E0               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  3477     1DBB  00C0               	movwf	sprintf@ap^(0+256)
  3478     1DBC  083F               	movf	sprintf@s^(0+256),w
  3479     1DBD  00C1               	movwf	sprintf@f^(0+256)
  3480     1DBE  01C3               	clrf	(sprintf@f^(0+256)+2)
  3481     1DBF  01C4               	clrf	((sprintf@f+1)^(0+256)+2)
  3482     1DC0  01CA               	clrf	(sprintf@f^(0+256)+9)
  3483     1DC1  01CB               	clrf	((sprintf@f+1)^(0+256)+9)
  3484     1DC2  0021               	movlb	1	; select bank1
  3485     1DC3  085F               	movf	(sprintf@fmt+1)^(0+128),w
  3486     1DC4  0020               	movlb	0	; select bank0
  3487     1DC5  00EE               	movwf	vfprintf@fmt+1
  3488     1DC6  0021               	movlb	1	; select bank1
  3489     1DC7  085E               	movf	sprintf@fmt^(0+128),w
  3490     1DC8  0020               	movlb	0	; select bank0
  3491     1DC9  00ED               	movwf	vfprintf@fmt
  3492     1DCA  3040               	movlw	(low (sprintf@ap| (0+256)))& (0+255)
  3493     1DCB  00EF               	movwf	vfprintf@ap
  3494     1DCC  3041               	movlw	(low (sprintf@f| (0+256)))& (0+255)
  3495     1DCD  319D  2553         	fcall	_vfprintf
  3496     1DCF  0022               	movlb	2	; select bank2
  3497     1DD0  0843               	movf	(sprintf@f^(0+256)+2),w
  3498     1DD1  073F               	addwf	sprintf@s^(0+256),w
  3499     1DD2  0021               	movlb	1	; select bank1
  3500     1DD3  00EC               	movwf	??_sprintf^(0+128)
  3501     1DD4  086C               	movf	??_sprintf^(0+128),w
  3502     1DD5  0086               	movwf	6
  3503     1DD6  3001               	movlw	1	; select bank2/3
  3504     1DD7  0087               	movwf	7
  3505     1DD8  0181               	clrf	1
  3506     1DD9  0008               	return
  3507     1DDA                     __end_of_sprintf:
  3508                           
  3509                           	psect	text2
  3510     1D53                     __ptext2:	
  3511 ;; *************** function _vfprintf *****************
  3512 ;; Defined at:
  3513 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  fp              1    wreg     PTR struct _IO_FILE
  3516 ;;		 -> sprintf@f(11), 
  3517 ;;  fmt             2   77[BANK0 ] PTR const unsigned char 
  3518 ;;		 -> STR_5(7), STR_3(7), STR_2(15), 
  3519 ;;  ap              1   79[BANK0 ] PTR PTR void 
  3520 ;;		 -> sprintf@ap(1), 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  fp              1   59[BANK1 ] PTR struct _IO_FILE
  3523 ;;		 -> sprintf@f(11), 
  3524 ;;  cfmt            2   60[BANK1 ] PTR unsigned char 
  3525 ;;		 -> STR_5(7), STR_3(7), STR_2(15), 
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  2   77[BANK0 ] int 
  3528 ;; Registers used:
  3529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3535 ;;      Params:         0       3       0       0       0       0       0       0
  3536 ;;      Locals:         0       0       3       0       0       0       0       0
  3537 ;;      Temps:          0       0       1       0       0       0       0       0
  3538 ;;      Totals:         0       3       4       0       0       0       0       0
  3539 ;;Total ram usage:        7 bytes
  3540 ;; Hardware stack levels used: 1
  3541 ;; Hardware stack levels required when called: 10
  3542 ;; This function calls:
  3543 ;;		_vfpfcnvrt
  3544 ;; This function is called by:
  3545 ;;		_sprintf
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549     1D53                     _vfprintf:	
  3550                           ;psect for function _vfprintf
  3551                           
  3552                           
  3553                           ;incstack = 0
  3554                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3555                           ;vfprintf@fp stored from wreg
  3556     1D53  0021               	movlb	1	; select bank1
  3557     1D54  00DB               	movwf	vfprintf@fp^(0+128)
  3558                           
  3559                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  3560     1D55  0020               	movlb	0	; select bank0
  3561     1D56  086E               	movf	vfprintf@fmt+1,w
  3562     1D57  0021               	movlb	1	; select bank1
  3563     1D58  00DD               	movwf	(vfprintf@cfmt+1)^(0+128)
  3564     1D59  0020               	movlb	0	; select bank0
  3565     1D5A  086D               	movf	vfprintf@fmt,w
  3566     1D5B  0021               	movlb	1	; select bank1
  3567     1D5C  00DC               	movwf	vfprintf@cfmt^(0+128)
  3568     1D5D                     l4677:	
  3569                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3570                           
  3571                           
  3572                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3573     1D5D  0021               	movlb	1	; select bank1
  3574     1D5E  085C               	movf	vfprintf@cfmt^(0+128),w
  3575     1D5F  0084               	movwf	4
  3576     1D60  085D               	movf	(vfprintf@cfmt+1)^(0+128),w
  3577     1D61  0085               	movwf	5
  3578     1D62  0012               	moviw fsr0++
  3579     1D63  1903               	btfsc	3,2
  3580     1D64  2D70               	goto	l4679
  3581                           
  3582                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  3583     1D65  30DC               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  3584     1D66  0020               	movlb	0	; select bank0
  3585     1D67  00EB               	movwf	vfpfcnvrt@fmt
  3586     1D68  086F               	movf	vfprintf@ap,w
  3587     1D69  00EC               	movwf	vfpfcnvrt@ap
  3588     1D6A  0021               	movlb	1	; select bank1
  3589     1D6B  085B               	movf	vfprintf@fp^(0+128),w
  3590     1D6C  3194  24B9  319D   	fcall	_vfpfcnvrt
  3591     1D6F  2D5D               	goto	l4677
  3592     1D70                     l4679:
  3593                           
  3594                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  3595     1D70  0020               	movlb	0	; select bank0
  3596     1D71  01ED               	clrf	?_vfprintf
  3597     1D72  01EE               	clrf	?_vfprintf+1
  3598     1D73  0008               	return
  3599     1D74                     __end_of_vfprintf:
  3600                           
  3601                           	psect	text3
  3602     14B9                     __ptext3:	
  3603 ;; *************** function _vfpfcnvrt *****************
  3604 ;; Defined at:
  3605 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  fp              1    wreg     PTR struct _IO_FILE
  3608 ;;		 -> sprintf@f(11), 
  3609 ;;  fmt             1   75[BANK0 ] PTR PTR unsigned char 
  3610 ;;		 -> vfprintf@cfmt(2), 
  3611 ;;  ap              1   76[BANK0 ] PTR PTR void 
  3612 ;;		 -> sprintf@ap(1), 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  fp              1   55[BANK1 ] PTR struct _IO_FILE
  3615 ;;		 -> sprintf@f(11), 
  3616 ;;  convarg         4   50[BANK1 ] struct .
  3617 ;;  cp              2   56[BANK1 ] PTR unsigned char 
  3618 ;;		 -> STR_5(7), STR_3(7), STR_2(15), 
  3619 ;;  c               1   54[BANK1 ] unsigned char 
  3620 ;;  done            1   49[BANK1 ] _Bool 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      void 
  3623 ;; Registers used:
  3624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3630 ;;      Params:         0       2       0       0       0       0       0       0
  3631 ;;      Locals:         0       0       9       0       0       0       0       0
  3632 ;;      Temps:          0       0       4       0       0       0       0       0
  3633 ;;      Totals:         0       2      13       0       0       0       0       0
  3634 ;;Total ram usage:       15 bytes
  3635 ;; Hardware stack levels used: 1
  3636 ;; Hardware stack levels required when called: 9
  3637 ;; This function calls:
  3638 ;;		_dtoa
  3639 ;;		_efgtoa
  3640 ;;		_fputc
  3641 ;;		_read_prec_or_width
  3642 ;; This function is called by:
  3643 ;;		_vfprintf
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647     14B9                     _vfpfcnvrt:	
  3648                           ;psect for function _vfpfcnvrt
  3649                           
  3650                           
  3651                           ;incstack = 0
  3652                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3653                           ;vfpfcnvrt@fp stored from wreg
  3654     14B9  0021               	movlb	1	; select bank1
  3655     14BA  00D7               	movwf	vfpfcnvrt@fp^(0+128)
  3656                           
  3657                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  3658     14BB  0020               	movlb	0	; select bank0
  3659     14BC  086B               	movf	vfpfcnvrt@fmt,w
  3660     14BD  0086               	movwf	6
  3661     14BE  0187               	clrf	7
  3662     14BF  3F40               	moviw [0]fsr1
  3663     14C0  0021               	movlb	1	; select bank1
  3664     14C1  00CD               	movwf	??_vfpfcnvrt^(0+128)
  3665     14C2  3F41               	moviw [1]fsr1
  3666     14C3  00CE               	movwf	(??_vfpfcnvrt^(0+128)+1)
  3667     14C4  084D               	movf	??_vfpfcnvrt^(0+128),w
  3668     14C5  0084               	movwf	4
  3669     14C6  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  3670     14C7  0085               	movwf	5
  3671     14C8  0012               	moviw fsr0++
  3672     14C9  3A25               	xorlw	37
  3673     14CA  1D03               	btfss	3,2
  3674     14CB  2E2F               	goto	l4613
  3675                           
  3676                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  3677     14CC  0020               	movlb	0	; select bank0
  3678     14CD  086B               	movf	vfpfcnvrt@fmt,w
  3679     14CE  0086               	movwf	6
  3680     14CF  0187               	clrf	7
  3681     14D0  3001               	movlw	1
  3682     14D1  0781               	addwf	1,f
  3683     14D2  3141               	addfsr 1,1
  3684     14D3  1803               	skipnc
  3685     14D4  0A81               	incf	1,f
  3686                           
  3687                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  3688     14D5  0022               	movlb	2	; select bank2
  3689     14D6  01AC               	clrf	_width^(0+256)
  3690     14D7  01AD               	clrf	(_width+1)^(0+256)
  3691     14D8  1003               	clrc
  3692     14D9  3000               	movlw	0
  3693     14DA  1803               	btfsc	3,0
  3694     14DB  3001               	movlw	1
  3695     14DC  00FC               	movwf	_flags
  3696                           
  3697                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  3698     14DD  30FF               	movlw	255
  3699     14DE  00AE               	movwf	_prec^(0+256)
  3700     14DF  30FF               	movlw	255
  3701     14E0  00AF               	movwf	(_prec^(0+256)+1)
  3702                           
  3703                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  3704     14E1  0021               	movlb	1	; select bank1
  3705     14E2  01D1               	clrf	vfpfcnvrt@done^(0+128)
  3706                           
  3707                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  3708     14E3  2CF1               	goto	l4553
  3709     14E4                     l1156:	
  3710                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1219:            
      +                               case '0' :
  3711                           
  3712                           
  3713                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  3714     14E4  14FC               	bsf	_flags,1
  3715                           
  3716                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  3717     14E5  0020               	movlb	0	; select bank0
  3718     14E6  086B               	movf	vfpfcnvrt@fmt,w
  3719     14E7  0086               	movwf	6
  3720     14E8  0187               	clrf	7
  3721     14E9  3001               	movlw	1
  3722     14EA  0781               	addwf	1,f
  3723     14EB  3141               	addfsr 1,1
  3724     14EC  1803               	skipnc
  3725     14ED  0A81               	incf	1,f
  3726                           
  3727                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  3728     14EE  2CF1               	goto	l4553
  3729     14EF                     l1158:	
  3730                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1242:            
      +                               default:
  3731                           
  3732                           
  3733                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  3734     14EF  01D1               	clrf	vfpfcnvrt@done^(0+128)
  3735     14F0  0AD1               	incf	vfpfcnvrt@done^(0+128),f
  3736     14F1                     l4553:	
  3737                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  3738                           
  3739                           
  3740                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  3741     14F1  0021               	movlb	1	; select bank1
  3742     14F2  0851               	movf	vfpfcnvrt@done^(0+128),w
  3743     14F3  1D03               	btfss	3,2
  3744     14F4  2D10               	goto	l4555
  3745     14F5  0020               	movlb	0	; select bank0
  3746     14F6  086B               	movf	vfpfcnvrt@fmt,w
  3747     14F7  0086               	movwf	6
  3748     14F8  0187               	clrf	7
  3749     14F9  3F40               	moviw [0]fsr1
  3750     14FA  0021               	movlb	1	; select bank1
  3751     14FB  00CD               	movwf	??_vfpfcnvrt^(0+128)
  3752     14FC  3F41               	moviw [1]fsr1
  3753     14FD  00CE               	movwf	(??_vfpfcnvrt^(0+128)+1)
  3754     14FE  084D               	movf	??_vfpfcnvrt^(0+128),w
  3755     14FF  0084               	movwf	4
  3756     1500  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  3757     1501  0085               	movwf	5
  3758     1502  0800               	movf	0,w	;code access
  3759     1503  00CF               	movwf	(??_vfpfcnvrt+2)^(0+128)
  3760     1504  01D0               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
  3761                           
  3762                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3763                           ; Switch size 1, requested type "simple"
  3764                           ; Number of cases is 1, Range of values is 0 to 0
  3765                           ; switch strategies available:
  3766                           ; Name         Instructions Cycles
  3767                           ; simple_byte            4     3 (average)
  3768                           ; direct_byte            8     6 (fixed)
  3769                           ; jumptable            260     6 (fixed)
  3770                           ;	Chosen strategy is simple_byte
  3771     1505  0850               	movf	(??_vfpfcnvrt+3)^(0+128),w
  3772     1506  3A00               	xorlw	0	; case 0
  3773     1507  1903               	skipnz
  3774     1508  2D0A               	goto	l5533
  3775     1509  2CEF               	goto	l1158
  3776     150A                     l5533:
  3777                           
  3778                           ; Switch size 1, requested type "simple"
  3779                           ; Number of cases is 1, Range of values is 48 to 48
  3780                           ; switch strategies available:
  3781                           ; Name         Instructions Cycles
  3782                           ; simple_byte            4     3 (average)
  3783                           ; direct_byte           11     9 (fixed)
  3784                           ; jumptable            263     9 (fixed)
  3785                           ;	Chosen strategy is simple_byte
  3786     150A  084F               	movf	(??_vfpfcnvrt+2)^(0+128),w
  3787     150B  3A30               	xorlw	48	; case 48
  3788     150C  1903               	skipnz
  3789     150D  2CE4               	goto	l1156
  3790     150E  2CEF               	goto	l1158
  3791     150F  2CF1               	goto	l4553
  3792     1510                     l4555:
  3793                           
  3794                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1265:         if 
      +                          ((*fmt)[0] == '.') {
  3795     1510  0020               	movlb	0	; select bank0
  3796     1511  086B               	movf	vfpfcnvrt@fmt,w
  3797     1512  0086               	movwf	6
  3798     1513  0187               	clrf	7
  3799     1514  3F40               	moviw [0]fsr1
  3800     1515  0021               	movlb	1	; select bank1
  3801     1516  00CD               	movwf	??_vfpfcnvrt^(0+128)
  3802     1517  3F41               	moviw [1]fsr1
  3803     1518  00CE               	movwf	(??_vfpfcnvrt^(0+128)+1)
  3804     1519  084D               	movf	??_vfpfcnvrt^(0+128),w
  3805     151A  0084               	movwf	4
  3806     151B  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  3807     151C  0085               	movwf	5
  3808     151D  0012               	moviw fsr0++
  3809     151E  3A2E               	xorlw	46
  3810     151F  1D03               	btfss	3,2
  3811     1520  2D38               	goto	l4561
  3812                           
  3813                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1266:            
      +                           ++*fmt;
  3814     1521  0020               	movlb	0	; select bank0
  3815     1522  086B               	movf	vfpfcnvrt@fmt,w
  3816     1523  0086               	movwf	6
  3817     1524  0187               	clrf	7
  3818     1525  3001               	movlw	1
  3819     1526  0781               	addwf	1,f
  3820     1527  3141               	addfsr 1,1
  3821     1528  1803               	skipnc
  3822     1529  0A81               	incf	1,f
  3823                           
  3824                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1267:    prec = r
      +                          ead_prec_or_width(fmt, ap);
  3825     152A  086C               	movf	vfpfcnvrt@ap,w
  3826     152B  00A6               	movwf	read_prec_or_width@ap
  3827     152C  086B               	movf	vfpfcnvrt@fmt,w
  3828     152D  3190  2004  3194   	fcall	_read_prec_or_width
  3829     1530  0020               	movlb	0	; select bank0
  3830     1531  0827               	movf	?_read_prec_or_width+1,w
  3831     1532  0022               	movlb	2	; select bank2
  3832     1533  00AF               	movwf	(_prec+1)^(0+256)
  3833     1534  0020               	movlb	0	; select bank0
  3834     1535  0826               	movf	?_read_prec_or_width,w
  3835     1536  0022               	movlb	2	; select bank2
  3836     1537  00AE               	movwf	_prec^(0+256)
  3837     1538                     l4561:
  3838                           
  3839                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  3840     1538  0020               	movlb	0	; select bank0
  3841     1539  086B               	movf	vfpfcnvrt@fmt,w
  3842     153A  0086               	movwf	6
  3843     153B  0187               	clrf	7
  3844     153C  3F40               	moviw [0]fsr1
  3845     153D  0021               	movlb	1	; select bank1
  3846     153E  00D8               	movwf	vfpfcnvrt@cp^(0+128)
  3847     153F  3F41               	moviw [1]fsr1
  3848     1540  00D9               	movwf	(vfpfcnvrt@cp+1)^(0+128)
  3849                           
  3850                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  3851     1541  0858               	movf	vfpfcnvrt@cp^(0+128),w
  3852     1542  0084               	movwf	4
  3853     1543  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  3854     1544  0085               	movwf	5
  3855     1545  0012               	moviw fsr0++
  3856     1546  3A64               	xorlw	100
  3857     1547  1903               	btfsc	3,2
  3858     1548  2D51               	goto	l4567
  3859     1549  0858               	movf	vfpfcnvrt@cp^(0+128),w
  3860     154A  0084               	movwf	4
  3861     154B  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  3862     154C  0085               	movwf	5
  3863     154D  0012               	moviw fsr0++
  3864     154E  3A69               	xorlw	105
  3865     154F  1D03               	btfss	3,2
  3866     1550  2D7B               	goto	l4575
  3867     1551                     l4567:
  3868                           
  3869                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3870     1551  0020               	movlb	0	; select bank0
  3871     1552  086C               	movf	vfpfcnvrt@ap,w
  3872     1553  0086               	movwf	6
  3873     1554  3001               	movlw	1	; select bank2/3
  3874     1555  0087               	movwf	7
  3875     1556  0801               	movf	1,w
  3876     1557  0084               	movwf	4
  3877     1558  0185               	clrf	5
  3878     1559  3002               	movlw	2
  3879     155A  0781               	addwf	1,f
  3880     155B  3F00               	moviw [0]fsr0
  3881     155C  0021               	movlb	1	; select bank1
  3882     155D  00D2               	movwf	vfpfcnvrt@convarg^(0+128)
  3883     155E  3F01               	moviw [1]fsr0
  3884     155F  00D3               	movwf	(vfpfcnvrt@convarg+1)^(0+128)
  3885                           
  3886                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  3887     1560  0858               	movf	vfpfcnvrt@cp^(0+128),w
  3888     1561  3E01               	addlw	1
  3889     1562  00CD               	movwf	??_vfpfcnvrt^(0+128)
  3890     1563  3000               	movlw	0
  3891     1564  3D59               	addwfc	(vfpfcnvrt@cp+1)^(0+128),w
  3892     1565  00CE               	movwf	(??_vfpfcnvrt+1)^(0+128)
  3893     1566  0020               	movlb	0	; select bank0
  3894     1567  086B               	movf	vfpfcnvrt@fmt,w
  3895     1568  0086               	movwf	6
  3896     1569  0187               	clrf	7
  3897     156A  0021               	movlb	1	; select bank1
  3898     156B  084D               	movf	??_vfpfcnvrt^(0+128),w
  3899     156C  3FC0               	movwi [0]fsr1
  3900     156D  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  3901     156E  3FC1               	movwi [1]fsr1
  3902                           
  3903                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  3904     156F  0853               	movf	(vfpfcnvrt@convarg+1)^(0+128),w
  3905     1570  0020               	movlb	0	; select bank0
  3906     1571  00B7               	movwf	dtoa@d+1
  3907     1572  0021               	movlb	1	; select bank1
  3908     1573  0852               	movf	vfpfcnvrt@convarg^(0+128),w
  3909     1574  0020               	movlb	0	; select bank0
  3910     1575  00B6               	movwf	dtoa@d
  3911     1576  0021               	movlb	1	; select bank1
  3912     1577  0857               	movf	vfpfcnvrt@fp^(0+128),w
  3913     1578  3192  228C         	fcall	_dtoa
  3914     157A  0008               	return
  3915     157B                     l4575:
  3916                           
  3917                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1689:   cp = *fmt
      +                          ;
  3918     157B  0020               	movlb	0	; select bank0
  3919     157C  086B               	movf	vfpfcnvrt@fmt,w
  3920     157D  0086               	movwf	6
  3921     157E  0187               	clrf	7
  3922     157F  3F40               	moviw [0]fsr1
  3923     1580  0021               	movlb	1	; select bank1
  3924     1581  00D8               	movwf	vfpfcnvrt@cp^(0+128)
  3925     1582  3F41               	moviw [1]fsr1
  3926     1583  00D9               	movwf	(vfpfcnvrt@cp+1)^(0+128)
  3927                           
  3928                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1690:   c = *cp;
  3929     1584  0858               	movf	vfpfcnvrt@cp^(0+128),w
  3930     1585  0084               	movwf	4
  3931     1586  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  3932     1587  0085               	movwf	5
  3933     1588  0800               	movf	0,w	;code access
  3934     1589  00D6               	movwf	vfpfcnvrt@c^(0+128)
  3935                           
  3936                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1691:   switch(c)
      +                           {
  3937     158A  2D95               	goto	l4587
  3938     158B                     l4579:
  3939                           
  3940                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1695:     cp++;
  3941     158B  3001               	movlw	1
  3942     158C  07D8               	addwf	vfpfcnvrt@cp^(0+128),f
  3943     158D  3000               	movlw	0
  3944     158E  3DD9               	addwfc	(vfpfcnvrt@cp+1)^(0+128),f
  3945                           
  3946                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1696:     break;
  3947     158F  2DA8               	goto	l4589
  3948     1590                     l4581:
  3949                           
  3950                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1721:     c = 'l'
      +                          ;
  3951     1590  306C               	movlw	108
  3952     1591  00D6               	movwf	vfpfcnvrt@c^(0+128)
  3953                           
  3954                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1722:     break;
  3955     1592  2DA8               	goto	l4589
  3956     1593                     l4583:
  3957                           
  3958                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1724:     c = 0;
  3959     1593  01D6               	clrf	vfpfcnvrt@c^(0+128)
  3960                           
  3961                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1725:     break;
  3962     1594  2DA8               	goto	l4589
  3963     1595                     l4587:
  3964     1595  0856               	movf	vfpfcnvrt@c^(0+128),w
  3965     1596  00CD               	movwf	??_vfpfcnvrt^(0+128)
  3966     1597  01CE               	clrf	(??_vfpfcnvrt^(0+128)+1)
  3967                           
  3968                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3969                           ; Switch size 1, requested type "simple"
  3970                           ; Number of cases is 1, Range of values is 0 to 0
  3971                           ; switch strategies available:
  3972                           ; Name         Instructions Cycles
  3973                           ; simple_byte            4     3 (average)
  3974                           ; direct_byte            8     6 (fixed)
  3975                           ; jumptable            260     6 (fixed)
  3976                           ;	Chosen strategy is simple_byte
  3977     1598  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  3978     1599  3A00               	xorlw	0	; case 0
  3979     159A  1903               	skipnz
  3980     159B  2D9D               	goto	l5535
  3981     159C  2D93               	goto	l4583
  3982     159D                     l5535:
  3983                           
  3984                           ; Switch size 1, requested type "simple"
  3985                           ; Number of cases is 3, Range of values is 76 to 108
  3986                           ; switch strategies available:
  3987                           ; Name         Instructions Cycles
  3988                           ; simple_byte           10     6 (average)
  3989                           ; direct_byte           75     9 (fixed)
  3990                           ; jumptable            263     9 (fixed)
  3991                           ;	Chosen strategy is simple_byte
  3992     159D  084D               	movf	??_vfpfcnvrt^(0+128),w
  3993     159E  3A4C               	xorlw	76	; case 76
  3994     159F  1903               	skipnz
  3995     15A0  2D8B               	goto	l4579
  3996     15A1  3A2A               	xorlw	42	; case 102
  3997     15A2  1903               	skipnz
  3998     15A3  2D90               	goto	l4581
  3999     15A4  3A0A               	xorlw	10	; case 108
  4000     15A5  1903               	skipnz
  4001     15A6  2D8B               	goto	l4579
  4002     15A7  2D93               	goto	l4583
  4003     15A8                     l4589:
  4004     15A8  0858               	movf	vfpfcnvrt@cp^(0+128),w
  4005     15A9  0084               	movwf	4
  4006     15AA  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  4007     15AB  0085               	movwf	5
  4008     15AC  0012               	moviw fsr0++
  4009     15AD  3A66               	xorlw	102
  4010     15AE  1903               	btfsc	3,2
  4011     15AF  2DD8               	goto	l4597
  4012     15B0  2E25               	goto	l4609
  4013     15B1                     l4591:
  4014                           
  4015                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1756:      convar
      +                          g.f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  4016     15B1  0020               	movlb	0	; select bank0
  4017     15B2  086C               	movf	vfpfcnvrt@ap,w
  4018     15B3  0086               	movwf	6
  4019     15B4  3001               	movlw	1	; select bank2/3
  4020     15B5  0087               	movwf	7
  4021     15B6  0801               	movf	1,w
  4022     15B7  0084               	movwf	4
  4023     15B8  0185               	clrf	5
  4024     15B9  3004               	movlw	4
  4025     15BA  0781               	addwf	1,f
  4026     15BB  3F00               	moviw [0]fsr0
  4027     15BC  0021               	movlb	1	; select bank1
  4028     15BD  00D2               	movwf	vfpfcnvrt@convarg^(0+128)
  4029     15BE  3F01               	moviw [1]fsr0
  4030     15BF  00D3               	movwf	(vfpfcnvrt@convarg+1)^(0+128)
  4031     15C0  3F02               	moviw [2]fsr0
  4032     15C1  00D4               	movwf	(vfpfcnvrt@convarg+2)^(0+128)
  4033     15C2  3F03               	moviw [3]fsr0
  4034     15C3  2DD6               	goto	L1
  4035     15C4                     l4593:	
  4036                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1757:      break;
  4037                           
  4038                           
  4039                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1759:      convar
      +                          g.f = (long double)(*(long double *)__va_arg(*(long double **)ap, (long double)0));
  4040     15C4  0020               	movlb	0	; select bank0
  4041     15C5  086C               	movf	vfpfcnvrt@ap,w
  4042     15C6  0086               	movwf	6
  4043     15C7  3001               	movlw	1	; select bank2/3
  4044     15C8  0087               	movwf	7
  4045     15C9  0801               	movf	1,w
  4046     15CA  0084               	movwf	4
  4047     15CB  0185               	clrf	5
  4048     15CC  3004               	movlw	4
  4049     15CD  0781               	addwf	1,f
  4050     15CE  3F00               	moviw [0]fsr0
  4051     15CF  0021               	movlb	1	; select bank1
  4052     15D0  00D2               	movwf	vfpfcnvrt@convarg^(0+128)
  4053     15D1  3F01               	moviw [1]fsr0
  4054     15D2  00D3               	movwf	(vfpfcnvrt@convarg+1)^(0+128)
  4055     15D3  3F02               	moviw [2]fsr0
  4056     15D4  00D4               	movwf	(vfpfcnvrt@convarg+2)^(0+128)
  4057     15D5  3F03               	moviw [3]fsr0
  4058     15D6                     L1:
  4059     15D6  00D5               	movwf	(vfpfcnvrt@convarg+3)^(0+128)
  4060                           
  4061                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1760:      break;
  4062     15D7  2DE8               	goto	l4599
  4063     15D8                     l4597:
  4064     15D8  0856               	movf	vfpfcnvrt@c^(0+128),w
  4065     15D9  00CD               	movwf	??_vfpfcnvrt^(0+128)
  4066     15DA  01CE               	clrf	(??_vfpfcnvrt^(0+128)+1)
  4067                           
  4068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4069                           ; Switch size 1, requested type "simple"
  4070                           ; Number of cases is 1, Range of values is 0 to 0
  4071                           ; switch strategies available:
  4072                           ; Name         Instructions Cycles
  4073                           ; simple_byte            4     3 (average)
  4074                           ; direct_byte            8     6 (fixed)
  4075                           ; jumptable            260     6 (fixed)
  4076                           ;	Chosen strategy is simple_byte
  4077     15DB  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4078     15DC  3A00               	xorlw	0	; case 0
  4079     15DD  1903               	skipnz
  4080     15DE  2DE0               	goto	l5537
  4081     15DF  2DE8               	goto	l4599
  4082     15E0                     l5537:
  4083                           
  4084                           ; Switch size 1, requested type "simple"
  4085                           ; Number of cases is 2, Range of values is 76 to 108
  4086                           ; switch strategies available:
  4087                           ; Name         Instructions Cycles
  4088                           ; simple_byte            7     4 (average)
  4089                           ; direct_byte           75     9 (fixed)
  4090                           ; jumptable            263     9 (fixed)
  4091                           ;	Chosen strategy is simple_byte
  4092     15E0  084D               	movf	??_vfpfcnvrt^(0+128),w
  4093     15E1  3A4C               	xorlw	76	; case 76
  4094     15E2  1903               	skipnz
  4095     15E3  2DC4               	goto	l4593
  4096     15E4  3A20               	xorlw	32	; case 108
  4097     15E5  1903               	skipnz
  4098     15E6  2DB1               	goto	l4591
  4099     15E7  2DE8               	goto	l4599
  4100     15E8                     l4599:
  4101                           
  4102                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1762:    *fmt = c
      +                          p+1;
  4103     15E8  0858               	movf	vfpfcnvrt@cp^(0+128),w
  4104     15E9  3E01               	addlw	1
  4105     15EA  00CD               	movwf	??_vfpfcnvrt^(0+128)
  4106     15EB  3000               	movlw	0
  4107     15EC  3D59               	addwfc	(vfpfcnvrt@cp+1)^(0+128),w
  4108     15ED  00CE               	movwf	(??_vfpfcnvrt+1)^(0+128)
  4109     15EE  0020               	movlb	0	; select bank0
  4110     15EF  086B               	movf	vfpfcnvrt@fmt,w
  4111     15F0  0086               	movwf	6
  4112     15F1  0187               	clrf	7
  4113     15F2  0021               	movlb	1	; select bank1
  4114     15F3  084D               	movf	??_vfpfcnvrt^(0+128),w
  4115     15F4  3FC0               	movwi [0]fsr1
  4116     15F5  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4117     15F6  3FC1               	movwi [1]fsr1
  4118                           
  4119                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1763:    switch (
      +                          *cp) {
  4120     15F7  2E14               	goto	l4607
  4121     15F8                     l4601:
  4122                           
  4123                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1790:      return
      +                           (void) efgtoa(fp, convarg.f, *cp);;	Return value of _vfpfcnvrt is never used
  4124     15F8  0855               	movf	(vfpfcnvrt@convarg+3)^(0+128),w
  4125     15F9  0020               	movlb	0	; select bank0
  4126     15FA  00E5               	movwf	efgtoa@f+3
  4127     15FB  0021               	movlb	1	; select bank1
  4128     15FC  0854               	movf	(vfpfcnvrt@convarg+2)^(0+128),w
  4129     15FD  0020               	movlb	0	; select bank0
  4130     15FE  00E4               	movwf	efgtoa@f+2
  4131     15FF  0021               	movlb	1	; select bank1
  4132     1600  0853               	movf	(vfpfcnvrt@convarg+1)^(0+128),w
  4133     1601  0020               	movlb	0	; select bank0
  4134     1602  00E3               	movwf	efgtoa@f+1
  4135     1603  0021               	movlb	1	; select bank1
  4136     1604  0852               	movf	vfpfcnvrt@convarg^(0+128),w
  4137     1605  0020               	movlb	0	; select bank0
  4138     1606  00E2               	movwf	efgtoa@f
  4139     1607  0021               	movlb	1	; select bank1
  4140     1608  0858               	movf	vfpfcnvrt@cp^(0+128),w
  4141     1609  0084               	movwf	4
  4142     160A  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  4143     160B  0085               	movwf	5
  4144     160C  0800               	movf	0,w	;code access
  4145     160D  0020               	movlb	0	; select bank0
  4146     160E  00E6               	movwf	efgtoa@c
  4147     160F  0021               	movlb	1	; select bank1
  4148     1610  0857               	movf	vfpfcnvrt@fp^(0+128),w
  4149     1611  3189  216C         	fcall	_efgtoa
  4150     1613  0008               	return
  4151     1614                     l4607:
  4152     1614  0858               	movf	vfpfcnvrt@cp^(0+128),w
  4153     1615  0084               	movwf	4
  4154     1616  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  4155     1617  0085               	movwf	5
  4156     1618  0800               	movf	0,w	;code access
  4157     1619  00CD               	movwf	??_vfpfcnvrt^(0+128)
  4158     161A  01CE               	clrf	(??_vfpfcnvrt^(0+128)+1)
  4159                           
  4160                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4161                           ; Switch size 1, requested type "simple"
  4162                           ; Number of cases is 1, Range of values is 0 to 0
  4163                           ; switch strategies available:
  4164                           ; Name         Instructions Cycles
  4165                           ; simple_byte            4     3 (average)
  4166                           ; direct_byte            8     6 (fixed)
  4167                           ; jumptable            260     6 (fixed)
  4168                           ;	Chosen strategy is simple_byte
  4169     161B  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4170     161C  3A00               	xorlw	0	; case 0
  4171     161D  1903               	skipnz
  4172     161E  2E20               	goto	l5539
  4173     161F  2E25               	goto	l4609
  4174     1620                     l5539:
  4175                           
  4176                           ; Switch size 1, requested type "simple"
  4177                           ; Number of cases is 1, Range of values is 102 to 102
  4178                           ; switch strategies available:
  4179                           ; Name         Instructions Cycles
  4180                           ; simple_byte            4     3 (average)
  4181                           ; direct_byte           11     9 (fixed)
  4182                           ; jumptable            263     9 (fixed)
  4183                           ;	Chosen strategy is simple_byte
  4184     1620  084D               	movf	??_vfpfcnvrt^(0+128),w
  4185     1621  3A66               	xorlw	102	; case 102
  4186     1622  1903               	skipnz
  4187     1623  2DF8               	goto	l4601
  4188     1624  2E25               	goto	l4609
  4189     1625                     l4609:
  4190                           
  4191                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  4192     1625  0020               	movlb	0	; select bank0
  4193     1626  086B               	movf	vfpfcnvrt@fmt,w
  4194     1627  0086               	movwf	6
  4195     1628  0187               	clrf	7
  4196     1629  3001               	movlw	1
  4197     162A  0781               	addwf	1,f
  4198     162B  3141               	addfsr 1,1
  4199     162C  1803               	skipnc
  4200     162D  0A81               	incf	1,f
  4201     162E  0008               	return
  4202     162F                     l4613:
  4203                           
  4204                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  4205     162F  0020               	movlb	0	; select bank0
  4206     1630  086B               	movf	vfpfcnvrt@fmt,w
  4207     1631  0086               	movwf	6
  4208     1632  0187               	clrf	7
  4209     1633  3F40               	moviw [0]fsr1
  4210     1634  0021               	movlb	1	; select bank1
  4211     1635  00CD               	movwf	??_vfpfcnvrt^(0+128)
  4212     1636  3F41               	moviw [1]fsr1
  4213     1637  00CE               	movwf	(??_vfpfcnvrt^(0+128)+1)
  4214     1638  084D               	movf	??_vfpfcnvrt^(0+128),w
  4215     1639  0084               	movwf	4
  4216     163A  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4217     163B  0085               	movwf	5
  4218     163C  0800               	movf	0,w	;code access
  4219     163D  00CF               	movwf	(??_vfpfcnvrt+2)^(0+128)
  4220     163E  01D0               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
  4221     163F  084F               	movf	(??_vfpfcnvrt+2)^(0+128),w
  4222     1640  0020               	movlb	0	; select bank0
  4223     1641  00A0               	movwf	fputc@c
  4224     1642  0021               	movlb	1	; select bank1
  4225     1643  0850               	movf	(??_vfpfcnvrt+3)^(0+128),w
  4226     1644  0020               	movlb	0	; select bank0
  4227     1645  00A1               	movwf	fputc@c+1
  4228     1646  0021               	movlb	1	; select bank1
  4229     1647  0857               	movf	vfpfcnvrt@fp^(0+128),w
  4230     1648  0020               	movlb	0	; select bank0
  4231     1649  00A2               	movwf	fputc@fp
  4232     164A  319F  270F  3194   	fcall	_fputc
  4233     164D  2E25               	goto	l4609
  4234     164E                     __end_of_vfpfcnvrt:
  4235                           
  4236                           	psect	text4
  4237     1004                     __ptext4:	
  4238 ;; *************** function _read_prec_or_width *****************
  4239 ;; Defined at:
  4240 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;  fmt             1    wreg     PTR PTR const unsigned c
  4243 ;;		 -> vfprintf@cfmt(2), 
  4244 ;;  ap              1    6[BANK0 ] PTR PTR void [1]
  4245 ;;		 -> sprintf@ap(1), 
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;  fmt             1   14[BANK0 ] PTR PTR const unsigned c
  4248 ;;		 -> vfprintf@cfmt(2), 
  4249 ;;  c               1   11[BANK0 ] unsigned char 
  4250 ;;  n               2   12[BANK0 ] int 
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  2    6[BANK0 ] int 
  4253 ;; Registers used:
  4254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4260 ;;      Params:         0       2       0       0       0       0       0       0
  4261 ;;      Locals:         0       4       0       0       0       0       0       0
  4262 ;;      Temps:          0       3       0       0       0       0       0       0
  4263 ;;      Totals:         0       9       0       0       0       0       0       0
  4264 ;;Total ram usage:        9 bytes
  4265 ;; Hardware stack levels used: 1
  4266 ;; Hardware stack levels required when called: 5
  4267 ;; This function calls:
  4268 ;;		___wmul
  4269 ;; This function is called by:
  4270 ;;		_vfpfcnvrt
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274     1004                     _read_prec_or_width:	
  4275                           ;psect for function _read_prec_or_width
  4276                           
  4277                           
  4278                           ;incstack = 0
  4279                           ; Regs used in _read_prec_or_width: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4280                           ;read_prec_or_width@fmt stored from wreg
  4281     1004  0020               	movlb	0	; select bank0
  4282     1005  00AE               	movwf	read_prec_or_width@fmt
  4283                           
  4284                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  4285     1006  01AC               	clrf	read_prec_or_width@n
  4286     1007  01AD               	clrf	read_prec_or_width@n+1
  4287                           
  4288                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  4289     1008  082E               	movf	read_prec_or_width@fmt,w
  4290     1009  0086               	movwf	6
  4291     100A  0187               	clrf	7
  4292     100B  3F40               	moviw [0]fsr1
  4293     100C  00A8               	movwf	??_read_prec_or_width
  4294     100D  3F41               	moviw [1]fsr1
  4295     100E  00A9               	movwf	??_read_prec_or_width+1
  4296     100F  0828               	movf	??_read_prec_or_width,w
  4297     1010  0084               	movwf	4
  4298     1011  0829               	movf	??_read_prec_or_width+1,w
  4299     1012  0085               	movwf	5
  4300     1013  0012               	moviw fsr0++
  4301     1014  3A2A               	xorlw	42
  4302     1015  1D03               	btfss	3,2
  4303     1016  284A               	goto	l4521
  4304                           
  4305                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  4306     1017  082E               	movf	read_prec_or_width@fmt,w
  4307     1018  0086               	movwf	6
  4308     1019  0187               	clrf	7
  4309     101A  3001               	movlw	1
  4310     101B  0781               	addwf	1,f
  4311     101C  3141               	addfsr 1,1
  4312     101D  1803               	skipnc
  4313     101E  0A81               	incf	1,f
  4314                           
  4315                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  4316     101F  0826               	movf	read_prec_or_width@ap,w
  4317     1020  0086               	movwf	6
  4318     1021  3001               	movlw	1	; select bank2/3
  4319     1022  0087               	movwf	7
  4320     1023  0801               	movf	1,w
  4321     1024  0084               	movwf	4
  4322     1025  0185               	clrf	5
  4323     1026  3002               	movlw	2
  4324     1027  0781               	addwf	1,f
  4325     1028  3F00               	moviw [0]fsr0
  4326     1029  00AC               	movwf	read_prec_or_width@n
  4327     102A  3F01               	moviw [1]fsr0
  4328     102B  00AD               	movwf	read_prec_or_width@n+1
  4329                           
  4330                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  4331     102C  285C               	goto	l4523
  4332     102D                     l4517:
  4333                           
  4334                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  4335     102D  082B               	movf	read_prec_or_width@c,w
  4336     102E  00A8               	movwf	??_read_prec_or_width
  4337     102F  01A9               	clrf	??_read_prec_or_width+1
  4338     1030  082D               	movf	read_prec_or_width@n+1,w
  4339     1031  00A1               	movwf	___wmul@multiplier+1
  4340     1032  082C               	movf	read_prec_or_width@n,w
  4341     1033  00A0               	movwf	___wmul@multiplier
  4342     1034  300A               	movlw	10
  4343     1035  00A2               	movwf	___wmul@multiplicand
  4344     1036  3000               	movlw	0
  4345     1037  00A3               	movwf	___wmul@multiplicand+1
  4346     1038  319C  24F8  3190   	fcall	___wmul
  4347     103B  0020               	movlb	0	; select bank0
  4348     103C  0828               	movf	??_read_prec_or_width,w
  4349     103D  0720               	addwf	?___wmul,w
  4350     103E  00AC               	movwf	read_prec_or_width@n
  4351     103F  0829               	movf	??_read_prec_or_width+1,w
  4352     1040  3D21               	addwfc	?___wmul+1,w
  4353     1041  00AD               	movwf	read_prec_or_width@n+1
  4354                           
  4355                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  4356     1042  082E               	movf	read_prec_or_width@fmt,w
  4357     1043  0086               	movwf	6
  4358     1044  0187               	clrf	7
  4359     1045  3001               	movlw	1
  4360     1046  0781               	addwf	1,f
  4361     1047  3141               	addfsr 1,1
  4362     1048  1803               	skipnc
  4363     1049  0A81               	incf	1,f
  4364     104A                     l4521:
  4365                           
  4366                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  4367     104A  082E               	movf	read_prec_or_width@fmt,w
  4368     104B  0086               	movwf	6
  4369     104C  0187               	clrf	7
  4370     104D  3F40               	moviw [0]fsr1
  4371     104E  00A8               	movwf	??_read_prec_or_width
  4372     104F  3F41               	moviw [1]fsr1
  4373     1050  00A9               	movwf	??_read_prec_or_width+1
  4374     1051  0828               	movf	??_read_prec_or_width,w
  4375     1052  0084               	movwf	4
  4376     1053  0829               	movf	??_read_prec_or_width+1,w
  4377     1054  0085               	movwf	5
  4378     1055  0800               	movf	0,w	;code access
  4379     1056  3ED0               	addlw	208
  4380     1057  00AB               	movwf	read_prec_or_width@c
  4381     1058  300A               	movlw	10
  4382     1059  022B               	subwf	read_prec_or_width@c,w
  4383     105A  1C03               	skipc
  4384     105B  282D               	goto	l4517
  4385     105C                     l4523:
  4386                           
  4387                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  4388     105C  082D               	movf	read_prec_or_width@n+1,w
  4389     105D  00A7               	movwf	?_read_prec_or_width+1
  4390     105E  082C               	movf	read_prec_or_width@n,w
  4391     105F  00A6               	movwf	?_read_prec_or_width
  4392     1060  0008               	return
  4393     1061                     __end_of_read_prec_or_width:
  4394                           
  4395                           	psect	text5
  4396     1CF8                     __ptext5:	
  4397 ;; *************** function ___wmul *****************
  4398 ;; Defined at:
  4399 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4402 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  product         2    4[BANK0 ] unsigned int 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  2    0[BANK0 ] unsigned int 
  4407 ;; Registers used:
  4408 ;;		wreg, status,2, status,0
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4414 ;;      Params:         0       4       0       0       0       0       0       0
  4415 ;;      Locals:         0       2       0       0       0       0       0       0
  4416 ;;      Temps:          0       0       0       0       0       0       0       0
  4417 ;;      Totals:         0       6       0       0       0       0       0       0
  4418 ;;Total ram usage:        6 bytes
  4419 ;; Hardware stack levels used: 1
  4420 ;; Hardware stack levels required when called: 4
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_main
  4425 ;;		_read_prec_or_width
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429     1CF8                     ___wmul:	
  4430                           ;psect for function ___wmul
  4431                           
  4432                           
  4433                           ;incstack = 0
  4434                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4435     1CF8  0020               	movlb	0	; select bank0
  4436     1CF9  01A4               	clrf	___wmul@product
  4437     1CFA  01A5               	clrf	___wmul@product+1
  4438     1CFB                     l3675:
  4439     1CFB  1C20               	btfss	___wmul@multiplier,0
  4440     1CFC  2D01               	goto	l566
  4441     1CFD  0822               	movf	___wmul@multiplicand,w
  4442     1CFE  07A4               	addwf	___wmul@product,f
  4443     1CFF  0823               	movf	___wmul@multiplicand+1,w
  4444     1D00  3DA5               	addwfc	___wmul@product+1,f
  4445     1D01                     l566:
  4446     1D01  3001               	movlw	1
  4447     1D02                     u3825:
  4448     1D02  35A2               	lslf	___wmul@multiplicand,f
  4449     1D03  0DA3               	rlf	___wmul@multiplicand+1,f
  4450     1D04  0B89               	decfsz	9,f
  4451     1D05  2D02               	goto	u3825
  4452     1D06  3001               	movlw	1
  4453     1D07                     u3835:
  4454     1D07  36A1               	lsrf	___wmul@multiplier+1,f
  4455     1D08  0CA0               	rrf	___wmul@multiplier,f
  4456     1D09  0B89               	decfsz	9,f
  4457     1D0A  2D07               	goto	u3835
  4458     1D0B  0820               	movf	___wmul@multiplier,w
  4459     1D0C  0421               	iorwf	___wmul@multiplier+1,w
  4460     1D0D  1D03               	btfss	3,2
  4461     1D0E  2CFB               	goto	l3675
  4462     1D0F  0825               	movf	___wmul@product+1,w
  4463     1D10  00A1               	movwf	?___wmul+1
  4464     1D11  0824               	movf	___wmul@product,w
  4465     1D12  00A0               	movwf	?___wmul
  4466     1D13  0008               	return
  4467     1D14                     __end_of___wmul:
  4468                           
  4469                           	psect	text6
  4470     096C                     __ptext6:	
  4471 ;; *************** function _efgtoa *****************
  4472 ;; Defined at:
  4473 ;;		line 587 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;  fp              1    wreg     PTR struct _IO_FILE
  4476 ;;		 -> sprintf@f(11), 
  4477 ;;  f               4   66[BANK0 ] PTR struct _IO_FILE
  4478 ;;  c               1   70[BANK0 ] unsigned char 
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  fp              1   15[BANK1 ] PTR struct _IO_FILE
  4481 ;;		 -> sprintf@f(11), 
  4482 ;;  u               4   41[BANK1 ] struct flui
  4483 ;;  g               4   35[BANK1 ] struct flui
  4484 ;;  l               4   28[BANK1 ] struct flui
  4485 ;;  h               4   24[BANK1 ] struct flui
  4486 ;;  ou              4   20[BANK1 ] struct flui
  4487 ;;  n               2   39[BANK1 ] int 
  4488 ;;  i               2   32[BANK1 ] int 
  4489 ;;  w               2   18[BANK1 ] int 
  4490 ;;  e               2   16[BANK1 ] int 
  4491 ;;  m               2   13[BANK1 ] int 
  4492 ;;  d               2   11[BANK1 ] int 
  4493 ;;  t               2    4[BANK1 ] int 
  4494 ;;  p               2    2[BANK1 ] int 
  4495 ;;  ne              2    0[BANK1 ] int 
  4496 ;;  sign            1   34[BANK1 ] unsigned char 
  4497 ;;  nmode           1   10[BANK1 ] unsigned char 
  4498 ;;  mode            1    9[BANK1 ] unsigned char 
  4499 ;;  pp              1    8[BANK1 ] unsigned char 
  4500 ;;  esign           1    0        unsigned char 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;                  1    wreg      void 
  4503 ;; Registers used:
  4504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4510 ;;      Params:         0       5       0       0       0       0       0       0
  4511 ;;      Locals:         0       0      45       0       0       0       0       0
  4512 ;;      Temps:          0       4       0       0       0       0       0       0
  4513 ;;      Totals:         0       9      45       0       0       0       0       0
  4514 ;;Total ram usage:       54 bytes
  4515 ;; Hardware stack levels used: 1
  4516 ;; Hardware stack levels required when called: 8
  4517 ;; This function calls:
  4518 ;;		___fladd
  4519 ;;		___fldiv
  4520 ;;		___fleq
  4521 ;;		___flge
  4522 ;;		___flmul
  4523 ;;		___flneg
  4524 ;;		___flsub
  4525 ;;		___fltol
  4526 ;;		___fpclassifyf
  4527 ;;		_floorf
  4528 ;;		_labs
  4529 ;;		_memcpy
  4530 ;;		_pad
  4531 ;;		_strcpy
  4532 ;; This function is called by:
  4533 ;;		_vfpfcnvrt
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537     096C                     _efgtoa:	
  4538                           ;psect for function _efgtoa
  4539                           
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in _efgtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4543                           ;efgtoa@fp stored from wreg
  4544     096C  0021               	movlb	1	; select bank1
  4545     096D  00AF               	movwf	efgtoa@fp^(0+128)
  4546                           
  4547                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 587: static void 
      +                          efgtoa(FILE *fp, long double f, char c);C:\Program Files\Microchip\xc8\v2.45\pic\sources
      +                          \c99\common\doprnt.c: 588: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 589:     char mode, nmode, pp, sign, esign;;C:\Program Files\Microchip\xc8\v2
      +                          .45\pic\sources\c99\common\doprnt.c: 590:     int d, e, i, m, n, ne, p, t, w;;C:\Program
      +                           Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 591:     long double h, l;
  4548     096E  01C2               	clrf	efgtoa@sign^(0+128)
  4549                           
  4550                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 596:     g.f = f;
  4551     096F  0020               	movlb	0	; select bank0
  4552     0970  0865               	movf	efgtoa@f+3,w
  4553     0971  0021               	movlb	1	; select bank1
  4554     0972  00C6               	movwf	(efgtoa@g+3)^(0+128)
  4555     0973  0020               	movlb	0	; select bank0
  4556     0974  0864               	movf	efgtoa@f+2,w
  4557     0975  0021               	movlb	1	; select bank1
  4558     0976  00C5               	movwf	(efgtoa@g+2)^(0+128)
  4559     0977  0020               	movlb	0	; select bank0
  4560     0978  0863               	movf	efgtoa@f+1,w
  4561     0979  0021               	movlb	1	; select bank1
  4562     097A  00C4               	movwf	(efgtoa@g+1)^(0+128)
  4563     097B  0020               	movlb	0	; select bank0
  4564     097C  0862               	movf	efgtoa@f,w
  4565     097D  0021               	movlb	1	; select bank1
  4566     097E  00C3               	movwf	efgtoa@g^(0+128)
  4567                           
  4568                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 597:     if (g.f 
      +                          < 0.0) {
  4569     097F  0846               	movf	(efgtoa@g+3)^(0+128),w
  4570     0980  0020               	movlb	0	; select bank0
  4571     0981  00C6               	movwf	___flge@ff1+3
  4572     0982  0021               	movlb	1	; select bank1
  4573     0983  0845               	movf	(efgtoa@g+2)^(0+128),w
  4574     0984  0020               	movlb	0	; select bank0
  4575     0985  00C5               	movwf	___flge@ff1+2
  4576     0986  0021               	movlb	1	; select bank1
  4577     0987  0844               	movf	(efgtoa@g+1)^(0+128),w
  4578     0988  0020               	movlb	0	; select bank0
  4579     0989  00C4               	movwf	___flge@ff1+1
  4580     098A  0021               	movlb	1	; select bank1
  4581     098B  0843               	movf	efgtoa@g^(0+128),w
  4582     098C  0020               	movlb	0	; select bank0
  4583     098D  00C3               	movwf	___flge@ff1
  4584     098E  3000               	movlw	0
  4585     098F  00CA               	movwf	___flge@ff2+3
  4586     0990  3000               	movlw	0
  4587     0991  00C9               	movwf	___flge@ff2+2
  4588     0992  3000               	movlw	0
  4589     0993  00C8               	movwf	___flge@ff2+1
  4590     0994  3000               	movlw	0
  4591     0995  00C7               	movwf	___flge@ff2
  4592     0996  3192  2210  3189   	fcall	___flge
  4593     0999  1803               	btfsc	3,0
  4594     099A  29C0               	goto	l4305
  4595                           
  4596                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 598:         sign
      +                           = 1;
  4597     099B  0021               	movlb	1	; select bank1
  4598     099C  01C2               	clrf	efgtoa@sign^(0+128)
  4599     099D  0AC2               	incf	efgtoa@sign^(0+128),f
  4600                           
  4601                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 599:         g.f 
      +                          = -g.f;
  4602     099E  0846               	movf	(efgtoa@g+3)^(0+128),w
  4603     099F  0020               	movlb	0	; select bank0
  4604     09A0  00A3               	movwf	___flneg@f1+3
  4605     09A1  0021               	movlb	1	; select bank1
  4606     09A2  0845               	movf	(efgtoa@g+2)^(0+128),w
  4607     09A3  0020               	movlb	0	; select bank0
  4608     09A4  00A2               	movwf	___flneg@f1+2
  4609     09A5  0021               	movlb	1	; select bank1
  4610     09A6  0844               	movf	(efgtoa@g+1)^(0+128),w
  4611     09A7  0020               	movlb	0	; select bank0
  4612     09A8  00A1               	movwf	___flneg@f1+1
  4613     09A9  0021               	movlb	1	; select bank1
  4614     09AA  0843               	movf	efgtoa@g^(0+128),w
  4615     09AB  0020               	movlb	0	; select bank0
  4616     09AC  00A0               	movwf	___flneg@f1
  4617     09AD  319C  2439  3189   	fcall	___flneg
  4618     09B0  0020               	movlb	0	; select bank0
  4619     09B1  0823               	movf	?___flneg+3,w
  4620     09B2  0021               	movlb	1	; select bank1
  4621     09B3  00C6               	movwf	(efgtoa@g+3)^(0+128)
  4622     09B4  0020               	movlb	0	; select bank0
  4623     09B5  0822               	movf	?___flneg+2,w
  4624     09B6  0021               	movlb	1	; select bank1
  4625     09B7  00C5               	movwf	(efgtoa@g+2)^(0+128)
  4626     09B8  0020               	movlb	0	; select bank0
  4627     09B9  0821               	movf	?___flneg+1,w
  4628     09BA  0021               	movlb	1	; select bank1
  4629     09BB  00C4               	movwf	(efgtoa@g+1)^(0+128)
  4630     09BC  0020               	movlb	0	; select bank0
  4631     09BD  0820               	movf	?___flneg,w
  4632     09BE  0021               	movlb	1	; select bank1
  4633     09BF  00C3               	movwf	efgtoa@g^(0+128)
  4634     09C0                     l4305:
  4635                           
  4636                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 603:     n = 0;
  4637     09C0  0021               	movlb	1	; select bank1
  4638     09C1  01C7               	clrf	efgtoa@n^(0+128)
  4639     09C2  01C8               	clrf	(efgtoa@n+1)^(0+128)
  4640                           
  4641                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 604:     w = widt
      +                          h;
  4642     09C3  0022               	movlb	2	; select bank2
  4643     09C4  082D               	movf	(_width+1)^(0+256),w
  4644     09C5  0021               	movlb	1	; select bank1
  4645     09C6  00B3               	movwf	(efgtoa@w+1)^(0+128)
  4646     09C7  0022               	movlb	2	; select bank2
  4647     09C8  082C               	movf	_width^(0+256),w
  4648     09C9  0021               	movlb	1	; select bank1
  4649     09CA  00B2               	movwf	efgtoa@w^(0+128)
  4650                           
  4651                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 605:     if (sign
  4652     09CB  0842               	movf	efgtoa@sign^(0+128),w
  4653     09CC  1903               	btfsc	3,2
  4654     09CD  29D9               	goto	l4317
  4655                           
  4656                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 609:    ) {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 610:   sign = sign ? '-
      +                          ' : '+';
  4657     09CE  0842               	movf	efgtoa@sign^(0+128),w
  4658     09CF  1D03               	btfss	3,2
  4659     09D0  29D3               	goto	l4315
  4660     09D1  302B               	movlw	43
  4661     09D2  29D4               	goto	L2
  4662     09D3                     l4315:
  4663     09D3  302D               	movlw	45
  4664     09D4                     L2:
  4665     09D4  00A6               	movwf	_efgtoa$1370^(0+128)
  4666     09D5  3000               	movlw	0
  4667     09D6  00A7               	movwf	(_efgtoa$1370^(0+128)+1)
  4668     09D7  0826               	movf	_efgtoa$1370^(0+128),w
  4669     09D8  00C2               	movwf	efgtoa@sign^(0+128)
  4670     09D9                     l4317:
  4671                           
  4672                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 619:     if (( __
      +                          fpclassifyf(g.f) == 1 )) {
  4673     09D9  0846               	movf	(efgtoa@g+3)^(0+128),w
  4674     09DA  0020               	movlb	0	; select bank0
  4675     09DB  00A3               	movwf	___fpclassifyf@x+3
  4676     09DC  0021               	movlb	1	; select bank1
  4677     09DD  0845               	movf	(efgtoa@g+2)^(0+128),w
  4678     09DE  0020               	movlb	0	; select bank0
  4679     09DF  00A2               	movwf	___fpclassifyf@x+2
  4680     09E0  0021               	movlb	1	; select bank1
  4681     09E1  0844               	movf	(efgtoa@g+1)^(0+128),w
  4682     09E2  0020               	movlb	0	; select bank0
  4683     09E3  00A1               	movwf	___fpclassifyf@x+1
  4684     09E4  0021               	movlb	1	; select bank1
  4685     09E5  0843               	movf	efgtoa@g^(0+128),w
  4686     09E6  0020               	movlb	0	; select bank0
  4687     09E7  00A0               	movwf	___fpclassifyf@x
  4688     09E8  3191  2198  3189   	fcall	___fpclassifyf
  4689     09EB  0020               	movlb	0	; select bank0
  4690     09EC  0320               	decf	?___fpclassifyf,w
  4691     09ED  0421               	iorwf	?___fpclassifyf+1,w
  4692     09EE  1D03               	btfss	3,2
  4693     09EF  2A20               	goto	l4329
  4694                           
  4695                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 620:   if (sign) 
      +                          {
  4696     09F0  0021               	movlb	1	; select bank1
  4697     09F1  0842               	movf	efgtoa@sign^(0+128),w
  4698     09F2  1903               	btfsc	3,2
  4699     09F3  2A00               	goto	l4323
  4700                           
  4701                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 621:    dbuf[0] =
      +                           sign;
  4702     09F4  0842               	movf	efgtoa@sign^(0+128),w
  4703     09F5  0024               	movlb	4	; select bank4
  4704     09F6  00A0               	movwf	_dbuf^(0+512)
  4705                           
  4706                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 622:    w--;
  4707     09F7  30FF               	movlw	255
  4708     09F8  0021               	movlb	1	; select bank1
  4709     09F9  07B2               	addwf	efgtoa@w^(0+128),f
  4710     09FA  30FF               	movlw	255
  4711     09FB  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  4712                           
  4713                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 623:    n = 1;
  4714     09FC  3001               	movlw	1
  4715     09FD  00C7               	movwf	efgtoa@n^(0+128)
  4716     09FE  3000               	movlw	0
  4717     09FF  00C8               	movwf	(efgtoa@n^(0+128)+1)
  4718     0A00                     l4323:
  4719                           
  4720                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 631:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 632:             strcpy(&d
      +                          buf[n], "inf");
  4721     0A00  307F               	movlw	low (STR_18| (0+32768))
  4722     0A01  0020               	movlb	0	; select bank0
  4723     0A02  00A0               	movwf	strcpy@src
  4724     0A03  3098               	movlw	high (STR_18| (0+32768))
  4725     0A04  00A1               	movwf	strcpy@src+1
  4726     0A05  0021               	movlb	1	; select bank1
  4727     0A06  0847               	movf	efgtoa@n^(0+128),w
  4728     0A07  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  4729     0A08  319C  24C2  3189   	fcall	_strcpy
  4730                           
  4731                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 633:         };C:
      +                          \Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 634:         w -= ((
      +                          sizeof("inf")/sizeof("inf"[0]))-1);
  4732     0A0B  30FD               	movlw	253
  4733     0A0C  0021               	movlb	1	; select bank1
  4734     0A0D  07B2               	addwf	efgtoa@w^(0+128),f
  4735     0A0E  30FF               	movlw	255
  4736     0A0F  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  4737                           
  4738                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 635:         retu
      +                          rn (void) pad(fp, &dbuf[0], w);
  4739     0A10  3020               	movlw	(low (_dbuf| (0+512)))& (0+255)
  4740     0A11  0020               	movlb	0	; select bank0
  4741     0A12  00AF               	movwf	pad@buf
  4742     0A13  0021               	movlb	1	; select bank1
  4743     0A14  0833               	movf	(efgtoa@w+1)^(0+128),w
  4744     0A15  0020               	movlb	0	; select bank0
  4745     0A16  00B1               	movwf	pad@p+1
  4746     0A17  0021               	movlb	1	; select bank1
  4747     0A18  0832               	movf	efgtoa@w^(0+128),w
  4748     0A19  0020               	movlb	0	; select bank0
  4749     0A1A  00B0               	movwf	pad@p
  4750     0A1B  0021               	movlb	1	; select bank1
  4751     0A1C  082F               	movf	efgtoa@fp^(0+128),w
  4752     0A1D  319E  2629         	fcall	_pad
  4753     0A1F  0008               	return
  4754     0A20                     l4329:
  4755                           
  4756                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 637:     if (( __
      +                          fpclassifyf(g.f) == 0 )) {
  4757     0A20  0021               	movlb	1	; select bank1
  4758     0A21  0846               	movf	(efgtoa@g+3)^(0+128),w
  4759     0A22  0020               	movlb	0	; select bank0
  4760     0A23  00A3               	movwf	___fpclassifyf@x+3
  4761     0A24  0021               	movlb	1	; select bank1
  4762     0A25  0845               	movf	(efgtoa@g+2)^(0+128),w
  4763     0A26  0020               	movlb	0	; select bank0
  4764     0A27  00A2               	movwf	___fpclassifyf@x+2
  4765     0A28  0021               	movlb	1	; select bank1
  4766     0A29  0844               	movf	(efgtoa@g+1)^(0+128),w
  4767     0A2A  0020               	movlb	0	; select bank0
  4768     0A2B  00A1               	movwf	___fpclassifyf@x+1
  4769     0A2C  0021               	movlb	1	; select bank1
  4770     0A2D  0843               	movf	efgtoa@g^(0+128),w
  4771     0A2E  0020               	movlb	0	; select bank0
  4772     0A2F  00A0               	movwf	___fpclassifyf@x
  4773     0A30  3191  2198  3189   	fcall	___fpclassifyf
  4774     0A33  0020               	movlb	0	; select bank0
  4775     0A34  0820               	movf	?___fpclassifyf,w
  4776     0A35  0421               	iorwf	?___fpclassifyf+1,w
  4777     0A36  1D03               	btfss	3,2
  4778     0A37  2A68               	goto	l4341
  4779                           
  4780                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 638:   if (sign) 
      +                          {
  4781     0A38  0021               	movlb	1	; select bank1
  4782     0A39  0842               	movf	efgtoa@sign^(0+128),w
  4783     0A3A  1903               	btfsc	3,2
  4784     0A3B  2A48               	goto	l4335
  4785                           
  4786                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 639:    dbuf[0] =
      +                           sign;
  4787     0A3C  0842               	movf	efgtoa@sign^(0+128),w
  4788     0A3D  0024               	movlb	4	; select bank4
  4789     0A3E  00A0               	movwf	_dbuf^(0+512)
  4790                           
  4791                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 640:    w--;
  4792     0A3F  30FF               	movlw	255
  4793     0A40  0021               	movlb	1	; select bank1
  4794     0A41  07B2               	addwf	efgtoa@w^(0+128),f
  4795     0A42  30FF               	movlw	255
  4796     0A43  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  4797                           
  4798                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 641:    n = 1;
  4799     0A44  3001               	movlw	1
  4800     0A45  00C7               	movwf	efgtoa@n^(0+128)
  4801     0A46  3000               	movlw	0
  4802     0A47  00C8               	movwf	(efgtoa@n^(0+128)+1)
  4803     0A48                     l4335:
  4804                           
  4805                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 649:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 650:             strcpy(&d
      +                          buf[n], "nan");
  4806     0A48  3083               	movlw	low (STR_21| (0+32768))
  4807     0A49  0020               	movlb	0	; select bank0
  4808     0A4A  00A0               	movwf	strcpy@src
  4809     0A4B  3098               	movlw	high (STR_21| (0+32768))
  4810     0A4C  00A1               	movwf	strcpy@src+1
  4811     0A4D  0021               	movlb	1	; select bank1
  4812     0A4E  0847               	movf	efgtoa@n^(0+128),w
  4813     0A4F  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  4814     0A50  319C  24C2  3189   	fcall	_strcpy
  4815                           
  4816                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 651:         };C:
      +                          \Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 652:         w -= ((
      +                          sizeof("nan")/sizeof("nan"[0]))-1);
  4817     0A53  30FD               	movlw	253
  4818     0A54  0021               	movlb	1	; select bank1
  4819     0A55  07B2               	addwf	efgtoa@w^(0+128),f
  4820     0A56  30FF               	movlw	255
  4821     0A57  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  4822                           
  4823                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 653:         retu
      +                          rn (void) pad(fp, &dbuf[0], w);
  4824     0A58  3020               	movlw	(low (_dbuf| (0+512)))& (0+255)
  4825     0A59  0020               	movlb	0	; select bank0
  4826     0A5A  00AF               	movwf	pad@buf
  4827     0A5B  0021               	movlb	1	; select bank1
  4828     0A5C  0833               	movf	(efgtoa@w+1)^(0+128),w
  4829     0A5D  0020               	movlb	0	; select bank0
  4830     0A5E  00B1               	movwf	pad@p+1
  4831     0A5F  0021               	movlb	1	; select bank1
  4832     0A60  0832               	movf	efgtoa@w^(0+128),w
  4833     0A61  0020               	movlb	0	; select bank0
  4834     0A62  00B0               	movwf	pad@p
  4835     0A63  0021               	movlb	1	; select bank1
  4836     0A64  082F               	movf	efgtoa@fp^(0+128),w
  4837     0A65  319E  2629         	fcall	_pad
  4838     0A67  0008               	return
  4839     0A68                     l4341:
  4840                           
  4841                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 657:     u.f = 1.
      +                          0;
  4842     0A68  303F               	movlw	63
  4843     0A69  0021               	movlb	1	; select bank1
  4844     0A6A  00CC               	movwf	(efgtoa@u+3)^(0+128)
  4845     0A6B  3080               	movlw	128
  4846     0A6C  00CB               	movwf	(efgtoa@u+2)^(0+128)
  4847     0A6D  3000               	movlw	0
  4848     0A6E  00CA               	movwf	(efgtoa@u+1)^(0+128)
  4849     0A6F  3000               	movlw	0
  4850     0A70  00C9               	movwf	efgtoa@u^(0+128)
  4851                           
  4852                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 658:     e = 0;
  4853     0A71  01B0               	clrf	efgtoa@e^(0+128)
  4854     0A72  01B1               	clrf	(efgtoa@e+1)^(0+128)
  4855                           
  4856                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 659:  if (!(g.f =
      +                          = 0.0)) {
  4857     0A73  0846               	movf	(efgtoa@g+3)^(0+128),w
  4858     0A74  0020               	movlb	0	; select bank0
  4859     0A75  00A3               	movwf	___fleq@ff1+3
  4860     0A76  0021               	movlb	1	; select bank1
  4861     0A77  0845               	movf	(efgtoa@g+2)^(0+128),w
  4862     0A78  0020               	movlb	0	; select bank0
  4863     0A79  00A2               	movwf	___fleq@ff1+2
  4864     0A7A  0021               	movlb	1	; select bank1
  4865     0A7B  0844               	movf	(efgtoa@g+1)^(0+128),w
  4866     0A7C  0020               	movlb	0	; select bank0
  4867     0A7D  00A1               	movwf	___fleq@ff1+1
  4868     0A7E  0021               	movlb	1	; select bank1
  4869     0A7F  0843               	movf	efgtoa@g^(0+128),w
  4870     0A80  0020               	movlb	0	; select bank0
  4871     0A81  00A0               	movwf	___fleq@ff1
  4872     0A82  3000               	movlw	0
  4873     0A83  00A7               	movwf	___fleq@ff2+3
  4874     0A84  3000               	movlw	0
  4875     0A85  00A6               	movwf	___fleq@ff2+2
  4876     0A86  3000               	movlw	0
  4877     0A87  00A5               	movwf	___fleq@ff2+1
  4878     0A88  3000               	movlw	0
  4879     0A89  00A4               	movwf	___fleq@ff2
  4880     0A8A  319E  26C6  3189   	fcall	___fleq
  4881     0A8D  1C03               	btfss	3,0
  4882     0A8E  2A9D               	goto	l4351
  4883     0A8F  2BAB               	goto	l4371
  4884     0A90                     l4349:
  4885                           
  4886                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 661:    u = ou;
  4887     0A90  0021               	movlb	1	; select bank1
  4888     0A91  0837               	movf	(efgtoa@ou+3)^(0+128),w
  4889     0A92  00CC               	movwf	(efgtoa@u+3)^(0+128)
  4890     0A93  0836               	movf	(efgtoa@ou+2)^(0+128),w
  4891     0A94  00CB               	movwf	(efgtoa@u+2)^(0+128)
  4892     0A95  0835               	movf	(efgtoa@ou+1)^(0+128),w
  4893     0A96  00CA               	movwf	(efgtoa@u+1)^(0+128)
  4894     0A97  0834               	movf	efgtoa@ou^(0+128),w
  4895     0A98  00C9               	movwf	efgtoa@u^(0+128)
  4896                           
  4897                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 662:    ++e;
  4898     0A99  3001               	movlw	1
  4899     0A9A  07B0               	addwf	efgtoa@e^(0+128),f
  4900     0A9B  3000               	movlw	0
  4901     0A9C  3DB1               	addwfc	(efgtoa@e+1)^(0+128),f
  4902     0A9D                     l4351:
  4903                           
  4904                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 660:   while ((la
      +                          bs((g).u-((ou.f = u.f*10.0,ou)).u) <= 1) || g.f > ou.f) {
  4905     0A9D  3041               	movlw	65
  4906     0A9E  0020               	movlb	0	; select bank0
  4907     0A9F  00AC               	movwf	___flmul@b+3
  4908     0AA0  3020               	movlw	32
  4909     0AA1  00AB               	movwf	___flmul@b+2
  4910     0AA2  3000               	movlw	0
  4911     0AA3  00AA               	movwf	___flmul@b+1
  4912     0AA4  3000               	movlw	0
  4913     0AA5  00A9               	movwf	___flmul@b
  4914     0AA6  0021               	movlb	1	; select bank1
  4915     0AA7  084C               	movf	(efgtoa@u+3)^(0+128),w
  4916     0AA8  0020               	movlb	0	; select bank0
  4917     0AA9  00B0               	movwf	___flmul@a+3
  4918     0AAA  0021               	movlb	1	; select bank1
  4919     0AAB  084B               	movf	(efgtoa@u+2)^(0+128),w
  4920     0AAC  0020               	movlb	0	; select bank0
  4921     0AAD  00AF               	movwf	___flmul@a+2
  4922     0AAE  0021               	movlb	1	; select bank1
  4923     0AAF  084A               	movf	(efgtoa@u+1)^(0+128),w
  4924     0AB0  0020               	movlb	0	; select bank0
  4925     0AB1  00AE               	movwf	___flmul@a+1
  4926     0AB2  0021               	movlb	1	; select bank1
  4927     0AB3  0849               	movf	efgtoa@u^(0+128),w
  4928     0AB4  0020               	movlb	0	; select bank0
  4929     0AB5  00AD               	movwf	___flmul@a
  4930     0AB6  3184  24B4  3189   	fcall	___flmul
  4931     0AB9  0020               	movlb	0	; select bank0
  4932     0ABA  082C               	movf	?___flmul+3,w
  4933     0ABB  0021               	movlb	1	; select bank1
  4934     0ABC  00B7               	movwf	(efgtoa@ou+3)^(0+128)
  4935     0ABD  0020               	movlb	0	; select bank0
  4936     0ABE  082B               	movf	?___flmul+2,w
  4937     0ABF  0021               	movlb	1	; select bank1
  4938     0AC0  00B6               	movwf	(efgtoa@ou+2)^(0+128)
  4939     0AC1  0020               	movlb	0	; select bank0
  4940     0AC2  082A               	movf	?___flmul+1,w
  4941     0AC3  0021               	movlb	1	; select bank1
  4942     0AC4  00B5               	movwf	(efgtoa@ou+1)^(0+128)
  4943     0AC5  0020               	movlb	0	; select bank0
  4944     0AC6  0829               	movf	?___flmul,w
  4945     0AC7  0021               	movlb	1	; select bank1
  4946     0AC8  00B4               	movwf	efgtoa@ou^(0+128)
  4947     0AC9  0834               	movf	efgtoa@ou^(0+128),w
  4948     0ACA  0243               	subwf	efgtoa@g^(0+128),w
  4949     0ACB  0020               	movlb	0	; select bank0
  4950     0ACC  00E7               	movwf	??_efgtoa
  4951     0ACD  0021               	movlb	1	; select bank1
  4952     0ACE  0835               	movf	(efgtoa@ou+1)^(0+128),w
  4953     0ACF  3B44               	subwfb	(efgtoa@g+1)^(0+128),w
  4954     0AD0  0020               	movlb	0	; select bank0
  4955     0AD1  00E8               	movwf	??_efgtoa+1
  4956     0AD2  0021               	movlb	1	; select bank1
  4957     0AD3  0836               	movf	(efgtoa@ou+2)^(0+128),w
  4958     0AD4  3B45               	subwfb	(efgtoa@g+2)^(0+128),w
  4959     0AD5  0020               	movlb	0	; select bank0
  4960     0AD6  00E9               	movwf	??_efgtoa+2
  4961     0AD7  0021               	movlb	1	; select bank1
  4962     0AD8  0837               	movf	(efgtoa@ou+3)^(0+128),w
  4963     0AD9  3B46               	subwfb	(efgtoa@g+3)^(0+128),w
  4964     0ADA  0020               	movlb	0	; select bank0
  4965     0ADB  00EA               	movwf	??_efgtoa+3
  4966     0ADC  086A               	movf	??_efgtoa+3,w
  4967     0ADD  00A3               	movwf	labs@a+3
  4968     0ADE  0869               	movf	??_efgtoa+2,w
  4969     0ADF  00A2               	movwf	labs@a+2
  4970     0AE0  0868               	movf	??_efgtoa+1,w
  4971     0AE1  00A1               	movwf	labs@a+1
  4972     0AE2  0867               	movf	??_efgtoa,w
  4973     0AE3  00A0               	movwf	labs@a
  4974     0AE4  319C  2452  3189   	fcall	_labs
  4975     0AE7  0020               	movlb	0	; select bank0
  4976     0AE8  1BA3               	btfsc	?_labs+3,7
  4977     0AE9  2A90               	goto	l4349
  4978     0AEA  0823               	movf	?_labs+3,w
  4979     0AEB  1D03               	btfss	3,2
  4980     0AEC  2AF7               	goto	l4355
  4981     0AED  0822               	movf	?_labs+2,w
  4982     0AEE  1D03               	btfss	3,2
  4983     0AEF  2AF7               	goto	l4355
  4984     0AF0  0821               	movf	?_labs+1,w
  4985     0AF1  1D03               	btfss	3,2
  4986     0AF2  2AF7               	goto	l4355
  4987     0AF3  3002               	movlw	2
  4988     0AF4  0220               	subwf	?_labs,w
  4989     0AF5  1C03               	btfss	3,0
  4990     0AF6  2A90               	goto	l4349
  4991     0AF7                     l4355:
  4992     0AF7  0021               	movlb	1	; select bank1
  4993     0AF8  0837               	movf	(efgtoa@ou+3)^(0+128),w
  4994     0AF9  0020               	movlb	0	; select bank0
  4995     0AFA  00C6               	movwf	___flge@ff1+3
  4996     0AFB  0021               	movlb	1	; select bank1
  4997     0AFC  0836               	movf	(efgtoa@ou+2)^(0+128),w
  4998     0AFD  0020               	movlb	0	; select bank0
  4999     0AFE  00C5               	movwf	___flge@ff1+2
  5000     0AFF  0021               	movlb	1	; select bank1
  5001     0B00  0835               	movf	(efgtoa@ou+1)^(0+128),w
  5002     0B01  0020               	movlb	0	; select bank0
  5003     0B02  00C4               	movwf	___flge@ff1+1
  5004     0B03  0021               	movlb	1	; select bank1
  5005     0B04  0834               	movf	efgtoa@ou^(0+128),w
  5006     0B05  0020               	movlb	0	; select bank0
  5007     0B06  00C3               	movwf	___flge@ff1
  5008     0B07  0021               	movlb	1	; select bank1
  5009     0B08  0846               	movf	(efgtoa@g+3)^(0+128),w
  5010     0B09  0020               	movlb	0	; select bank0
  5011     0B0A  00CA               	movwf	___flge@ff2+3
  5012     0B0B  0021               	movlb	1	; select bank1
  5013     0B0C  0845               	movf	(efgtoa@g+2)^(0+128),w
  5014     0B0D  0020               	movlb	0	; select bank0
  5015     0B0E  00C9               	movwf	___flge@ff2+2
  5016     0B0F  0021               	movlb	1	; select bank1
  5017     0B10  0844               	movf	(efgtoa@g+1)^(0+128),w
  5018     0B11  0020               	movlb	0	; select bank0
  5019     0B12  00C8               	movwf	___flge@ff2+1
  5020     0B13  0021               	movlb	1	; select bank1
  5021     0B14  0843               	movf	efgtoa@g^(0+128),w
  5022     0B15  0020               	movlb	0	; select bank0
  5023     0B16  00C7               	movwf	___flge@ff2
  5024     0B17  3192  2210  3189   	fcall	___flge
  5025     0B1A  1C03               	btfss	3,0
  5026     0B1B  2A90               	goto	l4349
  5027                           
  5028                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 664:   if ((labs(
      +                          (g).u-(u).u) <= 1)) {
  5029     0B1C  0021               	movlb	1	; select bank1
  5030     0B1D                     L3:
  5031     0B1D  0849               	movf	efgtoa@u^(0+128),w
  5032     0B1E  0243               	subwf	efgtoa@g^(0+128),w
  5033     0B1F  0020               	movlb	0	; select bank0
  5034     0B20  00E7               	movwf	??_efgtoa
  5035     0B21  0021               	movlb	1	; select bank1
  5036     0B22  084A               	movf	(efgtoa@u+1)^(0+128),w
  5037     0B23  3B44               	subwfb	(efgtoa@g+1)^(0+128),w
  5038     0B24  0020               	movlb	0	; select bank0
  5039     0B25  00E8               	movwf	??_efgtoa+1
  5040     0B26  0021               	movlb	1	; select bank1
  5041     0B27  084B               	movf	(efgtoa@u+2)^(0+128),w
  5042     0B28  3B45               	subwfb	(efgtoa@g+2)^(0+128),w
  5043     0B29  0020               	movlb	0	; select bank0
  5044     0B2A  00E9               	movwf	??_efgtoa+2
  5045     0B2B  0021               	movlb	1	; select bank1
  5046     0B2C  084C               	movf	(efgtoa@u+3)^(0+128),w
  5047     0B2D  3B46               	subwfb	(efgtoa@g+3)^(0+128),w
  5048     0B2E  0020               	movlb	0	; select bank0
  5049     0B2F  00EA               	movwf	??_efgtoa+3
  5050     0B30  086A               	movf	??_efgtoa+3,w
  5051     0B31  00A3               	movwf	labs@a+3
  5052     0B32  0869               	movf	??_efgtoa+2,w
  5053     0B33  00A2               	movwf	labs@a+2
  5054     0B34  0868               	movf	??_efgtoa+1,w
  5055     0B35  00A1               	movwf	labs@a+1
  5056     0B36  0867               	movf	??_efgtoa,w
  5057     0B37  00A0               	movwf	labs@a
  5058     0B38  319C  2452  3189   	fcall	_labs
  5059     0B3B  0020               	movlb	0	; select bank0
  5060     0B3C  1BA3               	btfsc	?_labs+3,7
  5061     0B3D  2B4B               	goto	l4359
  5062     0B3E  0823               	movf	?_labs+3,w
  5063     0B3F  1D03               	btfss	3,2
  5064     0B40  2B86               	goto	l4369
  5065     0B41  0822               	movf	?_labs+2,w
  5066     0B42  1D03               	btfss	3,2
  5067     0B43  2B86               	goto	l4369
  5068     0B44  0821               	movf	?_labs+1,w
  5069     0B45  1D03               	btfss	3,2
  5070     0B46  2B86               	goto	l4369
  5071     0B47  3002               	movlw	2
  5072     0B48  0220               	subwf	?_labs,w
  5073     0B49  1803               	btfsc	3,0
  5074     0B4A  2B86               	goto	l4369
  5075     0B4B                     l4359:
  5076                           
  5077                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 665:    g = u;
  5078     0B4B  0021               	movlb	1	; select bank1
  5079     0B4C  084C               	movf	(efgtoa@u+3)^(0+128),w
  5080     0B4D  00C6               	movwf	(efgtoa@g+3)^(0+128)
  5081     0B4E  084B               	movf	(efgtoa@u+2)^(0+128),w
  5082     0B4F  00C5               	movwf	(efgtoa@g+2)^(0+128)
  5083     0B50  084A               	movf	(efgtoa@u+1)^(0+128),w
  5084     0B51  00C4               	movwf	(efgtoa@g+1)^(0+128)
  5085     0B52  0849               	movf	efgtoa@u^(0+128),w
  5086     0B53  00C3               	movwf	efgtoa@g^(0+128)
  5087                           
  5088                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 666:   }
  5089     0B54  2BAB               	goto	l4371
  5090     0B55                     l4361:
  5091                           
  5092                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 669:     u.f = u.
      +                          f/10.0;
  5093     0B55  3041               	movlw	65
  5094     0B56  0020               	movlb	0	; select bank0
  5095     0B57  00B7               	movwf	___fldiv@a+3
  5096     0B58  3020               	movlw	32
  5097     0B59  00B6               	movwf	___fldiv@a+2
  5098     0B5A  3000               	movlw	0
  5099     0B5B  00B5               	movwf	___fldiv@a+1
  5100     0B5C  3000               	movlw	0
  5101     0B5D  00B4               	movwf	___fldiv@a
  5102     0B5E  0021               	movlb	1	; select bank1
  5103     0B5F  084C               	movf	(efgtoa@u+3)^(0+128),w
  5104     0B60  0020               	movlb	0	; select bank0
  5105     0B61  00BB               	movwf	___fldiv@b+3
  5106     0B62  0021               	movlb	1	; select bank1
  5107     0B63  084B               	movf	(efgtoa@u+2)^(0+128),w
  5108     0B64  0020               	movlb	0	; select bank0
  5109     0B65  00BA               	movwf	___fldiv@b+2
  5110     0B66  0021               	movlb	1	; select bank1
  5111     0B67  084A               	movf	(efgtoa@u+1)^(0+128),w
  5112     0B68  0020               	movlb	0	; select bank0
  5113     0B69  00B9               	movwf	___fldiv@b+1
  5114     0B6A  0021               	movlb	1	; select bank1
  5115     0B6B  0849               	movf	efgtoa@u^(0+128),w
  5116     0B6C  0020               	movlb	0	; select bank0
  5117     0B6D  00B8               	movwf	___fldiv@b
  5118     0B6E  3193  2349  3189   	fcall	___fldiv
  5119     0B71  0020               	movlb	0	; select bank0
  5120     0B72  0837               	movf	?___fldiv+3,w
  5121     0B73  0021               	movlb	1	; select bank1
  5122     0B74  00CC               	movwf	(efgtoa@u+3)^(0+128)
  5123     0B75  0020               	movlb	0	; select bank0
  5124     0B76  0836               	movf	?___fldiv+2,w
  5125     0B77  0021               	movlb	1	; select bank1
  5126     0B78  00CB               	movwf	(efgtoa@u+2)^(0+128)
  5127     0B79  0020               	movlb	0	; select bank0
  5128     0B7A  0835               	movf	?___fldiv+1,w
  5129     0B7B  0021               	movlb	1	; select bank1
  5130     0B7C  00CA               	movwf	(efgtoa@u+1)^(0+128)
  5131     0B7D  0020               	movlb	0	; select bank0
  5132     0B7E  0834               	movf	?___fldiv,w
  5133     0B7F  0021               	movlb	1	; select bank1
  5134     0B80  00C9               	movwf	efgtoa@u^(0+128)
  5135                           
  5136                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 670:     --e;
  5137     0B81  30FF               	movlw	255
  5138     0B82  07B0               	addwf	efgtoa@e^(0+128),f
  5139     0B83  30FF               	movlw	255
  5140     0B84  3DB1               	addwfc	(efgtoa@e+1)^(0+128),f
  5141     0B85  2B1D               	goto	L3
  5142     0B86                     l4369:	
  5143                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 671:     if ((lab
      +                          s((g).u-(u).u) <= 1)) {
  5144                           
  5145                           
  5146                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 668:    while (g.
      +                          f < u.f) {
  5147     0B86  0021               	movlb	1	; select bank1
  5148     0B87  0846               	movf	(efgtoa@g+3)^(0+128),w
  5149     0B88  0020               	movlb	0	; select bank0
  5150     0B89  00C6               	movwf	___flge@ff1+3
  5151     0B8A  0021               	movlb	1	; select bank1
  5152     0B8B  0845               	movf	(efgtoa@g+2)^(0+128),w
  5153     0B8C  0020               	movlb	0	; select bank0
  5154     0B8D  00C5               	movwf	___flge@ff1+2
  5155     0B8E  0021               	movlb	1	; select bank1
  5156     0B8F  0844               	movf	(efgtoa@g+1)^(0+128),w
  5157     0B90  0020               	movlb	0	; select bank0
  5158     0B91  00C4               	movwf	___flge@ff1+1
  5159     0B92  0021               	movlb	1	; select bank1
  5160     0B93  0843               	movf	efgtoa@g^(0+128),w
  5161     0B94  0020               	movlb	0	; select bank0
  5162     0B95  00C3               	movwf	___flge@ff1
  5163     0B96  0021               	movlb	1	; select bank1
  5164     0B97  084C               	movf	(efgtoa@u+3)^(0+128),w
  5165     0B98  0020               	movlb	0	; select bank0
  5166     0B99  00CA               	movwf	___flge@ff2+3
  5167     0B9A  0021               	movlb	1	; select bank1
  5168     0B9B  084B               	movf	(efgtoa@u+2)^(0+128),w
  5169     0B9C  0020               	movlb	0	; select bank0
  5170     0B9D  00C9               	movwf	___flge@ff2+2
  5171     0B9E  0021               	movlb	1	; select bank1
  5172     0B9F  084A               	movf	(efgtoa@u+1)^(0+128),w
  5173     0BA0  0020               	movlb	0	; select bank0
  5174     0BA1  00C8               	movwf	___flge@ff2+1
  5175     0BA2  0021               	movlb	1	; select bank1
  5176     0BA3  0849               	movf	efgtoa@u^(0+128),w
  5177     0BA4  0020               	movlb	0	; select bank0
  5178     0BA5  00C7               	movwf	___flge@ff2
  5179     0BA6  3192  2210  3189   	fcall	___flge
  5180     0BA9  1C03               	btfss	3,0
  5181     0BAA  2B55               	goto	l4361
  5182     0BAB                     l4371:
  5183                           
  5184                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 683:  mode = c;
  5185     0BAB  0020               	movlb	0	; select bank0
  5186     0BAC  0866               	movf	efgtoa@c,w
  5187     0BAD  0021               	movlb	1	; select bank1
  5188     0BAE  00A9               	movwf	efgtoa@mode^(0+128)
  5189                           
  5190                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 685:     nmode = 
      +                          mode;
  5191     0BAF  0829               	movf	efgtoa@mode^(0+128),w
  5192     0BB0  00AA               	movwf	efgtoa@nmode^(0+128)
  5193                           
  5194                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 695:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 696:         p = (prec < 0)
      +                           ? 6 : prec;
  5195     0BB1  0022               	movlb	2	; select bank2
  5196     0BB2  1BAF               	btfsc	(_prec+1)^(0+256),7
  5197     0BB3  2BBC               	goto	l4377
  5198     0BB4  082F               	movf	(_prec+1)^(0+256),w
  5199     0BB5  0021               	movlb	1	; select bank1
  5200     0BB6  00A3               	movwf	(efgtoa@p+1)^(0+128)
  5201     0BB7  0022               	movlb	2	; select bank2
  5202     0BB8  082E               	movf	_prec^(0+256),w
  5203     0BB9  0021               	movlb	1	; select bank1
  5204     0BBA  00A2               	movwf	efgtoa@p^(0+128)
  5205     0BBB  2BC1               	goto	l1110
  5206     0BBC                     l4377:
  5207     0BBC  3006               	movlw	6
  5208     0BBD  0021               	movlb	1	; select bank1
  5209     0BBE  00A2               	movwf	efgtoa@p^(0+128)
  5210     0BBF  3000               	movlw	0
  5211     0BC0  00A3               	movwf	(efgtoa@p^(0+128)+1)
  5212     0BC1                     l1110:
  5213                           
  5214                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 697:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 711:     m = p;
  5215     0BC1  0823               	movf	(efgtoa@p+1)^(0+128),w
  5216     0BC2  00AE               	movwf	(efgtoa@m+1)^(0+128)
  5217     0BC3  0822               	movf	efgtoa@p^(0+128),w
  5218     0BC4  00AD               	movwf	efgtoa@m^(0+128)
  5219                           
  5220                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 715:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 716:         ++m;
  5221     0BC5  3001               	movlw	1
  5222     0BC6  07AD               	addwf	efgtoa@m^(0+128),f
  5223     0BC7  3000               	movlw	0
  5224     0BC8  3DAE               	addwfc	(efgtoa@m+1)^(0+128),f
  5225                           
  5226                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 717:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 721:     if (nmode == 'f
      +                          ') {
  5227     0BC9  3066               	movlw	102
  5228     0BCA  062A               	xorwf	efgtoa@nmode^(0+128),w
  5229     0BCB  1D03               	btfss	3,2
  5230     0BCC  2BE1               	goto	l4391
  5231                           
  5232                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 722:         if (
      +                          e < 0) {
  5233     0BCD  1FB1               	btfss	(efgtoa@e+1)^(0+128),7
  5234     0BCE  2BD9               	goto	l4387
  5235                           
  5236                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 723:             
      +                          u.f = 1.0;
  5237     0BCF  303F               	movlw	63
  5238     0BD0  00CC               	movwf	(efgtoa@u+3)^(0+128)
  5239     0BD1  3080               	movlw	128
  5240     0BD2  00CB               	movwf	(efgtoa@u+2)^(0+128)
  5241     0BD3  3000               	movlw	0
  5242     0BD4  00CA               	movwf	(efgtoa@u+1)^(0+128)
  5243     0BD5  3000               	movlw	0
  5244     0BD6  00C9               	movwf	efgtoa@u^(0+128)
  5245                           
  5246                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 724:             
      +                          e = 0;
  5247     0BD7  01B0               	clrf	efgtoa@e^(0+128)
  5248     0BD8  01B1               	clrf	(efgtoa@e+1)^(0+128)
  5249     0BD9                     l4387:
  5250                           
  5251                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 726:         if (
      +                          !(mode == 'g')) {
  5252     0BD9  3067               	movlw	103
  5253     0BDA  0629               	xorwf	efgtoa@mode^(0+128),w
  5254     0BDB  1903               	btfsc	3,2
  5255     0BDC  2BE1               	goto	l4391
  5256                           
  5257                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 727:             
      +                          m += e;
  5258     0BDD  0830               	movf	efgtoa@e^(0+128),w
  5259     0BDE  07AD               	addwf	efgtoa@m^(0+128),f
  5260     0BDF  0831               	movf	(efgtoa@e+1)^(0+128),w
  5261     0BE0  3DAE               	addwfc	(efgtoa@m+1)^(0+128),f
  5262     0BE1                     l4391:
  5263                           
  5264                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 733:     i = 0;
  5265     0BE1  01C0               	clrf	efgtoa@i^(0+128)
  5266     0BE2  01C1               	clrf	(efgtoa@i+1)^(0+128)
  5267                           
  5268                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 734:     h = g.f;
  5269     0BE3  0846               	movf	(efgtoa@g+3)^(0+128),w
  5270     0BE4  00BB               	movwf	(efgtoa@h+3)^(0+128)
  5271     0BE5  0845               	movf	(efgtoa@g+2)^(0+128),w
  5272     0BE6  00BA               	movwf	(efgtoa@h+2)^(0+128)
  5273     0BE7  0844               	movf	(efgtoa@g+1)^(0+128),w
  5274     0BE8  00B9               	movwf	(efgtoa@h+1)^(0+128)
  5275     0BE9  0843               	movf	efgtoa@g^(0+128),w
  5276     0BEA  00B8               	movwf	efgtoa@h^(0+128)
  5277                           
  5278                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 735:     ou = u;
  5279     0BEB  084C               	movf	(efgtoa@u+3)^(0+128),w
  5280     0BEC  00B7               	movwf	(efgtoa@ou+3)^(0+128)
  5281     0BED  084B               	movf	(efgtoa@u+2)^(0+128),w
  5282     0BEE  00B6               	movwf	(efgtoa@ou+2)^(0+128)
  5283     0BEF  084A               	movf	(efgtoa@u+1)^(0+128),w
  5284     0BF0  00B5               	movwf	(efgtoa@ou+1)^(0+128)
  5285     0BF1  0849               	movf	efgtoa@u^(0+128),w
  5286     0BF2  00B4               	movwf	efgtoa@ou^(0+128)
  5287     0BF3                     l4401:	
  5288                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 736:     while (i
      +                           < m) {
  5289                           
  5290                           
  5291                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 736:     while (i
      +                           < m) {
  5292     0BF3  0841               	movf	(efgtoa@i+1)^(0+128),w
  5293     0BF4  3A80               	xorlw	128
  5294     0BF5  0020               	movlb	0	; select bank0
  5295     0BF6  00E7               	movwf	??_efgtoa
  5296     0BF7  0021               	movlb	1	; select bank1
  5297     0BF8  082E               	movf	(efgtoa@m+1)^(0+128),w
  5298     0BF9  3A80               	xorlw	128
  5299     0BFA  0020               	movlb	0	; select bank0
  5300     0BFB  0267               	subwf	??_efgtoa,w
  5301     0BFC  1D03               	skipz
  5302     0BFD  2C01               	goto	u5365
  5303     0BFE  0021               	movlb	1	; select bank1
  5304     0BFF  082D               	movf	efgtoa@m^(0+128),w
  5305     0C00  0240               	subwf	efgtoa@i^(0+128),w
  5306     0C01                     u5365:
  5307     0C01  1803               	btfsc	3,0
  5308     0C02  2CDB               	goto	l4403
  5309                           
  5310                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 737:         l = 
      +                          floorf(h/u.f);
  5311     0C03  0021               	movlb	1	; select bank1
  5312     0C04  084C               	movf	(efgtoa@u+3)^(0+128),w
  5313     0C05  0020               	movlb	0	; select bank0
  5314     0C06  00B7               	movwf	___fldiv@a+3
  5315     0C07  0021               	movlb	1	; select bank1
  5316     0C08  084B               	movf	(efgtoa@u+2)^(0+128),w
  5317     0C09  0020               	movlb	0	; select bank0
  5318     0C0A  00B6               	movwf	___fldiv@a+2
  5319     0C0B  0021               	movlb	1	; select bank1
  5320     0C0C  084A               	movf	(efgtoa@u+1)^(0+128),w
  5321     0C0D  0020               	movlb	0	; select bank0
  5322     0C0E  00B5               	movwf	___fldiv@a+1
  5323     0C0F  0021               	movlb	1	; select bank1
  5324     0C10  0849               	movf	efgtoa@u^(0+128),w
  5325     0C11  0020               	movlb	0	; select bank0
  5326     0C12  00B4               	movwf	___fldiv@a
  5327     0C13  0021               	movlb	1	; select bank1
  5328     0C14  083B               	movf	(efgtoa@h+3)^(0+128),w
  5329     0C15  0020               	movlb	0	; select bank0
  5330     0C16  00BB               	movwf	___fldiv@b+3
  5331     0C17  0021               	movlb	1	; select bank1
  5332     0C18  083A               	movf	(efgtoa@h+2)^(0+128),w
  5333     0C19  0020               	movlb	0	; select bank0
  5334     0C1A  00BA               	movwf	___fldiv@b+2
  5335     0C1B  0021               	movlb	1	; select bank1
  5336     0C1C  0839               	movf	(efgtoa@h+1)^(0+128),w
  5337     0C1D  0020               	movlb	0	; select bank0
  5338     0C1E  00B9               	movwf	___fldiv@b+1
  5339     0C1F  0021               	movlb	1	; select bank1
  5340     0C20  0838               	movf	efgtoa@h^(0+128),w
  5341     0C21  0020               	movlb	0	; select bank0
  5342     0C22  00B8               	movwf	___fldiv@b
  5343     0C23  3193  2349  3189   	fcall	___fldiv
  5344     0C26  0020               	movlb	0	; select bank0
  5345     0C27  0837               	movf	?___fldiv+3,w
  5346     0C28  00D1               	movwf	floorf@x+3
  5347     0C29  0836               	movf	?___fldiv+2,w
  5348     0C2A  00D0               	movwf	floorf@x+2
  5349     0C2B  0835               	movf	?___fldiv+1,w
  5350     0C2C  00CF               	movwf	floorf@x+1
  5351     0C2D  0834               	movf	?___fldiv,w
  5352     0C2E  00CE               	movwf	floorf@x
  5353     0C2F  3188  2094  3189   	fcall	_floorf
  5354     0C32  0020               	movlb	0	; select bank0
  5355     0C33  0851               	movf	?_floorf+3,w
  5356     0C34  0021               	movlb	1	; select bank1
  5357     0C35  00BF               	movwf	(efgtoa@l+3)^(0+128)
  5358     0C36  0020               	movlb	0	; select bank0
  5359     0C37  0850               	movf	?_floorf+2,w
  5360     0C38  0021               	movlb	1	; select bank1
  5361     0C39  00BE               	movwf	(efgtoa@l+2)^(0+128)
  5362     0C3A  0020               	movlb	0	; select bank0
  5363     0C3B  084F               	movf	?_floorf+1,w
  5364     0C3C  0021               	movlb	1	; select bank1
  5365     0C3D  00BD               	movwf	(efgtoa@l+1)^(0+128)
  5366     0C3E  0020               	movlb	0	; select bank0
  5367     0C3F  084E               	movf	?_floorf,w
  5368     0C40  0021               	movlb	1	; select bank1
  5369     0C41  00BC               	movwf	efgtoa@l^(0+128)
  5370                           
  5371                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 738:         d = 
      +                          (int)l;
  5372     0C42  083F               	movf	(efgtoa@l+3)^(0+128),w
  5373     0C43  0020               	movlb	0	; select bank0
  5374     0C44  00A3               	movwf	___fltol@f1+3
  5375     0C45  0021               	movlb	1	; select bank1
  5376     0C46  083E               	movf	(efgtoa@l+2)^(0+128),w
  5377     0C47  0020               	movlb	0	; select bank0
  5378     0C48  00A2               	movwf	___fltol@f1+2
  5379     0C49  0021               	movlb	1	; select bank1
  5380     0C4A  083D               	movf	(efgtoa@l+1)^(0+128),w
  5381     0C4B  0020               	movlb	0	; select bank0
  5382     0C4C  00A1               	movwf	___fltol@f1+1
  5383     0C4D  0021               	movlb	1	; select bank1
  5384     0C4E  083C               	movf	efgtoa@l^(0+128),w
  5385     0C4F  0020               	movlb	0	; select bank0
  5386     0C50  00A0               	movwf	___fltol@f1
  5387     0C51  3190  2061  3189   	fcall	___fltol
  5388     0C54  0020               	movlb	0	; select bank0
  5389     0C55  0821               	movf	?___fltol+1,w
  5390     0C56  0021               	movlb	1	; select bank1
  5391     0C57  00AC               	movwf	(efgtoa@d+1)^(0+128)
  5392     0C58  0020               	movlb	0	; select bank0
  5393     0C59  0820               	movf	?___fltol,w
  5394     0C5A  0021               	movlb	1	; select bank1
  5395     0C5B  00AB               	movwf	efgtoa@d^(0+128)
  5396                           
  5397                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 739:         h -=
      +                           l*u.f;
  5398     0C5C  084C               	movf	(efgtoa@u+3)^(0+128),w
  5399     0C5D  0020               	movlb	0	; select bank0
  5400     0C5E  00B0               	movwf	___flmul@a+3
  5401     0C5F  0021               	movlb	1	; select bank1
  5402     0C60  084B               	movf	(efgtoa@u+2)^(0+128),w
  5403     0C61  0020               	movlb	0	; select bank0
  5404     0C62  00AF               	movwf	___flmul@a+2
  5405     0C63  0021               	movlb	1	; select bank1
  5406     0C64  084A               	movf	(efgtoa@u+1)^(0+128),w
  5407     0C65  0020               	movlb	0	; select bank0
  5408     0C66  00AE               	movwf	___flmul@a+1
  5409     0C67  0021               	movlb	1	; select bank1
  5410     0C68  0849               	movf	efgtoa@u^(0+128),w
  5411     0C69  0020               	movlb	0	; select bank0
  5412     0C6A  00AD               	movwf	___flmul@a
  5413     0C6B  0021               	movlb	1	; select bank1
  5414     0C6C  083F               	movf	(efgtoa@l+3)^(0+128),w
  5415     0C6D  0020               	movlb	0	; select bank0
  5416     0C6E  00AC               	movwf	___flmul@b+3
  5417     0C6F  0021               	movlb	1	; select bank1
  5418     0C70  083E               	movf	(efgtoa@l+2)^(0+128),w
  5419     0C71  0020               	movlb	0	; select bank0
  5420     0C72  00AB               	movwf	___flmul@b+2
  5421     0C73  0021               	movlb	1	; select bank1
  5422     0C74  083D               	movf	(efgtoa@l+1)^(0+128),w
  5423     0C75  0020               	movlb	0	; select bank0
  5424     0C76  00AA               	movwf	___flmul@b+1
  5425     0C77  0021               	movlb	1	; select bank1
  5426     0C78  083C               	movf	efgtoa@l^(0+128),w
  5427     0C79  0020               	movlb	0	; select bank0
  5428     0C7A  00A9               	movwf	___flmul@b
  5429     0C7B  3184  24B4  3189   	fcall	___flmul
  5430     0C7E  0020               	movlb	0	; select bank0
  5431     0C7F  082C               	movf	?___flmul+3,w
  5432     0C80  00C6               	movwf	___flsub@a+3
  5433     0C81  082B               	movf	?___flmul+2,w
  5434     0C82  00C5               	movwf	___flsub@a+2
  5435     0C83  082A               	movf	?___flmul+1,w
  5436     0C84  00C4               	movwf	___flsub@a+1
  5437     0C85  0829               	movf	?___flmul,w
  5438     0C86  00C3               	movwf	___flsub@a
  5439     0C87  0021               	movlb	1	; select bank1
  5440     0C88  083B               	movf	(efgtoa@h+3)^(0+128),w
  5441     0C89  0020               	movlb	0	; select bank0
  5442     0C8A  00CA               	movwf	___flsub@b+3
  5443     0C8B  0021               	movlb	1	; select bank1
  5444     0C8C  083A               	movf	(efgtoa@h+2)^(0+128),w
  5445     0C8D  0020               	movlb	0	; select bank0
  5446     0C8E  00C9               	movwf	___flsub@b+2
  5447     0C8F  0021               	movlb	1	; select bank1
  5448     0C90  0839               	movf	(efgtoa@h+1)^(0+128),w
  5449     0C91  0020               	movlb	0	; select bank0
  5450     0C92  00C8               	movwf	___flsub@b+1
  5451     0C93  0021               	movlb	1	; select bank1
  5452     0C94  0838               	movf	efgtoa@h^(0+128),w
  5453     0C95  0020               	movlb	0	; select bank0
  5454     0C96  00C7               	movwf	___flsub@b
  5455     0C97  319D  2514  3189   	fcall	___flsub
  5456     0C9A  0020               	movlb	0	; select bank0
  5457     0C9B  0846               	movf	?___flsub+3,w
  5458     0C9C  0021               	movlb	1	; select bank1
  5459     0C9D  00BB               	movwf	(efgtoa@h+3)^(0+128)
  5460     0C9E  0020               	movlb	0	; select bank0
  5461     0C9F  0845               	movf	?___flsub+2,w
  5462     0CA0  0021               	movlb	1	; select bank1
  5463     0CA1  00BA               	movwf	(efgtoa@h+2)^(0+128)
  5464     0CA2  0020               	movlb	0	; select bank0
  5465     0CA3  0844               	movf	?___flsub+1,w
  5466     0CA4  0021               	movlb	1	; select bank1
  5467     0CA5  00B9               	movwf	(efgtoa@h+1)^(0+128)
  5468     0CA6  0020               	movlb	0	; select bank0
  5469     0CA7  0843               	movf	?___flsub,w
  5470     0CA8  0021               	movlb	1	; select bank1
  5471     0CA9  00B8               	movwf	efgtoa@h^(0+128)
  5472                           
  5473                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 740:         u.f 
      +                          = u.f/10.0;
  5474     0CAA  3041               	movlw	65
  5475     0CAB  0020               	movlb	0	; select bank0
  5476     0CAC  00B7               	movwf	___fldiv@a+3
  5477     0CAD  3020               	movlw	32
  5478     0CAE  00B6               	movwf	___fldiv@a+2
  5479     0CAF  3000               	movlw	0
  5480     0CB0  00B5               	movwf	___fldiv@a+1
  5481     0CB1  3000               	movlw	0
  5482     0CB2  00B4               	movwf	___fldiv@a
  5483     0CB3  0021               	movlb	1	; select bank1
  5484     0CB4  084C               	movf	(efgtoa@u+3)^(0+128),w
  5485     0CB5  0020               	movlb	0	; select bank0
  5486     0CB6  00BB               	movwf	___fldiv@b+3
  5487     0CB7  0021               	movlb	1	; select bank1
  5488     0CB8  084B               	movf	(efgtoa@u+2)^(0+128),w
  5489     0CB9  0020               	movlb	0	; select bank0
  5490     0CBA  00BA               	movwf	___fldiv@b+2
  5491     0CBB  0021               	movlb	1	; select bank1
  5492     0CBC  084A               	movf	(efgtoa@u+1)^(0+128),w
  5493     0CBD  0020               	movlb	0	; select bank0
  5494     0CBE  00B9               	movwf	___fldiv@b+1
  5495     0CBF  0021               	movlb	1	; select bank1
  5496     0CC0  0849               	movf	efgtoa@u^(0+128),w
  5497     0CC1  0020               	movlb	0	; select bank0
  5498     0CC2  00B8               	movwf	___fldiv@b
  5499     0CC3  3193  2349  3189   	fcall	___fldiv
  5500     0CC6  0020               	movlb	0	; select bank0
  5501     0CC7  0837               	movf	?___fldiv+3,w
  5502     0CC8  0021               	movlb	1	; select bank1
  5503     0CC9  00CC               	movwf	(efgtoa@u+3)^(0+128)
  5504     0CCA  0020               	movlb	0	; select bank0
  5505     0CCB  0836               	movf	?___fldiv+2,w
  5506     0CCC  0021               	movlb	1	; select bank1
  5507     0CCD  00CB               	movwf	(efgtoa@u+2)^(0+128)
  5508     0CCE  0020               	movlb	0	; select bank0
  5509     0CCF  0835               	movf	?___fldiv+1,w
  5510     0CD0  0021               	movlb	1	; select bank1
  5511     0CD1  00CA               	movwf	(efgtoa@u+1)^(0+128)
  5512     0CD2  0020               	movlb	0	; select bank0
  5513     0CD3  0834               	movf	?___fldiv,w
  5514     0CD4  0021               	movlb	1	; select bank1
  5515     0CD5  00C9               	movwf	efgtoa@u^(0+128)
  5516                           
  5517                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 741:         ++i;
  5518     0CD6  3001               	movlw	1
  5519     0CD7  07C0               	addwf	efgtoa@i^(0+128),f
  5520     0CD8  3000               	movlw	0
  5521     0CD9  3DC1               	addwfc	(efgtoa@i+1)^(0+128),f
  5522     0CDA  2BF3               	goto	l4401
  5523     0CDB                     l4403:
  5524                           
  5525                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 745:     l = u.f*
      +                          5.0;
  5526     0CDB  3040               	movlw	64
  5527     0CDC  0020               	movlb	0	; select bank0
  5528     0CDD  00AC               	movwf	___flmul@b+3
  5529     0CDE  30A0               	movlw	160
  5530     0CDF  00AB               	movwf	___flmul@b+2
  5531     0CE0  3000               	movlw	0
  5532     0CE1  00AA               	movwf	___flmul@b+1
  5533     0CE2  3000               	movlw	0
  5534     0CE3  00A9               	movwf	___flmul@b
  5535     0CE4  0021               	movlb	1	; select bank1
  5536     0CE5  084C               	movf	(efgtoa@u+3)^(0+128),w
  5537     0CE6  0020               	movlb	0	; select bank0
  5538     0CE7  00B0               	movwf	___flmul@a+3
  5539     0CE8  0021               	movlb	1	; select bank1
  5540     0CE9  084B               	movf	(efgtoa@u+2)^(0+128),w
  5541     0CEA  0020               	movlb	0	; select bank0
  5542     0CEB  00AF               	movwf	___flmul@a+2
  5543     0CEC  0021               	movlb	1	; select bank1
  5544     0CED  084A               	movf	(efgtoa@u+1)^(0+128),w
  5545     0CEE  0020               	movlb	0	; select bank0
  5546     0CEF  00AE               	movwf	___flmul@a+1
  5547     0CF0  0021               	movlb	1	; select bank1
  5548     0CF1  0849               	movf	efgtoa@u^(0+128),w
  5549     0CF2  0020               	movlb	0	; select bank0
  5550     0CF3  00AD               	movwf	___flmul@a
  5551     0CF4  3184  24B4  3189   	fcall	___flmul
  5552     0CF7  0020               	movlb	0	; select bank0
  5553     0CF8  082C               	movf	?___flmul+3,w
  5554     0CF9  0021               	movlb	1	; select bank1
  5555     0CFA  00BF               	movwf	(efgtoa@l+3)^(0+128)
  5556     0CFB  0020               	movlb	0	; select bank0
  5557     0CFC  082B               	movf	?___flmul+2,w
  5558     0CFD  0021               	movlb	1	; select bank1
  5559     0CFE  00BE               	movwf	(efgtoa@l+2)^(0+128)
  5560     0CFF  0020               	movlb	0	; select bank0
  5561     0D00  082A               	movf	?___flmul+1,w
  5562     0D01  0021               	movlb	1	; select bank1
  5563     0D02  00BD               	movwf	(efgtoa@l+1)^(0+128)
  5564     0D03  0020               	movlb	0	; select bank0
  5565     0D04  0829               	movf	?___flmul,w
  5566     0D05  0021               	movlb	1	; select bank1
  5567     0D06  00BC               	movwf	efgtoa@l^(0+128)
  5568                           
  5569                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 746:     if (h < 
      +                          l) {
  5570     0D07  083B               	movf	(efgtoa@h+3)^(0+128),w
  5571     0D08  0020               	movlb	0	; select bank0
  5572     0D09  00C6               	movwf	___flge@ff1+3
  5573     0D0A  0021               	movlb	1	; select bank1
  5574     0D0B  083A               	movf	(efgtoa@h+2)^(0+128),w
  5575     0D0C  0020               	movlb	0	; select bank0
  5576     0D0D  00C5               	movwf	___flge@ff1+2
  5577     0D0E  0021               	movlb	1	; select bank1
  5578     0D0F  0839               	movf	(efgtoa@h+1)^(0+128),w
  5579     0D10  0020               	movlb	0	; select bank0
  5580     0D11  00C4               	movwf	___flge@ff1+1
  5581     0D12  0021               	movlb	1	; select bank1
  5582     0D13  0838               	movf	efgtoa@h^(0+128),w
  5583     0D14  0020               	movlb	0	; select bank0
  5584     0D15  00C3               	movwf	___flge@ff1
  5585     0D16  0021               	movlb	1	; select bank1
  5586     0D17  083F               	movf	(efgtoa@l+3)^(0+128),w
  5587     0D18  0020               	movlb	0	; select bank0
  5588     0D19  00CA               	movwf	___flge@ff2+3
  5589     0D1A  0021               	movlb	1	; select bank1
  5590     0D1B  083E               	movf	(efgtoa@l+2)^(0+128),w
  5591     0D1C  0020               	movlb	0	; select bank0
  5592     0D1D  00C9               	movwf	___flge@ff2+2
  5593     0D1E  0021               	movlb	1	; select bank1
  5594     0D1F  083D               	movf	(efgtoa@l+1)^(0+128),w
  5595     0D20  0020               	movlb	0	; select bank0
  5596     0D21  00C8               	movwf	___flge@ff2+1
  5597     0D22  0021               	movlb	1	; select bank1
  5598     0D23  083C               	movf	efgtoa@l^(0+128),w
  5599     0D24  0020               	movlb	0	; select bank0
  5600     0D25  00C7               	movwf	___flge@ff2
  5601     0D26  3192  2210  3189   	fcall	___flge
  5602     0D29  1803               	btfsc	3,0
  5603     0D2A  2D2E               	goto	l4407
  5604                           
  5605                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 747:         l = 
      +                          0.0;
  5606     0D2B  3000               	movlw	0
  5607     0D2C  0021               	movlb	1	; select bank1
  5608     0D2D  2D57               	goto	L4
  5609     0D2E                     l4407:	
  5610                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 748:     } else {
  5611                           
  5612                           
  5613                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 750:         if (
      +                          (h == l) && !(d % 2)) {
  5614     0D2E  0021               	movlb	1	; select bank1
  5615     0D2F  083B               	movf	(efgtoa@h+3)^(0+128),w
  5616     0D30  0020               	movlb	0	; select bank0
  5617     0D31  00A3               	movwf	___fleq@ff1+3
  5618     0D32  0021               	movlb	1	; select bank1
  5619     0D33  083A               	movf	(efgtoa@h+2)^(0+128),w
  5620     0D34  0020               	movlb	0	; select bank0
  5621     0D35  00A2               	movwf	___fleq@ff1+2
  5622     0D36  0021               	movlb	1	; select bank1
  5623     0D37  0839               	movf	(efgtoa@h+1)^(0+128),w
  5624     0D38  0020               	movlb	0	; select bank0
  5625     0D39  00A1               	movwf	___fleq@ff1+1
  5626     0D3A  0021               	movlb	1	; select bank1
  5627     0D3B  0838               	movf	efgtoa@h^(0+128),w
  5628     0D3C  0020               	movlb	0	; select bank0
  5629     0D3D  00A0               	movwf	___fleq@ff1
  5630     0D3E  0021               	movlb	1	; select bank1
  5631     0D3F  083F               	movf	(efgtoa@l+3)^(0+128),w
  5632     0D40  0020               	movlb	0	; select bank0
  5633     0D41  00A7               	movwf	___fleq@ff2+3
  5634     0D42  0021               	movlb	1	; select bank1
  5635     0D43  083E               	movf	(efgtoa@l+2)^(0+128),w
  5636     0D44  0020               	movlb	0	; select bank0
  5637     0D45  00A6               	movwf	___fleq@ff2+2
  5638     0D46  0021               	movlb	1	; select bank1
  5639     0D47  083D               	movf	(efgtoa@l+1)^(0+128),w
  5640     0D48  0020               	movlb	0	; select bank0
  5641     0D49  00A5               	movwf	___fleq@ff2+1
  5642     0D4A  0021               	movlb	1	; select bank1
  5643     0D4B  083C               	movf	efgtoa@l^(0+128),w
  5644     0D4C  0020               	movlb	0	; select bank0
  5645     0D4D  00A4               	movwf	___fleq@ff2
  5646     0D4E  319E  26C6  3189   	fcall	___fleq
  5647     0D51  1C03               	btfss	3,0
  5648     0D52  2D5E               	goto	l4413
  5649     0D53  0021               	movlb	1	; select bank1
  5650     0D54  182B               	btfsc	efgtoa@d^(0+128),0
  5651     0D55  2D5E               	goto	l4413
  5652                           
  5653                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 751:             
      +                          l = 0.0;
  5654     0D56  3000               	movlw	0
  5655     0D57                     L4:
  5656     0D57  00BF               	movwf	(efgtoa@l+3)^(0+128)
  5657     0D58  3000               	movlw	0
  5658     0D59  00BE               	movwf	(efgtoa@l+2)^(0+128)
  5659     0D5A  3000               	movlw	0
  5660     0D5B  00BD               	movwf	(efgtoa@l+1)^(0+128)
  5661     0D5C  3000               	movlw	0
  5662     0D5D  00BC               	movwf	efgtoa@l^(0+128)
  5663     0D5E                     l4413:
  5664                           
  5665                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 756:     h = g.f 
      +                          + l;
  5666     0D5E  0021               	movlb	1	; select bank1
  5667     0D5F  083F               	movf	(efgtoa@l+3)^(0+128),w
  5668     0D60  0020               	movlb	0	; select bank0
  5669     0D61  00A3               	movwf	___fladd@b+3
  5670     0D62  0021               	movlb	1	; select bank1
  5671     0D63  083E               	movf	(efgtoa@l+2)^(0+128),w
  5672     0D64  0020               	movlb	0	; select bank0
  5673     0D65  00A2               	movwf	___fladd@b+2
  5674     0D66  0021               	movlb	1	; select bank1
  5675     0D67  083D               	movf	(efgtoa@l+1)^(0+128),w
  5676     0D68  0020               	movlb	0	; select bank0
  5677     0D69  00A1               	movwf	___fladd@b+1
  5678     0D6A  0021               	movlb	1	; select bank1
  5679     0D6B  083C               	movf	efgtoa@l^(0+128),w
  5680     0D6C  0020               	movlb	0	; select bank0
  5681     0D6D  00A0               	movwf	___fladd@b
  5682     0D6E  0021               	movlb	1	; select bank1
  5683     0D6F  0846               	movf	(efgtoa@g+3)^(0+128),w
  5684     0D70  0020               	movlb	0	; select bank0
  5685     0D71  00A7               	movwf	___fladd@a+3
  5686     0D72  0021               	movlb	1	; select bank1
  5687     0D73  0845               	movf	(efgtoa@g+2)^(0+128),w
  5688     0D74  0020               	movlb	0	; select bank0
  5689     0D75  00A6               	movwf	___fladd@a+2
  5690     0D76  0021               	movlb	1	; select bank1
  5691     0D77  0844               	movf	(efgtoa@g+1)^(0+128),w
  5692     0D78  0020               	movlb	0	; select bank0
  5693     0D79  00A5               	movwf	___fladd@a+1
  5694     0D7A  0021               	movlb	1	; select bank1
  5695     0D7B  0843               	movf	efgtoa@g^(0+128),w
  5696     0D7C  0020               	movlb	0	; select bank0
  5697     0D7D  00A4               	movwf	___fladd@a
  5698     0D7E  3196  264E  3189   	fcall	___fladd
  5699     0D81  0020               	movlb	0	; select bank0
  5700     0D82  0823               	movf	?___fladd+3,w
  5701     0D83  0021               	movlb	1	; select bank1
  5702     0D84  00BB               	movwf	(efgtoa@h+3)^(0+128)
  5703     0D85  0020               	movlb	0	; select bank0
  5704     0D86  0822               	movf	?___fladd+2,w
  5705     0D87  0021               	movlb	1	; select bank1
  5706     0D88  00BA               	movwf	(efgtoa@h+2)^(0+128)
  5707     0D89  0020               	movlb	0	; select bank0
  5708     0D8A  0821               	movf	?___fladd+1,w
  5709     0D8B  0021               	movlb	1	; select bank1
  5710     0D8C  00B9               	movwf	(efgtoa@h+1)^(0+128)
  5711     0D8D  0020               	movlb	0	; select bank0
  5712     0D8E  0820               	movf	?___fladd,w
  5713     0D8F  0021               	movlb	1	; select bank1
  5714     0D90  00B8               	movwf	efgtoa@h^(0+128)
  5715                           
  5716                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 758:  if (h >= (o
      +                          u.f*10.0)) {
  5717     0D91  083B               	movf	(efgtoa@h+3)^(0+128),w
  5718     0D92  0020               	movlb	0	; select bank0
  5719     0D93  00C6               	movwf	___flge@ff1+3
  5720     0D94  0021               	movlb	1	; select bank1
  5721     0D95  083A               	movf	(efgtoa@h+2)^(0+128),w
  5722     0D96  0020               	movlb	0	; select bank0
  5723     0D97  00C5               	movwf	___flge@ff1+2
  5724     0D98  0021               	movlb	1	; select bank1
  5725     0D99  0839               	movf	(efgtoa@h+1)^(0+128),w
  5726     0D9A  0020               	movlb	0	; select bank0
  5727     0D9B  00C4               	movwf	___flge@ff1+1
  5728     0D9C  0021               	movlb	1	; select bank1
  5729     0D9D  0838               	movf	efgtoa@h^(0+128),w
  5730     0D9E  0020               	movlb	0	; select bank0
  5731     0D9F  00C3               	movwf	___flge@ff1
  5732     0DA0  3041               	movlw	65
  5733     0DA1  00AC               	movwf	___flmul@b+3
  5734     0DA2  3020               	movlw	32
  5735     0DA3  00AB               	movwf	___flmul@b+2
  5736     0DA4  3000               	movlw	0
  5737     0DA5  00AA               	movwf	___flmul@b+1
  5738     0DA6  3000               	movlw	0
  5739     0DA7  00A9               	movwf	___flmul@b
  5740     0DA8  0021               	movlb	1	; select bank1
  5741     0DA9  0837               	movf	(efgtoa@ou+3)^(0+128),w
  5742     0DAA  0020               	movlb	0	; select bank0
  5743     0DAB  00B0               	movwf	___flmul@a+3
  5744     0DAC  0021               	movlb	1	; select bank1
  5745     0DAD  0836               	movf	(efgtoa@ou+2)^(0+128),w
  5746     0DAE  0020               	movlb	0	; select bank0
  5747     0DAF  00AF               	movwf	___flmul@a+2
  5748     0DB0  0021               	movlb	1	; select bank1
  5749     0DB1  0835               	movf	(efgtoa@ou+1)^(0+128),w
  5750     0DB2  0020               	movlb	0	; select bank0
  5751     0DB3  00AE               	movwf	___flmul@a+1
  5752     0DB4  0021               	movlb	1	; select bank1
  5753     0DB5  0834               	movf	efgtoa@ou^(0+128),w
  5754     0DB6  0020               	movlb	0	; select bank0
  5755     0DB7  00AD               	movwf	___flmul@a
  5756     0DB8  3184  24B4  3189   	fcall	___flmul
  5757     0DBB  0020               	movlb	0	; select bank0
  5758     0DBC  082C               	movf	?___flmul+3,w
  5759     0DBD  00CA               	movwf	___flge@ff2+3
  5760     0DBE  082B               	movf	?___flmul+2,w
  5761     0DBF  00C9               	movwf	___flge@ff2+2
  5762     0DC0  082A               	movf	?___flmul+1,w
  5763     0DC1  00C8               	movwf	___flge@ff2+1
  5764     0DC2  0829               	movf	?___flmul,w
  5765     0DC3  00C7               	movwf	___flge@ff2
  5766     0DC4  3192  2210  3189   	fcall	___flge
  5767     0DC7  1C03               	btfss	3,0
  5768     0DC8  2E02               	goto	l1120
  5769                           
  5770                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 759:   e++;
  5771     0DC9  3001               	movlw	1
  5772     0DCA  0021               	movlb	1	; select bank1
  5773     0DCB  07B0               	addwf	efgtoa@e^(0+128),f
  5774     0DCC  3000               	movlw	0
  5775     0DCD  3DB1               	addwfc	(efgtoa@e+1)^(0+128),f
  5776                           
  5777                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 760:   ou.f *= 10
      +                          .0;
  5778     0DCE  3041               	movlw	65
  5779     0DCF  0020               	movlb	0	; select bank0
  5780     0DD0  00AC               	movwf	___flmul@b+3
  5781     0DD1  3020               	movlw	32
  5782     0DD2  00AB               	movwf	___flmul@b+2
  5783     0DD3  3000               	movlw	0
  5784     0DD4  00AA               	movwf	___flmul@b+1
  5785     0DD5  3000               	movlw	0
  5786     0DD6  00A9               	movwf	___flmul@b
  5787     0DD7  0021               	movlb	1	; select bank1
  5788     0DD8  0837               	movf	(efgtoa@ou+3)^(0+128),w
  5789     0DD9  0020               	movlb	0	; select bank0
  5790     0DDA  00B0               	movwf	___flmul@a+3
  5791     0DDB  0021               	movlb	1	; select bank1
  5792     0DDC  0836               	movf	(efgtoa@ou+2)^(0+128),w
  5793     0DDD  0020               	movlb	0	; select bank0
  5794     0DDE  00AF               	movwf	___flmul@a+2
  5795     0DDF  0021               	movlb	1	; select bank1
  5796     0DE0  0835               	movf	(efgtoa@ou+1)^(0+128),w
  5797     0DE1  0020               	movlb	0	; select bank0
  5798     0DE2  00AE               	movwf	___flmul@a+1
  5799     0DE3  0021               	movlb	1	; select bank1
  5800     0DE4  0834               	movf	efgtoa@ou^(0+128),w
  5801     0DE5  0020               	movlb	0	; select bank0
  5802     0DE6  00AD               	movwf	___flmul@a
  5803     0DE7  3184  24B4  3189   	fcall	___flmul
  5804     0DEA  0020               	movlb	0	; select bank0
  5805     0DEB  082C               	movf	?___flmul+3,w
  5806     0DEC  0021               	movlb	1	; select bank1
  5807     0DED  00B7               	movwf	(efgtoa@ou+3)^(0+128)
  5808     0DEE  0020               	movlb	0	; select bank0
  5809     0DEF  082B               	movf	?___flmul+2,w
  5810     0DF0  0021               	movlb	1	; select bank1
  5811     0DF1  00B6               	movwf	(efgtoa@ou+2)^(0+128)
  5812     0DF2  0020               	movlb	0	; select bank0
  5813     0DF3  082A               	movf	?___flmul+1,w
  5814     0DF4  0021               	movlb	1	; select bank1
  5815     0DF5  00B5               	movwf	(efgtoa@ou+1)^(0+128)
  5816     0DF6  0020               	movlb	0	; select bank0
  5817     0DF7  0829               	movf	?___flmul,w
  5818     0DF8  0021               	movlb	1	; select bank1
  5819     0DF9  00B4               	movwf	efgtoa@ou^(0+128)
  5820                           
  5821                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 762:   if (nmode 
      +                          == 'f') {
  5822     0DFA  3066               	movlw	102
  5823     0DFB  062A               	xorwf	efgtoa@nmode^(0+128),w
  5824     0DFC  1D03               	btfss	3,2
  5825     0DFD  2E02               	goto	l1120
  5826                           
  5827                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 764:    m++;
  5828     0DFE  3001               	movlw	1
  5829     0DFF  07AD               	addwf	efgtoa@m^(0+128),f
  5830     0E00  3000               	movlw	0
  5831     0E01  3DAE               	addwfc	(efgtoa@m+1)^(0+128),f
  5832     0E02                     l1120:	
  5833                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 767:  }
  5834                           
  5835                           
  5836                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 770:     u = ou;
  5837     0E02  0021               	movlb	1	; select bank1
  5838     0E03  0837               	movf	(efgtoa@ou+3)^(0+128),w
  5839     0E04  00CC               	movwf	(efgtoa@u+3)^(0+128)
  5840     0E05  0836               	movf	(efgtoa@ou+2)^(0+128),w
  5841     0E06  00CB               	movwf	(efgtoa@u+2)^(0+128)
  5842     0E07  0835               	movf	(efgtoa@ou+1)^(0+128),w
  5843     0E08  00CA               	movwf	(efgtoa@u+1)^(0+128)
  5844     0E09  0834               	movf	efgtoa@ou^(0+128),w
  5845     0E0A  00C9               	movwf	efgtoa@u^(0+128)
  5846                           
  5847                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 774:  ne = e;
  5848     0E0B  0831               	movf	(efgtoa@e+1)^(0+128),w
  5849     0E0C  00A1               	movwf	(efgtoa@ne+1)^(0+128)
  5850     0E0D  0830               	movf	efgtoa@e^(0+128),w
  5851     0E0E  00A0               	movwf	efgtoa@ne^(0+128)
  5852                           
  5853                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 776:     pp = 0;
  5854     0E0F  01A8               	clrf	efgtoa@pp^(0+128)
  5855                           
  5856                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 777:     t = 0;
  5857     0E10  01A4               	clrf	efgtoa@t^(0+128)
  5858     0E11  01A5               	clrf	(efgtoa@t+1)^(0+128)
  5859                           
  5860                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 778:     i = 0;
  5861     0E12  01C0               	clrf	efgtoa@i^(0+128)
  5862     0E13  01C1               	clrf	(efgtoa@i+1)^(0+128)
  5863                           
  5864                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 779:     while ((
      +                          i < m) && (n < (80 - 5))) {
  5865     0E14  2F52               	goto	l4473
  5866     0E15                     l4431:
  5867                           
  5868                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 780:         l = 
      +                          floorf(h/u.f);
  5869     0E15  0021               	movlb	1	; select bank1
  5870     0E16  084C               	movf	(efgtoa@u+3)^(0+128),w
  5871     0E17  0020               	movlb	0	; select bank0
  5872     0E18  00B7               	movwf	___fldiv@a+3
  5873     0E19  0021               	movlb	1	; select bank1
  5874     0E1A  084B               	movf	(efgtoa@u+2)^(0+128),w
  5875     0E1B  0020               	movlb	0	; select bank0
  5876     0E1C  00B6               	movwf	___fldiv@a+2
  5877     0E1D  0021               	movlb	1	; select bank1
  5878     0E1E  084A               	movf	(efgtoa@u+1)^(0+128),w
  5879     0E1F  0020               	movlb	0	; select bank0
  5880     0E20  00B5               	movwf	___fldiv@a+1
  5881     0E21  0021               	movlb	1	; select bank1
  5882     0E22  0849               	movf	efgtoa@u^(0+128),w
  5883     0E23  0020               	movlb	0	; select bank0
  5884     0E24  00B4               	movwf	___fldiv@a
  5885     0E25  0021               	movlb	1	; select bank1
  5886     0E26  083B               	movf	(efgtoa@h+3)^(0+128),w
  5887     0E27  0020               	movlb	0	; select bank0
  5888     0E28  00BB               	movwf	___fldiv@b+3
  5889     0E29  0021               	movlb	1	; select bank1
  5890     0E2A  083A               	movf	(efgtoa@h+2)^(0+128),w
  5891     0E2B  0020               	movlb	0	; select bank0
  5892     0E2C  00BA               	movwf	___fldiv@b+2
  5893     0E2D  0021               	movlb	1	; select bank1
  5894     0E2E  0839               	movf	(efgtoa@h+1)^(0+128),w
  5895     0E2F  0020               	movlb	0	; select bank0
  5896     0E30  00B9               	movwf	___fldiv@b+1
  5897     0E31  0021               	movlb	1	; select bank1
  5898     0E32  0838               	movf	efgtoa@h^(0+128),w
  5899     0E33  0020               	movlb	0	; select bank0
  5900     0E34  00B8               	movwf	___fldiv@b
  5901     0E35  3193  2349  3189   	fcall	___fldiv
  5902     0E38  0020               	movlb	0	; select bank0
  5903     0E39  0837               	movf	?___fldiv+3,w
  5904     0E3A  00D1               	movwf	floorf@x+3
  5905     0E3B  0836               	movf	?___fldiv+2,w
  5906     0E3C  00D0               	movwf	floorf@x+2
  5907     0E3D  0835               	movf	?___fldiv+1,w
  5908     0E3E  00CF               	movwf	floorf@x+1
  5909     0E3F  0834               	movf	?___fldiv,w
  5910     0E40  00CE               	movwf	floorf@x
  5911     0E41  3188  2094  3189   	fcall	_floorf
  5912     0E44  0020               	movlb	0	; select bank0
  5913     0E45  0851               	movf	?_floorf+3,w
  5914     0E46  0021               	movlb	1	; select bank1
  5915     0E47  00BF               	movwf	(efgtoa@l+3)^(0+128)
  5916     0E48  0020               	movlb	0	; select bank0
  5917     0E49  0850               	movf	?_floorf+2,w
  5918     0E4A  0021               	movlb	1	; select bank1
  5919     0E4B  00BE               	movwf	(efgtoa@l+2)^(0+128)
  5920     0E4C  0020               	movlb	0	; select bank0
  5921     0E4D  084F               	movf	?_floorf+1,w
  5922     0E4E  0021               	movlb	1	; select bank1
  5923     0E4F  00BD               	movwf	(efgtoa@l+1)^(0+128)
  5924     0E50  0020               	movlb	0	; select bank0
  5925     0E51  084E               	movf	?_floorf,w
  5926     0E52  0021               	movlb	1	; select bank1
  5927     0E53  00BC               	movwf	efgtoa@l^(0+128)
  5928                           
  5929                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 781:         d = 
      +                          (int)l > 9 ? 9 : (int)l;
  5930     0E54  083F               	movf	(efgtoa@l+3)^(0+128),w
  5931     0E55  0020               	movlb	0	; select bank0
  5932     0E56  00A3               	movwf	___fltol@f1+3
  5933     0E57  0021               	movlb	1	; select bank1
  5934     0E58  083E               	movf	(efgtoa@l+2)^(0+128),w
  5935     0E59  0020               	movlb	0	; select bank0
  5936     0E5A  00A2               	movwf	___fltol@f1+2
  5937     0E5B  0021               	movlb	1	; select bank1
  5938     0E5C  083D               	movf	(efgtoa@l+1)^(0+128),w
  5939     0E5D  0020               	movlb	0	; select bank0
  5940     0E5E  00A1               	movwf	___fltol@f1+1
  5941     0E5F  0021               	movlb	1	; select bank1
  5942     0E60  083C               	movf	efgtoa@l^(0+128),w
  5943     0E61  0020               	movlb	0	; select bank0
  5944     0E62  00A0               	movwf	___fltol@f1
  5945     0E63  3190  2061  3189   	fcall	___fltol
  5946     0E66  0020               	movlb	0	; select bank0
  5947     0E67  0821               	movf	?___fltol+1,w
  5948     0E68  3A80               	xorlw	128
  5949     0E69  00E7               	movwf	??_efgtoa
  5950     0E6A  3080               	movlw	128
  5951     0E6B  0267               	subwf	??_efgtoa,w
  5952     0E6C  1D03               	skipz
  5953     0E6D  2E70               	goto	u5425
  5954     0E6E  300A               	movlw	10
  5955     0E6F  0220               	subwf	?___fltol,w
  5956     0E70                     u5425:
  5957     0E70  1803               	skipnc
  5958     0E71  2E8E               	goto	l4435
  5959     0E72  0021               	movlb	1	; select bank1
  5960     0E73  083F               	movf	(efgtoa@l+3)^(0+128),w
  5961     0E74  0020               	movlb	0	; select bank0
  5962     0E75  00A3               	movwf	___fltol@f1+3
  5963     0E76  0021               	movlb	1	; select bank1
  5964     0E77  083E               	movf	(efgtoa@l+2)^(0+128),w
  5965     0E78  0020               	movlb	0	; select bank0
  5966     0E79  00A2               	movwf	___fltol@f1+2
  5967     0E7A  0021               	movlb	1	; select bank1
  5968     0E7B  083D               	movf	(efgtoa@l+1)^(0+128),w
  5969     0E7C  0020               	movlb	0	; select bank0
  5970     0E7D  00A1               	movwf	___fltol@f1+1
  5971     0E7E  0021               	movlb	1	; select bank1
  5972     0E7F  083C               	movf	efgtoa@l^(0+128),w
  5973     0E80  0020               	movlb	0	; select bank0
  5974     0E81  00A0               	movwf	___fltol@f1
  5975     0E82  3190  2061  3189   	fcall	___fltol
  5976     0E85  0020               	movlb	0	; select bank0
  5977     0E86  0821               	movf	?___fltol+1,w
  5978     0E87  0021               	movlb	1	; select bank1
  5979     0E88  00AC               	movwf	(efgtoa@d+1)^(0+128)
  5980     0E89  0020               	movlb	0	; select bank0
  5981     0E8A  0820               	movf	?___fltol,w
  5982     0E8B  0021               	movlb	1	; select bank1
  5983     0E8C  00AB               	movwf	efgtoa@d^(0+128)
  5984     0E8D  2E93               	goto	l4437
  5985     0E8E                     l4435:
  5986     0E8E  3009               	movlw	9
  5987     0E8F  0021               	movlb	1	; select bank1
  5988     0E90  00AB               	movwf	efgtoa@d^(0+128)
  5989     0E91  3000               	movlw	0
  5990     0E92  00AC               	movwf	(efgtoa@d^(0+128)+1)
  5991     0E93                     l4437:
  5992                           
  5993                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 792:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 793:             if (!pp &
      +                          & (ne < 0)) {
  5994     0E93  0828               	movf	efgtoa@pp^(0+128),w
  5995     0E94  1903               	btfsc	3,2
  5996     0E95  1FA1               	btfss	(efgtoa@ne+1)^(0+128),7
  5997     0E96  2EA8               	goto	l4457
  5998                           
  5999                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 794:             
      +                              dbuf[n++] = '.';
  6000     0E97  0847               	movf	efgtoa@n^(0+128),w
  6001     0E98  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6002     0E99  0086               	movwf	6
  6003     0E9A  3002               	movlw	2	; select bank4/5
  6004     0E9B  0087               	movwf	7
  6005     0E9C  302E               	movlw	46
  6006     0E9D  0081               	movwf	1
  6007     0E9E  3001               	movlw	1
  6008     0E9F  07C7               	addwf	efgtoa@n^(0+128),f
  6009     0EA0  3000               	movlw	0
  6010     0EA1  3DC8               	addwfc	(efgtoa@n+1)^(0+128),f
  6011                           
  6012                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 795:             
      +                              --w;
  6013     0EA2  30FF               	movlw	255
  6014     0EA3  07B2               	addwf	efgtoa@w^(0+128),f
  6015     0EA4  30FF               	movlw	255
  6016     0EA5  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  6017                           
  6018                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 796:             
      +                              pp = 1;
  6019     0EA6  01A8               	clrf	efgtoa@pp^(0+128)
  6020     0EA7  0AA8               	incf	efgtoa@pp^(0+128),f
  6021     0EA8                     l4457:
  6022                           
  6023                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 798:             
      +                          while (t) {
  6024     0EA8  0824               	movf	efgtoa@t^(0+128),w
  6025     0EA9  0425               	iorwf	(efgtoa@t+1)^(0+128),w
  6026     0EAA  1903               	btfsc	3,2
  6027     0EAB  2EC0               	goto	l4459
  6028                           
  6029                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 799:             
      +                              dbuf[n++] = '0';
  6030     0EAC  0847               	movf	efgtoa@n^(0+128),w
  6031     0EAD  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6032     0EAE  0086               	movwf	6
  6033     0EAF  3002               	movlw	2	; select bank4/5
  6034     0EB0  0087               	movwf	7
  6035     0EB1  3030               	movlw	48
  6036     0EB2  0081               	movwf	1
  6037     0EB3  3001               	movlw	1
  6038     0EB4  07C7               	addwf	efgtoa@n^(0+128),f
  6039     0EB5  3000               	movlw	0
  6040     0EB6  3DC8               	addwfc	(efgtoa@n+1)^(0+128),f
  6041                           
  6042                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 800:             
      +                              --w;
  6043     0EB7  30FF               	movlw	255
  6044     0EB8  07B2               	addwf	efgtoa@w^(0+128),f
  6045     0EB9  30FF               	movlw	255
  6046     0EBA  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  6047                           
  6048                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 801:             
      +                              --t;
  6049     0EBB  30FF               	movlw	255
  6050     0EBC  07A4               	addwf	efgtoa@t^(0+128),f
  6051     0EBD  30FF               	movlw	255
  6052     0EBE  3DA5               	addwfc	(efgtoa@t+1)^(0+128),f
  6053     0EBF  2EA8               	goto	l4457
  6054     0EC0                     l4459:
  6055                           
  6056                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 803:             
      +                          dbuf[n++] = (char)((int)'0' + d);
  6057     0EC0  0847               	movf	efgtoa@n^(0+128),w
  6058     0EC1  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6059     0EC2  0086               	movwf	6
  6060     0EC3  3002               	movlw	2	; select bank4/5
  6061     0EC4  0087               	movwf	7
  6062     0EC5  082B               	movf	efgtoa@d^(0+128),w
  6063     0EC6  3E30               	addlw	48
  6064     0EC7  0081               	movwf	1
  6065     0EC8  3001               	movlw	1
  6066     0EC9  07C7               	addwf	efgtoa@n^(0+128),f
  6067     0ECA  3000               	movlw	0
  6068     0ECB  3DC8               	addwfc	(efgtoa@n+1)^(0+128),f
  6069                           
  6070                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 804:             
      +                          --w;
  6071     0ECC  30FF               	movlw	255
  6072     0ECD  07B2               	addwf	efgtoa@w^(0+128),f
  6073     0ECE  30FF               	movlw	255
  6074     0ECF  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  6075                           
  6076                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 805:         };C:
      +                          \Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 806:         h -= l*
      +                          u.f;
  6077     0ED0  084C               	movf	(efgtoa@u+3)^(0+128),w
  6078     0ED1  0020               	movlb	0	; select bank0
  6079     0ED2  00B0               	movwf	___flmul@a+3
  6080     0ED3  0021               	movlb	1	; select bank1
  6081     0ED4  084B               	movf	(efgtoa@u+2)^(0+128),w
  6082     0ED5  0020               	movlb	0	; select bank0
  6083     0ED6  00AF               	movwf	___flmul@a+2
  6084     0ED7  0021               	movlb	1	; select bank1
  6085     0ED8  084A               	movf	(efgtoa@u+1)^(0+128),w
  6086     0ED9  0020               	movlb	0	; select bank0
  6087     0EDA  00AE               	movwf	___flmul@a+1
  6088     0EDB  0021               	movlb	1	; select bank1
  6089     0EDC  0849               	movf	efgtoa@u^(0+128),w
  6090     0EDD  0020               	movlb	0	; select bank0
  6091     0EDE  00AD               	movwf	___flmul@a
  6092     0EDF  0021               	movlb	1	; select bank1
  6093     0EE0  083F               	movf	(efgtoa@l+3)^(0+128),w
  6094     0EE1  0020               	movlb	0	; select bank0
  6095     0EE2  00AC               	movwf	___flmul@b+3
  6096     0EE3  0021               	movlb	1	; select bank1
  6097     0EE4  083E               	movf	(efgtoa@l+2)^(0+128),w
  6098     0EE5  0020               	movlb	0	; select bank0
  6099     0EE6  00AB               	movwf	___flmul@b+2
  6100     0EE7  0021               	movlb	1	; select bank1
  6101     0EE8  083D               	movf	(efgtoa@l+1)^(0+128),w
  6102     0EE9  0020               	movlb	0	; select bank0
  6103     0EEA  00AA               	movwf	___flmul@b+1
  6104     0EEB  0021               	movlb	1	; select bank1
  6105     0EEC  083C               	movf	efgtoa@l^(0+128),w
  6106     0EED  0020               	movlb	0	; select bank0
  6107     0EEE  00A9               	movwf	___flmul@b
  6108     0EEF  3184  24B4  3189   	fcall	___flmul
  6109     0EF2  0020               	movlb	0	; select bank0
  6110     0EF3  082C               	movf	?___flmul+3,w
  6111     0EF4  00C6               	movwf	___flsub@a+3
  6112     0EF5  082B               	movf	?___flmul+2,w
  6113     0EF6  00C5               	movwf	___flsub@a+2
  6114     0EF7  082A               	movf	?___flmul+1,w
  6115     0EF8  00C4               	movwf	___flsub@a+1
  6116     0EF9  0829               	movf	?___flmul,w
  6117     0EFA  00C3               	movwf	___flsub@a
  6118     0EFB  0021               	movlb	1	; select bank1
  6119     0EFC  083B               	movf	(efgtoa@h+3)^(0+128),w
  6120     0EFD  0020               	movlb	0	; select bank0
  6121     0EFE  00CA               	movwf	___flsub@b+3
  6122     0EFF  0021               	movlb	1	; select bank1
  6123     0F00  083A               	movf	(efgtoa@h+2)^(0+128),w
  6124     0F01  0020               	movlb	0	; select bank0
  6125     0F02  00C9               	movwf	___flsub@b+2
  6126     0F03  0021               	movlb	1	; select bank1
  6127     0F04  0839               	movf	(efgtoa@h+1)^(0+128),w
  6128     0F05  0020               	movlb	0	; select bank0
  6129     0F06  00C8               	movwf	___flsub@b+1
  6130     0F07  0021               	movlb	1	; select bank1
  6131     0F08  0838               	movf	efgtoa@h^(0+128),w
  6132     0F09  0020               	movlb	0	; select bank0
  6133     0F0A  00C7               	movwf	___flsub@b
  6134     0F0B  319D  2514  3189   	fcall	___flsub
  6135     0F0E  0020               	movlb	0	; select bank0
  6136     0F0F  0846               	movf	?___flsub+3,w
  6137     0F10  0021               	movlb	1	; select bank1
  6138     0F11  00BB               	movwf	(efgtoa@h+3)^(0+128)
  6139     0F12  0020               	movlb	0	; select bank0
  6140     0F13  0845               	movf	?___flsub+2,w
  6141     0F14  0021               	movlb	1	; select bank1
  6142     0F15  00BA               	movwf	(efgtoa@h+2)^(0+128)
  6143     0F16  0020               	movlb	0	; select bank0
  6144     0F17  0844               	movf	?___flsub+1,w
  6145     0F18  0021               	movlb	1	; select bank1
  6146     0F19  00B9               	movwf	(efgtoa@h+1)^(0+128)
  6147     0F1A  0020               	movlb	0	; select bank0
  6148     0F1B  0843               	movf	?___flsub,w
  6149     0F1C  0021               	movlb	1	; select bank1
  6150     0F1D  00B8               	movwf	efgtoa@h^(0+128)
  6151                           
  6152                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 807:         u.f 
      +                          = u.f/10.0;
  6153     0F1E  3041               	movlw	65
  6154     0F1F  0020               	movlb	0	; select bank0
  6155     0F20  00B7               	movwf	___fldiv@a+3
  6156     0F21  3020               	movlw	32
  6157     0F22  00B6               	movwf	___fldiv@a+2
  6158     0F23  3000               	movlw	0
  6159     0F24  00B5               	movwf	___fldiv@a+1
  6160     0F25  3000               	movlw	0
  6161     0F26  00B4               	movwf	___fldiv@a
  6162     0F27  0021               	movlb	1	; select bank1
  6163     0F28  084C               	movf	(efgtoa@u+3)^(0+128),w
  6164     0F29  0020               	movlb	0	; select bank0
  6165     0F2A  00BB               	movwf	___fldiv@b+3
  6166     0F2B  0021               	movlb	1	; select bank1
  6167     0F2C  084B               	movf	(efgtoa@u+2)^(0+128),w
  6168     0F2D  0020               	movlb	0	; select bank0
  6169     0F2E  00BA               	movwf	___fldiv@b+2
  6170     0F2F  0021               	movlb	1	; select bank1
  6171     0F30  084A               	movf	(efgtoa@u+1)^(0+128),w
  6172     0F31  0020               	movlb	0	; select bank0
  6173     0F32  00B9               	movwf	___fldiv@b+1
  6174     0F33  0021               	movlb	1	; select bank1
  6175     0F34  0849               	movf	efgtoa@u^(0+128),w
  6176     0F35  0020               	movlb	0	; select bank0
  6177     0F36  00B8               	movwf	___fldiv@b
  6178     0F37  3193  2349  3189   	fcall	___fldiv
  6179     0F3A  0020               	movlb	0	; select bank0
  6180     0F3B  0837               	movf	?___fldiv+3,w
  6181     0F3C  0021               	movlb	1	; select bank1
  6182     0F3D  00CC               	movwf	(efgtoa@u+3)^(0+128)
  6183     0F3E  0020               	movlb	0	; select bank0
  6184     0F3F  0836               	movf	?___fldiv+2,w
  6185     0F40  0021               	movlb	1	; select bank1
  6186     0F41  00CB               	movwf	(efgtoa@u+2)^(0+128)
  6187     0F42  0020               	movlb	0	; select bank0
  6188     0F43  0835               	movf	?___fldiv+1,w
  6189     0F44  0021               	movlb	1	; select bank1
  6190     0F45  00CA               	movwf	(efgtoa@u+1)^(0+128)
  6191     0F46  0020               	movlb	0	; select bank0
  6192     0F47  0834               	movf	?___fldiv,w
  6193     0F48  0021               	movlb	1	; select bank1
  6194     0F49  00C9               	movwf	efgtoa@u^(0+128)
  6195                           
  6196                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 808:         --ne
      +                          ;
  6197     0F4A  30FF               	movlw	255
  6198     0F4B  07A0               	addwf	efgtoa@ne^(0+128),f
  6199     0F4C  30FF               	movlw	255
  6200     0F4D  3DA1               	addwfc	(efgtoa@ne+1)^(0+128),f
  6201                           
  6202                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 809:         ++i;
  6203     0F4E  3001               	movlw	1
  6204     0F4F  07C0               	addwf	efgtoa@i^(0+128),f
  6205     0F50  3000               	movlw	0
  6206     0F51  3DC1               	addwfc	(efgtoa@i+1)^(0+128),f
  6207     0F52                     l4473:
  6208                           
  6209                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 779:     while ((
      +                          i < m) && (n < (80 - 5))) {
  6210     0F52  0841               	movf	(efgtoa@i+1)^(0+128),w
  6211     0F53  3A80               	xorlw	128
  6212     0F54  0020               	movlb	0	; select bank0
  6213     0F55  00E7               	movwf	??_efgtoa
  6214     0F56  0021               	movlb	1	; select bank1
  6215     0F57  082E               	movf	(efgtoa@m+1)^(0+128),w
  6216     0F58  3A80               	xorlw	128
  6217     0F59  0020               	movlb	0	; select bank0
  6218     0F5A  0267               	subwf	??_efgtoa,w
  6219     0F5B  1D03               	skipz
  6220     0F5C  2F60               	goto	u5465
  6221     0F5D  0021               	movlb	1	; select bank1
  6222     0F5E  082D               	movf	efgtoa@m^(0+128),w
  6223     0F5F  0240               	subwf	efgtoa@i^(0+128),w
  6224     0F60                     u5465:
  6225     0F60  1803               	skipnc
  6226     0F61  2F70               	goto	l4477
  6227     0F62  0021               	movlb	1	; select bank1
  6228     0F63  0848               	movf	(efgtoa@n+1)^(0+128),w
  6229     0F64  3A80               	xorlw	128
  6230     0F65  0020               	movlb	0	; select bank0
  6231     0F66  00E7               	movwf	??_efgtoa
  6232     0F67  3080               	movlw	128
  6233     0F68  0267               	subwf	??_efgtoa,w
  6234     0F69  1D03               	skipz
  6235     0F6A  2F6E               	goto	u5475
  6236     0F6B  304B               	movlw	75
  6237     0F6C  0021               	movlb	1	; select bank1
  6238     0F6D  0247               	subwf	efgtoa@n^(0+128),w
  6239     0F6E                     u5475:
  6240     0F6E  1C03               	skipc
  6241     0F6F  2E15               	goto	l4431
  6242     0F70                     l4477:
  6243                           
  6244                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 816:  i = sizeof(
      +                          dbuf) - 1;
  6245     0F70  304F               	movlw	79
  6246     0F71  0021               	movlb	1	; select bank1
  6247     0F72  00C0               	movwf	efgtoa@i^(0+128)
  6248     0F73  3000               	movlw	0
  6249     0F74  00C1               	movwf	(efgtoa@i^(0+128)+1)
  6250                           
  6251                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 817:     dbuf[i] 
      +                          = '\0';
  6252     0F75  0840               	movf	efgtoa@i^(0+128),w
  6253     0F76  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6254     0F77  0086               	movwf	6
  6255     0F78  3002               	movlw	2	; select bank4/5
  6256     0F79  0087               	movwf	7
  6257     0F7A  0181               	clrf	1
  6258                           
  6259                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 848:  memcpy(&dbu
      +                          f[i-n], &dbuf[0], (size_t)n);
  6260     0F7B  3020               	movlw	(low (_dbuf| (0+512)))& (0+255)
  6261     0F7C  0020               	movlb	0	; select bank0
  6262     0F7D  00A0               	movwf	memcpy@s1
  6263     0F7E  0021               	movlb	1	; select bank1
  6264     0F7F  0848               	movf	(efgtoa@n+1)^(0+128),w
  6265     0F80  0020               	movlb	0	; select bank0
  6266     0F81  00A2               	movwf	memcpy@n+1
  6267     0F82  0021               	movlb	1	; select bank1
  6268     0F83  0847               	movf	efgtoa@n^(0+128),w
  6269     0F84  0020               	movlb	0	; select bank0
  6270     0F85  00A1               	movwf	memcpy@n
  6271     0F86  3020               	movlw	(low (_dbuf| (0+512)))& (0+255)
  6272     0F87  00E7               	movwf	??_efgtoa
  6273     0F88  0021               	movlb	1	; select bank1
  6274     0F89  0847               	movf	efgtoa@n^(0+128),w
  6275     0F8A  0020               	movlb	0	; select bank0
  6276     0F8B  0267               	subwf	??_efgtoa,w
  6277     0F8C  0021               	movlb	1	; select bank1
  6278     0F8D  0740               	addwf	efgtoa@i^(0+128),w
  6279     0F8E  319D  25DA  3189   	fcall	_memcpy
  6280                           
  6281                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 849:  n = i-n;
  6282     0F91  0021               	movlb	1	; select bank1
  6283     0F92  0847               	movf	efgtoa@n^(0+128),w
  6284     0F93  0240               	subwf	efgtoa@i^(0+128),w
  6285     0F94  00C7               	movwf	efgtoa@n^(0+128)
  6286     0F95  0848               	movf	(efgtoa@n+1)^(0+128),w
  6287     0F96  3B41               	subwfb	(efgtoa@i+1)^(0+128),w
  6288     0F97  00C8               	movwf	(efgtoa@n+1)^(0+128)
  6289                           
  6290                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 850:  i = sign ==
      +                           0 ? 0 : 1;
  6291     0F98  0842               	movf	efgtoa@sign^(0+128),w
  6292     0F99  1903               	btfsc	3,2
  6293     0F9A  2F9D               	goto	u5480
  6294     0F9B  3001               	movlw	1
  6295     0F9C  2F9E               	goto	u5490
  6296     0F9D                     u5480:
  6297     0F9D  3000               	movlw	0
  6298     0F9E                     u5490:
  6299     0F9E  0020               	movlb	0	; select bank0
  6300     0F9F  00E7               	movwf	??_efgtoa
  6301     0FA0  01E8               	clrf	??_efgtoa+1
  6302     0FA1  0867               	movf	??_efgtoa,w
  6303     0FA2  0021               	movlb	1	; select bank1
  6304     0FA3  00C0               	movwf	efgtoa@i^(0+128)
  6305     0FA4  0020               	movlb	0	; select bank0
  6306     0FA5  0868               	movf	??_efgtoa+1,w
  6307     0FA6  0021               	movlb	1	; select bank1
  6308     0FA7  00C1               	movwf	(efgtoa@i+1)^(0+128)
  6309                           
  6310                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 853:  if (flags &
      +                           (1 << 1)) {
  6311     0FA8  18FC               	btfsc	_flags,1
  6312     0FA9  2FCC               	goto	l4495
  6313     0FAA  2FDC               	goto	l4499
  6314     0FAB                     l4497:
  6315     0FAB  0021               	movlb	1	; select bank1
  6316     0FAC  0841               	movf	(efgtoa@i+1)^(0+128),w
  6317     0FAD  3A80               	xorlw	128
  6318     0FAE  0020               	movlb	0	; select bank0
  6319     0FAF  00E7               	movwf	??_efgtoa
  6320     0FB0  0021               	movlb	1	; select bank1
  6321     0FB1  0848               	movf	(efgtoa@n+1)^(0+128),w
  6322     0FB2  3A80               	xorlw	128
  6323     0FB3  0020               	movlb	0	; select bank0
  6324     0FB4  0267               	subwf	??_efgtoa,w
  6325     0FB5  1D03               	skipz
  6326     0FB6  2FBA               	goto	u5525
  6327     0FB7  0021               	movlb	1	; select bank1
  6328     0FB8  0847               	movf	efgtoa@n^(0+128),w
  6329     0FB9  0240               	subwf	efgtoa@i^(0+128),w
  6330     0FBA                     u5525:
  6331     0FBA  1803               	btfsc	3,0
  6332     0FBB  2FDC               	goto	l4499
  6333                           
  6334                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 855:    dbuf[--n]
      +                           = '0';
  6335     0FBC  30FF               	movlw	255
  6336     0FBD  0021               	movlb	1	; select bank1
  6337     0FBE  07C7               	addwf	efgtoa@n^(0+128),f
  6338     0FBF  30FF               	movlw	255
  6339     0FC0  3DC8               	addwfc	(efgtoa@n+1)^(0+128),f
  6340     0FC1  0847               	movf	efgtoa@n^(0+128),w
  6341     0FC2  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6342     0FC3  0086               	movwf	6
  6343     0FC4  3002               	movlw	2	; select bank4/5
  6344     0FC5  0087               	movwf	7
  6345     0FC6  3030               	movlw	48
  6346     0FC7  0081               	movwf	1
  6347                           
  6348                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 856:    w--;
  6349     0FC8  30FF               	movlw	255
  6350     0FC9  07B2               	addwf	efgtoa@w^(0+128),f
  6351     0FCA  30FF               	movlw	255
  6352     0FCB  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  6353     0FCC                     l4495:
  6354                           
  6355                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 854:   while (w >
      +                           i && n > i) {
  6356     0FCC  0841               	movf	(efgtoa@i+1)^(0+128),w
  6357     0FCD  3A80               	xorlw	128
  6358     0FCE  0020               	movlb	0	; select bank0
  6359     0FCF  00E7               	movwf	??_efgtoa
  6360     0FD0  0021               	movlb	1	; select bank1
  6361     0FD1  0833               	movf	(efgtoa@w+1)^(0+128),w
  6362     0FD2  3A80               	xorlw	128
  6363     0FD3  0020               	movlb	0	; select bank0
  6364     0FD4  0267               	subwf	??_efgtoa,w
  6365     0FD5  1D03               	skipz
  6366     0FD6  2FDA               	goto	u5515
  6367     0FD7  0021               	movlb	1	; select bank1
  6368     0FD8  0832               	movf	efgtoa@w^(0+128),w
  6369     0FD9  0240               	subwf	efgtoa@i^(0+128),w
  6370     0FDA                     u5515:
  6371     0FDA  1C03               	btfss	3,0
  6372     0FDB  2FAB               	goto	l4497
  6373     0FDC                     l4499:
  6374                           
  6375                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 861:  if (sign) {
  6376     0FDC  0021               	movlb	1	; select bank1
  6377     0FDD  0842               	movf	efgtoa@sign^(0+128),w
  6378     0FDE  1903               	btfsc	3,2
  6379     0FDF  2FEB               	goto	l4503
  6380                           
  6381                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 862:   dbuf[--n] 
      +                          = sign;
  6382     0FE0  30FF               	movlw	255
  6383     0FE1  07C7               	addwf	efgtoa@n^(0+128),f
  6384     0FE2  30FF               	movlw	255
  6385     0FE3  3DC8               	addwfc	(efgtoa@n+1)^(0+128),f
  6386     0FE4  0847               	movf	efgtoa@n^(0+128),w
  6387     0FE5  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6388     0FE6  0086               	movwf	6
  6389     0FE7  3002               	movlw	2	; select bank4/5
  6390     0FE8  0087               	movwf	7
  6391     0FE9  0842               	movf	efgtoa@sign^(0+128),w
  6392     0FEA  0081               	movwf	1
  6393     0FEB                     l4503:
  6394                           
  6395                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 864:  w -= i;
  6396     0FEB  0840               	movf	efgtoa@i^(0+128),w
  6397     0FEC  02B2               	subwf	efgtoa@w^(0+128),f
  6398     0FED  0841               	movf	(efgtoa@i+1)^(0+128),w
  6399     0FEE  3BB3               	subwfb	(efgtoa@w+1)^(0+128),f
  6400                           
  6401                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 867:     return (
      +                          void) pad(fp, &dbuf[n], w);
  6402     0FEF  0847               	movf	efgtoa@n^(0+128),w
  6403     0FF0  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6404     0FF1  0020               	movlb	0	; select bank0
  6405     0FF2  00AF               	movwf	pad@buf
  6406     0FF3  0021               	movlb	1	; select bank1
  6407     0FF4  0833               	movf	(efgtoa@w+1)^(0+128),w
  6408     0FF5  0020               	movlb	0	; select bank0
  6409     0FF6  00B1               	movwf	pad@p+1
  6410     0FF7  0021               	movlb	1	; select bank1
  6411     0FF8  0832               	movf	efgtoa@w^(0+128),w
  6412     0FF9  0020               	movlb	0	; select bank0
  6413     0FFA  00B0               	movwf	pad@p
  6414     0FFB  0021               	movlb	1	; select bank1
  6415     0FFC  082F               	movf	efgtoa@fp^(0+128),w
  6416     0FFD  319E  2629         	fcall	_pad
  6417     0FFF  0008               	return
  6418     1000                     __end_of_efgtoa:
  6419                           
  6420                           	psect	text7
  6421     1CC2                     __ptext7:	
  6422 ;; *************** function _strcpy *****************
  6423 ;; Defined at:
  6424 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\strcpy.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  dest            1    wreg     PTR unsigned char 
  6427 ;;		 -> dbuf(80), 
  6428 ;;  src             2    0[BANK0 ] PTR const unsigned char 
  6429 ;;		 -> STR_21(4), STR_18(4), 
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;  dest            1    5[BANK0 ] PTR unsigned char 
  6432 ;;		 -> dbuf(80), 
  6433 ;;  d               1    4[BANK0 ] PTR unsigned char 
  6434 ;;		 -> dbuf(80), 
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  1    wreg      PTR unsigned char 
  6437 ;; Registers used:
  6438 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6444 ;;      Params:         0       2       0       0       0       0       0       0
  6445 ;;      Locals:         0       2       0       0       0       0       0       0
  6446 ;;      Temps:          0       2       0       0       0       0       0       0
  6447 ;;      Totals:         0       6       0       0       0       0       0       0
  6448 ;;Total ram usage:        6 bytes
  6449 ;; Hardware stack levels used: 1
  6450 ;; Hardware stack levels required when called: 4
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_efgtoa
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458     1CC2                     _strcpy:	
  6459                           ;psect for function _strcpy
  6460                           
  6461                           
  6462                           ;incstack = 0
  6463                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  6464                           ;strcpy@dest stored from wreg
  6465     1CC2  0020               	movlb	0	; select bank0
  6466     1CC3  00A5               	movwf	strcpy@dest
  6467     1CC4  0825               	movf	strcpy@dest,w
  6468     1CC5  00A4               	movwf	strcpy@d
  6469     1CC6                     l4177:
  6470     1CC6  0824               	movf	strcpy@d,w
  6471     1CC7  0086               	movwf	6
  6472     1CC8  3002               	movlw	2	; select bank4/5
  6473     1CC9  0087               	movwf	7
  6474     1CCA  0AA4               	incf	strcpy@d,f
  6475     1CCB  0821               	movf	strcpy@src+1,w
  6476     1CCC  00A3               	movwf	??_strcpy+1
  6477     1CCD  0820               	movf	strcpy@src,w
  6478     1CCE  00A2               	movwf	??_strcpy
  6479     1CCF  0AA0               	incf	strcpy@src,f
  6480     1CD0  1903               	skipnz
  6481     1CD1  0AA1               	incf	strcpy@src+1,f
  6482     1CD2  0822               	movf	??_strcpy,w
  6483     1CD3  0084               	movwf	4
  6484     1CD4  0823               	movf	??_strcpy+1,w
  6485     1CD5  0085               	movwf	5
  6486     1CD6  0800               	movf	0,w	;code access
  6487     1CD7  3FC0               	movwi [0]fsr1
  6488     1CD8  0889               	movf	9,f
  6489     1CD9  1903               	btfsc	3,2
  6490     1CDA  0008               	return
  6491     1CDB  2CC6               	goto	l4177
  6492     1CDC                     __end_of_strcpy:
  6493                           
  6494                           	psect	text8
  6495     1DDA                     __ptext8:	
  6496 ;; *************** function _memcpy *****************
  6497 ;; Defined at:
  6498 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\memcpy.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;  d1              1    wreg     PTR void 
  6501 ;;		 -> dbuf(80), 
  6502 ;;  s1              1    0[BANK0 ] PTR const void 
  6503 ;;		 -> dbuf(80), 
  6504 ;;  n               2    1[BANK0 ] unsigned int 
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;  d1              1    5[BANK0 ] PTR void 
  6507 ;;		 -> dbuf(80), 
  6508 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  6509 ;;		 -> dbuf(80), 
  6510 ;;  d               1    6[BANK0 ] PTR unsigned char 
  6511 ;;		 -> dbuf(80), 
  6512 ;;  tmp             1    4[BANK0 ] unsigned char 
  6513 ;; Return value:  Size  Location     Type
  6514 ;;                  1    wreg      PTR void 
  6515 ;; Registers used:
  6516 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6517 ;; Tracked objects:
  6518 ;;		On entry : 0/0
  6519 ;;		On exit  : 0/0
  6520 ;;		Unchanged: 0/0
  6521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6522 ;;      Params:         0       3       0       0       0       0       0       0
  6523 ;;      Locals:         0       4       0       0       0       0       0       0
  6524 ;;      Temps:          0       1       0       0       0       0       0       0
  6525 ;;      Totals:         0       8       0       0       0       0       0       0
  6526 ;;Total ram usage:        8 bytes
  6527 ;; Hardware stack levels used: 1
  6528 ;; Hardware stack levels required when called: 4
  6529 ;; This function calls:
  6530 ;;		Nothing
  6531 ;; This function is called by:
  6532 ;;		_efgtoa
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536     1DDA                     _memcpy:	
  6537                           ;psect for function _memcpy
  6538                           
  6539                           
  6540                           ;incstack = 0
  6541                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  6542                           ;memcpy@d1 stored from wreg
  6543     1DDA  0020               	movlb	0	; select bank0
  6544     1DDB  00A5               	movwf	memcpy@d1
  6545     1DDC  0820               	movf	memcpy@s1,w
  6546     1DDD  00A7               	movwf	memcpy@s
  6547     1DDE  0825               	movf	memcpy@d1,w
  6548     1DDF  00A6               	movwf	memcpy@d
  6549     1DE0                     l1227:
  6550     1DE0  3001               	movlw	1
  6551     1DE1  02A1               	subwf	memcpy@n,f
  6552     1DE2  3000               	movlw	0
  6553     1DE3  3BA2               	subwfb	memcpy@n+1,f
  6554     1DE4  0A21               	incf	memcpy@n,w
  6555     1DE5  1903               	btfsc	3,2
  6556     1DE6  0A22               	incf	memcpy@n+1,w
  6557     1DE7  1903               	btfsc	3,2
  6558     1DE8  0008               	return
  6559     1DE9  0827               	movf	memcpy@s,w
  6560     1DEA  0086               	movwf	6
  6561     1DEB  3002               	movlw	2	; select bank4/5
  6562     1DEC  0087               	movwf	7
  6563     1DED  0801               	movf	1,w
  6564     1DEE  00A4               	movwf	memcpy@tmp
  6565     1DEF  3001               	movlw	1
  6566     1DF0  00A3               	movwf	??_memcpy
  6567     1DF1  0823               	movf	??_memcpy,w
  6568     1DF2  07A7               	addwf	memcpy@s,f
  6569     1DF3  0826               	movf	memcpy@d,w
  6570     1DF4  0086               	movwf	6
  6571     1DF5  3002               	movlw	2	; select bank4/5
  6572     1DF6  0087               	movwf	7
  6573     1DF7  0824               	movf	memcpy@tmp,w
  6574     1DF8  0081               	movwf	1
  6575     1DF9  3001               	movlw	1
  6576     1DFA  00A3               	movwf	??_memcpy
  6577     1DFB  0823               	movf	??_memcpy,w
  6578     1DFC  07A6               	addwf	memcpy@d,f
  6579     1DFD  2DE0               	goto	l1227
  6580     1DFE                     __end_of_memcpy:
  6581                           
  6582                           	psect	text9
  6583     1C52                     __ptext9:	
  6584 ;; *************** function _labs *****************
  6585 ;; Defined at:
  6586 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\labs.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;  a               4    0[BANK0 ] long 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;		None
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  4    0[BANK0 ] long 
  6593 ;; Registers used:
  6594 ;;		wreg, status,2, status,0
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6600 ;;      Params:         0       4       0       0       0       0       0       0
  6601 ;;      Locals:         0       0       0       0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0
  6603 ;;      Totals:         0       4       0       0       0       0       0       0
  6604 ;;Total ram usage:        4 bytes
  6605 ;; Hardware stack levels used: 1
  6606 ;; Hardware stack levels required when called: 4
  6607 ;; This function calls:
  6608 ;;		Nothing
  6609 ;; This function is called by:
  6610 ;;		_efgtoa
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614     1C52                     _labs:	
  6615                           ;psect for function _labs
  6616                           
  6617                           
  6618                           ;incstack = 0
  6619                           ; Regs used in _labs: [wreg+status,2+status,0]
  6620     1C52  0020               	movlb	0	; select bank0
  6621     1C53  1FA3               	btfss	labs@a+3,7
  6622     1C54  0008               	return
  6623     1C55  0920               	comf	labs@a,w
  6624     1C56  00A0               	movwf	?_labs
  6625     1C57  0921               	comf	labs@a+1,w
  6626     1C58  00A1               	movwf	?_labs+1
  6627     1C59  0922               	comf	labs@a+2,w
  6628     1C5A  00A2               	movwf	?_labs+2
  6629     1C5B  0923               	comf	labs@a+3,w
  6630     1C5C  00A3               	movwf	?_labs+3
  6631     1C5D  0AA0               	incf	?_labs,f
  6632     1C5E  1903               	skipnz
  6633     1C5F  0AA1               	incf	?_labs+1,f
  6634     1C60  1903               	skipnz
  6635     1C61  0AA2               	incf	?_labs+2,f
  6636     1C62  1903               	skipnz
  6637     1C63  0AA3               	incf	?_labs+3,f
  6638     1C64  0008               	return
  6639     1C65                     __end_of_labs:
  6640                           
  6641                           	psect	text10
  6642     0894                     __ptext10:	
  6643 ;; *************** function _floorf *****************
  6644 ;; Defined at:
  6645 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\floorf.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;  x               4   46[BANK0 ] float 
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;  u               4   62[BANK0 ] struct .
  6650 ;;  m               4   56[BANK0 ] unsigned long 
  6651 ;;  e               2   60[BANK0 ] int 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  4   46[BANK0 ] float 
  6654 ;; Registers used:
  6655 ;;		wreg, status,2, status,0
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6661 ;;      Params:         0       4       0       0       0       0       0       0
  6662 ;;      Locals:         0      10       0       0       0       0       0       0
  6663 ;;      Temps:          0       6       0       0       0       0       0       0
  6664 ;;      Totals:         0      20       0       0       0       0       0       0
  6665 ;;Total ram usage:       20 bytes
  6666 ;; Hardware stack levels used: 1
  6667 ;; Hardware stack levels required when called: 4
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_efgtoa
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675     0894                     _floorf:	
  6676                           ;psect for function _floorf
  6677                           
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _floorf: [wreg+status,2+status,0]
  6681     0894  0022               	movlb	2	; select bank2
  6682     0895  0823               	movf	(floorf@F521+3)^(0+256),w
  6683     0896  0020               	movlb	0	; select bank0
  6684     0897  00E1               	movwf	floorf@u+3
  6685     0898  0022               	movlb	2	; select bank2
  6686     0899  0822               	movf	(floorf@F521+2)^(0+256),w
  6687     089A  0020               	movlb	0	; select bank0
  6688     089B  00E0               	movwf	floorf@u+2
  6689     089C  0022               	movlb	2	; select bank2
  6690     089D  0821               	movf	(floorf@F521+1)^(0+256),w
  6691     089E  0020               	movlb	0	; select bank0
  6692     089F  00DF               	movwf	floorf@u+1
  6693     08A0  0022               	movlb	2	; select bank2
  6694     08A1  0820               	movf	floorf@F521^(0+256),w
  6695     08A2  0020               	movlb	0	; select bank0
  6696     08A3  00DE               	movwf	floorf@u
  6697     08A4  0851               	movf	floorf@x+3,w
  6698     08A5  00E1               	movwf	floorf@u+3
  6699     08A6  0850               	movf	floorf@x+2,w
  6700     08A7  00E0               	movwf	floorf@u+2
  6701     08A8  084F               	movf	floorf@x+1,w
  6702     08A9  00DF               	movwf	floorf@u+1
  6703     08AA  084E               	movf	floorf@x,w
  6704     08AB  00DE               	movwf	floorf@u
  6705     08AC  085E               	movf	floorf@u,w
  6706     08AD  00D2               	movwf	??_floorf
  6707     08AE  085F               	movf	floorf@u+1,w
  6708     08AF  00D3               	movwf	??_floorf+1
  6709     08B0  0860               	movf	floorf@u+2,w
  6710     08B1  00D4               	movwf	??_floorf+2
  6711     08B2  0861               	movf	floorf@u+3,w
  6712     08B3  00D5               	movwf	??_floorf+3
  6713     08B4  3017               	movlw	23
  6714     08B5                     u4915:
  6715     08B5  36D5               	lsrf	??_floorf+3,f
  6716     08B6  0CD4               	rrf	??_floorf+2,f
  6717     08B7  0CD3               	rrf	??_floorf+1,f
  6718     08B8  0CD2               	rrf	??_floorf,f
  6719     08B9  0B89               	decfsz	9,f
  6720     08BA  28B5               	goto	u4915
  6721     08BB  30FF               	movlw	255
  6722     08BC  0552               	andwf	??_floorf,w
  6723     08BD  00D6               	movwf	??_floorf+4
  6724     08BE  3000               	movlw	0
  6725     08BF  0553               	andwf	??_floorf+1,w
  6726     08C0  00D7               	movwf	??_floorf+5
  6727     08C1  0856               	movf	??_floorf+4,w
  6728     08C2  3E81               	addlw	129
  6729     08C3  00DC               	movwf	floorf@e
  6730     08C4  30FF               	movlw	255
  6731     08C5  3D57               	addwfc	??_floorf+5,w
  6732     08C6  00DD               	movwf	floorf@e+1
  6733     08C7  085D               	movf	floorf@e+1,w
  6734     08C8  3A80               	xorlw	128
  6735     08C9  00D2               	movwf	??_floorf
  6736     08CA  3080               	movlw	128
  6737     08CB  0252               	subwf	??_floorf,w
  6738     08CC  1D03               	skipz
  6739     08CD  28D0               	goto	u4925
  6740     08CE  3017               	movlw	23
  6741     08CF  025C               	subwf	floorf@e,w
  6742     08D0                     u4925:
  6743     08D0  1803               	btfsc	3,0
  6744     08D1  0008               	return
  6745     08D2  0020               	movlb	0	; select bank0
  6746     08D3  1BDD               	btfsc	floorf@e+1,7
  6747     08D4  292D               	goto	l4207
  6748     08D5  30FF               	movlw	255
  6749     08D6  00D2               	movwf	??_floorf
  6750     08D7  30FF               	movlw	255
  6751     08D8  00D3               	movwf	??_floorf+1
  6752     08D9  307F               	movlw	127
  6753     08DA  00D4               	movwf	??_floorf+2
  6754     08DB  3000               	movlw	0
  6755     08DC  00D5               	movwf	??_floorf+3
  6756     08DD  0A5C               	incf	floorf@e,w
  6757     08DE  28E3               	goto	u4940
  6758     08DF                     u4945:
  6759     08DF  37D5               	asrf	??_floorf+3,f
  6760     08E0  0CD4               	rrf	??_floorf+2,f
  6761     08E1  0CD3               	rrf	??_floorf+1,f
  6762     08E2  0CD2               	rrf	??_floorf,f
  6763     08E3                     u4940:
  6764     08E3  0B89               	decfsz	9,f
  6765     08E4  28DF               	goto	u4945
  6766     08E5  0855               	movf	??_floorf+3,w
  6767     08E6  00DB               	movwf	floorf@m+3
  6768     08E7  0854               	movf	??_floorf+2,w
  6769     08E8  00DA               	movwf	floorf@m+2
  6770     08E9  0853               	movf	??_floorf+1,w
  6771     08EA  00D9               	movwf	floorf@m+1
  6772     08EB  0852               	movf	??_floorf,w
  6773     08EC  00D8               	movwf	floorf@m
  6774     08ED  085E               	movf	floorf@u,w
  6775     08EE  0558               	andwf	floorf@m,w
  6776     08EF  00D2               	movwf	??_floorf
  6777     08F0  085F               	movf	floorf@u+1,w
  6778     08F1  0559               	andwf	floorf@m+1,w
  6779     08F2  00D3               	movwf	??_floorf+1
  6780     08F3  0860               	movf	floorf@u+2,w
  6781     08F4  055A               	andwf	floorf@m+2,w
  6782     08F5  00D4               	movwf	??_floorf+2
  6783     08F6  0861               	movf	floorf@u+3,w
  6784     08F7  055B               	andwf	floorf@m+3,w
  6785     08F8  00D5               	movwf	??_floorf+3
  6786     08F9  0855               	movf	??_floorf+3,w
  6787     08FA  0454               	iorwf	??_floorf+2,w
  6788     08FB  0453               	iorwf	??_floorf+1,w
  6789     08FC  0452               	iorwf	??_floorf,w
  6790     08FD  1903               	btfsc	3,2
  6791     08FE  0008               	return
  6792     08FF  085E               	movf	floorf@u,w
  6793     0900  00D2               	movwf	??_floorf
  6794     0901  085F               	movf	floorf@u+1,w
  6795     0902  00D3               	movwf	??_floorf+1
  6796     0903  0860               	movf	floorf@u+2,w
  6797     0904  00D4               	movwf	??_floorf+2
  6798     0905  0861               	movf	floorf@u+3,w
  6799     0906  00D5               	movwf	??_floorf+3
  6800     0907  301F               	movlw	31
  6801     0908                     u4965:
  6802     0908  36D5               	lsrf	??_floorf+3,f
  6803     0909  0CD4               	rrf	??_floorf+2,f
  6804     090A  0CD3               	rrf	??_floorf+1,f
  6805     090B  0CD2               	rrf	??_floorf,f
  6806     090C  0B89               	decfsz	9,f
  6807     090D  2908               	goto	u4965
  6808     090E  0855               	movf	??_floorf+3,w
  6809     090F  0454               	iorwf	??_floorf+2,w
  6810     0910  0453               	iorwf	??_floorf+1,w
  6811     0911  0452               	iorwf	??_floorf,w
  6812     0912  1903               	skipnz
  6813     0913  291C               	goto	l4205
  6814     0914  0858               	movf	floorf@m,w
  6815     0915  07DE               	addwf	floorf@u,f
  6816     0916  0859               	movf	floorf@m+1,w
  6817     0917  3DDF               	addwfc	floorf@u+1,f
  6818     0918  085A               	movf	floorf@m+2,w
  6819     0919  3DE0               	addwfc	floorf@u+2,f
  6820     091A  085B               	movf	floorf@m+3,w
  6821     091B  3DE1               	addwfc	floorf@u+3,f
  6822     091C                     l4205:
  6823     091C  0958               	comf	floorf@m,w
  6824     091D  00D2               	movwf	??_floorf
  6825     091E  0959               	comf	floorf@m+1,w
  6826     091F  00D3               	movwf	??_floorf+1
  6827     0920  095A               	comf	floorf@m+2,w
  6828     0921  00D4               	movwf	??_floorf+2
  6829     0922  095B               	comf	floorf@m+3,w
  6830     0923  00D5               	movwf	??_floorf+3
  6831     0924  0852               	movf	??_floorf,w
  6832     0925  05DE               	andwf	floorf@u,f
  6833     0926  0853               	movf	??_floorf+1,w
  6834     0927  05DF               	andwf	floorf@u+1,f
  6835     0928  0854               	movf	??_floorf+2,w
  6836     0929  05E0               	andwf	floorf@u+2,f
  6837     092A  0855               	movf	??_floorf+3,w
  6838     092B  05E1               	andwf	floorf@u+3,f
  6839     092C  2963               	goto	l1214
  6840     092D                     l4207:
  6841     092D  085E               	movf	floorf@u,w
  6842     092E  00D2               	movwf	??_floorf
  6843     092F  085F               	movf	floorf@u+1,w
  6844     0930  00D3               	movwf	??_floorf+1
  6845     0931  0860               	movf	floorf@u+2,w
  6846     0932  00D4               	movwf	??_floorf+2
  6847     0933  0861               	movf	floorf@u+3,w
  6848     0934  00D5               	movwf	??_floorf+3
  6849     0935  301F               	movlw	31
  6850     0936                     u4985:
  6851     0936  36D5               	lsrf	??_floorf+3,f
  6852     0937  0CD4               	rrf	??_floorf+2,f
  6853     0938  0CD3               	rrf	??_floorf+1,f
  6854     0939  0CD2               	rrf	??_floorf,f
  6855     093A  0B89               	decfsz	9,f
  6856     093B  2936               	goto	u4985
  6857     093C  0855               	movf	??_floorf+3,w
  6858     093D  0454               	iorwf	??_floorf+2,w
  6859     093E  0453               	iorwf	??_floorf+1,w
  6860     093F  0452               	iorwf	??_floorf,w
  6861     0940  1D03               	skipz
  6862     0941  2946               	goto	l4211
  6863     0942  3000               	movlw	0
  6864     0943  00E1               	movwf	floorf@u+3
  6865     0944  3000               	movlw	0
  6866     0945  295E               	goto	L5
  6867     0946                     l4211:
  6868     0946  085E               	movf	floorf@u,w
  6869     0947  00D2               	movwf	??_floorf
  6870     0948  085F               	movf	floorf@u+1,w
  6871     0949  00D3               	movwf	??_floorf+1
  6872     094A  0860               	movf	floorf@u+2,w
  6873     094B  00D4               	movwf	??_floorf+2
  6874     094C  0861               	movf	floorf@u+3,w
  6875     094D  00D5               	movwf	??_floorf+3
  6876     094E  3001               	movlw	1
  6877     094F                     u5005:
  6878     094F  35D2               	lslf	??_floorf,f
  6879     0950  0DD3               	rlf	??_floorf+1,f
  6880     0951  0DD4               	rlf	??_floorf+2,f
  6881     0952  0DD5               	rlf	??_floorf+3,f
  6882     0953  0B89               	decfsz	9,f
  6883     0954  294F               	goto	u5005
  6884     0955  0855               	movf	??_floorf+3,w
  6885     0956  0454               	iorwf	??_floorf+2,w
  6886     0957  0453               	iorwf	??_floorf+1,w
  6887     0958  0452               	iorwf	??_floorf,w
  6888     0959  1903               	skipnz
  6889     095A  2963               	goto	l1214
  6890     095B  30BF               	movlw	191
  6891     095C  00E1               	movwf	floorf@u+3
  6892     095D  3080               	movlw	128
  6893     095E                     L5:
  6894     095E  00E0               	movwf	floorf@u+2
  6895     095F  3000               	movlw	0
  6896     0960  00DF               	movwf	floorf@u+1
  6897     0961  3000               	movlw	0
  6898     0962  00DE               	movwf	floorf@u
  6899     0963                     l1214:
  6900     0963  0861               	movf	floorf@u+3,w
  6901     0964  00D1               	movwf	?_floorf+3
  6902     0965  0860               	movf	floorf@u+2,w
  6903     0966  00D0               	movwf	?_floorf+2
  6904     0967  085F               	movf	floorf@u+1,w
  6905     0968  00CF               	movwf	?_floorf+1
  6906     0969  085E               	movf	floorf@u,w
  6907     096A  00CE               	movwf	?_floorf
  6908     096B  0008               	return
  6909     096C                     __end_of_floorf:
  6910                           
  6911                           	psect	text11
  6912     1198                     __ptext11:	
  6913 ;; *************** function ___fpclassifyf *****************
  6914 ;; Defined at:
  6915 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__fpclassifyf.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  x               4    0[BANK0 ] float 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;  u               4   12[BANK0 ] struct .
  6920 ;;  e               2   10[BANK0 ] int 
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  2    0[BANK0 ] int 
  6923 ;; Registers used:
  6924 ;;		wreg, status,2, status,0
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6930 ;;      Params:         0       4       0       0       0       0       0       0
  6931 ;;      Locals:         0       6       0       0       0       0       0       0
  6932 ;;      Temps:          0       6       0       0       0       0       0       0
  6933 ;;      Totals:         0      16       0       0       0       0       0       0
  6934 ;;Total ram usage:       16 bytes
  6935 ;; Hardware stack levels used: 1
  6936 ;; Hardware stack levels required when called: 4
  6937 ;; This function calls:
  6938 ;;		Nothing
  6939 ;; This function is called by:
  6940 ;;		_efgtoa
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944     1198                     ___fpclassifyf:	
  6945                           ;psect for function ___fpclassifyf
  6946                           
  6947                           
  6948                           ;incstack = 0
  6949                           ; Regs used in ___fpclassifyf: [wreg+status,2+status,0]
  6950     1198  0022               	movlb	2	; select bank2
  6951     1199  0827               	movf	(___fpclassifyf@F465+3)^(0+256),w
  6952     119A  0020               	movlb	0	; select bank0
  6953     119B  00AF               	movwf	___fpclassifyf@u+3
  6954     119C  0022               	movlb	2	; select bank2
  6955     119D  0826               	movf	(___fpclassifyf@F465+2)^(0+256),w
  6956     119E  0020               	movlb	0	; select bank0
  6957     119F  00AE               	movwf	___fpclassifyf@u+2
  6958     11A0  0022               	movlb	2	; select bank2
  6959     11A1  0825               	movf	(___fpclassifyf@F465+1)^(0+256),w
  6960     11A2  0020               	movlb	0	; select bank0
  6961     11A3  00AD               	movwf	___fpclassifyf@u+1
  6962     11A4  0022               	movlb	2	; select bank2
  6963     11A5  0824               	movf	___fpclassifyf@F465^(0+256),w
  6964     11A6  0020               	movlb	0	; select bank0
  6965     11A7  00AC               	movwf	___fpclassifyf@u
  6966     11A8  0823               	movf	___fpclassifyf@x+3,w
  6967     11A9  00AF               	movwf	___fpclassifyf@u+3
  6968     11AA  0822               	movf	___fpclassifyf@x+2,w
  6969     11AB  00AE               	movwf	___fpclassifyf@u+2
  6970     11AC  0821               	movf	___fpclassifyf@x+1,w
  6971     11AD  00AD               	movwf	___fpclassifyf@u+1
  6972     11AE  0820               	movf	___fpclassifyf@x,w
  6973     11AF  00AC               	movwf	___fpclassifyf@u
  6974     11B0  082C               	movf	___fpclassifyf@u,w
  6975     11B1  00A4               	movwf	??___fpclassifyf
  6976     11B2  082D               	movf	___fpclassifyf@u+1,w
  6977     11B3  00A5               	movwf	??___fpclassifyf+1
  6978     11B4  082E               	movf	___fpclassifyf@u+2,w
  6979     11B5  00A6               	movwf	??___fpclassifyf+2
  6980     11B6  082F               	movf	___fpclassifyf@u+3,w
  6981     11B7  00A7               	movwf	??___fpclassifyf+3
  6982     11B8  3017               	movlw	23
  6983     11B9                     u4815:
  6984     11B9  36A7               	lsrf	??___fpclassifyf+3,f
  6985     11BA  0CA6               	rrf	??___fpclassifyf+2,f
  6986     11BB  0CA5               	rrf	??___fpclassifyf+1,f
  6987     11BC  0CA4               	rrf	??___fpclassifyf,f
  6988     11BD  0B89               	decfsz	9,f
  6989     11BE  29B9               	goto	u4815
  6990     11BF  30FF               	movlw	255
  6991     11C0  0524               	andwf	??___fpclassifyf,w
  6992     11C1  00AA               	movwf	___fpclassifyf@e
  6993     11C2  3000               	movlw	0
  6994     11C3  0525               	andwf	??___fpclassifyf+1,w
  6995     11C4  00AB               	movwf	___fpclassifyf@e+1
  6996     11C5  082A               	movf	___fpclassifyf@e,w
  6997     11C6  042B               	iorwf	___fpclassifyf@e+1,w
  6998     11C7  1D03               	btfss	3,2
  6999     11C8  29E8               	goto	l4165
  7000     11C9  082C               	movf	___fpclassifyf@u,w
  7001     11CA  00A4               	movwf	??___fpclassifyf
  7002     11CB  082D               	movf	___fpclassifyf@u+1,w
  7003     11CC  00A5               	movwf	??___fpclassifyf+1
  7004     11CD  082E               	movf	___fpclassifyf@u+2,w
  7005     11CE  00A6               	movwf	??___fpclassifyf+2
  7006     11CF  082F               	movf	___fpclassifyf@u+3,w
  7007     11D0  00A7               	movwf	??___fpclassifyf+3
  7008     11D1  3001               	movlw	1
  7009     11D2                     u4835:
  7010     11D2  35A4               	lslf	??___fpclassifyf,f
  7011     11D3  0DA5               	rlf	??___fpclassifyf+1,f
  7012     11D4  0DA6               	rlf	??___fpclassifyf+2,f
  7013     11D5  0DA7               	rlf	??___fpclassifyf+3,f
  7014     11D6  0B89               	decfsz	9,f
  7015     11D7  29D2               	goto	u4835
  7016     11D8  0827               	movf	??___fpclassifyf+3,w
  7017     11D9  0426               	iorwf	??___fpclassifyf+2,w
  7018     11DA  0425               	iorwf	??___fpclassifyf+1,w
  7019     11DB  0424               	iorwf	??___fpclassifyf,w
  7020     11DC  1D03               	skipz
  7021     11DD  29E3               	goto	l4161
  7022     11DE  3002               	movlw	2
  7023     11DF  00A0               	movwf	?___fpclassifyf
  7024     11E0  3000               	movlw	0
  7025     11E1  00A1               	movwf	?___fpclassifyf+1
  7026     11E2  0008               	return
  7027     11E3                     l4161:
  7028     11E3  3003               	movlw	3
  7029     11E4  00A0               	movwf	?___fpclassifyf
  7030     11E5  3000               	movlw	0
  7031     11E6  00A1               	movwf	?___fpclassifyf+1
  7032     11E7  0008               	return
  7033     11E8                     l4165:
  7034     11E8  0A2A               	incf	___fpclassifyf@e,w
  7035     11E9  042B               	iorwf	___fpclassifyf@e+1,w
  7036     11EA  1D03               	btfss	3,2
  7037     11EB  2A0B               	goto	l4171
  7038     11EC  082C               	movf	___fpclassifyf@u,w
  7039     11ED  00A4               	movwf	??___fpclassifyf
  7040     11EE  082D               	movf	___fpclassifyf@u+1,w
  7041     11EF  00A5               	movwf	??___fpclassifyf+1
  7042     11F0  082E               	movf	___fpclassifyf@u+2,w
  7043     11F1  00A6               	movwf	??___fpclassifyf+2
  7044     11F2  082F               	movf	___fpclassifyf@u+3,w
  7045     11F3  00A7               	movwf	??___fpclassifyf+3
  7046     11F4  3009               	movlw	9
  7047     11F5                     u4865:
  7048     11F5  35A4               	lslf	??___fpclassifyf,f
  7049     11F6  0DA5               	rlf	??___fpclassifyf+1,f
  7050     11F7  0DA6               	rlf	??___fpclassifyf+2,f
  7051     11F8  0DA7               	rlf	??___fpclassifyf+3,f
  7052     11F9  0B89               	decfsz	9,f
  7053     11FA  29F5               	goto	u4865
  7054     11FB  0827               	movf	??___fpclassifyf+3,w
  7055     11FC  0426               	iorwf	??___fpclassifyf+2,w
  7056     11FD  0425               	iorwf	??___fpclassifyf+1,w
  7057     11FE  0424               	iorwf	??___fpclassifyf,w
  7058     11FF  1D03               	btfss	3,2
  7059     1200  2A03               	goto	u4870
  7060     1201  3001               	movlw	1
  7061     1202  2A04               	goto	u4880
  7062     1203                     u4870:
  7063     1203  3000               	movlw	0
  7064     1204                     u4880:
  7065     1204  00A8               	movwf	??___fpclassifyf+4
  7066     1205  01A9               	clrf	??___fpclassifyf+5
  7067     1206  0828               	movf	??___fpclassifyf+4,w
  7068     1207  00A0               	movwf	?___fpclassifyf
  7069     1208  0829               	movf	??___fpclassifyf+5,w
  7070     1209  00A1               	movwf	?___fpclassifyf+1
  7071     120A  0008               	return
  7072     120B                     l4171:
  7073     120B  3004               	movlw	4
  7074     120C  00A0               	movwf	?___fpclassifyf
  7075     120D  3000               	movlw	0
  7076     120E  00A1               	movwf	?___fpclassifyf+1
  7077     120F  0008               	return
  7078     1210                     __end_of___fpclassifyf:
  7079                           
  7080                           	psect	text12
  7081     1061                     __ptext12:	
  7082 ;; *************** function ___fltol *****************
  7083 ;; Defined at:
  7084 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;  f1              4    0[BANK0 ] int 
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;  exp1            1    9[BANK0 ] unsigned char 
  7089 ;;  sign1           1    8[BANK0 ] unsigned char 
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  4    0[BANK0 ] long 
  7092 ;; Registers used:
  7093 ;;		wreg, status,2, status,0
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7099 ;;      Params:         0       4       0       0       0       0       0       0
  7100 ;;      Locals:         0       2       0       0       0       0       0       0
  7101 ;;      Temps:          0       4       0       0       0       0       0       0
  7102 ;;      Totals:         0      10       0       0       0       0       0       0
  7103 ;;Total ram usage:       10 bytes
  7104 ;; Hardware stack levels used: 1
  7105 ;; Hardware stack levels required when called: 4
  7106 ;; This function calls:
  7107 ;;		Nothing
  7108 ;; This function is called by:
  7109 ;;		_efgtoa
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113     1061                     ___fltol:	
  7114                           ;psect for function ___fltol
  7115                           
  7116                           
  7117                           ;incstack = 0
  7118                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  7119     1061  1003               	clrc
  7120     1062  0020               	movlb	0	; select bank0
  7121     1063  0D22               	rlf	___fltol@f1+2,w
  7122     1064  0D23               	rlf	___fltol@f1+3,w
  7123     1065  00A9               	movwf	___fltol@exp1
  7124     1066  0829               	movf	___fltol@exp1,w
  7125     1067  1D03               	btfss	3,2
  7126     1068  2872               	goto	l3815
  7127     1069                     l3811:
  7128     1069  3000               	movlw	0
  7129     106A  00A3               	movwf	?___fltol+3
  7130     106B  3000               	movlw	0
  7131     106C  00A2               	movwf	?___fltol+2
  7132     106D  3000               	movlw	0
  7133     106E  00A1               	movwf	?___fltol+1
  7134     106F  3000               	movlw	0
  7135     1070  00A0               	movwf	?___fltol
  7136     1071  0008               	return
  7137     1072                     l3815:
  7138     1072  0820               	movf	___fltol@f1,w
  7139     1073  00A4               	movwf	??___fltol
  7140     1074  0821               	movf	___fltol@f1+1,w
  7141     1075  00A5               	movwf	??___fltol+1
  7142     1076  0822               	movf	___fltol@f1+2,w
  7143     1077  00A6               	movwf	??___fltol+2
  7144     1078  0823               	movf	___fltol@f1+3,w
  7145     1079  00A7               	movwf	??___fltol+3
  7146     107A  301F               	movlw	31
  7147     107B                     u4145:
  7148     107B  36A7               	lsrf	??___fltol+3,f
  7149     107C  0CA6               	rrf	??___fltol+2,f
  7150     107D  0CA5               	rrf	??___fltol+1,f
  7151     107E  0CA4               	rrf	??___fltol,f
  7152     107F  0B89               	decfsz	9,f
  7153     1080  287B               	goto	u4145
  7154     1081  0824               	movf	??___fltol,w
  7155     1082  00A8               	movwf	___fltol@sign1
  7156     1083  17A2               	bsf	___fltol@f1+2,7
  7157     1084  30FF               	movlw	255
  7158     1085  05A0               	andwf	___fltol@f1,f
  7159     1086  30FF               	movlw	255
  7160     1087  05A1               	andwf	___fltol@f1+1,f
  7161     1088  30FF               	movlw	255
  7162     1089  05A2               	andwf	___fltol@f1+2,f
  7163     108A  3000               	movlw	0
  7164     108B  05A3               	andwf	___fltol@f1+3,f
  7165     108C  3096               	movlw	150
  7166     108D  02A9               	subwf	___fltol@exp1,f
  7167     108E  1FA9               	btfss	___fltol@exp1,7
  7168     108F  28A3               	goto	l3833
  7169     1090  0829               	movf	___fltol@exp1,w
  7170     1091  3A80               	xorlw	128
  7171     1092  3E97               	addlw	151
  7172     1093  1C03               	btfss	3,0
  7173     1094  2869               	goto	l3811
  7174     1095                     l3831:
  7175     1095  3001               	movlw	1
  7176     1096                     u4175:
  7177     1096  36A3               	lsrf	___fltol@f1+3,f
  7178     1097  0CA2               	rrf	___fltol@f1+2,f
  7179     1098  0CA1               	rrf	___fltol@f1+1,f
  7180     1099  0CA0               	rrf	___fltol@f1,f
  7181     109A  0B89               	decfsz	9,f
  7182     109B  2896               	goto	u4175
  7183     109C  3001               	movlw	1
  7184     109D  00A4               	movwf	??___fltol
  7185     109E  0824               	movf	??___fltol,w
  7186     109F  07A9               	addwf	___fltol@exp1,f
  7187     10A0  1903               	btfsc	3,2
  7188     10A1  28B4               	goto	l3841
  7189     10A2  2895               	goto	l3831
  7190     10A3                     l3833:
  7191     10A3  3020               	movlw	32
  7192     10A4  0229               	subwf	___fltol@exp1,w
  7193     10A5  1803               	btfsc	3,0
  7194     10A6  2869               	goto	l3811
  7195     10A7                     l767:
  7196     10A7  0829               	movf	___fltol@exp1,w
  7197     10A8  1903               	btfsc	3,2
  7198     10A9  28B4               	goto	l3841
  7199     10AA  3001               	movlw	1
  7200     10AB                     u4205:
  7201     10AB  35A0               	lslf	___fltol@f1,f
  7202     10AC  0DA1               	rlf	___fltol@f1+1,f
  7203     10AD  0DA2               	rlf	___fltol@f1+2,f
  7204     10AE  0DA3               	rlf	___fltol@f1+3,f
  7205     10AF  0B89               	decfsz	9,f
  7206     10B0  28AB               	goto	u4205
  7207     10B1  3001               	movlw	1
  7208     10B2  02A9               	subwf	___fltol@exp1,f
  7209     10B3  28A7               	goto	l767
  7210     10B4                     l3841:
  7211     10B4  0828               	movf	___fltol@sign1,w
  7212     10B5  1903               	btfsc	3,2
  7213     10B6  0008               	return
  7214     10B7  09A0               	comf	___fltol@f1,f
  7215     10B8  09A1               	comf	___fltol@f1+1,f
  7216     10B9  09A2               	comf	___fltol@f1+2,f
  7217     10BA  09A3               	comf	___fltol@f1+3,f
  7218     10BB  0AA0               	incf	___fltol@f1,f
  7219     10BC  1903               	skipnz
  7220     10BD  0AA1               	incf	___fltol@f1+1,f
  7221     10BE  1903               	skipnz
  7222     10BF  0AA2               	incf	___fltol@f1+2,f
  7223     10C0  1903               	skipnz
  7224     10C1  0AA3               	incf	___fltol@f1+3,f
  7225     10C2  0008               	return
  7226     10C3                     __end_of___fltol:
  7227                           
  7228                           	psect	text13
  7229     1D14                     __ptext13:	
  7230 ;; *************** function ___flsub *****************
  7231 ;; Defined at:
  7232 ;;		line 242 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;  a               4   35[BANK0 ] long 
  7235 ;;  b               4   39[BANK0 ] long 
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;		None
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  4   35[BANK0 ] long 
  7240 ;; Registers used:
  7241 ;;		wreg, status,2, status,0, pclath, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7247 ;;      Params:         0       8       0       0       0       0       0       0
  7248 ;;      Locals:         0       0       0       0       0       0       0       0
  7249 ;;      Temps:          0       0       0       0       0       0       0       0
  7250 ;;      Totals:         0       8       0       0       0       0       0       0
  7251 ;;Total ram usage:        8 bytes
  7252 ;; Hardware stack levels used: 1
  7253 ;; Hardware stack levels required when called: 5
  7254 ;; This function calls:
  7255 ;;		___fladd
  7256 ;; This function is called by:
  7257 ;;		_efgtoa
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261     1D14                     ___flsub:	
  7262                           ;psect for function ___flsub
  7263                           
  7264                           
  7265                           ;incstack = 0
  7266                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
  7267     1D14  3080               	movlw	128
  7268     1D15  0020               	movlb	0	; select bank0
  7269     1D16  06C6               	xorwf	___flsub@a+3,f
  7270     1D17  084A               	movf	___flsub@b+3,w
  7271     1D18  00A3               	movwf	___fladd@b+3
  7272     1D19  0849               	movf	___flsub@b+2,w
  7273     1D1A  00A2               	movwf	___fladd@b+2
  7274     1D1B  0848               	movf	___flsub@b+1,w
  7275     1D1C  00A1               	movwf	___fladd@b+1
  7276     1D1D  0847               	movf	___flsub@b,w
  7277     1D1E  00A0               	movwf	___fladd@b
  7278     1D1F  0846               	movf	___flsub@a+3,w
  7279     1D20  00A7               	movwf	___fladd@a+3
  7280     1D21  0845               	movf	___flsub@a+2,w
  7281     1D22  00A6               	movwf	___fladd@a+2
  7282     1D23  0844               	movf	___flsub@a+1,w
  7283     1D24  00A5               	movwf	___fladd@a+1
  7284     1D25  0843               	movf	___flsub@a,w
  7285     1D26  00A4               	movwf	___fladd@a
  7286     1D27  3196  264E         	fcall	___fladd
  7287     1D29  0020               	movlb	0	; select bank0
  7288     1D2A  0823               	movf	?___fladd+3,w
  7289     1D2B  00C6               	movwf	?___flsub+3
  7290     1D2C  0822               	movf	?___fladd+2,w
  7291     1D2D  00C5               	movwf	?___flsub+2
  7292     1D2E  0821               	movf	?___fladd+1,w
  7293     1D2F  00C4               	movwf	?___flsub+1
  7294     1D30  0820               	movf	?___fladd,w
  7295     1D31  00C3               	movwf	?___flsub
  7296     1D32  0008               	return
  7297     1D33                     __end_of___flsub:
  7298                           
  7299                           	psect	text14
  7300     164E                     __ptext14:	
  7301 ;; *************** function ___fladd *****************
  7302 ;; Defined at:
  7303 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  b               4    0[BANK0 ] long 
  7306 ;;  a               4    4[BANK0 ] long 
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;  grs             1   19[BANK0 ] unsigned char 
  7309 ;;  bexp            1   18[BANK0 ] unsigned char 
  7310 ;;  aexp            1   17[BANK0 ] unsigned char 
  7311 ;;  signs           1   16[BANK0 ] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  4    0[BANK0 ] unsigned char 
  7314 ;; Registers used:
  7315 ;;		wreg, status,2, status,0
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7321 ;;      Params:         0       8       0       0       0       0       0       0
  7322 ;;      Locals:         0       4       0       0       0       0       0       0
  7323 ;;      Temps:          0       8       0       0       0       0       0       0
  7324 ;;      Totals:         0      20       0       0       0       0       0       0
  7325 ;;Total ram usage:       20 bytes
  7326 ;; Hardware stack levels used: 1
  7327 ;; Hardware stack levels required when called: 4
  7328 ;; This function calls:
  7329 ;;		Nothing
  7330 ;; This function is called by:
  7331 ;;		___flsub
  7332 ;;		_efgtoa
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336     164E                     ___fladd:	
  7337                           ;psect for function ___fladd
  7338                           
  7339                           
  7340                           ;incstack = 0
  7341                           ; Regs used in ___fladd: [wreg+status,2+status,0]
  7342     164E  0020               	movlb	0	; select bank0
  7343     164F  0823               	movf	___fladd@b+3,w
  7344     1650  3980               	andlw	128
  7345     1651  00B0               	movwf	___fladd@signs
  7346     1652  3523               	lslf	___fladd@b+3,w
  7347     1653  00B2               	movwf	___fladd@bexp
  7348     1654  1BA2               	btfsc	___fladd@b+2,7
  7349     1655  1432               	bsf	___fladd@bexp,0
  7350     1656  0832               	movf	___fladd@bexp,w
  7351     1657  1903               	btfsc	3,2
  7352     1658  2E67               	goto	l3475
  7353     1659  0A32               	incf	___fladd@bexp,w
  7354     165A  1D03               	btfss	3,2
  7355     165B  2E64               	goto	l3471
  7356     165C  3000               	movlw	0
  7357     165D  00A3               	movwf	___fladd@b+3
  7358     165E  3000               	movlw	0
  7359     165F  00A2               	movwf	___fladd@b+2
  7360     1660  3000               	movlw	0
  7361     1661  00A1               	movwf	___fladd@b+1
  7362     1662  3000               	movlw	0
  7363     1663  00A0               	movwf	___fladd@b
  7364     1664                     l3471:
  7365     1664  17A2               	bsf	___fladd@b+2,7
  7366     1665  01A3               	clrf	___fladd@b+3
  7367     1666  2E6F               	goto	l3477
  7368     1667                     l3475:
  7369     1667  3000               	movlw	0
  7370     1668  00A3               	movwf	___fladd@b+3
  7371     1669  3000               	movlw	0
  7372     166A  00A2               	movwf	___fladd@b+2
  7373     166B  3000               	movlw	0
  7374     166C  00A1               	movwf	___fladd@b+1
  7375     166D  3000               	movlw	0
  7376     166E  00A0               	movwf	___fladd@b
  7377     166F                     l3477:
  7378     166F  0827               	movf	___fladd@a+3,w
  7379     1670  3980               	andlw	128
  7380     1671  00B1               	movwf	___fladd@aexp
  7381     1672  0831               	movf	___fladd@aexp,w
  7382     1673  0630               	xorwf	___fladd@signs,w
  7383     1674  1D03               	btfss	3,2
  7384     1675  1730               	bsf	___fladd@signs,6
  7385     1676  3527               	lslf	___fladd@a+3,w
  7386     1677  00B1               	movwf	___fladd@aexp
  7387     1678  1BA6               	btfsc	___fladd@a+2,7
  7388     1679  1431               	bsf	___fladd@aexp,0
  7389     167A  0831               	movf	___fladd@aexp,w
  7390     167B  1903               	btfsc	3,2
  7391     167C  2E8B               	goto	l3499
  7392     167D  0A31               	incf	___fladd@aexp,w
  7393     167E  1D03               	btfss	3,2
  7394     167F  2E88               	goto	l3495
  7395     1680  3000               	movlw	0
  7396     1681  00A7               	movwf	___fladd@a+3
  7397     1682  3000               	movlw	0
  7398     1683  00A6               	movwf	___fladd@a+2
  7399     1684  3000               	movlw	0
  7400     1685  00A5               	movwf	___fladd@a+1
  7401     1686  3000               	movlw	0
  7402     1687  00A4               	movwf	___fladd@a
  7403     1688                     l3495:
  7404     1688  17A6               	bsf	___fladd@a+2,7
  7405     1689  01A7               	clrf	___fladd@a+3
  7406     168A  2E93               	goto	l867
  7407     168B                     l3499:
  7408     168B  3000               	movlw	0
  7409     168C  00A7               	movwf	___fladd@a+3
  7410     168D  3000               	movlw	0
  7411     168E  00A6               	movwf	___fladd@a+2
  7412     168F  3000               	movlw	0
  7413     1690  00A5               	movwf	___fladd@a+1
  7414     1691  3000               	movlw	0
  7415     1692  00A4               	movwf	___fladd@a
  7416     1693                     l867:
  7417     1693  0832               	movf	___fladd@bexp,w
  7418     1694  0231               	subwf	___fladd@aexp,w
  7419     1695  1803               	skipnc
  7420     1696  2EBB               	goto	l3535
  7421     1697  1F30               	btfss	___fladd@signs,6
  7422     1698  2E9D               	goto	l3505
  7423     1699  3080               	movlw	128
  7424     169A  00A8               	movwf	??___fladd
  7425     169B  0828               	movf	??___fladd,w
  7426     169C  06B0               	xorwf	___fladd@signs,f
  7427     169D                     l3505:
  7428     169D  0832               	movf	___fladd@bexp,w
  7429     169E  00B3               	movwf	___fladd@grs
  7430     169F  0831               	movf	___fladd@aexp,w
  7431     16A0  00B2               	movwf	___fladd@bexp
  7432     16A1  0833               	movf	___fladd@grs,w
  7433     16A2  00B1               	movwf	___fladd@aexp
  7434     16A3  0820               	movf	___fladd@b,w
  7435     16A4  00B3               	movwf	___fladd@grs
  7436     16A5  0824               	movf	___fladd@a,w
  7437     16A6  00A0               	movwf	___fladd@b
  7438     16A7  0833               	movf	___fladd@grs,w
  7439     16A8  00A4               	movwf	___fladd@a
  7440     16A9  0821               	movf	___fladd@b+1,w
  7441     16AA  00B3               	movwf	___fladd@grs
  7442     16AB  0825               	movf	___fladd@a+1,w
  7443     16AC  00A1               	movwf	___fladd@b+1
  7444     16AD  0833               	movf	___fladd@grs,w
  7445     16AE  00A5               	movwf	___fladd@a+1
  7446     16AF  0822               	movf	___fladd@b+2,w
  7447     16B0  00B3               	movwf	___fladd@grs
  7448     16B1  0826               	movf	___fladd@a+2,w
  7449     16B2  00A2               	movwf	___fladd@b+2
  7450     16B3  0833               	movf	___fladd@grs,w
  7451     16B4  00A6               	movwf	___fladd@a+2
  7452     16B5  0823               	movf	___fladd@b+3,w
  7453     16B6  00B3               	movwf	___fladd@grs
  7454     16B7  0827               	movf	___fladd@a+3,w
  7455     16B8  00A3               	movwf	___fladd@b+3
  7456     16B9  0833               	movf	___fladd@grs,w
  7457     16BA  00A7               	movwf	___fladd@a+3
  7458     16BB                     l3535:
  7459     16BB  01B3               	clrf	___fladd@grs
  7460     16BC  0831               	movf	___fladd@aexp,w
  7461     16BD  00A8               	movwf	??___fladd
  7462     16BE  01A9               	clrf	??___fladd+1
  7463     16BF  0829               	movf	??___fladd+1,w
  7464     16C0  00AB               	movwf	??___fladd+3
  7465     16C1  0832               	movf	___fladd@bexp,w
  7466     16C2  0228               	subwf	??___fladd,w
  7467     16C3  00AA               	movwf	??___fladd+2
  7468     16C4  1C03               	skipc
  7469     16C5  03AB               	decf	??___fladd+3,f
  7470     16C6  082B               	movf	??___fladd+3,w
  7471     16C7  3A80               	xorlw	128
  7472     16C8  00AC               	movwf	??___fladd+4
  7473     16C9  3080               	movlw	128
  7474     16CA  022C               	subwf	??___fladd+4,w
  7475     16CB  1D03               	skipz
  7476     16CC  2ECF               	goto	u3435
  7477     16CD  301A               	movlw	26
  7478     16CE  022A               	subwf	??___fladd+2,w
  7479     16CF                     u3435:
  7480     16CF  1C03               	skipc
  7481     16D0  2EFD               	goto	l3553
  7482     16D1  0020               	movlb	0	; select bank0
  7483     16D2  0823               	movf	___fladd@b+3,w
  7484     16D3  0422               	iorwf	___fladd@b+2,w
  7485     16D4  0421               	iorwf	___fladd@b+1,w
  7486     16D5  0420               	iorwf	___fladd@b,w
  7487     16D6  1903               	btfsc	3,2
  7488     16D7  2EDA               	goto	u3440
  7489     16D8  3001               	movlw	1
  7490     16D9  2EDB               	goto	u3450
  7491     16DA                     u3440:
  7492     16DA  3000               	movlw	0
  7493     16DB                     u3450:
  7494     16DB  00B3               	movwf	___fladd@grs
  7495     16DC  3000               	movlw	0
  7496     16DD  00A3               	movwf	___fladd@b+3
  7497     16DE  3000               	movlw	0
  7498     16DF  00A2               	movwf	___fladd@b+2
  7499     16E0  3000               	movlw	0
  7500     16E1  00A1               	movwf	___fladd@b+1
  7501     16E2  3000               	movlw	0
  7502     16E3  00A0               	movwf	___fladd@b
  7503     16E4  0831               	movf	___fladd@aexp,w
  7504     16E5  00B2               	movwf	___fladd@bexp
  7505     16E6  2F02               	goto	l871
  7506     16E7                     l873:
  7507     16E7  1C33               	btfss	___fladd@grs,0
  7508     16E8  2EED               	goto	l3543
  7509     16E9  3633               	lsrf	___fladd@grs,w
  7510     16EA  3801               	iorlw	1
  7511     16EB  00B3               	movwf	___fladd@grs
  7512     16EC  2EEF               	goto	l3545
  7513     16ED                     l3543:
  7514     16ED  1003               	clrc
  7515     16EE  0CB3               	rrf	___fladd@grs,f
  7516     16EF                     l3545:
  7517     16EF  1820               	btfsc	___fladd@b,0
  7518     16F0  17B3               	bsf	___fladd@grs,7
  7519     16F1  3001               	movlw	1
  7520     16F2  00A8               	movwf	??___fladd
  7521     16F3                     u3485:
  7522     16F3  37A3               	asrf	___fladd@b+3,f
  7523     16F4  0CA2               	rrf	___fladd@b+2,f
  7524     16F5  0CA1               	rrf	___fladd@b+1,f
  7525     16F6  0CA0               	rrf	___fladd@b,f
  7526     16F7  0BA8               	decfsz	??___fladd& (0+127),f
  7527     16F8  2EF3               	goto	u3485
  7528     16F9  3001               	movlw	1
  7529     16FA  00A8               	movwf	??___fladd
  7530     16FB  0828               	movf	??___fladd,w
  7531     16FC  07B2               	addwf	___fladd@bexp,f
  7532     16FD                     l3553:
  7533     16FD  0020               	movlb	0	; select bank0
  7534     16FE  0831               	movf	___fladd@aexp,w
  7535     16FF  0232               	subwf	___fladd@bexp,w
  7536     1700  1C03               	skipc
  7537     1701  2EE7               	goto	l873
  7538     1702                     l871:
  7539     1702  1B30               	btfsc	___fladd@signs,6
  7540     1703  2F31               	goto	l3579
  7541     1704  0832               	movf	___fladd@bexp,w
  7542     1705  1D03               	btfss	3,2
  7543     1706  2F10               	goto	l3561
  7544     1707  3000               	movlw	0
  7545     1708  00A3               	movwf	?___fladd+3
  7546     1709  3000               	movlw	0
  7547     170A  00A2               	movwf	?___fladd+2
  7548     170B  3000               	movlw	0
  7549     170C  00A1               	movwf	?___fladd+1
  7550     170D  3000               	movlw	0
  7551     170E  00A0               	movwf	?___fladd
  7552     170F  0008               	return
  7553     1710                     l3561:
  7554     1710  0824               	movf	___fladd@a,w
  7555     1711  07A0               	addwf	___fladd@b,f
  7556     1712  0825               	movf	___fladd@a+1,w
  7557     1713  3DA1               	addwfc	___fladd@b+1,f
  7558     1714  0826               	movf	___fladd@a+2,w
  7559     1715  3DA2               	addwfc	___fladd@b+2,f
  7560     1716  0827               	movf	___fladd@a+3,w
  7561     1717  3DA3               	addwfc	___fladd@b+3,f
  7562     1718  1C23               	btfss	___fladd@b+3,0
  7563     1719  2FAB               	goto	l3613
  7564     171A  1C33               	btfss	___fladd@grs,0
  7565     171B  2F20               	goto	l3569
  7566     171C  3633               	lsrf	___fladd@grs,w
  7567     171D  3801               	iorlw	1
  7568     171E  00B3               	movwf	___fladd@grs
  7569     171F  2F22               	goto	l3571
  7570     1720                     l3569:
  7571     1720  1003               	clrc
  7572     1721  0CB3               	rrf	___fladd@grs,f
  7573     1722                     l3571:
  7574     1722  1820               	btfsc	___fladd@b,0
  7575     1723  17B3               	bsf	___fladd@grs,7
  7576     1724  3001               	movlw	1
  7577     1725  00A8               	movwf	??___fladd
  7578     1726                     u3555:
  7579     1726  37A3               	asrf	___fladd@b+3,f
  7580     1727  0CA2               	rrf	___fladd@b+2,f
  7581     1728  0CA1               	rrf	___fladd@b+1,f
  7582     1729  0CA0               	rrf	___fladd@b,f
  7583     172A  0BA8               	decfsz	??___fladd& (0+127),f
  7584     172B  2F26               	goto	u3555
  7585     172C  3001               	movlw	1
  7586     172D  00A8               	movwf	??___fladd
  7587     172E  0828               	movf	??___fladd,w
  7588     172F  07B2               	addwf	___fladd@bexp,f
  7589     1730  2FAB               	goto	l3613
  7590     1731                     l3579:
  7591     1731  0823               	movf	___fladd@b+3,w
  7592     1732  3A80               	xorlw	128
  7593     1733  00A8               	movwf	??___fladd
  7594     1734  0827               	movf	___fladd@a+3,w
  7595     1735  3A80               	xorlw	128
  7596     1736  0228               	subwf	??___fladd,w
  7597     1737  1D03               	skipz
  7598     1738  2F43               	goto	u3563
  7599     1739  0826               	movf	___fladd@a+2,w
  7600     173A  0222               	subwf	___fladd@b+2,w
  7601     173B  1D03               	skipz
  7602     173C  2F43               	goto	u3563
  7603     173D  0825               	movf	___fladd@a+1,w
  7604     173E  0221               	subwf	___fladd@b+1,w
  7605     173F  1D03               	skipz
  7606     1740  2F43               	goto	u3563
  7607     1741  0824               	movf	___fladd@a,w
  7608     1742  0220               	subwf	___fladd@b,w
  7609     1743                     u3563:
  7610     1743  1803               	skipnc
  7611     1744  2F7B               	goto	l3589
  7612     1745  30FF               	movlw	255
  7613     1746  00A8               	movwf	??___fladd
  7614     1747  30FF               	movlw	255
  7615     1748  00A9               	movwf	??___fladd+1
  7616     1749  30FF               	movlw	255
  7617     174A  00AA               	movwf	??___fladd+2
  7618     174B  30FF               	movlw	255
  7619     174C  00AB               	movwf	??___fladd+3
  7620     174D  0820               	movf	___fladd@b,w
  7621     174E  0224               	subwf	___fladd@a,w
  7622     174F  00AC               	movwf	??___fladd+4
  7623     1750  0821               	movf	___fladd@b+1,w
  7624     1751  3B25               	subwfb	___fladd@a+1,w
  7625     1752  00AD               	movwf	??___fladd+5
  7626     1753  0822               	movf	___fladd@b+2,w
  7627     1754  3B26               	subwfb	___fladd@a+2,w
  7628     1755  00AE               	movwf	??___fladd+6
  7629     1756  0823               	movf	___fladd@b+3,w
  7630     1757  3B27               	subwfb	___fladd@a+3,w
  7631     1758  00AF               	movwf	??___fladd+7
  7632     1759  082C               	movf	??___fladd+4,w
  7633     175A  07A8               	addwf	??___fladd,f
  7634     175B  082D               	movf	??___fladd+5,w
  7635     175C  3DA9               	addwfc	??___fladd+1,f
  7636     175D  082E               	movf	??___fladd+6,w
  7637     175E  3DAA               	addwfc	??___fladd+2,f
  7638     175F  082F               	movf	??___fladd+7,w
  7639     1760  3DAB               	addwfc	??___fladd+3,f
  7640     1761  082B               	movf	??___fladd+3,w
  7641     1762  00A3               	movwf	___fladd@b+3
  7642     1763  082A               	movf	??___fladd+2,w
  7643     1764  00A2               	movwf	___fladd@b+2
  7644     1765  0829               	movf	??___fladd+1,w
  7645     1766  00A1               	movwf	___fladd@b+1
  7646     1767  0828               	movf	??___fladd,w
  7647     1768  00A0               	movwf	___fladd@b
  7648     1769  3080               	movlw	128
  7649     176A  00A8               	movwf	??___fladd
  7650     176B  0828               	movf	??___fladd,w
  7651     176C  06B0               	xorwf	___fladd@signs,f
  7652     176D  09B3               	comf	___fladd@grs,f
  7653     176E  0AB3               	incf	___fladd@grs,f
  7654     176F  0833               	movf	___fladd@grs,w
  7655     1770  1D03               	btfss	3,2
  7656     1771  2F83               	goto	l888
  7657     1772  3001               	movlw	1
  7658     1773  07A0               	addwf	___fladd@b,f
  7659     1774  3000               	movlw	0
  7660     1775  3DA1               	addwfc	___fladd@b+1,f
  7661     1776  3000               	movlw	0
  7662     1777  3DA2               	addwfc	___fladd@b+2,f
  7663     1778  3000               	movlw	0
  7664     1779  3DA3               	addwfc	___fladd@b+3,f
  7665     177A  2F83               	goto	l888
  7666     177B                     l3589:
  7667     177B  0824               	movf	___fladd@a,w
  7668     177C  02A0               	subwf	___fladd@b,f
  7669     177D  0825               	movf	___fladd@a+1,w
  7670     177E  3BA1               	subwfb	___fladd@b+1,f
  7671     177F  0826               	movf	___fladd@a+2,w
  7672     1780  3BA2               	subwfb	___fladd@b+2,f
  7673     1781  0827               	movf	___fladd@a+3,w
  7674     1782  3BA3               	subwfb	___fladd@b+3,f
  7675     1783                     l888:
  7676     1783  0823               	movf	___fladd@b+3,w
  7677     1784  0422               	iorwf	___fladd@b+2,w
  7678     1785  0421               	iorwf	___fladd@b+1,w
  7679     1786  0420               	iorwf	___fladd@b,w
  7680     1787  1D03               	skipz
  7681     1788  2FA9               	goto	l3611
  7682     1789  0833               	movf	___fladd@grs,w
  7683     178A  1D03               	btfss	3,2
  7684     178B  2FA9               	goto	l3611
  7685     178C  3000               	movlw	0
  7686     178D  00A3               	movwf	?___fladd+3
  7687     178E  3000               	movlw	0
  7688     178F  00A2               	movwf	?___fladd+2
  7689     1790  3000               	movlw	0
  7690     1791  00A1               	movwf	?___fladd+1
  7691     1792  3000               	movlw	0
  7692     1793  00A0               	movwf	?___fladd
  7693     1794  0008               	return
  7694     1795                     l3597:
  7695     1795  3001               	movlw	1
  7696     1796                     u3605:
  7697     1796  35A0               	lslf	___fladd@b,f
  7698     1797  0DA1               	rlf	___fladd@b+1,f
  7699     1798  0DA2               	rlf	___fladd@b+2,f
  7700     1799  0DA3               	rlf	___fladd@b+3,f
  7701     179A  0B89               	decfsz	9,f
  7702     179B  2F96               	goto	u3605
  7703     179C  1BB3               	btfsc	___fladd@grs,7
  7704     179D  1420               	bsf	___fladd@b,0
  7705     179E  1C33               	btfss	___fladd@grs,0
  7706     179F  2FA2               	goto	l3605
  7707     17A0  1403               	setc
  7708     17A1  2FA3               	goto	L6
  7709     17A2                     l3605:
  7710     17A2  1003               	clrc
  7711     17A3                     L6:
  7712     17A3  0DB3               	rlf	___fladd@grs,f
  7713     17A4  0832               	movf	___fladd@bexp,w
  7714     17A5  1903               	btfsc	3,2
  7715     17A6  2FA9               	goto	l3611
  7716     17A7  3001               	movlw	1
  7717     17A8  02B2               	subwf	___fladd@bexp,f
  7718     17A9                     l3611:
  7719     17A9  1FA2               	btfss	___fladd@b+2,7
  7720     17AA  2F95               	goto	l3597
  7721     17AB                     l3613:
  7722     17AB  01B1               	clrf	___fladd@aexp
  7723     17AC  1FB3               	btfss	___fladd@grs,7
  7724     17AD  2FB6               	goto	l3623
  7725     17AE  0833               	movf	___fladd@grs,w
  7726     17AF  397F               	andlw	127
  7727     17B0  1903               	btfsc	3,2
  7728     17B1  1820               	btfsc	___fladd@b,0
  7729     17B2  2FB4               	goto	l3619
  7730     17B3  2FB6               	goto	l3623
  7731     17B4                     l3619:
  7732     17B4  01B1               	clrf	___fladd@aexp
  7733     17B5  0AB1               	incf	___fladd@aexp,f
  7734     17B6                     l3623:
  7735     17B6  0831               	movf	___fladd@aexp,w
  7736     17B7  1903               	btfsc	3,2
  7737     17B8  2FE2               	goto	l901
  7738     17B9  3001               	movlw	1
  7739     17BA  07A0               	addwf	___fladd@b,f
  7740     17BB  3000               	movlw	0
  7741     17BC  3DA1               	addwfc	___fladd@b+1,f
  7742     17BD  3000               	movlw	0
  7743     17BE  3DA2               	addwfc	___fladd@b+2,f
  7744     17BF  3000               	movlw	0
  7745     17C0  3DA3               	addwfc	___fladd@b+3,f
  7746     17C1  1C23               	btfss	___fladd@b+3,0
  7747     17C2  2FE2               	goto	l901
  7748     17C3  0820               	movf	___fladd@b,w
  7749     17C4  00A8               	movwf	??___fladd
  7750     17C5  0821               	movf	___fladd@b+1,w
  7751     17C6  00A9               	movwf	??___fladd+1
  7752     17C7  0822               	movf	___fladd@b+2,w
  7753     17C8  00AA               	movwf	??___fladd+2
  7754     17C9  0823               	movf	___fladd@b+3,w
  7755     17CA  00AB               	movwf	??___fladd+3
  7756     17CB  3001               	movlw	1
  7757     17CC  00AC               	movwf	??___fladd+4
  7758     17CD                     u3705:
  7759     17CD  37AB               	asrf	??___fladd+3,f
  7760     17CE  0CAA               	rrf	??___fladd+2,f
  7761     17CF  0CA9               	rrf	??___fladd+1,f
  7762     17D0  0CA8               	rrf	??___fladd,f
  7763     17D1  0BAC               	decfsz	??___fladd+4,f
  7764     17D2  2FCD               	goto	u3705
  7765     17D3  082B               	movf	??___fladd+3,w
  7766     17D4  00A3               	movwf	___fladd@b+3
  7767     17D5  082A               	movf	??___fladd+2,w
  7768     17D6  00A2               	movwf	___fladd@b+2
  7769     17D7  0829               	movf	??___fladd+1,w
  7770     17D8  00A1               	movwf	___fladd@b+1
  7771     17D9  0828               	movf	??___fladd,w
  7772     17DA  00A0               	movwf	___fladd@b
  7773     17DB  0A32               	incf	___fladd@bexp,w
  7774     17DC  1903               	btfsc	3,2
  7775     17DD  2FE2               	goto	l901
  7776     17DE  3001               	movlw	1
  7777     17DF  00A8               	movwf	??___fladd
  7778     17E0  0828               	movf	??___fladd,w
  7779     17E1  07B2               	addwf	___fladd@bexp,f
  7780     17E2                     l901:
  7781     17E2  0A32               	incf	___fladd@bexp,w
  7782     17E3  1D03               	btfss	3,2
  7783     17E4  0832               	movf	___fladd@bexp,w
  7784     17E5  1D03               	btfss	3,2
  7785     17E6  2FF2               	goto	l3641
  7786     17E7  3000               	movlw	0
  7787     17E8  00A3               	movwf	___fladd@b+3
  7788     17E9  3000               	movlw	0
  7789     17EA  00A2               	movwf	___fladd@b+2
  7790     17EB  3000               	movlw	0
  7791     17EC  00A1               	movwf	___fladd@b+1
  7792     17ED  3000               	movlw	0
  7793     17EE  00A0               	movwf	___fladd@b
  7794     17EF  0832               	movf	___fladd@bexp,w
  7795     17F0  1903               	btfsc	3,2
  7796     17F1  01B0               	clrf	___fladd@signs
  7797     17F2                     l3641:
  7798     17F2  1C32               	btfss	___fladd@bexp,0
  7799     17F3  2FF6               	goto	l3645
  7800     17F4  17A2               	bsf	___fladd@b+2,7
  7801     17F5  2FFA               	goto	l909
  7802     17F6                     l3645:
  7803     17F6  307F               	movlw	127
  7804     17F7  00A8               	movwf	??___fladd
  7805     17F8  0828               	movf	??___fladd,w
  7806     17F9  05A2               	andwf	___fladd@b+2,f
  7807     17FA                     l909:
  7808     17FA  3632               	lsrf	___fladd@bexp,w
  7809     17FB  00A3               	movwf	___fladd@b+3
  7810     17FC  1FB0               	btfss	___fladd@signs,7
  7811     17FD  0008               	return
  7812     17FE  17A3               	bsf	___fladd@b+3,7
  7813     17FF  0008               	return
  7814     1800                     __end_of___fladd:
  7815                           
  7816                           	psect	text15
  7817     1C39                     __ptext15:	
  7818 ;; *************** function ___flneg *****************
  7819 ;; Defined at:
  7820 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flneg.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;  f1              4    0[BANK0 ] unsigned char 
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;		None
  7825 ;; Return value:  Size  Location     Type
  7826 ;;                  4    0[BANK0 ] unsigned char 
  7827 ;; Registers used:
  7828 ;;		wreg
  7829 ;; Tracked objects:
  7830 ;;		On entry : 0/0
  7831 ;;		On exit  : 0/0
  7832 ;;		Unchanged: 0/0
  7833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7834 ;;      Params:         0       4       0       0       0       0       0       0
  7835 ;;      Locals:         0       0       0       0       0       0       0       0
  7836 ;;      Temps:          0       0       0       0       0       0       0       0
  7837 ;;      Totals:         0       4       0       0       0       0       0       0
  7838 ;;Total ram usage:        4 bytes
  7839 ;; Hardware stack levels used: 1
  7840 ;; Hardware stack levels required when called: 4
  7841 ;; This function calls:
  7842 ;;		Nothing
  7843 ;; This function is called by:
  7844 ;;		_efgtoa
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848     1C39                     ___flneg:	
  7849                           ;psect for function ___flneg
  7850                           
  7851                           
  7852                           ;incstack = 0
  7853                           ; Regs used in ___flneg: [wreg]
  7854     1C39  0020               	movlb	0	; select bank0
  7855     1C3A  0823               	movf	___flneg@f1+3,w
  7856     1C3B  0422               	iorwf	___flneg@f1+2,w
  7857     1C3C  0421               	iorwf	___flneg@f1+1,w
  7858     1C3D  0420               	iorwf	___flneg@f1,w
  7859     1C3E  1903               	skipnz
  7860     1C3F  0008               	return
  7861     1C40  3080               	movlw	128
  7862     1C41  06A3               	xorwf	___flneg@f1+3,f
  7863     1C42  0008               	return
  7864     1C43                     __end_of___flneg:
  7865                           
  7866                           	psect	text16
  7867     04B4                     __ptext16:	
  7868 ;; *************** function ___flmul *****************
  7869 ;; Defined at:
  7870 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;  b               4    9[BANK0 ] unsigned char 
  7873 ;;  a               4   13[BANK0 ] unsigned char 
  7874 ;; Auto vars:     Size  Location     Type
  7875 ;;  prod            4   29[BANK0 ] struct .
  7876 ;;  grs             4   23[BANK0 ] unsigned long 
  7877 ;;  temp            2   33[BANK0 ] struct .
  7878 ;;  bexp            1   28[BANK0 ] unsigned char 
  7879 ;;  aexp            1   27[BANK0 ] unsigned char 
  7880 ;;  sign            1   22[BANK0 ] unsigned char 
  7881 ;; Return value:  Size  Location     Type
  7882 ;;                  4    9[BANK0 ] unsigned char 
  7883 ;; Registers used:
  7884 ;;		wreg, status,2, status,0, pclath, cstack
  7885 ;; Tracked objects:
  7886 ;;		On entry : 0/0
  7887 ;;		On exit  : 0/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7890 ;;      Params:         0       8       0       0       0       0       0       0
  7891 ;;      Locals:         0      13       0       0       0       0       0       0
  7892 ;;      Temps:          0       5       0       0       0       0       0       0
  7893 ;;      Totals:         0      26       0       0       0       0       0       0
  7894 ;;Total ram usage:       26 bytes
  7895 ;; Hardware stack levels used: 1
  7896 ;; Hardware stack levels required when called: 5
  7897 ;; This function calls:
  7898 ;;		__Umul8_16
  7899 ;; This function is called by:
  7900 ;;		_efgtoa
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904     04B4                     ___flmul:	
  7905                           ;psect for function ___flmul
  7906                           
  7907                           
  7908                           ;incstack = 0
  7909                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  7910     04B4  0020               	movlb	0	; select bank0
  7911     04B5  082C               	movf	___flmul@b+3,w
  7912     04B6  3980               	andlw	128
  7913     04B7  00B6               	movwf	___flmul@sign
  7914     04B8  352C               	lslf	___flmul@b+3,w
  7915     04B9  00BC               	movwf	___flmul@bexp
  7916     04BA  1BAB               	btfsc	___flmul@b+2,7
  7917     04BB  143C               	bsf	___flmul@bexp,0
  7918     04BC  083C               	movf	___flmul@bexp,w
  7919     04BD  1903               	btfsc	3,2
  7920     04BE  2CCC               	goto	l4007
  7921     04BF  0A3C               	incf	___flmul@bexp,w
  7922     04C0  1D03               	btfss	3,2
  7923     04C1  2CCA               	goto	l4005
  7924     04C2  3000               	movlw	0
  7925     04C3  00AC               	movwf	___flmul@b+3
  7926     04C4  3000               	movlw	0
  7927     04C5  00AB               	movwf	___flmul@b+2
  7928     04C6  3000               	movlw	0
  7929     04C7  00AA               	movwf	___flmul@b+1
  7930     04C8  3000               	movlw	0
  7931     04C9  00A9               	movwf	___flmul@b
  7932     04CA                     l4005:
  7933     04CA  17AB               	bsf	___flmul@b+2,7
  7934     04CB  2CD4               	goto	l4009
  7935     04CC                     l4007:
  7936     04CC  3000               	movlw	0
  7937     04CD  00AC               	movwf	___flmul@b+3
  7938     04CE  3000               	movlw	0
  7939     04CF  00AB               	movwf	___flmul@b+2
  7940     04D0  3000               	movlw	0
  7941     04D1  00AA               	movwf	___flmul@b+1
  7942     04D2  3000               	movlw	0
  7943     04D3  00A9               	movwf	___flmul@b
  7944     04D4                     l4009:
  7945     04D4  0830               	movf	___flmul@a+3,w
  7946     04D5  3980               	andlw	128
  7947     04D6  00B1               	movwf	??___flmul
  7948     04D7  0831               	movf	??___flmul,w
  7949     04D8  06B6               	xorwf	___flmul@sign,f
  7950     04D9  3530               	lslf	___flmul@a+3,w
  7951     04DA  00BB               	movwf	___flmul@aexp
  7952     04DB  1BAF               	btfsc	___flmul@a+2,7
  7953     04DC  143B               	bsf	___flmul@aexp,0
  7954     04DD  083B               	movf	___flmul@aexp,w
  7955     04DE  1903               	btfsc	3,2
  7956     04DF  2CED               	goto	l4025
  7957     04E0  0A3B               	incf	___flmul@aexp,w
  7958     04E1  1D03               	btfss	3,2
  7959     04E2  2CEB               	goto	l4023
  7960     04E3  3000               	movlw	0
  7961     04E4  00B0               	movwf	___flmul@a+3
  7962     04E5  3000               	movlw	0
  7963     04E6  00AF               	movwf	___flmul@a+2
  7964     04E7  3000               	movlw	0
  7965     04E8  00AE               	movwf	___flmul@a+1
  7966     04E9  3000               	movlw	0
  7967     04EA  00AD               	movwf	___flmul@a
  7968     04EB                     l4023:
  7969     04EB  17AF               	bsf	___flmul@a+2,7
  7970     04EC  2CF5               	goto	l4027
  7971     04ED                     l4025:
  7972     04ED  3000               	movlw	0
  7973     04EE  00B0               	movwf	___flmul@a+3
  7974     04EF  3000               	movlw	0
  7975     04F0  00AF               	movwf	___flmul@a+2
  7976     04F1  3000               	movlw	0
  7977     04F2  00AE               	movwf	___flmul@a+1
  7978     04F3  3000               	movlw	0
  7979     04F4  00AD               	movwf	___flmul@a
  7980     04F5                     l4027:
  7981     04F5  083B               	movf	___flmul@aexp,w
  7982     04F6  1D03               	btfss	3,2
  7983     04F7  083C               	movf	___flmul@bexp,w
  7984     04F8  1D03               	btfss	3,2
  7985     04F9  2D03               	goto	l4035
  7986     04FA  3000               	movlw	0
  7987     04FB  00AC               	movwf	?___flmul+3
  7988     04FC  3000               	movlw	0
  7989     04FD  00AB               	movwf	?___flmul+2
  7990     04FE  3000               	movlw	0
  7991     04FF  00AA               	movwf	?___flmul+1
  7992     0500  3000               	movlw	0
  7993     0501  00A9               	movwf	?___flmul
  7994     0502  0008               	return
  7995     0503                     l4035:
  7996     0503  0829               	movf	___flmul@b,w
  7997     0504  00A0               	movwf	__Umul8_16@multiplicand
  7998     0505  082F               	movf	___flmul@a+2,w
  7999     0506  319D  2533  3184   	fcall	__Umul8_16
  8000     0509  0020               	movlb	0	; select bank0
  8001     050A  0821               	movf	?__Umul8_16+1,w
  8002     050B  00C2               	movwf	___flmul@temp+1
  8003     050C  0820               	movf	?__Umul8_16,w
  8004     050D  00C1               	movwf	___flmul@temp
  8005     050E  0841               	movf	___flmul@temp,w
  8006     050F  00B1               	movwf	??___flmul
  8007     0510  01B2               	clrf	??___flmul+1
  8008     0511  01B3               	clrf	??___flmul+2
  8009     0512  01B4               	clrf	??___flmul+3
  8010     0513  0834               	movf	??___flmul+3,w
  8011     0514  00BA               	movwf	___flmul@grs+3
  8012     0515  0833               	movf	??___flmul+2,w
  8013     0516  00B9               	movwf	___flmul@grs+2
  8014     0517  0832               	movf	??___flmul+1,w
  8015     0518  00B8               	movwf	___flmul@grs+1
  8016     0519  0831               	movf	??___flmul,w
  8017     051A  00B7               	movwf	___flmul@grs
  8018     051B  0842               	movf	___flmul@temp+1,w
  8019     051C  00B1               	movwf	??___flmul
  8020     051D  01B2               	clrf	??___flmul+1
  8021     051E  01B3               	clrf	??___flmul+2
  8022     051F  01B4               	clrf	??___flmul+3
  8023     0520  0834               	movf	??___flmul+3,w
  8024     0521  00C0               	movwf	___flmul@prod+3
  8025     0522  0833               	movf	??___flmul+2,w
  8026     0523  00BF               	movwf	___flmul@prod+2
  8027     0524  0832               	movf	??___flmul+1,w
  8028     0525  00BE               	movwf	___flmul@prod+1
  8029     0526  0831               	movf	??___flmul,w
  8030     0527  00BD               	movwf	___flmul@prod
  8031     0528  082A               	movf	___flmul@b+1,w
  8032     0529  00A0               	movwf	__Umul8_16@multiplicand
  8033     052A  082E               	movf	___flmul@a+1,w
  8034     052B  319D  2533  3184   	fcall	__Umul8_16
  8035     052E  0020               	movlb	0	; select bank0
  8036     052F  0821               	movf	?__Umul8_16+1,w
  8037     0530  00C2               	movwf	___flmul@temp+1
  8038     0531  0820               	movf	?__Umul8_16,w
  8039     0532  00C1               	movwf	___flmul@temp
  8040     0533  0841               	movf	___flmul@temp,w
  8041     0534  00B1               	movwf	??___flmul
  8042     0535  01B2               	clrf	??___flmul+1
  8043     0536  01B3               	clrf	??___flmul+2
  8044     0537  01B4               	clrf	??___flmul+3
  8045     0538  0831               	movf	??___flmul,w
  8046     0539  07B7               	addwf	___flmul@grs,f
  8047     053A  0832               	movf	??___flmul+1,w
  8048     053B  3DB8               	addwfc	___flmul@grs+1,f
  8049     053C  0833               	movf	??___flmul+2,w
  8050     053D  3DB9               	addwfc	___flmul@grs+2,f
  8051     053E  0834               	movf	??___flmul+3,w
  8052     053F  3DBA               	addwfc	___flmul@grs+3,f
  8053     0540  0842               	movf	___flmul@temp+1,w
  8054     0541  00B1               	movwf	??___flmul
  8055     0542  01B2               	clrf	??___flmul+1
  8056     0543  01B3               	clrf	??___flmul+2
  8057     0544  01B4               	clrf	??___flmul+3
  8058     0545  0831               	movf	??___flmul,w
  8059     0546  07BD               	addwf	___flmul@prod,f
  8060     0547  0832               	movf	??___flmul+1,w
  8061     0548  3DBE               	addwfc	___flmul@prod+1,f
  8062     0549  0833               	movf	??___flmul+2,w
  8063     054A  3DBF               	addwfc	___flmul@prod+2,f
  8064     054B  0834               	movf	??___flmul+3,w
  8065     054C  3DC0               	addwfc	___flmul@prod+3,f
  8066     054D  082B               	movf	___flmul@b+2,w
  8067     054E  00A0               	movwf	__Umul8_16@multiplicand
  8068     054F  082D               	movf	___flmul@a,w
  8069     0550  319D  2533  3184   	fcall	__Umul8_16
  8070     0553  0020               	movlb	0	; select bank0
  8071     0554  0821               	movf	?__Umul8_16+1,w
  8072     0555  00C2               	movwf	___flmul@temp+1
  8073     0556  0820               	movf	?__Umul8_16,w
  8074     0557  00C1               	movwf	___flmul@temp
  8075     0558  0841               	movf	___flmul@temp,w
  8076     0559  00B1               	movwf	??___flmul
  8077     055A  01B2               	clrf	??___flmul+1
  8078     055B  01B3               	clrf	??___flmul+2
  8079     055C  01B4               	clrf	??___flmul+3
  8080     055D  0831               	movf	??___flmul,w
  8081     055E  07B7               	addwf	___flmul@grs,f
  8082     055F  0832               	movf	??___flmul+1,w
  8083     0560  3DB8               	addwfc	___flmul@grs+1,f
  8084     0561  0833               	movf	??___flmul+2,w
  8085     0562  3DB9               	addwfc	___flmul@grs+2,f
  8086     0563  0834               	movf	??___flmul+3,w
  8087     0564  3DBA               	addwfc	___flmul@grs+3,f
  8088     0565  0842               	movf	___flmul@temp+1,w
  8089     0566  00B1               	movwf	??___flmul
  8090     0567  01B2               	clrf	??___flmul+1
  8091     0568  01B3               	clrf	??___flmul+2
  8092     0569  01B4               	clrf	??___flmul+3
  8093     056A  0831               	movf	??___flmul,w
  8094     056B  07BD               	addwf	___flmul@prod,f
  8095     056C  0832               	movf	??___flmul+1,w
  8096     056D  3DBE               	addwfc	___flmul@prod+1,f
  8097     056E  0833               	movf	??___flmul+2,w
  8098     056F  3DBF               	addwfc	___flmul@prod+2,f
  8099     0570  0834               	movf	??___flmul+3,w
  8100     0571  3DC0               	addwfc	___flmul@prod+3,f
  8101     0572  3008               	movlw	8
  8102     0573                     u4605:
  8103     0573  35B7               	lslf	___flmul@grs,f
  8104     0574  0DB8               	rlf	___flmul@grs+1,f
  8105     0575  0DB9               	rlf	___flmul@grs+2,f
  8106     0576  0DBA               	rlf	___flmul@grs+3,f
  8107     0577  0B89               	decfsz	9,f
  8108     0578  2D73               	goto	u4605
  8109     0579  082A               	movf	___flmul@b+1,w
  8110     057A  00A0               	movwf	__Umul8_16@multiplicand
  8111     057B  082D               	movf	___flmul@a,w
  8112     057C  319D  2533  3184   	fcall	__Umul8_16
  8113     057F  0020               	movlb	0	; select bank0
  8114     0580  0821               	movf	?__Umul8_16+1,w
  8115     0581  00C2               	movwf	___flmul@temp+1
  8116     0582  0820               	movf	?__Umul8_16,w
  8117     0583  00C1               	movwf	___flmul@temp
  8118     0584  0841               	movf	___flmul@temp,w
  8119     0585  07B7               	addwf	___flmul@grs,f
  8120     0586  0842               	movf	___flmul@temp+1,w
  8121     0587  3DB8               	addwfc	___flmul@grs+1,f
  8122     0588  3000               	movlw	0
  8123     0589  3DB9               	addwfc	___flmul@grs+2,f
  8124     058A  3DBA               	addwfc	___flmul@grs+3,f
  8125     058B  0829               	movf	___flmul@b,w
  8126     058C  00A0               	movwf	__Umul8_16@multiplicand
  8127     058D  082E               	movf	___flmul@a+1,w
  8128     058E  319D  2533  3184   	fcall	__Umul8_16
  8129     0591  0020               	movlb	0	; select bank0
  8130     0592  0821               	movf	?__Umul8_16+1,w
  8131     0593  00C2               	movwf	___flmul@temp+1
  8132     0594  0820               	movf	?__Umul8_16,w
  8133     0595  00C1               	movwf	___flmul@temp
  8134     0596  0841               	movf	___flmul@temp,w
  8135     0597  07B7               	addwf	___flmul@grs,f
  8136     0598  0842               	movf	___flmul@temp+1,w
  8137     0599  3DB8               	addwfc	___flmul@grs+1,f
  8138     059A  3000               	movlw	0
  8139     059B  3DB9               	addwfc	___flmul@grs+2,f
  8140     059C  3DBA               	addwfc	___flmul@grs+3,f
  8141     059D  3008               	movlw	8
  8142     059E                     u4615:
  8143     059E  35B7               	lslf	___flmul@grs,f
  8144     059F  0DB8               	rlf	___flmul@grs+1,f
  8145     05A0  0DB9               	rlf	___flmul@grs+2,f
  8146     05A1  0DBA               	rlf	___flmul@grs+3,f
  8147     05A2  0B89               	decfsz	9,f
  8148     05A3  2D9E               	goto	u4615
  8149     05A4  0829               	movf	___flmul@b,w
  8150     05A5  00A0               	movwf	__Umul8_16@multiplicand
  8151     05A6  082D               	movf	___flmul@a,w
  8152     05A7  319D  2533  3184   	fcall	__Umul8_16
  8153     05AA  0020               	movlb	0	; select bank0
  8154     05AB  0821               	movf	?__Umul8_16+1,w
  8155     05AC  00C2               	movwf	___flmul@temp+1
  8156     05AD  0820               	movf	?__Umul8_16,w
  8157     05AE  00C1               	movwf	___flmul@temp
  8158     05AF  0841               	movf	___flmul@temp,w
  8159     05B0  07B7               	addwf	___flmul@grs,f
  8160     05B1  0842               	movf	___flmul@temp+1,w
  8161     05B2  3DB8               	addwfc	___flmul@grs+1,f
  8162     05B3  3000               	movlw	0
  8163     05B4  3DB9               	addwfc	___flmul@grs+2,f
  8164     05B5  3DBA               	addwfc	___flmul@grs+3,f
  8165     05B6  082A               	movf	___flmul@b+1,w
  8166     05B7  00A0               	movwf	__Umul8_16@multiplicand
  8167     05B8  082F               	movf	___flmul@a+2,w
  8168     05B9  319D  2533  3184   	fcall	__Umul8_16
  8169     05BC  0020               	movlb	0	; select bank0
  8170     05BD  0821               	movf	?__Umul8_16+1,w
  8171     05BE  00C2               	movwf	___flmul@temp+1
  8172     05BF  0820               	movf	?__Umul8_16,w
  8173     05C0  00C1               	movwf	___flmul@temp
  8174     05C1  0841               	movf	___flmul@temp,w
  8175     05C2  07BD               	addwf	___flmul@prod,f
  8176     05C3  0842               	movf	___flmul@temp+1,w
  8177     05C4  3DBE               	addwfc	___flmul@prod+1,f
  8178     05C5  3000               	movlw	0
  8179     05C6  3DBF               	addwfc	___flmul@prod+2,f
  8180     05C7  3DC0               	addwfc	___flmul@prod+3,f
  8181     05C8  082B               	movf	___flmul@b+2,w
  8182     05C9  00A0               	movwf	__Umul8_16@multiplicand
  8183     05CA  082E               	movf	___flmul@a+1,w
  8184     05CB  319D  2533  3184   	fcall	__Umul8_16
  8185     05CE  0020               	movlb	0	; select bank0
  8186     05CF  0821               	movf	?__Umul8_16+1,w
  8187     05D0  00C2               	movwf	___flmul@temp+1
  8188     05D1  0820               	movf	?__Umul8_16,w
  8189     05D2  00C1               	movwf	___flmul@temp
  8190     05D3  0841               	movf	___flmul@temp,w
  8191     05D4  07BD               	addwf	___flmul@prod,f
  8192     05D5  0842               	movf	___flmul@temp+1,w
  8193     05D6  3DBE               	addwfc	___flmul@prod+1,f
  8194     05D7  3000               	movlw	0
  8195     05D8  3DBF               	addwfc	___flmul@prod+2,f
  8196     05D9  3DC0               	addwfc	___flmul@prod+3,f
  8197     05DA  082B               	movf	___flmul@b+2,w
  8198     05DB  00A0               	movwf	__Umul8_16@multiplicand
  8199     05DC  082F               	movf	___flmul@a+2,w
  8200     05DD  319D  2533  3184   	fcall	__Umul8_16
  8201     05E0  0020               	movlb	0	; select bank0
  8202     05E1  0821               	movf	?__Umul8_16+1,w
  8203     05E2  00C2               	movwf	___flmul@temp+1
  8204     05E3  0820               	movf	?__Umul8_16,w
  8205     05E4  00C1               	movwf	___flmul@temp
  8206     05E5  0841               	movf	___flmul@temp,w
  8207     05E6  00B1               	movwf	??___flmul
  8208     05E7  0842               	movf	___flmul@temp+1,w
  8209     05E8  00B2               	movwf	??___flmul+1
  8210     05E9  01B3               	clrf	??___flmul+2
  8211     05EA  01B4               	clrf	??___flmul+3
  8212     05EB  3008               	movlw	8
  8213     05EC                     u4625:
  8214     05EC  35B1               	lslf	??___flmul,f
  8215     05ED  0DB2               	rlf	??___flmul+1,f
  8216     05EE  0DB3               	rlf	??___flmul+2,f
  8217     05EF  0DB4               	rlf	??___flmul+3,f
  8218     05F0  0B89               	decfsz	9,f
  8219     05F1  2DEC               	goto	u4625
  8220     05F2  0831               	movf	??___flmul,w
  8221     05F3  07BD               	addwf	___flmul@prod,f
  8222     05F4  0832               	movf	??___flmul+1,w
  8223     05F5  3DBE               	addwfc	___flmul@prod+1,f
  8224     05F6  0833               	movf	??___flmul+2,w
  8225     05F7  3DBF               	addwfc	___flmul@prod+2,f
  8226     05F8  0834               	movf	??___flmul+3,w
  8227     05F9  3DC0               	addwfc	___flmul@prod+3,f
  8228     05FA  0837               	movf	___flmul@grs,w
  8229     05FB  00B1               	movwf	??___flmul
  8230     05FC  0838               	movf	___flmul@grs+1,w
  8231     05FD  00B2               	movwf	??___flmul+1
  8232     05FE  0839               	movf	___flmul@grs+2,w
  8233     05FF  00B3               	movwf	??___flmul+2
  8234     0600  083A               	movf	___flmul@grs+3,w
  8235     0601  00B4               	movwf	??___flmul+3
  8236     0602  3018               	movlw	24
  8237     0603                     u4635:
  8238     0603  36B4               	lsrf	??___flmul+3,f
  8239     0604  0CB3               	rrf	??___flmul+2,f
  8240     0605  0CB2               	rrf	??___flmul+1,f
  8241     0606  0CB1               	rrf	??___flmul,f
  8242     0607  0B89               	decfsz	9,f
  8243     0608  2E03               	goto	u4635
  8244     0609  0831               	movf	??___flmul,w
  8245     060A  07BD               	addwf	___flmul@prod,f
  8246     060B  0832               	movf	??___flmul+1,w
  8247     060C  3DBE               	addwfc	___flmul@prod+1,f
  8248     060D  0833               	movf	??___flmul+2,w
  8249     060E  3DBF               	addwfc	___flmul@prod+2,f
  8250     060F  0834               	movf	??___flmul+3,w
  8251     0610  3DC0               	addwfc	___flmul@prod+3,f
  8252     0611  3008               	movlw	8
  8253     0612                     u4645:
  8254     0612  35B7               	lslf	___flmul@grs,f
  8255     0613  0DB8               	rlf	___flmul@grs+1,f
  8256     0614  0DB9               	rlf	___flmul@grs+2,f
  8257     0615  0DBA               	rlf	___flmul@grs+3,f
  8258     0616  0B89               	decfsz	9,f
  8259     0617  2E12               	goto	u4645
  8260     0618  083C               	movf	___flmul@bexp,w
  8261     0619  073B               	addwf	___flmul@aexp,w
  8262     061A  00B1               	movwf	??___flmul
  8263     061B  01B2               	clrf	??___flmul+1
  8264     061C  0DB2               	rlf	??___flmul+1,f
  8265     061D  0831               	movf	??___flmul,w
  8266     061E  3E82               	addlw	130
  8267     061F  00C1               	movwf	___flmul@temp
  8268     0620  30FF               	movlw	255
  8269     0621  3D32               	addwfc	??___flmul+1,w
  8270     0622  00C2               	movwf	___flmul@temp+1
  8271     0623                     l4087:
  8272     0623  1BBF               	btfsc	___flmul@prod+2,7
  8273     0624  2E3A               	goto	l4089
  8274     0625  3001               	movlw	1
  8275     0626                     u4655:
  8276     0626  35BD               	lslf	___flmul@prod,f
  8277     0627  0DBE               	rlf	___flmul@prod+1,f
  8278     0628  0DBF               	rlf	___flmul@prod+2,f
  8279     0629  0DC0               	rlf	___flmul@prod+3,f
  8280     062A  0B89               	decfsz	9,f
  8281     062B  2E26               	goto	u4655
  8282     062C  1BBA               	btfsc	___flmul@grs+3,7
  8283     062D  143D               	bsf	___flmul@prod,0
  8284     062E  3001               	movlw	1
  8285     062F                     u4675:
  8286     062F  35B7               	lslf	___flmul@grs,f
  8287     0630  0DB8               	rlf	___flmul@grs+1,f
  8288     0631  0DB9               	rlf	___flmul@grs+2,f
  8289     0632  0DBA               	rlf	___flmul@grs+3,f
  8290     0633  0B89               	decfsz	9,f
  8291     0634  2E2F               	goto	u4675
  8292     0635  30FF               	movlw	255
  8293     0636  07C1               	addwf	___flmul@temp,f
  8294     0637  30FF               	movlw	255
  8295     0638  3DC2               	addwfc	___flmul@temp+1,f
  8296     0639  2E23               	goto	l4087
  8297     063A                     l4089:
  8298     063A  01BB               	clrf	___flmul@aexp
  8299     063B  1FBA               	btfss	___flmul@grs+3,7
  8300     063C  2E53               	goto	l4099
  8301     063D  30FF               	movlw	255
  8302     063E  0537               	andwf	___flmul@grs,w
  8303     063F  00B1               	movwf	??___flmul
  8304     0640  30FF               	movlw	255
  8305     0641  0538               	andwf	___flmul@grs+1,w
  8306     0642  00B2               	movwf	??___flmul+1
  8307     0643  30FF               	movlw	255
  8308     0644  0539               	andwf	___flmul@grs+2,w
  8309     0645  00B3               	movwf	??___flmul+2
  8310     0646  307F               	movlw	127
  8311     0647  053A               	andwf	___flmul@grs+3,w
  8312     0648  00B4               	movwf	??___flmul+3
  8313     0649  0834               	movf	??___flmul+3,w
  8314     064A  0433               	iorwf	??___flmul+2,w
  8315     064B  0432               	iorwf	??___flmul+1,w
  8316     064C  0431               	iorwf	??___flmul,w
  8317     064D  1903               	skipnz
  8318     064E  183D               	btfsc	___flmul@prod,0
  8319     064F  2E51               	goto	l4095
  8320     0650  2E53               	goto	l4099
  8321     0651                     l4095:
  8322     0651  01BB               	clrf	___flmul@aexp
  8323     0652  0ABB               	incf	___flmul@aexp,f
  8324     0653                     l4099:
  8325     0653  083B               	movf	___flmul@aexp,w
  8326     0654  1903               	btfsc	3,2
  8327     0655  2E7C               	goto	l4109
  8328     0656  3001               	movlw	1
  8329     0657  07BD               	addwf	___flmul@prod,f
  8330     0658  3000               	movlw	0
  8331     0659  3DBE               	addwfc	___flmul@prod+1,f
  8332     065A  3000               	movlw	0
  8333     065B  3DBF               	addwfc	___flmul@prod+2,f
  8334     065C  3000               	movlw	0
  8335     065D  3DC0               	addwfc	___flmul@prod+3,f
  8336     065E  1C40               	btfss	___flmul@prod+3,0
  8337     065F  2E7C               	goto	l4109
  8338     0660  083D               	movf	___flmul@prod,w
  8339     0661  00B1               	movwf	??___flmul
  8340     0662  083E               	movf	___flmul@prod+1,w
  8341     0663  00B2               	movwf	??___flmul+1
  8342     0664  083F               	movf	___flmul@prod+2,w
  8343     0665  00B3               	movwf	??___flmul+2
  8344     0666  0840               	movf	___flmul@prod+3,w
  8345     0667  00B4               	movwf	??___flmul+3
  8346     0668  3001               	movlw	1
  8347     0669  00B5               	movwf	??___flmul+4
  8348     066A                     u4745:
  8349     066A  37B4               	asrf	??___flmul+3,f
  8350     066B  0CB3               	rrf	??___flmul+2,f
  8351     066C  0CB2               	rrf	??___flmul+1,f
  8352     066D  0CB1               	rrf	??___flmul,f
  8353     066E  0BB5               	decfsz	??___flmul+4,f
  8354     066F  2E6A               	goto	u4745
  8355     0670  0834               	movf	??___flmul+3,w
  8356     0671  00C0               	movwf	___flmul@prod+3
  8357     0672  0833               	movf	??___flmul+2,w
  8358     0673  00BF               	movwf	___flmul@prod+2
  8359     0674  0832               	movf	??___flmul+1,w
  8360     0675  00BE               	movwf	___flmul@prod+1
  8361     0676  0831               	movf	??___flmul,w
  8362     0677  00BD               	movwf	___flmul@prod
  8363     0678  3001               	movlw	1
  8364     0679  07C1               	addwf	___flmul@temp,f
  8365     067A  3000               	movlw	0
  8366     067B  3DC2               	addwfc	___flmul@temp+1,f
  8367     067C                     l4109:
  8368     067C  0842               	movf	___flmul@temp+1,w
  8369     067D  3A80               	xorlw	128
  8370     067E  00B1               	movwf	??___flmul
  8371     067F  3080               	movlw	128
  8372     0680  0231               	subwf	??___flmul,w
  8373     0681  1D03               	skipz
  8374     0682  2E85               	goto	u4755
  8375     0683  30FF               	movlw	255
  8376     0684  0241               	subwf	___flmul@temp,w
  8377     0685                     u4755:
  8378     0685  1C03               	skipc
  8379     0686  2E91               	goto	l4113
  8380     0687  307F               	movlw	127
  8381     0688  0020               	movlb	0	; select bank0
  8382     0689  00C0               	movwf	___flmul@prod+3
  8383     068A  3080               	movlw	128
  8384     068B  00BF               	movwf	___flmul@prod+2
  8385     068C  3000               	movlw	0
  8386     068D  00BE               	movwf	___flmul@prod+1
  8387     068E  3000               	movlw	0
  8388     068F  00BD               	movwf	___flmul@prod
  8389     0690  2EB7               	goto	l975
  8390     0691                     l4113:
  8391     0691  0020               	movlb	0	; select bank0
  8392     0692  0842               	movf	___flmul@temp+1,w
  8393     0693  3A80               	xorlw	128
  8394     0694  00B1               	movwf	??___flmul
  8395     0695  3080               	movlw	128
  8396     0696  0231               	subwf	??___flmul,w
  8397     0697  1D03               	skipz
  8398     0698  2E9B               	goto	u4765
  8399     0699  3001               	movlw	1
  8400     069A  0241               	subwf	___flmul@temp,w
  8401     069B                     u4765:
  8402     069B  1803               	skipnc
  8403     069C  2EA8               	goto	l4119
  8404     069D  3000               	movlw	0
  8405     069E  0020               	movlb	0	; select bank0
  8406     069F  00C0               	movwf	___flmul@prod+3
  8407     06A0  3000               	movlw	0
  8408     06A1  00BF               	movwf	___flmul@prod+2
  8409     06A2  3000               	movlw	0
  8410     06A3  00BE               	movwf	___flmul@prod+1
  8411     06A4  3000               	movlw	0
  8412     06A5  00BD               	movwf	___flmul@prod
  8413     06A6  01B6               	clrf	___flmul@sign
  8414     06A7  2EB7               	goto	l975
  8415     06A8                     l4119:
  8416     06A8  0020               	movlb	0	; select bank0
  8417     06A9  0841               	movf	___flmul@temp,w
  8418     06AA  00BC               	movwf	___flmul@bexp
  8419     06AB  30FF               	movlw	255
  8420     06AC  05BD               	andwf	___flmul@prod,f
  8421     06AD  30FF               	movlw	255
  8422     06AE  05BE               	andwf	___flmul@prod+1,f
  8423     06AF  307F               	movlw	127
  8424     06B0  05BF               	andwf	___flmul@prod+2,f
  8425     06B1  3000               	movlw	0
  8426     06B2  05C0               	andwf	___flmul@prod+3,f
  8427     06B3  183C               	btfsc	___flmul@bexp,0
  8428     06B4  17BF               	bsf	___flmul@prod+2,7
  8429     06B5  363C               	lsrf	___flmul@bexp,w
  8430     06B6  00C0               	movwf	___flmul@prod+3
  8431     06B7                     l975:
  8432     06B7  0836               	movf	___flmul@sign,w
  8433     06B8  00B1               	movwf	??___flmul
  8434     06B9  0831               	movf	??___flmul,w
  8435     06BA  04C0               	iorwf	___flmul@prod+3,f
  8436     06BB  0840               	movf	___flmul@prod+3,w
  8437     06BC  00AC               	movwf	?___flmul+3
  8438     06BD  083F               	movf	___flmul@prod+2,w
  8439     06BE  00AB               	movwf	?___flmul+2
  8440     06BF  083E               	movf	___flmul@prod+1,w
  8441     06C0  00AA               	movwf	?___flmul+1
  8442     06C1  083D               	movf	___flmul@prod,w
  8443     06C2  00A9               	movwf	?___flmul
  8444     06C3  0008               	return
  8445     06C4                     __end_of___flmul:
  8446                           
  8447                           	psect	text17
  8448     1D33                     __ptext17:	
  8449 ;; *************** function __Umul8_16 *****************
  8450 ;; Defined at:
  8451 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul8_16.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;  multiplier      1    wreg     unsigned char 
  8454 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;  multiplier      1    8[BANK0 ] unsigned char 
  8457 ;;  word_mpld       2    6[BANK0 ] unsigned short 
  8458 ;;  product         2    4[BANK0 ] unsigned short 
  8459 ;; Return value:  Size  Location     Type
  8460 ;;                  2    0[BANK0 ] unsigned int 
  8461 ;; Registers used:
  8462 ;;		wreg, status,2, status,0
  8463 ;; Tracked objects:
  8464 ;;		On entry : 0/0
  8465 ;;		On exit  : 0/0
  8466 ;;		Unchanged: 0/0
  8467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8468 ;;      Params:         0       2       0       0       0       0       0       0
  8469 ;;      Locals:         0       5       0       0       0       0       0       0
  8470 ;;      Temps:          0       2       0       0       0       0       0       0
  8471 ;;      Totals:         0       9       0       0       0       0       0       0
  8472 ;;Total ram usage:        9 bytes
  8473 ;; Hardware stack levels used: 1
  8474 ;; Hardware stack levels required when called: 4
  8475 ;; This function calls:
  8476 ;;		Nothing
  8477 ;; This function is called by:
  8478 ;;		___flmul
  8479 ;; This function uses a non-reentrant model
  8480 ;;
  8481                           
  8482     1D33                     __Umul8_16:	
  8483                           ;psect for function __Umul8_16
  8484                           
  8485                           
  8486                           ;incstack = 0
  8487                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  8488                           ;__Umul8_16@multiplier stored from wreg
  8489     1D33  0020               	movlb	0	; select bank0
  8490     1D34  00A8               	movwf	__Umul8_16@multiplier
  8491     1D35  01A4               	clrf	__Umul8_16@product
  8492     1D36  01A5               	clrf	__Umul8_16@product+1
  8493     1D37  0820               	movf	__Umul8_16@multiplicand,w
  8494     1D38  00A2               	movwf	??__Umul8_16
  8495     1D39  01A3               	clrf	??__Umul8_16+1
  8496     1D3A  0822               	movf	??__Umul8_16,w
  8497     1D3B  00A6               	movwf	__Umul8_16@word_mpld
  8498     1D3C  0823               	movf	??__Umul8_16+1,w
  8499     1D3D  00A7               	movwf	__Umul8_16@word_mpld+1
  8500     1D3E                     l3655:
  8501     1D3E  1C28               	btfss	__Umul8_16@multiplier,0
  8502     1D3F  2D44               	goto	l982
  8503     1D40  0826               	movf	__Umul8_16@word_mpld,w
  8504     1D41  07A4               	addwf	__Umul8_16@product,f
  8505     1D42  0827               	movf	__Umul8_16@word_mpld+1,w
  8506     1D43  3DA5               	addwfc	__Umul8_16@product+1,f
  8507     1D44                     l982:
  8508     1D44  3001               	movlw	1
  8509     1D45                     u3785:
  8510     1D45  35A6               	lslf	__Umul8_16@word_mpld,f
  8511     1D46  0DA7               	rlf	__Umul8_16@word_mpld+1,f
  8512     1D47  0B89               	decfsz	9,f
  8513     1D48  2D45               	goto	u3785
  8514     1D49  1003               	clrc
  8515     1D4A  0CA8               	rrf	__Umul8_16@multiplier,f
  8516     1D4B  0828               	movf	__Umul8_16@multiplier,w
  8517     1D4C  1D03               	btfss	3,2
  8518     1D4D  2D3E               	goto	l3655
  8519     1D4E  0825               	movf	__Umul8_16@product+1,w
  8520     1D4F  00A1               	movwf	?__Umul8_16+1
  8521     1D50  0824               	movf	__Umul8_16@product,w
  8522     1D51  00A0               	movwf	?__Umul8_16
  8523     1D52  0008               	return
  8524     1D53                     __end_of__Umul8_16:
  8525                           
  8526                           	psect	text18
  8527     1210                     __ptext18:	
  8528 ;; *************** function ___flge *****************
  8529 ;; Defined at:
  8530 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;  ff1             4   35[BANK0 ] unsigned int 
  8533 ;;  ff2             4   39[BANK0 ] unsigned int 
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;		None
  8536 ;; Return value:  Size  Location     Type
  8537 ;;		None               void
  8538 ;; Registers used:
  8539 ;;		wreg, status,2, status,0
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8545 ;;      Params:         0       8       0       0       0       0       0       0
  8546 ;;      Locals:         0       0       0       0       0       0       0       0
  8547 ;;      Temps:          0       4       0       0       0       0       0       0
  8548 ;;      Totals:         0      12       0       0       0       0       0       0
  8549 ;;Total ram usage:       12 bytes
  8550 ;; Hardware stack levels used: 1
  8551 ;; Hardware stack levels required when called: 4
  8552 ;; This function calls:
  8553 ;;		Nothing
  8554 ;; This function is called by:
  8555 ;;		_efgtoa
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559     1210                     ___flge:	
  8560                           ;psect for function ___flge
  8561                           
  8562                           
  8563                           ;incstack = 0
  8564                           ; Regs used in ___flge: [wreg+status,2+status,0]
  8565     1210  3000               	movlw	0
  8566     1211  0020               	movlb	0	; select bank0
  8567     1212  0543               	andwf	___flge@ff1,w
  8568     1213  00CB               	movwf	??___flge
  8569     1214  3000               	movlw	0
  8570     1215  0544               	andwf	___flge@ff1+1,w
  8571     1216  00CC               	movwf	??___flge+1
  8572     1217  3080               	movlw	128
  8573     1218  0545               	andwf	___flge@ff1+2,w
  8574     1219  00CD               	movwf	??___flge+2
  8575     121A  307F               	movlw	127
  8576     121B  0546               	andwf	___flge@ff1+3,w
  8577     121C  00CE               	movwf	??___flge+3
  8578     121D  084E               	movf	??___flge+3,w
  8579     121E  044D               	iorwf	??___flge+2,w
  8580     121F  044C               	iorwf	??___flge+1,w
  8581     1220  044B               	iorwf	??___flge,w
  8582     1221  1D03               	skipz
  8583     1222  2A2B               	goto	l744
  8584     1223  3000               	movlw	0
  8585     1224  00C6               	movwf	___flge@ff1+3
  8586     1225  3000               	movlw	0
  8587     1226  00C5               	movwf	___flge@ff1+2
  8588     1227  3000               	movlw	0
  8589     1228  00C4               	movwf	___flge@ff1+1
  8590     1229  3000               	movlw	0
  8591     122A  00C3               	movwf	___flge@ff1
  8592     122B                     l744:
  8593     122B  3000               	movlw	0
  8594     122C  0547               	andwf	___flge@ff2,w
  8595     122D  00CB               	movwf	??___flge
  8596     122E  3000               	movlw	0
  8597     122F  0548               	andwf	___flge@ff2+1,w
  8598     1230  00CC               	movwf	??___flge+1
  8599     1231  3080               	movlw	128
  8600     1232  0549               	andwf	___flge@ff2+2,w
  8601     1233  00CD               	movwf	??___flge+2
  8602     1234  307F               	movlw	127
  8603     1235  054A               	andwf	___flge@ff2+3,w
  8604     1236  00CE               	movwf	??___flge+3
  8605     1237  084E               	movf	??___flge+3,w
  8606     1238  044D               	iorwf	??___flge+2,w
  8607     1239  044C               	iorwf	??___flge+1,w
  8608     123A  044B               	iorwf	??___flge,w
  8609     123B  1D03               	skipz
  8610     123C  2A45               	goto	l3787
  8611     123D  3000               	movlw	0
  8612     123E  00CA               	movwf	___flge@ff2+3
  8613     123F  3000               	movlw	0
  8614     1240  00C9               	movwf	___flge@ff2+2
  8615     1241  3000               	movlw	0
  8616     1242  00C8               	movwf	___flge@ff2+1
  8617     1243  3000               	movlw	0
  8618     1244  00C7               	movwf	___flge@ff2
  8619     1245                     l3787:
  8620     1245  1FC6               	btfss	___flge@ff1+3,7
  8621     1246  2A5F               	goto	l3791
  8622     1247  3000               	movlw	0
  8623     1248  00CB               	movwf	??___flge
  8624     1249  3000               	movlw	0
  8625     124A  00CC               	movwf	??___flge+1
  8626     124B  3000               	movlw	0
  8627     124C  00CD               	movwf	??___flge+2
  8628     124D  3080               	movlw	128
  8629     124E  00CE               	movwf	??___flge+3
  8630     124F  0843               	movf	___flge@ff1,w
  8631     1250  02CB               	subwf	??___flge,f
  8632     1251  0844               	movf	___flge@ff1+1,w
  8633     1252  3BCC               	subwfb	??___flge+1,f
  8634     1253  0845               	movf	___flge@ff1+2,w
  8635     1254  3BCD               	subwfb	??___flge+2,f
  8636     1255  0846               	movf	___flge@ff1+3,w
  8637     1256  3BCE               	subwfb	??___flge+3,f
  8638     1257  084E               	movf	??___flge+3,w
  8639     1258  00C6               	movwf	___flge@ff1+3
  8640     1259  084D               	movf	??___flge+2,w
  8641     125A  00C5               	movwf	___flge@ff1+2
  8642     125B  084C               	movf	??___flge+1,w
  8643     125C  00C4               	movwf	___flge@ff1+1
  8644     125D  084B               	movf	??___flge,w
  8645     125E  00C3               	movwf	___flge@ff1
  8646     125F                     l3791:
  8647     125F  1FCA               	btfss	___flge@ff2+3,7
  8648     1260  2A79               	goto	l747
  8649     1261  3000               	movlw	0
  8650     1262  00CB               	movwf	??___flge
  8651     1263  3000               	movlw	0
  8652     1264  00CC               	movwf	??___flge+1
  8653     1265  3000               	movlw	0
  8654     1266  00CD               	movwf	??___flge+2
  8655     1267  3080               	movlw	128
  8656     1268  00CE               	movwf	??___flge+3
  8657     1269  0847               	movf	___flge@ff2,w
  8658     126A  02CB               	subwf	??___flge,f
  8659     126B  0848               	movf	___flge@ff2+1,w
  8660     126C  3BCC               	subwfb	??___flge+1,f
  8661     126D  0849               	movf	___flge@ff2+2,w
  8662     126E  3BCD               	subwfb	??___flge+2,f
  8663     126F  084A               	movf	___flge@ff2+3,w
  8664     1270  3BCE               	subwfb	??___flge+3,f
  8665     1271  084E               	movf	??___flge+3,w
  8666     1272  00CA               	movwf	___flge@ff2+3
  8667     1273  084D               	movf	??___flge+2,w
  8668     1274  00C9               	movwf	___flge@ff2+2
  8669     1275  084C               	movf	??___flge+1,w
  8670     1276  00C8               	movwf	___flge@ff2+1
  8671     1277  084B               	movf	??___flge,w
  8672     1278  00C7               	movwf	___flge@ff2
  8673     1279                     l747:
  8674     1279  3080               	movlw	128
  8675     127A  06C6               	xorwf	___flge@ff1+3,f
  8676     127B  3080               	movlw	128
  8677     127C  06CA               	xorwf	___flge@ff2+3,f
  8678     127D  084A               	movf	___flge@ff2+3,w
  8679     127E  0246               	subwf	___flge@ff1+3,w
  8680     127F  1D03               	skipz
  8681     1280  0008               	return
  8682     1281  0849               	movf	___flge@ff2+2,w
  8683     1282  0245               	subwf	___flge@ff1+2,w
  8684     1283  1D03               	skipz
  8685     1284  0008               	return
  8686     1285  0848               	movf	___flge@ff2+1,w
  8687     1286  0244               	subwf	___flge@ff1+1,w
  8688     1287  1D03               	skipz
  8689     1288  0008               	return
  8690     1289  0847               	movf	___flge@ff2,w
  8691     128A  0243               	subwf	___flge@ff1,w
  8692     128B  0008               	return
  8693     128C                     __end_of___flge:
  8694                           
  8695                           	psect	text19
  8696     1EC6                     __ptext19:	
  8697 ;; *************** function ___fleq *****************
  8698 ;; Defined at:
  8699 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;  ff1             4    0[BANK0 ] unsigned int 
  8702 ;;  ff2             4    4[BANK0 ] unsigned int 
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;		None
  8705 ;; Return value:  Size  Location     Type
  8706 ;;		None               void
  8707 ;; Registers used:
  8708 ;;		wreg, status,2, status,0
  8709 ;; Tracked objects:
  8710 ;;		On entry : 0/0
  8711 ;;		On exit  : 0/0
  8712 ;;		Unchanged: 0/0
  8713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8714 ;;      Params:         0       8       0       0       0       0       0       0
  8715 ;;      Locals:         0       0       0       0       0       0       0       0
  8716 ;;      Temps:          0       4       0       0       0       0       0       0
  8717 ;;      Totals:         0      12       0       0       0       0       0       0
  8718 ;;Total ram usage:       12 bytes
  8719 ;; Hardware stack levels used: 1
  8720 ;; Hardware stack levels required when called: 4
  8721 ;; This function calls:
  8722 ;;		Nothing
  8723 ;; This function is called by:
  8724 ;;		_efgtoa
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728     1EC6                     ___fleq:	
  8729                           ;psect for function ___fleq
  8730                           
  8731                           
  8732                           ;incstack = 0
  8733                           ; Regs used in ___fleq: [wreg+status,2+status,0]
  8734     1EC6  3000               	movlw	0
  8735     1EC7  0020               	movlb	0	; select bank0
  8736     1EC8  0520               	andwf	___fleq@ff1,w
  8737     1EC9  00A8               	movwf	??___fleq
  8738     1ECA  3000               	movlw	0
  8739     1ECB  0521               	andwf	___fleq@ff1+1,w
  8740     1ECC  00A9               	movwf	??___fleq+1
  8741     1ECD  3080               	movlw	128
  8742     1ECE  0522               	andwf	___fleq@ff1+2,w
  8743     1ECF  00AA               	movwf	??___fleq+2
  8744     1ED0  307F               	movlw	127
  8745     1ED1  0523               	andwf	___fleq@ff1+3,w
  8746     1ED2  00AB               	movwf	??___fleq+3
  8747     1ED3  082B               	movf	??___fleq+3,w
  8748     1ED4  042A               	iorwf	??___fleq+2,w
  8749     1ED5  0429               	iorwf	??___fleq+1,w
  8750     1ED6  0428               	iorwf	??___fleq,w
  8751     1ED7  1D03               	skipz
  8752     1ED8  2EE1               	goto	l735
  8753     1ED9  3000               	movlw	0
  8754     1EDA  00A3               	movwf	___fleq@ff1+3
  8755     1EDB  3000               	movlw	0
  8756     1EDC  00A2               	movwf	___fleq@ff1+2
  8757     1EDD  3000               	movlw	0
  8758     1EDE  00A1               	movwf	___fleq@ff1+1
  8759     1EDF  3000               	movlw	0
  8760     1EE0  00A0               	movwf	___fleq@ff1
  8761     1EE1                     l735:
  8762     1EE1  3000               	movlw	0
  8763     1EE2  0524               	andwf	___fleq@ff2,w
  8764     1EE3  00A8               	movwf	??___fleq
  8765     1EE4  3000               	movlw	0
  8766     1EE5  0525               	andwf	___fleq@ff2+1,w
  8767     1EE6  00A9               	movwf	??___fleq+1
  8768     1EE7  3080               	movlw	128
  8769     1EE8  0526               	andwf	___fleq@ff2+2,w
  8770     1EE9  00AA               	movwf	??___fleq+2
  8771     1EEA  307F               	movlw	127
  8772     1EEB  0527               	andwf	___fleq@ff2+3,w
  8773     1EEC  00AB               	movwf	??___fleq+3
  8774     1EED  082B               	movf	??___fleq+3,w
  8775     1EEE  042A               	iorwf	??___fleq+2,w
  8776     1EEF  0429               	iorwf	??___fleq+1,w
  8777     1EF0  0428               	iorwf	??___fleq,w
  8778     1EF1  1D03               	skipz
  8779     1EF2  2EFB               	goto	l736
  8780     1EF3  3000               	movlw	0
  8781     1EF4  00A7               	movwf	___fleq@ff2+3
  8782     1EF5  3000               	movlw	0
  8783     1EF6  00A6               	movwf	___fleq@ff2+2
  8784     1EF7  3000               	movlw	0
  8785     1EF8  00A5               	movwf	___fleq@ff2+1
  8786     1EF9  3000               	movlw	0
  8787     1EFA  00A4               	movwf	___fleq@ff2
  8788     1EFB                     l736:
  8789     1EFB  0827               	movf	___fleq@ff2+3,w
  8790     1EFC  0623               	xorwf	___fleq@ff1+3,w
  8791     1EFD  1D03               	skipz
  8792     1EFE  2F09               	goto	u4065
  8793     1EFF  0826               	movf	___fleq@ff2+2,w
  8794     1F00  0622               	xorwf	___fleq@ff1+2,w
  8795     1F01  1D03               	skipz
  8796     1F02  2F09               	goto	u4065
  8797     1F03  0825               	movf	___fleq@ff2+1,w
  8798     1F04  0621               	xorwf	___fleq@ff1+1,w
  8799     1F05  1D03               	skipz
  8800     1F06  2F09               	goto	u4065
  8801     1F07  0824               	movf	___fleq@ff2,w
  8802     1F08  0620               	xorwf	___fleq@ff1,w
  8803     1F09                     u4065:
  8804     1F09  1903               	skipnz
  8805     1F0A  2F0D               	goto	l3777
  8806     1F0B  1003               	clrc
  8807     1F0C  0008               	return
  8808     1F0D                     l3777:
  8809     1F0D  1403               	setc
  8810     1F0E  0008               	return
  8811     1F0F                     __end_of___fleq:
  8812                           
  8813                           	psect	text20
  8814     1349                     __ptext20:	
  8815 ;; *************** function ___fldiv *****************
  8816 ;; Defined at:
  8817 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  8818 ;; Parameters:    Size  Location     Type
  8819 ;;  a               4   20[BANK0 ] unsigned int 
  8820 ;;  b               4   24[BANK0 ] unsigned int 
  8821 ;; Auto vars:     Size  Location     Type
  8822 ;;  grs             4   40[BANK0 ] unsigned long 
  8823 ;;  rem             4   33[BANK0 ] unsigned long 
  8824 ;;  new_exp         2   38[BANK0 ] short 
  8825 ;;  aexp            1   45[BANK0 ] unsigned char 
  8826 ;;  bexp            1   44[BANK0 ] unsigned char 
  8827 ;;  sign            1   37[BANK0 ] unsigned char 
  8828 ;; Return value:  Size  Location     Type
  8829 ;;                  4   20[BANK0 ] unsigned char 
  8830 ;; Registers used:
  8831 ;;		wreg, status,2, status,0
  8832 ;; Tracked objects:
  8833 ;;		On entry : 0/0
  8834 ;;		On exit  : 0/0
  8835 ;;		Unchanged: 0/0
  8836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8837 ;;      Params:         0       8       0       0       0       0       0       0
  8838 ;;      Locals:         0      13       0       0       0       0       0       0
  8839 ;;      Temps:          0       5       0       0       0       0       0       0
  8840 ;;      Totals:         0      26       0       0       0       0       0       0
  8841 ;;Total ram usage:       26 bytes
  8842 ;; Hardware stack levels used: 1
  8843 ;; Hardware stack levels required when called: 4
  8844 ;; This function calls:
  8845 ;;		Nothing
  8846 ;; This function is called by:
  8847 ;;		_main
  8848 ;;		_efgtoa
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852     1349                     ___fldiv:	
  8853                           ;psect for function ___fldiv
  8854                           
  8855                           
  8856                           ;incstack = 0
  8857                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
  8858     1349  0020               	movlb	0	; select bank0
  8859     134A  083B               	movf	___fldiv@b+3,w
  8860     134B  3980               	andlw	128
  8861     134C  00C5               	movwf	___fldiv@sign
  8862     134D  353B               	lslf	___fldiv@b+3,w
  8863     134E  00CC               	movwf	___fldiv@bexp
  8864     134F  1BBA               	btfsc	___fldiv@b+2,7
  8865     1350  144C               	bsf	___fldiv@bexp,0
  8866     1351  084C               	movf	___fldiv@bexp,w
  8867     1352  1903               	btfsc	3,2
  8868     1353  2B62               	goto	l3869
  8869     1354  0A4C               	incf	___fldiv@bexp,w
  8870     1355  1D03               	btfss	3,2
  8871     1356  2B5F               	goto	l3865
  8872     1357  3000               	movlw	0
  8873     1358  00BB               	movwf	___fldiv@b+3
  8874     1359  3000               	movlw	0
  8875     135A  00BA               	movwf	___fldiv@b+2
  8876     135B  3000               	movlw	0
  8877     135C  00B9               	movwf	___fldiv@b+1
  8878     135D  3000               	movlw	0
  8879     135E  00B8               	movwf	___fldiv@b
  8880     135F                     l3865:
  8881     135F  17BA               	bsf	___fldiv@b+2,7
  8882     1360  01BB               	clrf	___fldiv@b+3
  8883     1361  2B6A               	goto	l3871
  8884     1362                     l3869:
  8885     1362  3000               	movlw	0
  8886     1363  00BB               	movwf	___fldiv@b+3
  8887     1364  3000               	movlw	0
  8888     1365  00BA               	movwf	___fldiv@b+2
  8889     1366  3000               	movlw	0
  8890     1367  00B9               	movwf	___fldiv@b+1
  8891     1368  3000               	movlw	0
  8892     1369  00B8               	movwf	___fldiv@b
  8893     136A                     l3871:
  8894     136A  0837               	movf	___fldiv@a+3,w
  8895     136B  3980               	andlw	128
  8896     136C  00BC               	movwf	??___fldiv
  8897     136D  083C               	movf	??___fldiv,w
  8898     136E  06C5               	xorwf	___fldiv@sign,f
  8899     136F  3537               	lslf	___fldiv@a+3,w
  8900     1370  00CD               	movwf	___fldiv@aexp
  8901     1371  1BB6               	btfsc	___fldiv@a+2,7
  8902     1372  144D               	bsf	___fldiv@aexp,0
  8903     1373  084D               	movf	___fldiv@aexp,w
  8904     1374  1903               	btfsc	3,2
  8905     1375  2B84               	goto	l3889
  8906     1376  0A4D               	incf	___fldiv@aexp,w
  8907     1377  1D03               	btfss	3,2
  8908     1378  2B81               	goto	l3885
  8909     1379  3000               	movlw	0
  8910     137A  00B7               	movwf	___fldiv@a+3
  8911     137B  3000               	movlw	0
  8912     137C  00B6               	movwf	___fldiv@a+2
  8913     137D  3000               	movlw	0
  8914     137E  00B5               	movwf	___fldiv@a+1
  8915     137F  3000               	movlw	0
  8916     1380  00B4               	movwf	___fldiv@a
  8917     1381                     l3885:
  8918     1381  17B6               	bsf	___fldiv@a+2,7
  8919     1382  01B7               	clrf	___fldiv@a+3
  8920     1383  2B8C               	goto	l923
  8921     1384                     l3889:
  8922     1384  3000               	movlw	0
  8923     1385  00B7               	movwf	___fldiv@a+3
  8924     1386  3000               	movlw	0
  8925     1387  00B6               	movwf	___fldiv@a+2
  8926     1388  3000               	movlw	0
  8927     1389  00B5               	movwf	___fldiv@a+1
  8928     138A  3000               	movlw	0
  8929     138B  00B4               	movwf	___fldiv@a
  8930     138C                     l923:
  8931     138C  0837               	movf	___fldiv@a+3,w
  8932     138D  0436               	iorwf	___fldiv@a+2,w
  8933     138E  0435               	iorwf	___fldiv@a+1,w
  8934     138F  0434               	iorwf	___fldiv@a,w
  8935     1390  1D03               	skipz
  8936     1391  2BAB               	goto	l3899
  8937     1392  3000               	movlw	0
  8938     1393  00BB               	movwf	___fldiv@b+3
  8939     1394  3000               	movlw	0
  8940     1395  00BA               	movwf	___fldiv@b+2
  8941     1396  3000               	movlw	0
  8942     1397  00B9               	movwf	___fldiv@b+1
  8943     1398  3000               	movlw	0
  8944     1399  00B8               	movwf	___fldiv@b
  8945     139A  3080               	movlw	128
  8946     139B  04BA               	iorwf	___fldiv@b+2,f
  8947     139C  307F               	movlw	127
  8948     139D  04BB               	iorwf	___fldiv@b+3,f
  8949     139E                     L8:
  8950     139E  0845               	movf	___fldiv@sign,w
  8951     139F  00BC               	movwf	??___fldiv
  8952     13A0  083C               	movf	??___fldiv,w
  8953     13A1  04BB               	iorwf	___fldiv@b+3,f
  8954     13A2  083B               	movf	___fldiv@b+3,w
  8955     13A3  00B7               	movwf	?___fldiv+3
  8956     13A4  083A               	movf	___fldiv@b+2,w
  8957     13A5  00B6               	movwf	?___fldiv+2
  8958     13A6  0839               	movf	___fldiv@b+1,w
  8959     13A7  00B5               	movwf	?___fldiv+1
  8960     13A8  0838               	movf	___fldiv@b,w
  8961     13A9  00B4               	movwf	?___fldiv
  8962     13AA  0008               	return
  8963     13AB                     l3899:
  8964     13AB  084C               	movf	___fldiv@bexp,w
  8965     13AC  1D03               	btfss	3,2
  8966     13AD  2BB7               	goto	l3905
  8967     13AE  3000               	movlw	0
  8968     13AF  00B7               	movwf	?___fldiv+3
  8969     13B0  3000               	movlw	0
  8970     13B1  00B6               	movwf	?___fldiv+2
  8971     13B2  3000               	movlw	0
  8972     13B3  00B5               	movwf	?___fldiv+1
  8973     13B4  3000               	movlw	0
  8974     13B5  00B4               	movwf	?___fldiv
  8975     13B6  0008               	return
  8976     13B7                     l3905:
  8977     13B7  084C               	movf	___fldiv@bexp,w
  8978     13B8  00BC               	movwf	??___fldiv
  8979     13B9  01BD               	clrf	??___fldiv+1
  8980     13BA  083D               	movf	??___fldiv+1,w
  8981     13BB  00BF               	movwf	??___fldiv+3
  8982     13BC  084D               	movf	___fldiv@aexp,w
  8983     13BD  023C               	subwf	??___fldiv,w
  8984     13BE  00BE               	movwf	??___fldiv+2
  8985     13BF  1C03               	skipc
  8986     13C0  03BF               	decf	??___fldiv+3,f
  8987     13C1  083E               	movf	??___fldiv+2,w
  8988     13C2  3E7F               	addlw	127
  8989     13C3  00C6               	movwf	___fldiv@new_exp
  8990     13C4  3000               	movlw	0
  8991     13C5  3D3F               	addwfc	??___fldiv+3,w
  8992     13C6  00C7               	movwf	___fldiv@new_exp+1
  8993     13C7  083B               	movf	___fldiv@b+3,w
  8994     13C8  00C4               	movwf	___fldiv@rem+3
  8995     13C9  083A               	movf	___fldiv@b+2,w
  8996     13CA  00C3               	movwf	___fldiv@rem+2
  8997     13CB  0839               	movf	___fldiv@b+1,w
  8998     13CC  00C2               	movwf	___fldiv@rem+1
  8999     13CD  0838               	movf	___fldiv@b,w
  9000     13CE  00C1               	movwf	___fldiv@rem
  9001     13CF  3000               	movlw	0
  9002     13D0  00BB               	movwf	___fldiv@b+3
  9003     13D1  3000               	movlw	0
  9004     13D2  00BA               	movwf	___fldiv@b+2
  9005     13D3  3000               	movlw	0
  9006     13D4  00B9               	movwf	___fldiv@b+1
  9007     13D5  3000               	movlw	0
  9008     13D6  00B8               	movwf	___fldiv@b
  9009     13D7  3000               	movlw	0
  9010     13D8  00CB               	movwf	___fldiv@grs+3
  9011     13D9  3000               	movlw	0
  9012     13DA  00CA               	movwf	___fldiv@grs+2
  9013     13DB  3000               	movlw	0
  9014     13DC  00C9               	movwf	___fldiv@grs+1
  9015     13DD  3000               	movlw	0
  9016     13DE  00C8               	movwf	___fldiv@grs
  9017     13DF  01CD               	clrf	___fldiv@aexp
  9018     13E0                     l3933:
  9019     13E0  301A               	movlw	26
  9020     13E1  024D               	subwf	___fldiv@aexp,w
  9021     13E2  1803               	btfsc	3,0
  9022     13E3  2C1C               	goto	l3935
  9023     13E4  084D               	movf	___fldiv@aexp,w
  9024     13E5  1903               	btfsc	3,2
  9025     13E6  2BFE               	goto	l3925
  9026     13E7  3001               	movlw	1
  9027     13E8                     u4325:
  9028     13E8  35C1               	lslf	___fldiv@rem,f
  9029     13E9  0DC2               	rlf	___fldiv@rem+1,f
  9030     13EA  0DC3               	rlf	___fldiv@rem+2,f
  9031     13EB  0DC4               	rlf	___fldiv@rem+3,f
  9032     13EC  0B89               	decfsz	9,f
  9033     13ED  2BE8               	goto	u4325
  9034     13EE  3001               	movlw	1
  9035     13EF                     u4335:
  9036     13EF  35B8               	lslf	___fldiv@b,f
  9037     13F0  0DB9               	rlf	___fldiv@b+1,f
  9038     13F1  0DBA               	rlf	___fldiv@b+2,f
  9039     13F2  0DBB               	rlf	___fldiv@b+3,f
  9040     13F3  0B89               	decfsz	9,f
  9041     13F4  2BEF               	goto	u4335
  9042     13F5  1BCB               	btfsc	___fldiv@grs+3,7
  9043     13F6  1438               	bsf	___fldiv@b,0
  9044     13F7  3001               	movlw	1
  9045     13F8                     u4355:
  9046     13F8  35C8               	lslf	___fldiv@grs,f
  9047     13F9  0DC9               	rlf	___fldiv@grs+1,f
  9048     13FA  0DCA               	rlf	___fldiv@grs+2,f
  9049     13FB  0DCB               	rlf	___fldiv@grs+3,f
  9050     13FC  0B89               	decfsz	9,f
  9051     13FD  2BF8               	goto	u4355
  9052     13FE                     l3925:
  9053     13FE  0837               	movf	___fldiv@a+3,w
  9054     13FF  0244               	subwf	___fldiv@rem+3,w
  9055     1400  1D03               	skipz
  9056     1401  2C0C               	goto	u4365
  9057     1402  0836               	movf	___fldiv@a+2,w
  9058     1403  0243               	subwf	___fldiv@rem+2,w
  9059     1404  1D03               	skipz
  9060     1405  2C0C               	goto	u4365
  9061     1406  0835               	movf	___fldiv@a+1,w
  9062     1407  0242               	subwf	___fldiv@rem+1,w
  9063     1408  1D03               	skipz
  9064     1409  2C0C               	goto	u4365
  9065     140A  0834               	movf	___fldiv@a,w
  9066     140B  0241               	subwf	___fldiv@rem,w
  9067     140C                     u4365:
  9068     140C  1C03               	skipc
  9069     140D  2C17               	goto	l3931
  9070     140E  174B               	bsf	___fldiv@grs+3,6
  9071     140F  0834               	movf	___fldiv@a,w
  9072     1410  02C1               	subwf	___fldiv@rem,f
  9073     1411  0835               	movf	___fldiv@a+1,w
  9074     1412  3BC2               	subwfb	___fldiv@rem+1,f
  9075     1413  0836               	movf	___fldiv@a+2,w
  9076     1414  3BC3               	subwfb	___fldiv@rem+2,f
  9077     1415  0837               	movf	___fldiv@a+3,w
  9078     1416  3BC4               	subwfb	___fldiv@rem+3,f
  9079     1417                     l3931:
  9080     1417  3001               	movlw	1
  9081     1418  00BC               	movwf	??___fldiv
  9082     1419  083C               	movf	??___fldiv,w
  9083     141A  07CD               	addwf	___fldiv@aexp,f
  9084     141B  2BE0               	goto	l3933
  9085     141C                     l3935:
  9086     141C  0844               	movf	___fldiv@rem+3,w
  9087     141D  0443               	iorwf	___fldiv@rem+2,w
  9088     141E  0442               	iorwf	___fldiv@rem+1,w
  9089     141F  0441               	iorwf	___fldiv@rem,w
  9090     1420  1D03               	btfss	3,2
  9091     1421  1448               	bsf	___fldiv@grs,0
  9092     1422                     l3949:
  9093     1422  1BBA               	btfsc	___fldiv@b+2,7
  9094     1423  2C39               	goto	l3951
  9095     1424  3001               	movlw	1
  9096     1425                     u4395:
  9097     1425  35B8               	lslf	___fldiv@b,f
  9098     1426  0DB9               	rlf	___fldiv@b+1,f
  9099     1427  0DBA               	rlf	___fldiv@b+2,f
  9100     1428  0DBB               	rlf	___fldiv@b+3,f
  9101     1429  0B89               	decfsz	9,f
  9102     142A  2C25               	goto	u4395
  9103     142B  1BCB               	btfsc	___fldiv@grs+3,7
  9104     142C  1438               	bsf	___fldiv@b,0
  9105     142D  3001               	movlw	1
  9106     142E                     u4415:
  9107     142E  35C8               	lslf	___fldiv@grs,f
  9108     142F  0DC9               	rlf	___fldiv@grs+1,f
  9109     1430  0DCA               	rlf	___fldiv@grs+2,f
  9110     1431  0DCB               	rlf	___fldiv@grs+3,f
  9111     1432  0B89               	decfsz	9,f
  9112     1433  2C2E               	goto	u4415
  9113     1434  30FF               	movlw	255
  9114     1435  07C6               	addwf	___fldiv@new_exp,f
  9115     1436  30FF               	movlw	255
  9116     1437  3DC7               	addwfc	___fldiv@new_exp+1,f
  9117     1438  2C22               	goto	l3949
  9118     1439                     l3951:
  9119     1439  01CD               	clrf	___fldiv@aexp
  9120     143A  1FCB               	btfss	___fldiv@grs+3,7
  9121     143B  2C52               	goto	l3961
  9122     143C  30FF               	movlw	255
  9123     143D  0548               	andwf	___fldiv@grs,w
  9124     143E  00BC               	movwf	??___fldiv
  9125     143F  30FF               	movlw	255
  9126     1440  0549               	andwf	___fldiv@grs+1,w
  9127     1441  00BD               	movwf	??___fldiv+1
  9128     1442  30FF               	movlw	255
  9129     1443  054A               	andwf	___fldiv@grs+2,w
  9130     1444  00BE               	movwf	??___fldiv+2
  9131     1445  307F               	movlw	127
  9132     1446  054B               	andwf	___fldiv@grs+3,w
  9133     1447  00BF               	movwf	??___fldiv+3
  9134     1448  083F               	movf	??___fldiv+3,w
  9135     1449  043E               	iorwf	??___fldiv+2,w
  9136     144A  043D               	iorwf	??___fldiv+1,w
  9137     144B  043C               	iorwf	??___fldiv,w
  9138     144C  1903               	skipnz
  9139     144D  1838               	btfsc	___fldiv@b,0
  9140     144E  2C50               	goto	l3957
  9141     144F  2C52               	goto	l3961
  9142     1450                     l3957:
  9143     1450  01CD               	clrf	___fldiv@aexp
  9144     1451  0ACD               	incf	___fldiv@aexp,f
  9145     1452                     l3961:
  9146     1452  084D               	movf	___fldiv@aexp,w
  9147     1453  1903               	btfsc	3,2
  9148     1454  2C7B               	goto	l3971
  9149     1455  3001               	movlw	1
  9150     1456  07B8               	addwf	___fldiv@b,f
  9151     1457  3000               	movlw	0
  9152     1458  3DB9               	addwfc	___fldiv@b+1,f
  9153     1459  3000               	movlw	0
  9154     145A  3DBA               	addwfc	___fldiv@b+2,f
  9155     145B  3000               	movlw	0
  9156     145C  3DBB               	addwfc	___fldiv@b+3,f
  9157     145D  1C3B               	btfss	___fldiv@b+3,0
  9158     145E  2C7B               	goto	l3971
  9159     145F  0838               	movf	___fldiv@b,w
  9160     1460  00BC               	movwf	??___fldiv
  9161     1461  0839               	movf	___fldiv@b+1,w
  9162     1462  00BD               	movwf	??___fldiv+1
  9163     1463  083A               	movf	___fldiv@b+2,w
  9164     1464  00BE               	movwf	??___fldiv+2
  9165     1465  083B               	movf	___fldiv@b+3,w
  9166     1466  00BF               	movwf	??___fldiv+3
  9167     1467  3001               	movlw	1
  9168     1468  00C0               	movwf	??___fldiv+4
  9169     1469                     u4485:
  9170     1469  37BF               	asrf	??___fldiv+3,f
  9171     146A  0CBE               	rrf	??___fldiv+2,f
  9172     146B  0CBD               	rrf	??___fldiv+1,f
  9173     146C  0CBC               	rrf	??___fldiv,f
  9174     146D  0BC0               	decfsz	??___fldiv+4,f
  9175     146E  2C69               	goto	u4485
  9176     146F  083F               	movf	??___fldiv+3,w
  9177     1470  00BB               	movwf	___fldiv@b+3
  9178     1471  083E               	movf	??___fldiv+2,w
  9179     1472  00BA               	movwf	___fldiv@b+2
  9180     1473  083D               	movf	??___fldiv+1,w
  9181     1474  00B9               	movwf	___fldiv@b+1
  9182     1475  083C               	movf	??___fldiv,w
  9183     1476  00B8               	movwf	___fldiv@b
  9184     1477  3001               	movlw	1
  9185     1478  07C6               	addwf	___fldiv@new_exp,f
  9186     1479  3000               	movlw	0
  9187     147A  3DC7               	addwfc	___fldiv@new_exp+1,f
  9188     147B                     l3971:
  9189     147B  0847               	movf	___fldiv@new_exp+1,w
  9190     147C  3A80               	xorlw	128
  9191     147D  00BC               	movwf	??___fldiv
  9192     147E  3080               	movlw	128
  9193     147F  023C               	subwf	??___fldiv,w
  9194     1480  1D03               	skipz
  9195     1481  2C84               	goto	u4495
  9196     1482  30FF               	movlw	255
  9197     1483  0246               	subwf	___fldiv@new_exp,w
  9198     1484                     u4495:
  9199     1484  1C03               	skipc
  9200     1485  2C93               	goto	l944
  9201     1486  30FF               	movlw	255
  9202     1487  0020               	movlb	0	; select bank0
  9203     1488  00C6               	movwf	___fldiv@new_exp
  9204     1489  3000               	movlw	0
  9205     148A  00C7               	movwf	___fldiv@new_exp+1
  9206     148B  3000               	movlw	0
  9207     148C  00BB               	movwf	___fldiv@b+3
  9208     148D  3000               	movlw	0
  9209     148E  00BA               	movwf	___fldiv@b+2
  9210     148F  3000               	movlw	0
  9211     1490  00B9               	movwf	___fldiv@b+1
  9212     1491  3000               	movlw	0
  9213     1492  00B8               	movwf	___fldiv@b
  9214     1493                     l944:
  9215     1493  0020               	movlb	0	; select bank0
  9216     1494  0847               	movf	___fldiv@new_exp+1,w
  9217     1495  3A80               	xorlw	128
  9218     1496  00BC               	movwf	??___fldiv
  9219     1497  3080               	movlw	128
  9220     1498  023C               	subwf	??___fldiv,w
  9221     1499  1D03               	skipz
  9222     149A  2C9D               	goto	u4505
  9223     149B  3001               	movlw	1
  9224     149C  0246               	subwf	___fldiv@new_exp,w
  9225     149D                     u4505:
  9226     149D  1803               	skipnc
  9227     149E  2CAB               	goto	l945
  9228     149F  0020               	movlb	0	; select bank0
  9229     14A0  01C6               	clrf	___fldiv@new_exp
  9230     14A1  01C7               	clrf	___fldiv@new_exp+1
  9231     14A2  3000               	movlw	0
  9232     14A3  00BB               	movwf	___fldiv@b+3
  9233     14A4  3000               	movlw	0
  9234     14A5  00BA               	movwf	___fldiv@b+2
  9235     14A6  3000               	movlw	0
  9236     14A7  00B9               	movwf	___fldiv@b+1
  9237     14A8  3000               	movlw	0
  9238     14A9  00B8               	movwf	___fldiv@b
  9239     14AA  01C5               	clrf	___fldiv@sign
  9240     14AB                     l945:
  9241     14AB  0020               	movlb	0	; select bank0
  9242     14AC  0846               	movf	___fldiv@new_exp,w
  9243     14AD  00CC               	movwf	___fldiv@bexp
  9244     14AE  1C4C               	btfss	___fldiv@bexp,0
  9245     14AF  2CB2               	goto	l3985
  9246     14B0  17BA               	bsf	___fldiv@b+2,7
  9247     14B1  2CB6               	goto	l947
  9248     14B2                     l3985:
  9249     14B2  307F               	movlw	127
  9250     14B3  00BC               	movwf	??___fldiv
  9251     14B4  083C               	movf	??___fldiv,w
  9252     14B5  05BA               	andwf	___fldiv@b+2,f
  9253     14B6                     l947:
  9254     14B6  364C               	lsrf	___fldiv@bexp,w
  9255     14B7  00BB               	movwf	___fldiv@b+3
  9256     14B8  2B9E               	goto	L8
  9257     14B9                     __end_of___fldiv:
  9258                           
  9259                           	psect	text21
  9260     128C                     __ptext21:	
  9261 ;; *************** function _dtoa *****************
  9262 ;; Defined at:
  9263 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;  fp              1    wreg     PTR struct _IO_FILE
  9266 ;;		 -> sprintf@f(11), 
  9267 ;;  d               2   22[BANK0 ] int 
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;  fp              1   27[BANK0 ] PTR struct _IO_FILE
  9270 ;;		 -> sprintf@f(11), 
  9271 ;;  i               2   33[BANK0 ] int 
  9272 ;;  w               2   30[BANK0 ] int 
  9273 ;;  p               2   28[BANK0 ] int 
  9274 ;;  s               1   32[BANK0 ] unsigned char 
  9275 ;; Return value:  Size  Location     Type
  9276 ;;                  1    wreg      void 
  9277 ;; Registers used:
  9278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9284 ;;      Params:         0       2       0       0       0       0       0       0
  9285 ;;      Locals:         0      10       0       0       0       0       0       0
  9286 ;;      Temps:          0       1       0       0       0       0       0       0
  9287 ;;      Totals:         0      13       0       0       0       0       0       0
  9288 ;;Total ram usage:       13 bytes
  9289 ;; Hardware stack levels used: 1
  9290 ;; Hardware stack levels required when called: 8
  9291 ;; This function calls:
  9292 ;;		___awdiv
  9293 ;;		___awmod
  9294 ;;		_abs
  9295 ;;		_pad
  9296 ;; This function is called by:
  9297 ;;		_vfpfcnvrt
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301     128C                     _dtoa:	
  9302                           ;psect for function _dtoa
  9303                           
  9304                           
  9305                           ;incstack = 0
  9306                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9307                           ;dtoa@fp stored from wreg
  9308     128C  0020               	movlb	0	; select bank0
  9309     128D  00BB               	movwf	dtoa@fp
  9310                           
  9311                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 51
      +                          8:  int p;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:   
      +                            s = d < 0 ? 1 : 0;
  9312     128E  1FB7               	btfss	dtoa@d+1,7
  9313     128F  2A92               	goto	u5070
  9314     1290  3001               	movlw	1
  9315     1291  2A93               	goto	u5080
  9316     1292                     u5070:
  9317     1292  3000               	movlw	0
  9318     1293                     u5080:
  9319     1293  00C0               	movwf	dtoa@s
  9320                           
  9321                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 529:     if (!(pr
      +                          ec < 0)) {
  9322     1294  0022               	movlb	2	; select bank2
  9323     1295  1BAF               	btfsc	(_prec+1)^(0+256),7
  9324     1296  2A9C               	goto	l4247
  9325                           
  9326                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 530:         flag
      +                          s &= ~(1 << 1);
  9327     1297  30FD               	movlw	253
  9328     1298  0020               	movlb	0	; select bank0
  9329     1299  00B8               	movwf	??_dtoa
  9330     129A  0838               	movf	??_dtoa,w
  9331     129B  05FC               	andwf	_flags,f
  9332     129C                     l4247:
  9333                           
  9334                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 533:     p = (0 <
      +                          = prec) ? prec : 1;
  9335     129C  0022               	movlb	2	; select bank2
  9336     129D  1FAF               	btfss	(_prec+1)^(0+256),7
  9337     129E  2AA5               	goto	l4251
  9338     129F  3001               	movlw	1
  9339     12A0  0020               	movlb	0	; select bank0
  9340     12A1  00BC               	movwf	dtoa@p
  9341     12A2  3000               	movlw	0
  9342     12A3  00BD               	movwf	dtoa@p+1
  9343     12A4  2AAC               	goto	l1069
  9344     12A5                     l4251:
  9345     12A5  082F               	movf	(_prec+1)^(0+256),w
  9346     12A6  0020               	movlb	0	; select bank0
  9347     12A7  00BD               	movwf	dtoa@p+1
  9348     12A8  0022               	movlb	2	; select bank2
  9349     12A9  082E               	movf	_prec^(0+256),w
  9350     12AA  0020               	movlb	0	; select bank0
  9351     12AB  00BC               	movwf	dtoa@p
  9352     12AC                     l1069:
  9353                           
  9354                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  9355     12AC  0022               	movlb	2	; select bank2
  9356     12AD  082D               	movf	(_width+1)^(0+256),w
  9357     12AE  0020               	movlb	0	; select bank0
  9358     12AF  00BF               	movwf	dtoa@w+1
  9359     12B0  0022               	movlb	2	; select bank2
  9360     12B1  082C               	movf	_width^(0+256),w
  9361     12B2  0020               	movlb	0	; select bank0
  9362     12B3  00BE               	movwf	dtoa@w
  9363                           
  9364                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  9365     12B4  0840               	movf	dtoa@s,w
  9366     12B5  1903               	btfsc	3,2
  9367     12B6  2AC6               	goto	l1070
  9368                           
  9369                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  9370     12B7  30FF               	movlw	255
  9371     12B8  07BE               	addwf	dtoa@w,f
  9372     12B9  30FF               	movlw	255
  9373     12BA  3DBF               	addwfc	dtoa@w+1,f
  9374                           
  9375                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  9376     12BB  0840               	movf	dtoa@s,w
  9377     12BC  1D03               	btfss	3,2
  9378     12BD  2AC0               	goto	l4261
  9379     12BE  302B               	movlw	43
  9380     12BF  2AC1               	goto	L9
  9381     12C0                     l4261:
  9382     12C0  302D               	movlw	45
  9383     12C1                     L9:
  9384     12C1  00B9               	movwf	_dtoa$1339
  9385     12C2  3000               	movlw	0
  9386     12C3  00BA               	movwf	_dtoa$1339+1
  9387     12C4  0839               	movf	_dtoa$1339,w
  9388     12C5  00C0               	movwf	dtoa@s
  9389     12C6                     l1070:	
  9390                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 543:     }
  9391                           
  9392                           
  9393                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  9394     12C6  304F               	movlw	79
  9395     12C7  00C1               	movwf	dtoa@i
  9396     12C8  3000               	movlw	0
  9397     12C9  00C2               	movwf	dtoa@i+1
  9398                           
  9399                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  9400     12CA  0024               	movlb	4	; select bank4
  9401     12CB  01EF               	clrf	(_dbuf^(0+512)+79)
  9402                           
  9403                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9404     12CC  2B23               	goto	l4275
  9405     12CD                     l4277:
  9406     12CD  0020               	movlb	0	; select bank0
  9407     12CE  0836               	movf	dtoa@d,w
  9408     12CF  0437               	iorwf	dtoa@d+1,w
  9409     12D0  1D03               	btfss	3,2
  9410     12D1  2AEA               	goto	l4265
  9411     12D2  083D               	movf	dtoa@p+1,w
  9412     12D3  3A80               	xorlw	128
  9413     12D4  00B8               	movwf	??_dtoa
  9414     12D5  3080               	movlw	128
  9415     12D6  0238               	subwf	??_dtoa,w
  9416     12D7  1D03               	skipz
  9417     12D8  2ADB               	goto	u5155
  9418     12D9  3001               	movlw	1
  9419     12DA  023C               	subwf	dtoa@p,w
  9420     12DB                     u5155:
  9421     12DB  1803               	skipnc
  9422     12DC  2AEA               	goto	l4265
  9423     12DD  0020               	movlb	0	; select bank0
  9424     12DE  083F               	movf	dtoa@w+1,w
  9425     12DF  3A80               	xorlw	128
  9426     12E0  00B8               	movwf	??_dtoa
  9427     12E1  3080               	movlw	128
  9428     12E2  0238               	subwf	??_dtoa,w
  9429     12E3  1D03               	skipz
  9430     12E4  2AE7               	goto	u5165
  9431     12E5  3001               	movlw	1
  9432     12E6  023E               	subwf	dtoa@w,w
  9433     12E7                     u5165:
  9434     12E7  1803               	btfsc	3,0
  9435     12E8  1CFC               	btfss	_flags,1
  9436     12E9  2B2F               	goto	l4285
  9437     12EA                     l4265:
  9438                           
  9439                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  9440     12EA  30FF               	movlw	255
  9441     12EB  0020               	movlb	0	; select bank0
  9442     12EC  07C1               	addwf	dtoa@i,f
  9443     12ED  30FF               	movlw	255
  9444     12EE  3DC2               	addwfc	dtoa@i+1,f
  9445                           
  9446                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  9447     12EF  0841               	movf	dtoa@i,w
  9448     12F0  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  9449     12F1  0086               	movwf	6
  9450     12F2  3002               	movlw	2	; select bank4/5
  9451     12F3  0087               	movwf	7
  9452     12F4  300A               	movlw	10
  9453     12F5  00A0               	movwf	___awmod@divisor
  9454     12F6  3000               	movlw	0
  9455     12F7  00A1               	movwf	___awmod@divisor+1
  9456     12F8  0837               	movf	dtoa@d+1,w
  9457     12F9  00A3               	movwf	___awmod@dividend+1
  9458     12FA  0836               	movf	dtoa@d,w
  9459     12FB  00A2               	movwf	___awmod@dividend
  9460     12FC  319E  2680  3192   	fcall	___awmod
  9461     12FF  0020               	movlb	0	; select bank0
  9462     1300  0821               	movf	?___awmod+1,w
  9463     1301  00A8               	movwf	abs@a+1
  9464     1302  0820               	movf	?___awmod,w
  9465     1303  00A7               	movwf	abs@a
  9466     1304  319C  2443  3192   	fcall	_abs
  9467     1307  0020               	movlb	0	; select bank0
  9468     1308  0827               	movf	?_abs,w
  9469     1309  3E30               	addlw	48
  9470     130A  0081               	movwf	1
  9471                           
  9472                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 567:         --p;
  9473     130B  30FF               	movlw	255
  9474     130C  07BC               	addwf	dtoa@p,f
  9475     130D  30FF               	movlw	255
  9476     130E  3DBD               	addwfc	dtoa@p+1,f
  9477                           
  9478                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  9479     130F  30FF               	movlw	255
  9480     1310  07BE               	addwf	dtoa@w,f
  9481     1311  30FF               	movlw	255
  9482     1312  3DBF               	addwfc	dtoa@w+1,f
  9483                           
  9484                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  9485     1313  300A               	movlw	10
  9486     1314  00A0               	movwf	___awdiv@divisor
  9487     1315  3000               	movlw	0
  9488     1316  00A1               	movwf	___awdiv@divisor+1
  9489     1317  0837               	movf	dtoa@d+1,w
  9490     1318  00A3               	movwf	___awdiv@dividend+1
  9491     1319  0836               	movf	dtoa@d,w
  9492     131A  00A2               	movwf	___awdiv@dividend
  9493     131B  319F  27AE  3192   	fcall	___awdiv
  9494     131E  0020               	movlb	0	; select bank0
  9495     131F  0821               	movf	?___awdiv+1,w
  9496     1320  00B7               	movwf	dtoa@d+1
  9497     1321  0820               	movf	?___awdiv,w
  9498     1322  00B6               	movwf	dtoa@d
  9499     1323                     l4275:
  9500                           
  9501                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9502     1323  0020               	movlb	0	; select bank0
  9503     1324  0842               	movf	dtoa@i+1,w
  9504     1325  3A80               	xorlw	128
  9505     1326  00B8               	movwf	??_dtoa
  9506     1327  3080               	movlw	128
  9507     1328  0238               	subwf	??_dtoa,w
  9508     1329  1D03               	skipz
  9509     132A  2B2D               	goto	u5135
  9510     132B  3001               	movlw	1
  9511     132C  0241               	subwf	dtoa@i,w
  9512     132D                     u5135:
  9513     132D  1803               	btfsc	3,0
  9514     132E  2ACD               	goto	l4277
  9515     132F                     l4285:
  9516                           
  9517                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  9518     132F  0020               	movlb	0	; select bank0
  9519     1330  0840               	movf	dtoa@s,w
  9520     1331  1903               	btfsc	3,2
  9521     1332  2B3E               	goto	l4291
  9522                           
  9523                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  9524     1333  30FF               	movlw	255
  9525     1334  07C1               	addwf	dtoa@i,f
  9526     1335  30FF               	movlw	255
  9527     1336  3DC2               	addwfc	dtoa@i+1,f
  9528                           
  9529                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  9530     1337  0841               	movf	dtoa@i,w
  9531     1338  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  9532     1339  0086               	movwf	6
  9533     133A  3002               	movlw	2	; select bank4/5
  9534     133B  0087               	movwf	7
  9535     133C  0840               	movf	dtoa@s,w
  9536     133D  0081               	movwf	1
  9537     133E                     l4291:
  9538                           
  9539                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  9540     133E  0841               	movf	dtoa@i,w
  9541     133F  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  9542     1340  00AF               	movwf	pad@buf
  9543     1341  083F               	movf	dtoa@w+1,w
  9544     1342  00B1               	movwf	pad@p+1
  9545     1343  083E               	movf	dtoa@w,w
  9546     1344  00B0               	movwf	pad@p
  9547     1345  083B               	movf	dtoa@fp,w
  9548     1346  319E  2629         	fcall	_pad
  9549     1348  0008               	return
  9550     1349                     __end_of_dtoa:
  9551                           
  9552                           	psect	text22
  9553     1E29                     __ptext22:	
  9554 ;; *************** function _pad *****************
  9555 ;; Defined at:
  9556 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9557 ;; Parameters:    Size  Location     Type
  9558 ;;  fp              1    wreg     PTR struct _IO_FILE
  9559 ;;		 -> sprintf@f(11), 
  9560 ;;  buf             1   15[BANK0 ] PTR unsigned char 
  9561 ;;		 -> dbuf(80), 
  9562 ;;  p               2   16[BANK0 ] int 
  9563 ;; Auto vars:     Size  Location     Type
  9564 ;;  fp              1   21[BANK0 ] PTR struct _IO_FILE
  9565 ;;		 -> sprintf@f(11), 
  9566 ;;  i               2   19[BANK0 ] int 
  9567 ;; Return value:  Size  Location     Type
  9568 ;;                  1    wreg      void 
  9569 ;; Registers used:
  9570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9571 ;; Tracked objects:
  9572 ;;		On entry : 0/0
  9573 ;;		On exit  : 0/0
  9574 ;;		Unchanged: 0/0
  9575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9576 ;;      Params:         0       3       0       0       0       0       0       0
  9577 ;;      Locals:         0       3       0       0       0       0       0       0
  9578 ;;      Temps:          0       1       0       0       0       0       0       0
  9579 ;;      Totals:         0       7       0       0       0       0       0       0
  9580 ;;Total ram usage:        7 bytes
  9581 ;; Hardware stack levels used: 1
  9582 ;; Hardware stack levels required when called: 7
  9583 ;; This function calls:
  9584 ;;		_fputc
  9585 ;;		_fputs
  9586 ;; This function is called by:
  9587 ;;		_dtoa
  9588 ;;		_efgtoa
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592     1E29                     _pad:	
  9593                           ;psect for function _pad
  9594                           
  9595                           
  9596                           ;incstack = 0
  9597                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9598                           ;pad@fp stored from wreg
  9599     1E29  0020               	movlb	0	; select bank0
  9600     1E2A  00B5               	movwf	pad@fp
  9601                           
  9602                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           205:  if (p < 0) {
  9603     1E2B  1FB1               	btfss	pad@p+1,7
  9604     1E2C  2E2F               	goto	l1058
  9605                           
  9606                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  9607     1E2D  01B0               	clrf	pad@p
  9608     1E2E  01B1               	clrf	pad@p+1
  9609     1E2F                     l1058:	
  9610                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 207:  }
  9611                           
  9612                           
  9613                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  9614     1E2F  01B3               	clrf	pad@i
  9615     1E30  01B4               	clrf	pad@i+1
  9616     1E31                     l4139:	
  9617                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9618                           
  9619                           
  9620                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9621     1E31  0834               	movf	pad@i+1,w
  9622     1E32  3A80               	xorlw	128
  9623     1E33  00B2               	movwf	??_pad
  9624     1E34  0831               	movf	pad@p+1,w
  9625     1E35  3A80               	xorlw	128
  9626     1E36  0232               	subwf	??_pad,w
  9627     1E37  1D03               	skipz
  9628     1E38  2E3B               	goto	u4795
  9629     1E39  0830               	movf	pad@p,w
  9630     1E3A  0233               	subwf	pad@i,w
  9631     1E3B                     u4795:
  9632     1E3B  1803               	btfsc	3,0
  9633     1E3C  2E4D               	goto	l4141
  9634                           
  9635                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  9636     1E3D  3020               	movlw	32
  9637     1E3E  0020               	movlb	0	; select bank0
  9638     1E3F  00A0               	movwf	fputc@c
  9639     1E40  3000               	movlw	0
  9640     1E41  00A1               	movwf	fputc@c+1
  9641     1E42  0835               	movf	pad@fp,w
  9642     1E43  00A2               	movwf	fputc@fp
  9643     1E44  319F  270F  319E   	fcall	_fputc
  9644                           
  9645                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  9646     1E47  3001               	movlw	1
  9647     1E48  0020               	movlb	0	; select bank0
  9648     1E49  07B3               	addwf	pad@i,f
  9649     1E4A  3000               	movlw	0
  9650     1E4B  3DB4               	addwfc	pad@i+1,f
  9651     1E4C  2E31               	goto	l4139
  9652     1E4D                     l4141:
  9653                           
  9654                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  9655     1E4D  0020               	movlb	0	; select bank0
  9656     1E4E  0835               	movf	pad@fp,w
  9657     1E4F  00A8               	movwf	fputs@fp
  9658     1E50  082F               	movf	pad@buf,w
  9659     1E51  319D  2596         	fcall	_fputs
  9660     1E53  0008               	return
  9661     1E54                     __end_of_pad:
  9662                           
  9663                           	psect	text23
  9664     1D96                     __ptext23:	
  9665 ;; *************** function _fputs *****************
  9666 ;; Defined at:
  9667 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  9668 ;; Parameters:    Size  Location     Type
  9669 ;;  s               1    wreg     PTR const unsigned char 
  9670 ;;		 -> dbuf(80), 
  9671 ;;  fp              1    8[BANK0 ] PTR struct _IO_FILE
  9672 ;;		 -> sprintf@f(11), 
  9673 ;; Auto vars:     Size  Location     Type
  9674 ;;  s               1   14[BANK0 ] PTR const unsigned char 
  9675 ;;		 -> dbuf(80), 
  9676 ;;  i               2   12[BANK0 ] int 
  9677 ;;  c               1   11[BANK0 ] unsigned char 
  9678 ;; Return value:  Size  Location     Type
  9679 ;;                  2    8[BANK0 ] int 
  9680 ;; Registers used:
  9681 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9687 ;;      Params:         0       1       0       0       0       0       0       0
  9688 ;;      Locals:         0       4       0       0       0       0       0       0
  9689 ;;      Temps:          0       2       0       0       0       0       0       0
  9690 ;;      Totals:         0       7       0       0       0       0       0       0
  9691 ;;Total ram usage:        7 bytes
  9692 ;; Hardware stack levels used: 1
  9693 ;; Hardware stack levels required when called: 6
  9694 ;; This function calls:
  9695 ;;		_fputc
  9696 ;; This function is called by:
  9697 ;;		_pad
  9698 ;; This function uses a non-reentrant model
  9699 ;;
  9700                           
  9701     1D96                     _fputs:	
  9702                           ;psect for function _fputs
  9703                           
  9704                           
  9705                           ;incstack = 0
  9706                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9707                           ;fputs@s stored from wreg
  9708     1D96  0020               	movlb	0	; select bank0
  9709     1D97  00AE               	movwf	fputs@s
  9710     1D98  01AC               	clrf	fputs@i
  9711     1D99  01AD               	clrf	fputs@i+1
  9712     1D9A                     l3671:
  9713     1D9A  082C               	movf	fputs@i,w
  9714     1D9B  072E               	addwf	fputs@s,w
  9715     1D9C  00A9               	movwf	??_fputs
  9716     1D9D  0829               	movf	??_fputs,w
  9717     1D9E  0086               	movwf	6
  9718     1D9F  3002               	movlw	2	; select bank4/5
  9719     1DA0  0087               	movwf	7
  9720     1DA1  0801               	movf	1,w
  9721     1DA2  00AB               	movwf	fputs@c
  9722     1DA3  082B               	movf	fputs@c,w
  9723     1DA4  1903               	btfsc	3,2
  9724     1DA5  0008               	return
  9725     1DA6  082B               	movf	fputs@c,w
  9726     1DA7  00A9               	movwf	??_fputs
  9727     1DA8  01AA               	clrf	??_fputs+1
  9728     1DA9  0829               	movf	??_fputs,w
  9729     1DAA  00A0               	movwf	fputc@c
  9730     1DAB  082A               	movf	??_fputs+1,w
  9731     1DAC  00A1               	movwf	fputc@c+1
  9732     1DAD  0828               	movf	fputs@fp,w
  9733     1DAE  00A2               	movwf	fputc@fp
  9734     1DAF  319F  270F  319D   	fcall	_fputc
  9735     1DB2  3001               	movlw	1
  9736     1DB3  0020               	movlb	0	; select bank0
  9737     1DB4  07AC               	addwf	fputs@i,f
  9738     1DB5  3000               	movlw	0
  9739     1DB6  3DAD               	addwfc	fputs@i+1,f
  9740     1DB7  2D9A               	goto	l3671
  9741     1DB8                     __end_of_fputs:
  9742                           
  9743                           	psect	text24
  9744     1F0F                     __ptext24:	
  9745 ;; *************** function _fputc *****************
  9746 ;; Defined at:
  9747 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  9748 ;; Parameters:    Size  Location     Type
  9749 ;;  c               2    0[BANK0 ] int 
  9750 ;;  fp              1    2[BANK0 ] PTR struct _IO_FILE
  9751 ;;		 -> sprintf@f(11), 
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;		None
  9754 ;; Return value:  Size  Location     Type
  9755 ;;                  2    0[BANK0 ] int 
  9756 ;; Registers used:
  9757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9763 ;;      Params:         0       3       0       0       0       0       0       0
  9764 ;;      Locals:         0       0       0       0       0       0       0       0
  9765 ;;      Temps:          0       5       0       0       0       0       0       0
  9766 ;;      Totals:         0       8       0       0       0       0       0       0
  9767 ;;Total ram usage:        8 bytes
  9768 ;; Hardware stack levels used: 1
  9769 ;; Hardware stack levels required when called: 5
  9770 ;; This function calls:
  9771 ;;		_putch
  9772 ;; This function is called by:
  9773 ;;		_pad
  9774 ;;		_vfpfcnvrt
  9775 ;;		_fputs
  9776 ;; This function uses a non-reentrant model
  9777 ;;
  9778                           
  9779     1F0F                     _fputc:	
  9780                           ;psect for function _fputc
  9781                           
  9782                           
  9783                           ;incstack = 0
  9784                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9785     1F0F  0020               	movlb	0	; select bank0
  9786     1F10  0822               	movf	fputc@fp,w
  9787     1F11  1D03               	btfss	3,2
  9788     1F12  0822               	movf	fputc@fp,w
  9789     1F13  1D03               	btfss	3,2
  9790     1F14  2F19               	goto	l3447
  9791     1F15  0820               	movf	fputc@c,w
  9792     1F16  3180  2003         	fcall	_putch
  9793     1F18  0008               	return
  9794     1F19                     l3447:
  9795     1F19  0822               	movf	fputc@fp,w
  9796     1F1A  3E09               	addlw	9
  9797     1F1B  0086               	movwf	6
  9798     1F1C  3001               	movlw	1	; select bank2/3
  9799     1F1D  0087               	movwf	7
  9800     1F1E  0016               	moviw fsr1++
  9801     1F1F  0401               	iorwf	1,w
  9802     1F20  1903               	btfsc	3,2
  9803     1F21  2F40               	goto	l3451
  9804     1F22  0822               	movf	fputc@fp,w
  9805     1F23  3E09               	addlw	9
  9806     1F24  0086               	movwf	6
  9807     1F25  3001               	movlw	1	; select bank2/3
  9808     1F26  0087               	movwf	7
  9809     1F27  3F40               	moviw [0]fsr1
  9810     1F28  00A3               	movwf	??_fputc
  9811     1F29  3F41               	moviw [1]fsr1
  9812     1F2A  00A4               	movwf	??_fputc+1
  9813     1F2B  0822               	movf	fputc@fp,w
  9814     1F2C  3E02               	addlw	2
  9815     1F2D  0086               	movwf	6
  9816     1F2E  3001               	movlw	1	; select bank2/3
  9817     1F2F  0087               	movwf	7
  9818     1F30  3F40               	moviw [0]fsr1
  9819     1F31  00A5               	movwf	??_fputc+2
  9820     1F32  3F41               	moviw [1]fsr1
  9821     1F33  00A6               	movwf	??_fputc+3
  9822     1F34  0826               	movf	??_fputc+3,w
  9823     1F35  3A80               	xorlw	128
  9824     1F36  00A7               	movwf	??_fputc+4
  9825     1F37  0824               	movf	??_fputc+1,w
  9826     1F38  3A80               	xorlw	128
  9827     1F39  0227               	subwf	??_fputc+4,w
  9828     1F3A  1D03               	skipz
  9829     1F3B  2F3E               	goto	u3335
  9830     1F3C  0823               	movf	??_fputc,w
  9831     1F3D  0225               	subwf	??_fputc+2,w
  9832     1F3E                     u3335:
  9833     1F3E  1803               	skipnc
  9834     1F3F  0008               	return
  9835     1F40                     l3451:
  9836     1F40  0020               	movlb	0	; select bank0
  9837     1F41  0822               	movf	fputc@fp,w
  9838     1F42  0086               	movwf	6
  9839     1F43  3001               	movlw	1	; select bank2/3
  9840     1F44  0087               	movwf	7
  9841     1F45  0822               	movf	fputc@fp,w
  9842     1F46  3E02               	addlw	2
  9843     1F47  0084               	movwf	4
  9844     1F48  3001               	movlw	1	; select bank2/3
  9845     1F49  0085               	movwf	5
  9846     1F4A  0800               	movf	0,w
  9847     1F4B  0701               	addwf	1,w
  9848     1F4C  00A3               	movwf	??_fputc
  9849     1F4D  0823               	movf	??_fputc,w
  9850     1F4E  0086               	movwf	6
  9851     1F4F  3001               	movlw	1	; select bank2/3
  9852     1F50  0087               	movwf	7
  9853     1F51  0820               	movf	fputc@c,w
  9854     1F52  0081               	movwf	1
  9855     1F53  0822               	movf	fputc@fp,w
  9856     1F54  3E02               	addlw	2
  9857     1F55  0086               	movwf	6
  9858     1F56  3001               	movlw	1	; select bank2/3
  9859     1F57  0087               	movwf	7
  9860     1F58  3001               	movlw	1
  9861     1F59  0781               	addwf	1,f
  9862     1F5A  3141               	addfsr 1,1
  9863     1F5B  1803               	skipnc
  9864     1F5C  0A81               	incf	1,f
  9865     1F5D  0008               	return
  9866     1F5E                     __end_of_fputc:
  9867                           
  9868                           	psect	text25
  9869     0003                     __ptext25:	
  9870 ;; *************** function _putch *****************
  9871 ;; Defined at:
  9872 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  9873 ;; Parameters:    Size  Location     Type
  9874 ;;  c               1    wreg     unsigned char 
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;  c               1    0[COMMON] unsigned char 
  9877 ;; Return value:  Size  Location     Type
  9878 ;;                  1    wreg      void 
  9879 ;; Registers used:
  9880 ;;		wreg
  9881 ;; Tracked objects:
  9882 ;;		On entry : 0/0
  9883 ;;		On exit  : 0/0
  9884 ;;		Unchanged: 0/0
  9885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9886 ;;      Params:         0       0       0       0       0       0       0       0
  9887 ;;      Locals:         0       0       0       0       0       0       0       0
  9888 ;;      Temps:          0       0       0       0       0       0       0       0
  9889 ;;      Totals:         0       0       0       0       0       0       0       0
  9890 ;;Total ram usage:        0 bytes
  9891 ;; Hardware stack levels used: 1
  9892 ;; Hardware stack levels required when called: 4
  9893 ;; This function calls:
  9894 ;;		Nothing
  9895 ;; This function is called by:
  9896 ;;		_fputc
  9897 ;; This function uses a non-reentrant model
  9898 ;;
  9899                           
  9900     0003                     _putch:	
  9901                           ;psect for function _putch
  9902                           
  9903                           
  9904                           ;incstack = 0
  9905                           ; Regs used in _putch: [wreg]
  9906     0003  0008               	return
  9907     0004                     __end_of_putch:
  9908                           
  9909                           	psect	text26
  9910     1C43                     __ptext26:	
  9911 ;; *************** function _abs *****************
  9912 ;; Defined at:
  9913 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  9914 ;; Parameters:    Size  Location     Type
  9915 ;;  a               2    7[BANK0 ] int 
  9916 ;; Auto vars:     Size  Location     Type
  9917 ;;		None
  9918 ;; Return value:  Size  Location     Type
  9919 ;;                  2    7[BANK0 ] int 
  9920 ;; Registers used:
  9921 ;;		wreg, status,2, status,0
  9922 ;; Tracked objects:
  9923 ;;		On entry : 0/0
  9924 ;;		On exit  : 0/0
  9925 ;;		Unchanged: 0/0
  9926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9927 ;;      Params:         0       2       0       0       0       0       0       0
  9928 ;;      Locals:         0       0       0       0       0       0       0       0
  9929 ;;      Temps:          0       2       0       0       0       0       0       0
  9930 ;;      Totals:         0       4       0       0       0       0       0       0
  9931 ;;Total ram usage:        4 bytes
  9932 ;; Hardware stack levels used: 1
  9933 ;; Hardware stack levels required when called: 4
  9934 ;; This function calls:
  9935 ;;		Nothing
  9936 ;; This function is called by:
  9937 ;;		_dtoa
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941     1C43                     _abs:	
  9942                           ;psect for function _abs
  9943                           
  9944                           
  9945                           ;incstack = 0
  9946                           ; Regs used in _abs: [wreg+status,2+status,0]
  9947     1C43  0020               	movlb	0	; select bank0
  9948     1C44  1FA8               	btfss	abs@a+1,7
  9949     1C45  0008               	return
  9950     1C46  0927               	comf	abs@a,w
  9951     1C47  00A9               	movwf	??_abs
  9952     1C48  0928               	comf	abs@a+1,w
  9953     1C49  00AA               	movwf	??_abs+1
  9954     1C4A  0AA9               	incf	??_abs,f
  9955     1C4B  1903               	skipnz
  9956     1C4C  0AAA               	incf	??_abs+1,f
  9957     1C4D  0829               	movf	??_abs,w
  9958     1C4E  00A7               	movwf	?_abs
  9959     1C4F  082A               	movf	??_abs+1,w
  9960     1C50  00A8               	movwf	?_abs+1
  9961     1C51  0008               	return
  9962     1C52                     __end_of_abs:
  9963                           
  9964                           	psect	text27
  9965     1E80                     __ptext27:	
  9966 ;; *************** function ___awmod *****************
  9967 ;; Defined at:
  9968 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  9969 ;; Parameters:    Size  Location     Type
  9970 ;;  divisor         2    0[BANK0 ] int 
  9971 ;;  dividend        2    2[BANK0 ] int 
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;  sign            1    6[BANK0 ] unsigned char 
  9974 ;;  counter         1    5[BANK0 ] unsigned char 
  9975 ;; Return value:  Size  Location     Type
  9976 ;;                  2    0[BANK0 ] int 
  9977 ;; Registers used:
  9978 ;;		wreg, status,2, status,0
  9979 ;; Tracked objects:
  9980 ;;		On entry : 0/0
  9981 ;;		On exit  : 0/0
  9982 ;;		Unchanged: 0/0
  9983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9984 ;;      Params:         0       4       0       0       0       0       0       0
  9985 ;;      Locals:         0       2       0       0       0       0       0       0
  9986 ;;      Temps:          0       1       0       0       0       0       0       0
  9987 ;;      Totals:         0       7       0       0       0       0       0       0
  9988 ;;Total ram usage:        7 bytes
  9989 ;; Hardware stack levels used: 1
  9990 ;; Hardware stack levels required when called: 4
  9991 ;; This function calls:
  9992 ;;		Nothing
  9993 ;; This function is called by:
  9994 ;;		_dtoa
  9995 ;; This function uses a non-reentrant model
  9996 ;;
  9997                           
  9998     1E80                     ___awmod:	
  9999                           ;psect for function ___awmod
 10000                           
 10001                           
 10002                           ;incstack = 0
 10003                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10004     1E80  0020               	movlb	0	; select bank0
 10005     1E81  01A6               	clrf	___awmod@sign
 10006     1E82  1FA3               	btfss	___awmod@dividend+1,7
 10007     1E83  2E8B               	goto	l3739
 10008     1E84  09A2               	comf	___awmod@dividend,f
 10009     1E85  09A3               	comf	___awmod@dividend+1,f
 10010     1E86  0AA2               	incf	___awmod@dividend,f
 10011     1E87  1903               	skipnz
 10012     1E88  0AA3               	incf	___awmod@dividend+1,f
 10013     1E89  01A6               	clrf	___awmod@sign
 10014     1E8A  0AA6               	incf	___awmod@sign,f
 10015     1E8B                     l3739:
 10016     1E8B  1FA1               	btfss	___awmod@divisor+1,7
 10017     1E8C  2E92               	goto	l3743
 10018     1E8D  09A0               	comf	___awmod@divisor,f
 10019     1E8E  09A1               	comf	___awmod@divisor+1,f
 10020     1E8F  0AA0               	incf	___awmod@divisor,f
 10021     1E90  1903               	skipnz
 10022     1E91  0AA1               	incf	___awmod@divisor+1,f
 10023     1E92                     l3743:
 10024     1E92  0820               	movf	___awmod@divisor,w
 10025     1E93  0421               	iorwf	___awmod@divisor+1,w
 10026     1E94  1903               	btfsc	3,2
 10027     1E95  2EB9               	goto	l3761
 10028     1E96  01A5               	clrf	___awmod@counter
 10029     1E97  0AA5               	incf	___awmod@counter,f
 10030     1E98                     l3751:
 10031     1E98  1BA1               	btfsc	___awmod@divisor+1,7
 10032     1E99  2EA4               	goto	l3753
 10033     1E9A  3001               	movlw	1
 10034     1E9B                     u3985:
 10035     1E9B  35A0               	lslf	___awmod@divisor,f
 10036     1E9C  0DA1               	rlf	___awmod@divisor+1,f
 10037     1E9D  0B89               	decfsz	9,f
 10038     1E9E  2E9B               	goto	u3985
 10039     1E9F  3001               	movlw	1
 10040     1EA0  00A4               	movwf	??___awmod
 10041     1EA1  0824               	movf	??___awmod,w
 10042     1EA2  07A5               	addwf	___awmod@counter,f
 10043     1EA3  2E98               	goto	l3751
 10044     1EA4                     l3753:
 10045     1EA4  0821               	movf	___awmod@divisor+1,w
 10046     1EA5  0223               	subwf	___awmod@dividend+1,w
 10047     1EA6  1D03               	skipz
 10048     1EA7  2EAA               	goto	u4005
 10049     1EA8  0820               	movf	___awmod@divisor,w
 10050     1EA9  0222               	subwf	___awmod@dividend,w
 10051     1EAA                     u4005:
 10052     1EAA  1C03               	skipc
 10053     1EAB  2EB0               	goto	l3757
 10054     1EAC  0820               	movf	___awmod@divisor,w
 10055     1EAD  02A2               	subwf	___awmod@dividend,f
 10056     1EAE  0821               	movf	___awmod@divisor+1,w
 10057     1EAF  3BA3               	subwfb	___awmod@dividend+1,f
 10058     1EB0                     l3757:
 10059     1EB0  3001               	movlw	1
 10060     1EB1                     u4015:
 10061     1EB1  36A1               	lsrf	___awmod@divisor+1,f
 10062     1EB2  0CA0               	rrf	___awmod@divisor,f
 10063     1EB3  0B89               	decfsz	9,f
 10064     1EB4  2EB1               	goto	u4015
 10065     1EB5  3001               	movlw	1
 10066     1EB6  02A5               	subwf	___awmod@counter,f
 10067     1EB7  1D03               	btfss	3,2
 10068     1EB8  2EA4               	goto	l3753
 10069     1EB9                     l3761:
 10070     1EB9  0826               	movf	___awmod@sign,w
 10071     1EBA  1903               	btfsc	3,2
 10072     1EBB  2EC1               	goto	l3765
 10073     1EBC  09A2               	comf	___awmod@dividend,f
 10074     1EBD  09A3               	comf	___awmod@dividend+1,f
 10075     1EBE  0AA2               	incf	___awmod@dividend,f
 10076     1EBF  1903               	skipnz
 10077     1EC0  0AA3               	incf	___awmod@dividend+1,f
 10078     1EC1                     l3765:
 10079     1EC1  0823               	movf	___awmod@dividend+1,w
 10080     1EC2  00A1               	movwf	?___awmod+1
 10081     1EC3  0822               	movf	___awmod@dividend,w
 10082     1EC4  00A0               	movwf	?___awmod
 10083     1EC5  0008               	return
 10084     1EC6                     __end_of___awmod:
 10085                           
 10086                           	psect	text28
 10087     1FAE                     __ptext28:	
 10088 ;; *************** function ___awdiv *****************
 10089 ;; Defined at:
 10090 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10091 ;; Parameters:    Size  Location     Type
 10092 ;;  divisor         2    0[BANK0 ] int 
 10093 ;;  dividend        2    2[BANK0 ] int 
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;  quotient        2    7[BANK0 ] int 
 10096 ;;  sign            1    6[BANK0 ] unsigned char 
 10097 ;;  counter         1    5[BANK0 ] unsigned char 
 10098 ;; Return value:  Size  Location     Type
 10099 ;;                  2    0[BANK0 ] int 
 10100 ;; Registers used:
 10101 ;;		wreg, status,2, status,0
 10102 ;; Tracked objects:
 10103 ;;		On entry : 0/0
 10104 ;;		On exit  : 0/0
 10105 ;;		Unchanged: 0/0
 10106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10107 ;;      Params:         0       4       0       0       0       0       0       0
 10108 ;;      Locals:         0       4       0       0       0       0       0       0
 10109 ;;      Temps:          0       1       0       0       0       0       0       0
 10110 ;;      Totals:         0       9       0       0       0       0       0       0
 10111 ;;Total ram usage:        9 bytes
 10112 ;; Hardware stack levels used: 1
 10113 ;; Hardware stack levels required when called: 4
 10114 ;; This function calls:
 10115 ;;		Nothing
 10116 ;; This function is called by:
 10117 ;;		_dtoa
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121     1FAE                     ___awdiv:	
 10122                           ;psect for function ___awdiv
 10123                           
 10124                           
 10125                           ;incstack = 0
 10126                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10127     1FAE  0020               	movlb	0	; select bank0
 10128     1FAF  01A6               	clrf	___awdiv@sign
 10129     1FB0  1FA1               	btfss	___awdiv@divisor+1,7
 10130     1FB1  2FB9               	goto	l3695
 10131     1FB2  09A0               	comf	___awdiv@divisor,f
 10132     1FB3  09A1               	comf	___awdiv@divisor+1,f
 10133     1FB4  0AA0               	incf	___awdiv@divisor,f
 10134     1FB5  1903               	skipnz
 10135     1FB6  0AA1               	incf	___awdiv@divisor+1,f
 10136     1FB7  01A6               	clrf	___awdiv@sign
 10137     1FB8  0AA6               	incf	___awdiv@sign,f
 10138     1FB9                     l3695:
 10139     1FB9  1FA3               	btfss	___awdiv@dividend+1,7
 10140     1FBA  2FC4               	goto	l3701
 10141     1FBB  09A2               	comf	___awdiv@dividend,f
 10142     1FBC  09A3               	comf	___awdiv@dividend+1,f
 10143     1FBD  0AA2               	incf	___awdiv@dividend,f
 10144     1FBE  1903               	skipnz
 10145     1FBF  0AA3               	incf	___awdiv@dividend+1,f
 10146     1FC0  3001               	movlw	1
 10147     1FC1  00A4               	movwf	??___awdiv
 10148     1FC2  0824               	movf	??___awdiv,w
 10149     1FC3  06A6               	xorwf	___awdiv@sign,f
 10150     1FC4                     l3701:
 10151     1FC4  01A7               	clrf	___awdiv@quotient
 10152     1FC5  01A8               	clrf	___awdiv@quotient+1
 10153     1FC6  0820               	movf	___awdiv@divisor,w
 10154     1FC7  0421               	iorwf	___awdiv@divisor+1,w
 10155     1FC8  1903               	btfsc	3,2
 10156     1FC9  2FF3               	goto	l3723
 10157     1FCA  01A5               	clrf	___awdiv@counter
 10158     1FCB  0AA5               	incf	___awdiv@counter,f
 10159     1FCC                     l3711:
 10160     1FCC  1BA1               	btfsc	___awdiv@divisor+1,7
 10161     1FCD  2FD8               	goto	l3713
 10162     1FCE  3001               	movlw	1
 10163     1FCF                     u3885:
 10164     1FCF  35A0               	lslf	___awdiv@divisor,f
 10165     1FD0  0DA1               	rlf	___awdiv@divisor+1,f
 10166     1FD1  0B89               	decfsz	9,f
 10167     1FD2  2FCF               	goto	u3885
 10168     1FD3  3001               	movlw	1
 10169     1FD4  00A4               	movwf	??___awdiv
 10170     1FD5  0824               	movf	??___awdiv,w
 10171     1FD6  07A5               	addwf	___awdiv@counter,f
 10172     1FD7  2FCC               	goto	l3711
 10173     1FD8                     l3713:
 10174     1FD8  3001               	movlw	1
 10175     1FD9                     u3905:
 10176     1FD9  35A7               	lslf	___awdiv@quotient,f
 10177     1FDA  0DA8               	rlf	___awdiv@quotient+1,f
 10178     1FDB  0B89               	decfsz	9,f
 10179     1FDC  2FD9               	goto	u3905
 10180     1FDD  0821               	movf	___awdiv@divisor+1,w
 10181     1FDE  0223               	subwf	___awdiv@dividend+1,w
 10182     1FDF  1D03               	skipz
 10183     1FE0  2FE3               	goto	u3915
 10184     1FE1  0820               	movf	___awdiv@divisor,w
 10185     1FE2  0222               	subwf	___awdiv@dividend,w
 10186     1FE3                     u3915:
 10187     1FE3  1C03               	skipc
 10188     1FE4  2FEA               	goto	l3719
 10189     1FE5  0820               	movf	___awdiv@divisor,w
 10190     1FE6  02A2               	subwf	___awdiv@dividend,f
 10191     1FE7  0821               	movf	___awdiv@divisor+1,w
 10192     1FE8  3BA3               	subwfb	___awdiv@dividend+1,f
 10193     1FE9  1427               	bsf	___awdiv@quotient,0
 10194     1FEA                     l3719:
 10195     1FEA  3001               	movlw	1
 10196     1FEB                     u3925:
 10197     1FEB  36A1               	lsrf	___awdiv@divisor+1,f
 10198     1FEC  0CA0               	rrf	___awdiv@divisor,f
 10199     1FED  0B89               	decfsz	9,f
 10200     1FEE  2FEB               	goto	u3925
 10201     1FEF  3001               	movlw	1
 10202     1FF0  02A5               	subwf	___awdiv@counter,f
 10203     1FF1  1D03               	btfss	3,2
 10204     1FF2  2FD8               	goto	l3713
 10205     1FF3                     l3723:
 10206     1FF3  0826               	movf	___awdiv@sign,w
 10207     1FF4  1903               	btfsc	3,2
 10208     1FF5  2FFB               	goto	l3727
 10209     1FF6  09A7               	comf	___awdiv@quotient,f
 10210     1FF7  09A8               	comf	___awdiv@quotient+1,f
 10211     1FF8  0AA7               	incf	___awdiv@quotient,f
 10212     1FF9  1903               	skipnz
 10213     1FFA  0AA8               	incf	___awdiv@quotient+1,f
 10214     1FFB                     l3727:
 10215     1FFB  0828               	movf	___awdiv@quotient+1,w
 10216     1FFC  00A1               	movwf	?___awdiv+1
 10217     1FFD  0827               	movf	___awdiv@quotient,w
 10218     1FFE  00A0               	movwf	?___awdiv
 10219     1FFF  0008               	return
 10220     2000                     __end_of___awdiv:
 10221                           
 10222                           	psect	text29
 10223     0800                     __ptext29:	
 10224 ;; *************** function ___xxtofl *****************
 10225 ;; Defined at:
 10226 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
 10227 ;; Parameters:    Size  Location     Type
 10228 ;;  sign            1    wreg     unsigned char 
 10229 ;;  val             4    6[BANK0 ] long 
 10230 ;; Auto vars:     Size  Location     Type
 10231 ;;  sign            1   14[BANK0 ] unsigned char 
 10232 ;;  arg             4   16[BANK0 ] unsigned long 
 10233 ;;  exp             1   15[BANK0 ] unsigned char 
 10234 ;; Return value:  Size  Location     Type
 10235 ;;                  4    6[BANK0 ] unsigned char 
 10236 ;; Registers used:
 10237 ;;		wreg, status,2, status,0
 10238 ;; Tracked objects:
 10239 ;;		On entry : 0/0
 10240 ;;		On exit  : 0/0
 10241 ;;		Unchanged: 0/0
 10242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10243 ;;      Params:         0       4       0       0       0       0       0       0
 10244 ;;      Locals:         0       6       0       0       0       0       0       0
 10245 ;;      Temps:          0       4       0       0       0       0       0       0
 10246 ;;      Totals:         0      14       0       0       0       0       0       0
 10247 ;;Total ram usage:       14 bytes
 10248 ;; Hardware stack levels used: 1
 10249 ;; Hardware stack levels required when called: 4
 10250 ;; This function calls:
 10251 ;;		Nothing
 10252 ;; This function is called by:
 10253 ;;		_main
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257     0800                     ___xxtofl:	
 10258                           ;psect for function ___xxtofl
 10259                           
 10260                           
 10261                           ;incstack = 0
 10262                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 10263                           ;___xxtofl@sign stored from wreg
 10264     0800  0020               	movlb	0	; select bank0
 10265     0801  00AE               	movwf	___xxtofl@sign
 10266     0802  082E               	movf	___xxtofl@sign,w
 10267     0803  1D03               	btfss	3,2
 10268     0804  1FA9               	btfss	___xxtofl@val+3,7
 10269     0805  2816               	goto	l4901
 10270     0806  0926               	comf	___xxtofl@val,w
 10271     0807  00B0               	movwf	___xxtofl@arg
 10272     0808  0927               	comf	___xxtofl@val+1,w
 10273     0809  00B1               	movwf	___xxtofl@arg+1
 10274     080A  0928               	comf	___xxtofl@val+2,w
 10275     080B  00B2               	movwf	___xxtofl@arg+2
 10276     080C  0929               	comf	___xxtofl@val+3,w
 10277     080D  00B3               	movwf	___xxtofl@arg+3
 10278     080E  0AB0               	incf	___xxtofl@arg,f
 10279     080F  1903               	skipnz
 10280     0810  0AB1               	incf	___xxtofl@arg+1,f
 10281     0811  1903               	skipnz
 10282     0812  0AB2               	incf	___xxtofl@arg+2,f
 10283     0813  1903               	skipnz
 10284     0814  0AB3               	incf	___xxtofl@arg+3,f
 10285     0815  281E               	goto	l1007
 10286     0816                     l4901:
 10287     0816  0829               	movf	___xxtofl@val+3,w
 10288     0817  00B3               	movwf	___xxtofl@arg+3
 10289     0818  0828               	movf	___xxtofl@val+2,w
 10290     0819  00B2               	movwf	___xxtofl@arg+2
 10291     081A  0827               	movf	___xxtofl@val+1,w
 10292     081B  00B1               	movwf	___xxtofl@arg+1
 10293     081C  0826               	movf	___xxtofl@val,w
 10294     081D  00B0               	movwf	___xxtofl@arg
 10295     081E                     l1007:
 10296     081E  0829               	movf	___xxtofl@val+3,w
 10297     081F  0428               	iorwf	___xxtofl@val+2,w
 10298     0820  0427               	iorwf	___xxtofl@val+1,w
 10299     0821  0426               	iorwf	___xxtofl@val,w
 10300     0822  1D03               	skipz
 10301     0823  282D               	goto	l4907
 10302     0824  3000               	movlw	0
 10303     0825  00A9               	movwf	?___xxtofl+3
 10304     0826  3000               	movlw	0
 10305     0827  00A8               	movwf	?___xxtofl+2
 10306     0828  3000               	movlw	0
 10307     0829  00A7               	movwf	?___xxtofl+1
 10308     082A  3000               	movlw	0
 10309     082B  00A6               	movwf	?___xxtofl
 10310     082C  0008               	return
 10311     082D                     l4907:
 10312     082D  3096               	movlw	150
 10313     082E  00AF               	movwf	___xxtofl@exp
 10314     082F                     l4911:
 10315     082F  30FE               	movlw	254
 10316     0830  0533               	andwf	___xxtofl@arg+3,w
 10317     0831  1903               	btfsc	3,2
 10318     0832  2852               	goto	l1013
 10319     0833  3001               	movlw	1
 10320     0834  00AA               	movwf	??___xxtofl
 10321     0835  082A               	movf	??___xxtofl,w
 10322     0836  07AF               	addwf	___xxtofl@exp,f
 10323     0837  3001               	movlw	1
 10324     0838                     u6075:
 10325     0838  36B3               	lsrf	___xxtofl@arg+3,f
 10326     0839  0CB2               	rrf	___xxtofl@arg+2,f
 10327     083A  0CB1               	rrf	___xxtofl@arg+1,f
 10328     083B  0CB0               	rrf	___xxtofl@arg,f
 10329     083C  0B89               	decfsz	9,f
 10330     083D  2838               	goto	u6075
 10331     083E  282F               	goto	l4911
 10332     083F                     l4913:
 10333     083F  3001               	movlw	1
 10334     0840  00AA               	movwf	??___xxtofl
 10335     0841  082A               	movf	??___xxtofl,w
 10336     0842  07AF               	addwf	___xxtofl@exp,f
 10337     0843  3001               	movlw	1
 10338     0844  07B0               	addwf	___xxtofl@arg,f
 10339     0845  3000               	movlw	0
 10340     0846  3DB1               	addwfc	___xxtofl@arg+1,f
 10341     0847  3000               	movlw	0
 10342     0848  3DB2               	addwfc	___xxtofl@arg+2,f
 10343     0849  3000               	movlw	0
 10344     084A  3DB3               	addwfc	___xxtofl@arg+3,f
 10345     084B  3001               	movlw	1
 10346     084C                     u6095:
 10347     084C  36B3               	lsrf	___xxtofl@arg+3,f
 10348     084D  0CB2               	rrf	___xxtofl@arg+2,f
 10349     084E  0CB1               	rrf	___xxtofl@arg+1,f
 10350     084F  0CB0               	rrf	___xxtofl@arg,f
 10351     0850  0B89               	decfsz	9,f
 10352     0851  284C               	goto	u6095
 10353     0852                     l1013:
 10354     0852  30FF               	movlw	255
 10355     0853  0533               	andwf	___xxtofl@arg+3,w
 10356     0854  1903               	btfsc	3,2
 10357     0855  2864               	goto	l4921
 10358     0856  283F               	goto	l4913
 10359     0857                     l4923:
 10360     0857  3002               	movlw	2
 10361     0858  022F               	subwf	___xxtofl@exp,w
 10362     0859  1C03               	btfss	3,0
 10363     085A  2866               	goto	l1020
 10364     085B  3001               	movlw	1
 10365     085C  02AF               	subwf	___xxtofl@exp,f
 10366     085D  3001               	movlw	1
 10367     085E                     u6115:
 10368     085E  35B0               	lslf	___xxtofl@arg,f
 10369     085F  0DB1               	rlf	___xxtofl@arg+1,f
 10370     0860  0DB2               	rlf	___xxtofl@arg+2,f
 10371     0861  0DB3               	rlf	___xxtofl@arg+3,f
 10372     0862  0B89               	decfsz	9,f
 10373     0863  285E               	goto	u6115
 10374     0864                     l4921:
 10375     0864  1FB2               	btfss	___xxtofl@arg+2,7
 10376     0865  2857               	goto	l4923
 10377     0866                     l1020:
 10378     0866  182F               	btfsc	___xxtofl@exp,0
 10379     0867  2870               	goto	l1021
 10380     0868  30FF               	movlw	255
 10381     0869  05B0               	andwf	___xxtofl@arg,f
 10382     086A  30FF               	movlw	255
 10383     086B  05B1               	andwf	___xxtofl@arg+1,f
 10384     086C  307F               	movlw	127
 10385     086D  05B2               	andwf	___xxtofl@arg+2,f
 10386     086E  30FF               	movlw	255
 10387     086F  05B3               	andwf	___xxtofl@arg+3,f
 10388     0870                     l1021:
 10389     0870  1003               	clrc
 10390     0871  0CAF               	rrf	___xxtofl@exp,f
 10391     0872  082F               	movf	___xxtofl@exp,w
 10392     0873  00AA               	movwf	??___xxtofl
 10393     0874  01AB               	clrf	??___xxtofl+1
 10394     0875  01AC               	clrf	??___xxtofl+2
 10395     0876  01AD               	clrf	??___xxtofl+3
 10396     0877  3018               	movlw	24
 10397     0878                     u6155:
 10398     0878  35AA               	lslf	??___xxtofl,f
 10399     0879  0DAB               	rlf	??___xxtofl+1,f
 10400     087A  0DAC               	rlf	??___xxtofl+2,f
 10401     087B  0DAD               	rlf	??___xxtofl+3,f
 10402     087C  0B89               	decfsz	9,f
 10403     087D  2878               	goto	u6155
 10404     087E  082A               	movf	??___xxtofl,w
 10405     087F  04B0               	iorwf	___xxtofl@arg,f
 10406     0880  082B               	movf	??___xxtofl+1,w
 10407     0881  04B1               	iorwf	___xxtofl@arg+1,f
 10408     0882  082C               	movf	??___xxtofl+2,w
 10409     0883  04B2               	iorwf	___xxtofl@arg+2,f
 10410     0884  082D               	movf	??___xxtofl+3,w
 10411     0885  04B3               	iorwf	___xxtofl@arg+3,f
 10412     0886  082E               	movf	___xxtofl@sign,w
 10413     0887  1D03               	btfss	3,2
 10414     0888  1FA9               	btfss	___xxtofl@val+3,7
 10415     0889  288B               	goto	l4935
 10416     088A  17B3               	bsf	___xxtofl@arg+3,7
 10417     088B                     l4935:
 10418     088B  0833               	movf	___xxtofl@arg+3,w
 10419     088C  00A9               	movwf	?___xxtofl+3
 10420     088D  0832               	movf	___xxtofl@arg+2,w
 10421     088E  00A8               	movwf	?___xxtofl+2
 10422     088F  0831               	movf	___xxtofl@arg+1,w
 10423     0890  00A7               	movwf	?___xxtofl+1
 10424     0891  0830               	movf	___xxtofl@arg,w
 10425     0892  00A6               	movwf	?___xxtofl
 10426     0893  0008               	return
 10427     0894                     __end_of___xxtofl:
 10428                           
 10429                           	psect	text30
 10430     1CDC                     __ptext30:	
 10431 ;; *************** function _Lcd_Write_String *****************
 10432 ;; Defined at:
 10433 ;;		line 104 in file "lcd.c"
 10434 ;; Parameters:    Size  Location     Type
 10435 ;;  a               2    5[BANK0 ] PTR const unsigned char 
 10436 ;;		 -> STR_17(17), STR_16(15), STR_15(14), STR_14(15), 
 10437 ;;		 -> STR_13(9), STR_12(7), STR_11(9), STR_10(7), 
 10438 ;;		 -> STR_9(15), STR_8(16), STR_7(17), STR_6(2), 
 10439 ;;		 -> STR_4(2), buffer(20), STR_1(15), 
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;  i               2    8[BANK0 ] int 
 10442 ;; Return value:  Size  Location     Type
 10443 ;;                  1    wreg      void 
 10444 ;; Registers used:
 10445 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10446 ;; Tracked objects:
 10447 ;;		On entry : 0/0
 10448 ;;		On exit  : 0/0
 10449 ;;		Unchanged: 0/0
 10450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10451 ;;      Params:         0       2       0       0       0       0       0       0
 10452 ;;      Locals:         0       2       0       0       0       0       0       0
 10453 ;;      Temps:          0       1       0       0       0       0       0       0
 10454 ;;      Totals:         0       5       0       0       0       0       0       0
 10455 ;;Total ram usage:        5 bytes
 10456 ;; Hardware stack levels used: 1
 10457 ;; Hardware stack levels required when called: 6
 10458 ;; This function calls:
 10459 ;;		_Lcd_Write_Char
 10460 ;; This function is called by:
 10461 ;;		_main
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465     1CDC                     _Lcd_Write_String:	
 10466                           ;psect for function _Lcd_Write_String
 10467                           
 10468                           
 10469                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
 10470                           
 10471                           ;incstack = 0
 10472                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10473     1CDC  0020               	movlb	0	; select bank0
 10474     1CDD  01A8               	clrf	Lcd_Write_String@i
 10475     1CDE  01A9               	clrf	Lcd_Write_String@i+1
 10476     1CDF                     l4787:
 10477     1CDF  0825               	movf	Lcd_Write_String@a,w
 10478     1CE0  0728               	addwf	Lcd_Write_String@i,w
 10479     1CE1  0084               	movwf	4
 10480     1CE2  0826               	movf	Lcd_Write_String@a+1,w
 10481     1CE3  3D29               	addwfc	Lcd_Write_String@i+1,w
 10482     1CE4  0085               	movwf	5
 10483     1CE5  0012               	moviw fsr0++
 10484     1CE6  1903               	btfsc	3,2
 10485     1CE7  0008               	return
 10486                           
 10487                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
 10488     1CE8  0825               	movf	Lcd_Write_String@a,w
 10489     1CE9  0728               	addwf	Lcd_Write_String@i,w
 10490     1CEA  0084               	movwf	4
 10491     1CEB  0826               	movf	Lcd_Write_String@a+1,w
 10492     1CEC  3D29               	addwfc	Lcd_Write_String@i+1,w
 10493     1CED  0085               	movwf	5
 10494     1CEE  0800               	movf	0,w	;code access
 10495     1CEF  319D  25FE  319C   	fcall	_Lcd_Write_Char
 10496     1CF2  3001               	movlw	1
 10497     1CF3  0020               	movlb	0	; select bank0
 10498     1CF4  07A8               	addwf	Lcd_Write_String@i,f
 10499     1CF5  3000               	movlw	0
 10500     1CF6  3DA9               	addwfc	Lcd_Write_String@i+1,f
 10501     1CF7  2CDF               	goto	l4787
 10502     1CF8                     __end_of_Lcd_Write_String:
 10503                           
 10504                           	psect	text31
 10505     1DFE                     __ptext31:	
 10506 ;; *************** function _Lcd_Write_Char *****************
 10507 ;; Defined at:
 10508 ;;		line 88 in file "lcd.c"
 10509 ;; Parameters:    Size  Location     Type
 10510 ;;  a               1    wreg     unsigned char 
 10511 ;; Auto vars:     Size  Location     Type
 10512 ;;  a               1    4[BANK0 ] unsigned char 
 10513 ;;  y               1    3[BANK0 ] unsigned char 
 10514 ;;  temp            1    2[BANK0 ] unsigned char 
 10515 ;; Return value:  Size  Location     Type
 10516 ;;                  1    wreg      void 
 10517 ;; Registers used:
 10518 ;;		wreg, status,2, status,0, pclath, cstack
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10524 ;;      Params:         0       0       0       0       0       0       0       0
 10525 ;;      Locals:         0       3       0       0       0       0       0       0
 10526 ;;      Temps:          0       1       0       0       0       0       0       0
 10527 ;;      Totals:         0       4       0       0       0       0       0       0
 10528 ;;Total ram usage:        4 bytes
 10529 ;; Hardware stack levels used: 1
 10530 ;; Hardware stack levels required when called: 5
 10531 ;; This function calls:
 10532 ;;		_Lcd_Port
 10533 ;; This function is called by:
 10534 ;;		_Lcd_Write_String
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538     1DFE                     _Lcd_Write_Char:	
 10539                           ;psect for function _Lcd_Write_Char
 10540                           
 10541                           
 10542                           ;incstack = 0
 10543                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
 10544                           ;Lcd_Write_Char@a stored from wreg
 10545     1DFE  0020               	movlb	0	; select bank0
 10546     1DFF  00A4               	movwf	Lcd_Write_Char@a
 10547                           
 10548                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
 10549     1E00  0824               	movf	Lcd_Write_Char@a,w
 10550     1E01  390F               	andlw	15
 10551     1E02  00A2               	movwf	Lcd_Write_Char@temp
 10552                           
 10553                           ;lcd.c: 92:     y = a&0xF0;
 10554     1E03  0824               	movf	Lcd_Write_Char@a,w
 10555     1E04  39F0               	andlw	240
 10556     1E05  00A3               	movwf	Lcd_Write_Char@y
 10557                           
 10558                           ;lcd.c: 93:     LATCbits.LATC1 = 1;
 10559     1E06  0022               	movlb	2	; select bank2
 10560     1E07  148E               	bsf	14,1	;volatile
 10561                           
 10562                           ;lcd.c: 94:     Lcd_Port(y>>4);
 10563     1E08  0020               	movlb	0	; select bank0
 10564     1E09  0823               	movf	Lcd_Write_Char@y,w
 10565     1E0A  00A1               	movwf	??_Lcd_Write_Char
 10566     1E0B  3004               	movlw	4
 10567     1E0C                     u5665:
 10568     1E0C  36A1               	lsrf	??_Lcd_Write_Char,f
 10569     1E0D  0B89               	decfsz	9,f
 10570     1E0E  2E0C               	goto	u5665
 10571     1E0F  0821               	movf	??_Lcd_Write_Char,w
 10572     1E10  319D  2574  319D   	fcall	_Lcd_Port
 10573                           
 10574                           ;lcd.c: 95:     LATCbits.LATC0 = 1;
 10575     1E13  0022               	movlb	2	; select bank2
 10576     1E14  140E               	bsf	14,0	;volatile
 10577                           
 10578                           ;lcd.c: 96:     _delay((unsigned long)((40)*(4000000/4000000.0)));
 10579     1E15  300D               	movlw	13
 10580     1E16                     u6607:
 10581     1E16  0B89               	decfsz	9,f
 10582     1E17  2E16               	goto	u6607
 10583     1E18  0000               	nop
 10584                           
 10585                           ;lcd.c: 97:     LATCbits.LATC0 = 0;
 10586     1E19  0022               	movlb	2	; select bank2
 10587     1E1A  100E               	bcf	14,0	;volatile
 10588                           
 10589                           ;lcd.c: 98:     Lcd_Port(temp);
 10590     1E1B  0020               	movlb	0	; select bank0
 10591     1E1C  0822               	movf	Lcd_Write_Char@temp,w
 10592     1E1D  319D  2574  319D   	fcall	_Lcd_Port
 10593                           
 10594                           ;lcd.c: 99:     LATCbits.LATC0 = 1;
 10595     1E20  0022               	movlb	2	; select bank2
 10596     1E21  140E               	bsf	14,0	;volatile
 10597                           
 10598                           ;lcd.c: 100:     _delay((unsigned long)((40)*(4000000/4000000.0)));
 10599     1E22  300D               	movlw	13
 10600     1E23                     u6617:
 10601     1E23  0B89               	decfsz	9,f
 10602     1E24  2E23               	goto	u6617
 10603     1E25  0000               	nop
 10604                           
 10605                           ;lcd.c: 101:     LATCbits.LATC0 = 0;
 10606     1E26  0022               	movlb	2	; select bank2
 10607     1E27  100E               	bcf	14,0	;volatile
 10608     1E28  0008               	return
 10609     1E29                     __end_of_Lcd_Write_Char:
 10610                           
 10611                           	psect	text32
 10612     112B                     __ptext32:	
 10613 ;; *************** function _Lcd_Set_Cursor *****************
 10614 ;; Defined at:
 10615 ;;		line 26 in file "lcd.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;  a               1    wreg     unsigned char 
 10618 ;;  b               1    3[BANK0 ] unsigned char 
 10619 ;; Auto vars:     Size  Location     Type
 10620 ;;  a               1    5[BANK0 ] unsigned char 
 10621 ;;  temp            1    8[BANK0 ] unsigned char 
 10622 ;;  y               1    7[BANK0 ] unsigned char 
 10623 ;;  z               1    6[BANK0 ] unsigned char 
 10624 ;; Return value:  Size  Location     Type
 10625 ;;                  1    wreg      void 
 10626 ;; Registers used:
 10627 ;;		wreg, status,2, status,0, pclath, cstack
 10628 ;; Tracked objects:
 10629 ;;		On entry : 0/0
 10630 ;;		On exit  : 0/0
 10631 ;;		Unchanged: 0/0
 10632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10633 ;;      Params:         0       1       0       0       0       0       0       0
 10634 ;;      Locals:         0       4       0       0       0       0       0       0
 10635 ;;      Temps:          0       1       0       0       0       0       0       0
 10636 ;;      Totals:         0       6       0       0       0       0       0       0
 10637 ;;Total ram usage:        6 bytes
 10638 ;; Hardware stack levels used: 1
 10639 ;; Hardware stack levels required when called: 6
 10640 ;; This function calls:
 10641 ;;		_Lcd_Cmd
 10642 ;; This function is called by:
 10643 ;;		_main
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647     112B                     _Lcd_Set_Cursor:	
 10648                           ;psect for function _Lcd_Set_Cursor
 10649                           
 10650                           
 10651                           ;incstack = 0
 10652                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
 10653                           ;Lcd_Set_Cursor@a stored from wreg
 10654     112B  0020               	movlb	0	; select bank0
 10655     112C  00A5               	movwf	Lcd_Set_Cursor@a
 10656                           
 10657                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
 10658     112D  0325               	decf	Lcd_Set_Cursor@a,w
 10659     112E  1D03               	btfss	3,2
 10660     112F  2947               	goto	l4751
 10661                           
 10662                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
 10663     1130  0823               	movf	Lcd_Set_Cursor@b,w
 10664     1131  3E7F               	addlw	127
 10665     1132  00A8               	movwf	Lcd_Set_Cursor@temp
 10666                           
 10667                           ;lcd.c: 32:         z = temp>>4;
 10668     1133  0828               	movf	Lcd_Set_Cursor@temp,w
 10669     1134  00A4               	movwf	??_Lcd_Set_Cursor
 10670     1135  3004               	movlw	4
 10671     1136                     u5705:
 10672     1136  36A4               	lsrf	??_Lcd_Set_Cursor,f
 10673     1137  0B89               	decfsz	9,f
 10674     1138  2936               	goto	u5705
 10675     1139  0824               	movf	??_Lcd_Set_Cursor,w
 10676     113A  00A6               	movwf	Lcd_Set_Cursor@z
 10677                           
 10678                           ;lcd.c: 33:         y = temp & 0x0F;
 10679     113B  0828               	movf	Lcd_Set_Cursor@temp,w
 10680     113C  390F               	andlw	15
 10681     113D  00A7               	movwf	Lcd_Set_Cursor@y
 10682                           
 10683                           ;lcd.c: 34:         Lcd_Cmd(z);
 10684     113E  0826               	movf	Lcd_Set_Cursor@z,w
 10685     113F  319C  2479  3191   	fcall	_Lcd_Cmd
 10686                           
 10687                           ;lcd.c: 35:         Lcd_Cmd(y);
 10688     1142  0020               	movlb	0	; select bank0
 10689     1143  0827               	movf	Lcd_Set_Cursor@y,w
 10690     1144  319C  2479         	fcall	_Lcd_Cmd
 10691                           
 10692                           ;lcd.c: 36:     }
 10693     1146  0008               	return
 10694     1147                     l4751:
 10695     1147  3002               	movlw	2
 10696     1148  0625               	xorwf	Lcd_Set_Cursor@a,w
 10697     1149  1D03               	btfss	3,2
 10698     114A  2962               	goto	l4761
 10699                           
 10700                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
 10701     114B  0823               	movf	Lcd_Set_Cursor@b,w
 10702     114C  3EBF               	addlw	191
 10703     114D  00A8               	movwf	Lcd_Set_Cursor@temp
 10704                           
 10705                           ;lcd.c: 40:         z = temp>>4;
 10706     114E  0828               	movf	Lcd_Set_Cursor@temp,w
 10707     114F  00A4               	movwf	??_Lcd_Set_Cursor
 10708     1150  3004               	movlw	4
 10709     1151                     u5725:
 10710     1151  36A4               	lsrf	??_Lcd_Set_Cursor,f
 10711     1152  0B89               	decfsz	9,f
 10712     1153  2951               	goto	u5725
 10713     1154  0824               	movf	??_Lcd_Set_Cursor,w
 10714     1155  00A6               	movwf	Lcd_Set_Cursor@z
 10715                           
 10716                           ;lcd.c: 41:         y = temp & 0x0F;
 10717     1156  0828               	movf	Lcd_Set_Cursor@temp,w
 10718     1157  390F               	andlw	15
 10719     1158  00A7               	movwf	Lcd_Set_Cursor@y
 10720                           
 10721                           ;lcd.c: 42:         Lcd_Cmd(z);
 10722     1159  0826               	movf	Lcd_Set_Cursor@z,w
 10723     115A  319C  2479  3191   	fcall	_Lcd_Cmd
 10724                           
 10725                           ;lcd.c: 43:         Lcd_Cmd(y);
 10726     115D  0020               	movlb	0	; select bank0
 10727     115E  0827               	movf	Lcd_Set_Cursor@y,w
 10728     115F  319C  2479         	fcall	_Lcd_Cmd
 10729                           
 10730                           ;lcd.c: 44:     }
 10731     1161  0008               	return
 10732     1162                     l4761:
 10733     1162  3003               	movlw	3
 10734     1163  0625               	xorwf	Lcd_Set_Cursor@a,w
 10735     1164  1D03               	btfss	3,2
 10736     1165  297D               	goto	l4771
 10737                           
 10738                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x94 + b - 1;
 10739     1166  0823               	movf	Lcd_Set_Cursor@b,w
 10740     1167  3E93               	addlw	147
 10741     1168  00A8               	movwf	Lcd_Set_Cursor@temp
 10742                           
 10743                           ;lcd.c: 48:         z = temp>>4;
 10744     1169  0828               	movf	Lcd_Set_Cursor@temp,w
 10745     116A  00A4               	movwf	??_Lcd_Set_Cursor
 10746     116B  3004               	movlw	4
 10747     116C                     u5745:
 10748     116C  36A4               	lsrf	??_Lcd_Set_Cursor,f
 10749     116D  0B89               	decfsz	9,f
 10750     116E  296C               	goto	u5745
 10751     116F  0824               	movf	??_Lcd_Set_Cursor,w
 10752     1170  00A6               	movwf	Lcd_Set_Cursor@z
 10753                           
 10754                           ;lcd.c: 49:         y = temp & 0x0F;
 10755     1171  0828               	movf	Lcd_Set_Cursor@temp,w
 10756     1172  390F               	andlw	15
 10757     1173  00A7               	movwf	Lcd_Set_Cursor@y
 10758                           
 10759                           ;lcd.c: 50:         Lcd_Cmd(z);
 10760     1174  0826               	movf	Lcd_Set_Cursor@z,w
 10761     1175  319C  2479  3191   	fcall	_Lcd_Cmd
 10762                           
 10763                           ;lcd.c: 51:         Lcd_Cmd(y);
 10764     1178  0020               	movlb	0	; select bank0
 10765     1179  0827               	movf	Lcd_Set_Cursor@y,w
 10766     117A  319C  2479         	fcall	_Lcd_Cmd
 10767                           
 10768                           ;lcd.c: 52:     }
 10769     117C  0008               	return
 10770     117D                     l4771:
 10771     117D  3004               	movlw	4
 10772     117E  0625               	xorwf	Lcd_Set_Cursor@a,w
 10773     117F  1D03               	btfss	3,2
 10774     1180  0008               	return
 10775                           
 10776                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD4 + b - 1;
 10777     1181  0823               	movf	Lcd_Set_Cursor@b,w
 10778     1182  3ED3               	addlw	211
 10779     1183  00A8               	movwf	Lcd_Set_Cursor@temp
 10780                           
 10781                           ;lcd.c: 56:         z = temp>>4;
 10782     1184  0828               	movf	Lcd_Set_Cursor@temp,w
 10783     1185  00A4               	movwf	??_Lcd_Set_Cursor
 10784     1186  3004               	movlw	4
 10785     1187                     u5765:
 10786     1187  36A4               	lsrf	??_Lcd_Set_Cursor,f
 10787     1188  0B89               	decfsz	9,f
 10788     1189  2987               	goto	u5765
 10789     118A  0824               	movf	??_Lcd_Set_Cursor,w
 10790     118B  00A6               	movwf	Lcd_Set_Cursor@z
 10791                           
 10792                           ;lcd.c: 57:         y = temp & 0x0F;
 10793     118C  0828               	movf	Lcd_Set_Cursor@temp,w
 10794     118D  390F               	andlw	15
 10795     118E  00A7               	movwf	Lcd_Set_Cursor@y
 10796                           
 10797                           ;lcd.c: 58:         Lcd_Cmd(z);
 10798     118F  0826               	movf	Lcd_Set_Cursor@z,w
 10799     1190  319C  2479  3191   	fcall	_Lcd_Cmd
 10800                           
 10801                           ;lcd.c: 59:         Lcd_Cmd(y);
 10802     1193  0020               	movlb	0	; select bank0
 10803     1194  0827               	movf	Lcd_Set_Cursor@y,w
 10804     1195  319C  2479         	fcall	_Lcd_Cmd
 10805     1197  0008               	return
 10806     1198                     __end_of_Lcd_Set_Cursor:
 10807                           
 10808                           	psect	text33
 10809     1F5E                     __ptext33:	
 10810 ;; *************** function _Lcd_Init *****************
 10811 ;; Defined at:
 10812 ;;		line 63 in file "lcd.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;		None
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;		None
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  1    wreg      void 
 10819 ;; Registers used:
 10820 ;;		wreg, status,2, status,0, pclath, cstack
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10826 ;;      Params:         0       0       0       0       0       0       0       0
 10827 ;;      Locals:         0       0       0       0       0       0       0       0
 10828 ;;      Temps:          0       1       0       0       0       0       0       0
 10829 ;;      Totals:         0       1       0       0       0       0       0       0
 10830 ;;Total ram usage:        1 bytes
 10831 ;; Hardware stack levels used: 1
 10832 ;; Hardware stack levels required when called: 7
 10833 ;; This function calls:
 10834 ;;		_Lcd_Clear
 10835 ;;		_Lcd_Cmd
 10836 ;;		_Lcd_Port
 10837 ;; This function is called by:
 10838 ;;		_main
 10839 ;; This function uses a non-reentrant model
 10840 ;;
 10841                           
 10842     1F5E                     _Lcd_Init:	
 10843                           ;psect for function _Lcd_Init
 10844                           
 10845                           
 10846                           ;lcd.c: 65:  TRISCbits.TRISC1 = 0;
 10847                           
 10848                           ;incstack = 0
 10849                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
 10850     1F5E  0021               	movlb	1	; select bank1
 10851     1F5F  108E               	bcf	14,1	;volatile
 10852                           
 10853                           ;lcd.c: 66:  TRISCbits.TRISC0 = 0;
 10854     1F60  100E               	bcf	14,0	;volatile
 10855                           
 10856                           ;lcd.c: 67:  TRISDbits.TRISD4 = 0;
 10857     1F61  120F               	bcf	15,4	;volatile
 10858                           
 10859                           ;lcd.c: 68:  TRISDbits.TRISD5 = 0;
 10860     1F62  128F               	bcf	15,5	;volatile
 10861                           
 10862                           ;lcd.c: 69:  TRISDbits.TRISD6 = 0;
 10863     1F63  130F               	bcf	15,6	;volatile
 10864                           
 10865                           ;lcd.c: 70:  TRISDbits.TRISD7 = 0;
 10866     1F64  138F               	bcf	15,7	;volatile
 10867                           
 10868                           ;lcd.c: 71:     Lcd_Port(0x00);
 10869     1F65  3000               	movlw	0
 10870     1F66  319D  2574  319F   	fcall	_Lcd_Port
 10871                           
 10872                           ;lcd.c: 72:     _delay((unsigned long)((20)*(4000000/4000.0)));
 10873     1F69  301A               	movlw	26
 10874     1F6A  0020               	movlb	0	; select bank0
 10875     1F6B  00A3               	movwf	??_Lcd_Init
 10876     1F6C  30F8               	movlw	248
 10877     1F6D                     u6627:
 10878     1F6D  0B89               	decfsz	9,f
 10879     1F6E  2F6D               	goto	u6627
 10880     1F6F  0BA3               	decfsz	??_Lcd_Init,f
 10881     1F70  2F6D               	goto	u6627
 10882     1F71  0000               	nop
 10883                           
 10884                           ;lcd.c: 73:     Lcd_Cmd(0x03);
 10885     1F72  3003               	movlw	3
 10886     1F73  319C  2479  319F   	fcall	_Lcd_Cmd
 10887                           
 10888                           ;lcd.c: 74:     _delay((unsigned long)((5)*(4000000/4000.0)));
 10889     1F76  3007               	movlw	7
 10890     1F77  0020               	movlb	0	; select bank0
 10891     1F78  00A3               	movwf	??_Lcd_Init
 10892     1F79  307D               	movlw	125
 10893     1F7A                     u6637:
 10894     1F7A  0B89               	decfsz	9,f
 10895     1F7B  2F7A               	goto	u6637
 10896     1F7C  0BA3               	decfsz	??_Lcd_Init,f
 10897     1F7D  2F7A               	goto	u6637
 10898                           
 10899                           ;lcd.c: 75:     Lcd_Cmd(0x03);
 10900     1F7E  3003               	movlw	3
 10901     1F7F  319C  2479  319F   	fcall	_Lcd_Cmd
 10902                           
 10903                           ;lcd.c: 76:     _delay((unsigned long)((11)*(4000000/4000.0)));
 10904     1F82  300F               	movlw	15
 10905     1F83  0020               	movlb	0	; select bank0
 10906     1F84  00A3               	movwf	??_Lcd_Init
 10907     1F85  3047               	movlw	71
 10908     1F86                     u6647:
 10909     1F86  0B89               	decfsz	9,f
 10910     1F87  2F86               	goto	u6647
 10911     1F88  0BA3               	decfsz	??_Lcd_Init,f
 10912     1F89  2F86               	goto	u6647
 10913     1F8A  3200               	nop2
 10914                           
 10915                           ;lcd.c: 77:     Lcd_Cmd(0x03);
 10916     1F8B  3003               	movlw	3
 10917     1F8C  319C  2479  319F   	fcall	_Lcd_Cmd
 10918                           
 10919                           ;lcd.c: 78:     Lcd_Cmd(0x02);
 10920     1F8F  3002               	movlw	2
 10921     1F90  319C  2479  319F   	fcall	_Lcd_Cmd
 10922                           
 10923                           ;lcd.c: 79:     Lcd_Cmd(0x02);
 10924     1F93  3002               	movlw	2
 10925     1F94  319C  2479  319F   	fcall	_Lcd_Cmd
 10926                           
 10927                           ;lcd.c: 80:     Lcd_Cmd(0x08);
 10928     1F97  3008               	movlw	8
 10929     1F98  319C  2479  319F   	fcall	_Lcd_Cmd
 10930                           
 10931                           ;lcd.c: 81:     Lcd_Cmd(0x00);
 10932     1F9B  3000               	movlw	0
 10933     1F9C  319C  2479  319F   	fcall	_Lcd_Cmd
 10934                           
 10935                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
 10936     1F9F  300C               	movlw	12
 10937     1FA0  319C  2479  319F   	fcall	_Lcd_Cmd
 10938                           
 10939                           ;lcd.c: 83:     Lcd_Cmd(0x00);
 10940     1FA3  3000               	movlw	0
 10941     1FA4  319C  2479  319F   	fcall	_Lcd_Cmd
 10942                           
 10943                           ;lcd.c: 84:     Lcd_Cmd(0x06);
 10944     1FA7  3006               	movlw	6
 10945     1FA8  319C  2479  319F   	fcall	_Lcd_Cmd
 10946                           
 10947                           ;lcd.c: 85:     Lcd_Clear();
 10948     1FAB  319C  241F         	fcall	_Lcd_Clear
 10949     1FAD  0008               	return
 10950     1FAE                     __end_of_Lcd_Init:
 10951                           
 10952                           	psect	text34
 10953     1C1F                     __ptext34:	
 10954 ;; *************** function _Lcd_Clear *****************
 10955 ;; Defined at:
 10956 ;;		line 20 in file "lcd.c"
 10957 ;; Parameters:    Size  Location     Type
 10958 ;;		None
 10959 ;; Auto vars:     Size  Location     Type
 10960 ;;		None
 10961 ;; Return value:  Size  Location     Type
 10962 ;;                  1    wreg      void 
 10963 ;; Registers used:
 10964 ;;		wreg, status,2, status,0, pclath, cstack
 10965 ;; Tracked objects:
 10966 ;;		On entry : 0/0
 10967 ;;		On exit  : 0/0
 10968 ;;		Unchanged: 0/0
 10969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10970 ;;      Params:         0       0       0       0       0       0       0       0
 10971 ;;      Locals:         0       0       0       0       0       0       0       0
 10972 ;;      Temps:          0       0       0       0       0       0       0       0
 10973 ;;      Totals:         0       0       0       0       0       0       0       0
 10974 ;;Total ram usage:        0 bytes
 10975 ;; Hardware stack levels used: 1
 10976 ;; Hardware stack levels required when called: 6
 10977 ;; This function calls:
 10978 ;;		_Lcd_Cmd
 10979 ;; This function is called by:
 10980 ;;		_main
 10981 ;;		_Lcd_Init
 10982 ;; This function uses a non-reentrant model
 10983 ;;
 10984                           
 10985     1C1F                     _Lcd_Clear:	
 10986                           ;psect for function _Lcd_Clear
 10987                           
 10988                           
 10989                           ;lcd.c: 22:     Lcd_Cmd(0);
 10990                           
 10991                           ;incstack = 0
 10992                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
 10993     1C1F  3000               	movlw	0
 10994     1C20  319C  2479  319C   	fcall	_Lcd_Cmd
 10995                           
 10996                           ;lcd.c: 23:     Lcd_Cmd(1);
 10997     1C23  3001               	movlw	1
 10998     1C24  319C  2479         	fcall	_Lcd_Cmd
 10999     1C26  0008               	return
 11000     1C27                     __end_of_Lcd_Clear:
 11001                           
 11002                           	psect	text35
 11003     1C79                     __ptext35:	
 11004 ;; *************** function _Lcd_Cmd *****************
 11005 ;; Defined at:
 11006 ;;		line 11 in file "lcd.c"
 11007 ;; Parameters:    Size  Location     Type
 11008 ;;  a               1    wreg     unsigned char 
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;  a               1    2[BANK0 ] unsigned char 
 11011 ;; Return value:  Size  Location     Type
 11012 ;;                  1    wreg      void 
 11013 ;; Registers used:
 11014 ;;		wreg, status,2, status,0, pclath, cstack
 11015 ;; Tracked objects:
 11016 ;;		On entry : 0/0
 11017 ;;		On exit  : 0/0
 11018 ;;		Unchanged: 0/0
 11019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11020 ;;      Params:         0       0       0       0       0       0       0       0
 11021 ;;      Locals:         0       1       0       0       0       0       0       0
 11022 ;;      Temps:          0       1       0       0       0       0       0       0
 11023 ;;      Totals:         0       2       0       0       0       0       0       0
 11024 ;;Total ram usage:        2 bytes
 11025 ;; Hardware stack levels used: 1
 11026 ;; Hardware stack levels required when called: 5
 11027 ;; This function calls:
 11028 ;;		_Lcd_Port
 11029 ;; This function is called by:
 11030 ;;		_Lcd_Clear
 11031 ;;		_Lcd_Set_Cursor
 11032 ;;		_Lcd_Init
 11033 ;;		_Lcd_Shift_Right
 11034 ;;		_Lcd_Shift_Left
 11035 ;;		_Lcd_Blink
 11036 ;;		_Lcd_NoBlink
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040     1C79                     _Lcd_Cmd:	
 11041                           ;psect for function _Lcd_Cmd
 11042                           
 11043                           
 11044                           ;incstack = 0
 11045                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
 11046                           ;Lcd_Cmd@a stored from wreg
 11047     1C79  0020               	movlb	0	; select bank0
 11048     1C7A  00A2               	movwf	Lcd_Cmd@a
 11049                           
 11050                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATCbits.LATC1 = 0;
 11051     1C7B  0022               	movlb	2	; select bank2
 11052     1C7C  108E               	bcf	14,1	;volatile
 11053                           
 11054                           ;lcd.c: 14:     Lcd_Port(a);
 11055     1C7D  0020               	movlb	0	; select bank0
 11056     1C7E  0822               	movf	Lcd_Cmd@a,w
 11057     1C7F  319D  2574  319C   	fcall	_Lcd_Port
 11058                           
 11059                           ;lcd.c: 15:     LATCbits.LATC0 = 1;
 11060     1C82  0022               	movlb	2	; select bank2
 11061     1C83  140E               	bsf	14,0	;volatile
 11062                           
 11063                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
 11064     1C84  3006               	movlw	6
 11065     1C85  0020               	movlb	0	; select bank0
 11066     1C86  00A1               	movwf	??_Lcd_Cmd
 11067     1C87  3030               	movlw	48
 11068     1C88                     u6657:
 11069     1C88  0B89               	decfsz	9,f
 11070     1C89  2C88               	goto	u6657
 11071     1C8A  0BA1               	decfsz	??_Lcd_Cmd,f
 11072     1C8B  2C88               	goto	u6657
 11073     1C8C  0000               	nop
 11074                           
 11075                           ;lcd.c: 17:     LATCbits.LATC0 = 0;
 11076     1C8D  0022               	movlb	2	; select bank2
 11077     1C8E  100E               	bcf	14,0	;volatile
 11078     1C8F  0008               	return
 11079     1C90                     __end_of_Lcd_Cmd:
 11080                           
 11081                           	psect	text36
 11082     1D74                     __ptext36:	
 11083 ;; *************** function _Lcd_Port *****************
 11084 ;; Defined at:
 11085 ;;		line 3 in file "lcd.c"
 11086 ;; Parameters:    Size  Location     Type
 11087 ;;  a               1    wreg     unsigned char 
 11088 ;; Auto vars:     Size  Location     Type
 11089 ;;  a               1    0[BANK0 ] unsigned char 
 11090 ;; Return value:  Size  Location     Type
 11091 ;;                  1    wreg      void 
 11092 ;; Registers used:
 11093 ;;		wreg
 11094 ;; Tracked objects:
 11095 ;;		On entry : 0/0
 11096 ;;		On exit  : 0/0
 11097 ;;		Unchanged: 0/0
 11098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11099 ;;      Params:         0       0       0       0       0       0       0       0
 11100 ;;      Locals:         0       1       0       0       0       0       0       0
 11101 ;;      Temps:          0       0       0       0       0       0       0       0
 11102 ;;      Totals:         0       1       0       0       0       0       0       0
 11103 ;;Total ram usage:        1 bytes
 11104 ;; Hardware stack levels used: 1
 11105 ;; Hardware stack levels required when called: 4
 11106 ;; This function calls:
 11107 ;;		Nothing
 11108 ;; This function is called by:
 11109 ;;		_Lcd_Cmd
 11110 ;;		_Lcd_Init
 11111 ;;		_Lcd_Write_Char
 11112 ;; This function uses a non-reentrant model
 11113 ;;
 11114                           
 11115     1D74                     _Lcd_Port:	
 11116                           ;psect for function _Lcd_Port
 11117                           
 11118                           
 11119                           ;incstack = 0
 11120                           ; Regs used in _Lcd_Port: [wreg]
 11121                           ;Lcd_Port@a stored from wreg
 11122     1D74  0020               	movlb	0	; select bank0
 11123     1D75  00A0               	movwf	Lcd_Port@a
 11124                           
 11125                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LATD4 = 1
      +                          ) : (LATDbits.LATD4 = 0);
 11126     1D76  1C20               	btfss	Lcd_Port@a,0
 11127     1D77  2D7B               	goto	l361
 11128     1D78  0022               	movlb	2	; select bank2
 11129     1D79  160F               	bsf	15,4	;volatile
 11130     1D7A  2D7D               	goto	l4229
 11131     1D7B                     l361:
 11132     1D7B  0022               	movlb	2	; select bank2
 11133     1D7C  120F               	bcf	15,4	;volatile
 11134     1D7D                     l4229:
 11135                           
 11136                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LATD5 = 1) : (LATDbits.LATD5 = 0);
 11137     1D7D  0020               	movlb	0	; select bank0
 11138     1D7E  1CA0               	btfss	Lcd_Port@a,1
 11139     1D7F  2D83               	goto	l365
 11140     1D80  0022               	movlb	2	; select bank2
 11141     1D81  168F               	bsf	15,5	;volatile
 11142     1D82  2D85               	goto	l4233
 11143     1D83                     l365:
 11144     1D83  0022               	movlb	2	; select bank2
 11145     1D84  128F               	bcf	15,5	;volatile
 11146     1D85                     l4233:
 11147                           
 11148                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LATD6 = 1) : (LATDbits.LATD6 = 0);
 11149     1D85  0020               	movlb	0	; select bank0
 11150     1D86  1D20               	btfss	Lcd_Port@a,2
 11151     1D87  2D8B               	goto	l369
 11152     1D88  0022               	movlb	2	; select bank2
 11153     1D89  170F               	bsf	15,6	;volatile
 11154     1D8A  2D8D               	goto	l4237
 11155     1D8B                     l369:
 11156     1D8B  0022               	movlb	2	; select bank2
 11157     1D8C  130F               	bcf	15,6	;volatile
 11158     1D8D                     l4237:
 11159                           
 11160                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LATD7 = 1) : (LATDbits.LATD7 = 0);
 11161     1D8D  0020               	movlb	0	; select bank0
 11162     1D8E  1DA0               	btfss	Lcd_Port@a,3
 11163     1D8F  2D93               	goto	l373
 11164     1D90  0022               	movlb	2	; select bank2
 11165     1D91  178F               	bsf	15,7	;volatile
 11166     1D92  0008               	return
 11167     1D93                     l373:
 11168     1D93  0022               	movlb	2	; select bank2
 11169     1D94  138F               	bcf	15,7	;volatile
 11170     1D95  0008               	return
 11171     1D96                     __end_of_Lcd_Port:
 11172                           
 11173                           	psect	text37
 11174     1001                     __ptext37:	
 11175 ;; *************** function _ADC_StartConversion *****************
 11176 ;; Defined at:
 11177 ;;		line 93 in file "mcc_generated_files/adc.c"
 11178 ;; Parameters:    Size  Location     Type
 11179 ;;		None
 11180 ;; Auto vars:     Size  Location     Type
 11181 ;;		None
 11182 ;; Return value:  Size  Location     Type
 11183 ;;                  1    wreg      void 
 11184 ;; Registers used:
 11185 ;;		None
 11186 ;; Tracked objects:
 11187 ;;		On entry : 0/0
 11188 ;;		On exit  : 0/0
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11191 ;;      Params:         0       0       0       0       0       0       0       0
 11192 ;;      Locals:         0       0       0       0       0       0       0       0
 11193 ;;      Temps:          0       0       0       0       0       0       0       0
 11194 ;;      Totals:         0       0       0       0       0       0       0       0
 11195 ;;Total ram usage:        0 bytes
 11196 ;; Hardware stack levels used: 1
 11197 ;; Hardware stack levels required when called: 4
 11198 ;; This function calls:
 11199 ;;		Nothing
 11200 ;; This function is called by:
 11201 ;;		_main
 11202 ;; This function uses a non-reentrant model
 11203 ;;
 11204                           
 11205     1001                     _ADC_StartConversion:	
 11206                           ;psect for function _ADC_StartConversion
 11207                           
 11208                           
 11209                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
 11210                           
 11211                           ;incstack = 0
 11212                           ; Regs used in _ADC_StartConversion: []
 11213     1001  0021               	movlb	1	; select bank1
 11214     1002  149D               	bsf	29,1	;volatile
 11215     1003  0008               	return
 11216     1004                     __end_of_ADC_StartConversion:
 11217                           
 11218                           	psect	text38
 11219     1C08                     __ptext38:	
 11220 ;; *************** function _ADC_IsConversionDone *****************
 11221 ;; Defined at:
 11222 ;;		line 100 in file "mcc_generated_files/adc.c"
 11223 ;; Parameters:    Size  Location     Type
 11224 ;;		None
 11225 ;; Auto vars:     Size  Location     Type
 11226 ;;		None
 11227 ;; Return value:  Size  Location     Type
 11228 ;;                  1    wreg      _Bool 
 11229 ;; Registers used:
 11230 ;;		wreg, status,0
 11231 ;; Tracked objects:
 11232 ;;		On entry : 0/0
 11233 ;;		On exit  : 0/0
 11234 ;;		Unchanged: 0/0
 11235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11236 ;;      Params:         0       0       0       0       0       0       0       0
 11237 ;;      Locals:         0       0       0       0       0       0       0       0
 11238 ;;      Temps:          0       0       0       0       0       0       0       0
 11239 ;;      Totals:         0       0       0       0       0       0       0       0
 11240 ;;Total ram usage:        0 bytes
 11241 ;; Hardware stack levels used: 1
 11242 ;; Hardware stack levels required when called: 4
 11243 ;; This function calls:
 11244 ;;		Nothing
 11245 ;; This function is called by:
 11246 ;;		_main
 11247 ;; This function uses a non-reentrant model
 11248 ;;
 11249                           
 11250     1C08                     _ADC_IsConversionDone:	
 11251                           ;psect for function _ADC_IsConversionDone
 11252                           
 11253                           
 11254                           ;mcc_generated_files/adc.c: 103:    return ((_Bool)(!ADCON0bits.GO_nDONE));
 11255                           
 11256                           ;incstack = 0
 11257                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
 11258     1C08  1003               	clrc
 11259     1C09  0021               	movlb	1	; select bank1
 11260     1C0A  1C9D               	btfss	29,1	;volatile
 11261     1C0B  1403               	setc
 11262     1C0C  3000               	movlw	0
 11263     1C0D  3D09               	addwfc	9,w
 11264     1C0E  0008               	return
 11265     1C0F                     __end_of_ADC_IsConversionDone:
 11266                           
 11267                           	psect	text39
 11268     1C17                     __ptext39:	
 11269 ;; *************** function _ADC_Initialize *****************
 11270 ;; Defined at:
 11271 ;;		line 67 in file "mcc_generated_files/adc.c"
 11272 ;; Parameters:    Size  Location     Type
 11273 ;;		None
 11274 ;; Auto vars:     Size  Location     Type
 11275 ;;		None
 11276 ;; Return value:  Size  Location     Type
 11277 ;;                  1    wreg      void 
 11278 ;; Registers used:
 11279 ;;		wreg, status,2
 11280 ;; Tracked objects:
 11281 ;;		On entry : 0/0
 11282 ;;		On exit  : 0/0
 11283 ;;		Unchanged: 0/0
 11284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11285 ;;      Params:         0       0       0       0       0       0       0       0
 11286 ;;      Locals:         0       0       0       0       0       0       0       0
 11287 ;;      Temps:          0       0       0       0       0       0       0       0
 11288 ;;      Totals:         0       0       0       0       0       0       0       0
 11289 ;;Total ram usage:        0 bytes
 11290 ;; Hardware stack levels used: 1
 11291 ;; Hardware stack levels required when called: 4
 11292 ;; This function calls:
 11293 ;;		Nothing
 11294 ;; This function is called by:
 11295 ;;		_main
 11296 ;;		_SYSTEM_Initialize
 11297 ;; This function uses a non-reentrant model
 11298 ;;
 11299                           
 11300     1C17                     _ADC_Initialize:	
 11301                           ;psect for function _ADC_Initialize
 11302                           
 11303                           
 11304                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0xC0;
 11305                           
 11306                           ;incstack = 0
 11307                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 11308     1C17  30C0               	movlw	192
 11309     1C18  0021               	movlb	1	; select bank1
 11310     1C19  009E               	movwf	30	;volatile
 11311                           
 11312                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
 11313     1C1A  019B               	clrf	27	;volatile
 11314                           
 11315                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
 11316     1C1B  019C               	clrf	28	;volatile
 11317                           
 11318                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x01;
 11319     1C1C  3001               	movlw	1
 11320     1C1D  009D               	movwf	29	;volatile
 11321     1C1E  0008               	return
 11322     1C1F                     __end_of_ADC_Initialize:
 11323                           
 11324                           	psect	text40
 11325     1C30                     __ptext40:	
 11326 ;; *************** function _ADC_GetConversionResult *****************
 11327 ;; Defined at:
 11328 ;;		line 106 in file "mcc_generated_files/adc.c"
 11329 ;; Parameters:    Size  Location     Type
 11330 ;;		None
 11331 ;; Auto vars:     Size  Location     Type
 11332 ;;		None
 11333 ;; Return value:  Size  Location     Type
 11334 ;;                  2    0[BANK0 ] unsigned short 
 11335 ;; Registers used:
 11336 ;;		wreg
 11337 ;; Tracked objects:
 11338 ;;		On entry : 0/0
 11339 ;;		On exit  : 0/0
 11340 ;;		Unchanged: 0/0
 11341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11342 ;;      Params:         0       2       0       0       0       0       0       0
 11343 ;;      Locals:         0       0       0       0       0       0       0       0
 11344 ;;      Temps:          0       0       0       0       0       0       0       0
 11345 ;;      Totals:         0       2       0       0       0       0       0       0
 11346 ;;Total ram usage:        2 bytes
 11347 ;; Hardware stack levels used: 1
 11348 ;; Hardware stack levels required when called: 4
 11349 ;; This function calls:
 11350 ;;		Nothing
 11351 ;; This function is called by:
 11352 ;;		_main
 11353 ;; This function uses a non-reentrant model
 11354 ;;
 11355                           
 11356     1C30                     _ADC_GetConversionResult:	
 11357                           ;psect for function _ADC_GetConversionResult
 11358                           
 11359                           
 11360                           ;mcc_generated_files/adc.c: 109:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 11361                           
 11362                           ;incstack = 0
 11363                           ; Regs used in _ADC_GetConversionResult: [wreg]
 11364     1C30  0021               	movlb	1	; select bank1
 11365     1C31  081C               	movf	28,w	;volatile
 11366     1C32  0020               	movlb	0	; select bank0
 11367     1C33  00A1               	movwf	?_ADC_GetConversionResult+1
 11368     1C34  0021               	movlb	1	; select bank1
 11369     1C35  081B               	movf	27,w	;volatile
 11370     1C36  0020               	movlb	0	; select bank0
 11371     1C37  00A0               	movwf	?_ADC_GetConversionResult
 11372     1C38  0008               	return
 11373     1C39                     __end_of_ADC_GetConversionResult:
 11374                           
 11375                           	psect	intentry
 11376     0004                     __pintentry:	
 11377 ;; *************** function _IOC *****************
 11378 ;; Defined at:
 11379 ;;		line 171 in file "main.c"
 11380 ;; Parameters:    Size  Location     Type
 11381 ;;		None
 11382 ;; Auto vars:     Size  Location     Type
 11383 ;;		None
 11384 ;; Return value:  Size  Location     Type
 11385 ;;                  1    wreg      void 
 11386 ;; Registers used:
 11387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11388 ;; Tracked objects:
 11389 ;;		On entry : 0/0
 11390 ;;		On exit  : 0/0
 11391 ;;		Unchanged: 0/0
 11392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11393 ;;      Params:         0       0       0       0       0       0       0       0
 11394 ;;      Locals:         0       0       0       0       0       0       0       0
 11395 ;;      Temps:          2       0       0       0       0       0       0       0
 11396 ;;      Totals:         2       0       0       0       0       0       0       0
 11397 ;;Total ram usage:        2 bytes
 11398 ;; Hardware stack levels used: 1
 11399 ;; Hardware stack levels required when called: 3
 11400 ;; This function calls:
 11401 ;;		_Keypad_Get_Char
 11402 ;;		_Keypad_Init
 11403 ;;		_strcmp
 11404 ;;		i1_Lcd_Clear
 11405 ;;		i1_Lcd_Set_Cursor
 11406 ;;		i1_Lcd_Write_Char
 11407 ;;		i1_Lcd_Write_String
 11408 ;; This function is called by:
 11409 ;;		Interrupt level 1
 11410 ;; This function uses a non-reentrant model
 11411 ;;
 11412                           
 11413     0004                     _IOC:
 11414                           
 11415                           ;incstack = 0
 11416     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11417                           
 11418                           ; Regs used in _IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11419     0005  3180               	pagesel	$
 11420                           
 11421                           ;main.c: 172:     Keypad_Init();
 11422     0006  319C  2427  3180   	fcall	_Keypad_Init
 11423                           
 11424                           ;main.c: 173:     Lcd_Clear();
 11425     0009  319C  240F  3180   	fcall	i1_Lcd_Clear
 11426                           
 11427                           ;main.c: 174:     LATAbits.LATA3 = 0;
 11428     000C  0022               	movlb	2	; select bank2
 11429     000D  118C               	bcf	12,3	;volatile
 11430                           
 11431                           ;main.c: 175:     _delay((unsigned long)((500)*(4000000/4000.0)));
 11432     000E  3003               	movlw	3
 11433     000F  00FB               	movwf	??_IOC+1
 11434     0010  308A               	movlw	138
 11435     0011  00FA               	movwf	??_IOC
 11436     0012  3056               	movlw	86
 11437     0013                     u666_27:
 11438     0013  0B89               	decfsz	9,f
 11439     0014  2813               	goto	u666_27
 11440     0015  0BFA               	decfsz	??_IOC,f
 11441     0016  2813               	goto	u666_27
 11442     0017  0BFB               	decfsz	??_IOC+1,f
 11443     0018  2813               	goto	u666_27
 11444                           
 11445                           ;main.c: 177:     while(IOCBF != 0) {
 11446     0019  2A14               	goto	i1l5347
 11447     001A                     i1l5147:
 11448                           
 11449                           ;main.c: 180:                 Lcd_Set_Cursor(1,1);
 11450     001A  01F3               	clrf	i1Lcd_Set_Cursor@b
 11451     001B  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11452     001C  3001               	movlw	1
 11453     001D  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11454                           
 11455                           ;main.c: 181:                 Lcd_Write_String("1:INGRESAR CLAVE");
 11456     0020  3011               	movlw	low (STR_7| (0+32768))
 11457     0021  00F5               	movwf	i1Lcd_Write_String@a
 11458     0022  3098               	movlw	high (STR_7| (0+32768))
 11459     0023  00F6               	movwf	i1Lcd_Write_String@a+1
 11460     0024  319C  24A8  3180   	fcall	i1_Lcd_Write_String
 11461                           
 11462                           ;main.c: 182:                 Lcd_Set_Cursor(2,1);
 11463     0027  01F3               	clrf	i1Lcd_Set_Cursor@b
 11464     0028  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11465     0029  3002               	movlw	2
 11466     002A  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11467                           
 11468                           ;main.c: 183:                 Lcd_Write_String("2:CAMBIAR CLAVE");
 11469     002D  3022               	movlw	low (STR_8| (0+32768))
 11470     002E  00F5               	movwf	i1Lcd_Write_String@a
 11471     002F  3098               	movlw	high (STR_8| (0+32768))
 11472     0030  00F6               	movwf	i1Lcd_Write_String@a+1
 11473     0031  319C  24A8  3180   	fcall	i1_Lcd_Write_String
 11474                           
 11475                           ;main.c: 185:                 tecla = Keypad_Get_Char();
 11476     0034  3186  26C4  3180   	fcall	_Keypad_Get_Char
 11477     0037  00FD               	movwf	_tecla
 11478                           
 11479                           ;main.c: 186:                 if(tecla != 0) {
 11480     0038  087D               	movf	_tecla,w
 11481     0039  1D03               	btfss	3,2
 11482     003A  2848               	goto	i1l5167
 11483     003B  2A14               	goto	i1l5347
 11484     003C                     i1l5159:
 11485                           
 11486                           ;main.c: 189:                             estado = 1;
 11487     003C  3001               	movlw	1
 11488     003D  283F               	goto	L10
 11489     003E                     i1l5161:	
 11490                           ;main.c: 190:                             break;
 11491                           
 11492                           
 11493                           ;main.c: 192:                             estado = 2;
 11494     003E  3002               	movlw	2
 11495     003F                     L10:
 11496     003F  0022               	movlb	2	; select bank2
 11497     0040  00B0               	movwf	_estado^(0+256)
 11498     0041  3000               	movlw	0
 11499     0042  00B1               	movwf	(_estado^(0+256)+1)
 11500                           
 11501                           ;main.c: 193:                             break;
 11502     0043  2858               	goto	i1l5169
 11503     0044                     i1l5163:
 11504                           
 11505                           ;main.c: 195:                             estado = 0;
 11506     0044  0022               	movlb	2	; select bank2
 11507     0045  01B0               	clrf	_estado^(0+256)
 11508     0046  01B1               	clrf	(_estado+1)^(0+256)
 11509                           
 11510                           ;main.c: 196:                             break;
 11511     0047  2858               	goto	i1l5169
 11512     0048                     i1l5167:
 11513     0048  087D               	movf	_tecla,w
 11514     0049  00FA               	movwf	??_IOC
 11515     004A  01FB               	clrf	??_IOC+1
 11516                           
 11517                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11518                           ; Switch size 1, requested type "simple"
 11519                           ; Number of cases is 1, Range of values is 0 to 0
 11520                           ; switch strategies available:
 11521                           ; Name         Instructions Cycles
 11522                           ; simple_byte            4     3 (average)
 11523                           ; direct_byte            8     6 (fixed)
 11524                           ; jumptable            260     6 (fixed)
 11525                           ;	Chosen strategy is simple_byte
 11526     004B  087B               	movf	??_IOC+1,w
 11527     004C  3A00               	xorlw	0	; case 0
 11528     004D  1903               	skipnz
 11529     004E  2850               	goto	i1l5541
 11530     004F  2844               	goto	i1l5163
 11531     0050                     i1l5541:
 11532                           
 11533                           ; Switch size 1, requested type "simple"
 11534                           ; Number of cases is 2, Range of values is 49 to 50
 11535                           ; switch strategies available:
 11536                           ; Name         Instructions Cycles
 11537                           ; simple_byte            7     4 (average)
 11538                           ; direct_byte           13     9 (fixed)
 11539                           ; jumptable            263     9 (fixed)
 11540                           ;	Chosen strategy is simple_byte
 11541     0050  087A               	movf	??_IOC,w
 11542     0051  3A31               	xorlw	49	; case 49
 11543     0052  1903               	skipnz
 11544     0053  283C               	goto	i1l5159
 11545     0054  3A03               	xorlw	3	; case 50
 11546     0055  1903               	skipnz
 11547     0056  283E               	goto	i1l5161
 11548     0057  2844               	goto	i1l5163
 11549     0058                     i1l5169:
 11550                           
 11551                           ;main.c: 198:                     Lcd_Clear();
 11552     0058  319C  240F  3180   	fcall	i1_Lcd_Clear
 11553     005B  2A14               	goto	i1l5347
 11554     005C                     i1l5171:
 11555                           
 11556                           ;main.c: 202:                 Lcd_Set_Cursor(1,1);
 11557     005C  01F3               	clrf	i1Lcd_Set_Cursor@b
 11558     005D  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11559     005E  3001               	movlw	1
 11560     005F  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11561                           
 11562                           ;main.c: 203:                 Lcd_Write_String("INGRESAR CLAVE");
 11563     0062  3013               	movlw	low ((STR_7+2)| (0+32768))
 11564     0063  00F5               	movwf	i1Lcd_Write_String@a
 11565     0064  3098               	movlw	high ((STR_7+2)| (0+32768))
 11566     0065  00F6               	movwf	i1Lcd_Write_String@a+1
 11567     0066  319C  24A8  3180   	fcall	i1_Lcd_Write_String
 11568     0069                     i1l5187:	
 11569                           ;main.c: 205:                 while(cont_key < 4)
 11570                           
 11571                           
 11572                           ;main.c: 205:                 while(cont_key < 4)
 11573     0069  0022               	movlb	2	; select bank2
 11574     006A  0833               	movf	(_cont_key+1)^(0+256),w
 11575     006B  3A80               	xorlw	128
 11576     006C  00FA               	movwf	??_IOC
 11577     006D  3080               	movlw	128
 11578     006E  027A               	subwf	??_IOC,w
 11579     006F  1D03               	skipz
 11580     0070  2873               	goto	u650_25
 11581     0071  3004               	movlw	4
 11582     0072  0232               	subwf	_cont_key^(0+256),w
 11583     0073                     u650_25:
 11584     0073  1803               	btfsc	3,0
 11585     0074  2895               	goto	i1l5189
 11586                           
 11587                           ;main.c: 206:                 {;main.c: 207:                     tecla = Keypad_Get_Char
      +                          ();
 11588     0075  3186  26C4  3180   	fcall	_Keypad_Get_Char
 11589     0078  00FD               	movwf	_tecla
 11590                           
 11591                           ;main.c: 208:                     if(tecla != 0)
 11592     0079  087D               	movf	_tecla,w
 11593     007A  1903               	btfsc	3,2
 11594     007B  2869               	goto	i1l5187
 11595                           
 11596                           ;main.c: 209:                     {;main.c: 210:                         clave[cont_key]
      +                           = tecla;
 11597     007C  0022               	movlb	2	; select bank2
 11598     007D  0832               	movf	_cont_key^(0+256),w
 11599     007E  3E38               	addlw	(low (_clave| (0+256)))& (0+255)
 11600     007F  0086               	movwf	6
 11601     0080  3001               	movlw	1	; select bank2/3
 11602     0081  0087               	movwf	7
 11603     0082  087D               	movf	_tecla,w
 11604     0083  0081               	movwf	1
 11605                           
 11606                           ;main.c: 211:                         Lcd_Set_Cursor(2,7+cont_key);
 11607     0084  0832               	movf	_cont_key^(0+256),w
 11608     0085  3E07               	addlw	7
 11609     0086  00F3               	movwf	i1Lcd_Set_Cursor@b
 11610     0087  3002               	movlw	2
 11611     0088  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11612                           
 11613                           ;main.c: 212:                         Lcd_Write_Char('*');
 11614     008B  302A               	movlw	42
 11615     008C  3187  27D8  3180   	fcall	i1_Lcd_Write_Char
 11616                           
 11617                           ;main.c: 213:                         cont_key++;
 11618     008F  3001               	movlw	1
 11619     0090  0022               	movlb	2	; select bank2
 11620     0091  07B2               	addwf	_cont_key^(0+256),f
 11621     0092  3000               	movlw	0
 11622     0093  3DB3               	addwfc	(_cont_key+1)^(0+256),f
 11623     0094  2869               	goto	i1l5187
 11624     0095                     i1l5189:
 11625                           
 11626                           ;main.c: 219:                 _delay((unsigned long)((200)*(4000000/4000.0)));
 11627     0095  3002               	movlw	2
 11628     0096  00FB               	movwf	??_IOC+1
 11629     0097  3004               	movlw	4
 11630     0098  00FA               	movwf	??_IOC
 11631     0099  30BA               	movlw	186
 11632     009A                     u667_27:
 11633     009A  0B89               	decfsz	9,f
 11634     009B  289A               	goto	u667_27
 11635     009C  0BFA               	decfsz	??_IOC,f
 11636     009D  289A               	goto	u667_27
 11637     009E  0BFB               	decfsz	??_IOC+1,f
 11638     009F  289A               	goto	u667_27
 11639     00A0  3200               	nop2
 11640                           
 11641                           ;main.c: 220:                 WPUB = 0b11111110;
 11642     00A1  30FE               	movlw	254
 11643     00A2  0024               	movlb	4	; select bank4
 11644     00A3  008D               	movwf	13	;volatile
 11645                           
 11646                           ;main.c: 221:                 Lcd_Clear();
 11647     00A4  319C  240F  3180   	fcall	i1_Lcd_Clear
 11648                           
 11649                           ;main.c: 222:                 LATAbits.LATA3 = 1;
 11650     00A7  0022               	movlb	2	; select bank2
 11651     00A8  158C               	bsf	12,3	;volatile
 11652                           
 11653                           ;main.c: 224:                 if(!strcmp(clave, clave_enter))
 11654     00A9  305E               	movlw	(low (_clave_enter| (0+256)))& (0+255)
 11655     00AA  00F0               	movwf	strcmp@r
 11656     00AB  3038               	movlw	(low (_clave| (0+256)))& (0+255)
 11657     00AC  319E  2654  3180   	fcall	_strcmp
 11658     00AF  0870               	movf	?_strcmp,w
 11659     00B0  0471               	iorwf	?_strcmp+1,w
 11660     00B1  1D03               	btfss	3,2
 11661     00B2  28DC               	goto	i1l5209
 11662                           
 11663                           ;main.c: 225:                 {;main.c: 226:                     Lcd_Set_Cursor(1,6);
 11664     00B3  3006               	movlw	6
 11665     00B4  00F3               	movwf	i1Lcd_Set_Cursor@b
 11666     00B5  3001               	movlw	1
 11667     00B6  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11668                           
 11669                           ;main.c: 227:                     Lcd_Write_String("ACCESO");
 11670     00B9  3078               	movlw	low (STR_10| (0+32768))
 11671     00BA  00F5               	movwf	i1Lcd_Write_String@a
 11672     00BB  3098               	movlw	high (STR_10| (0+32768))
 11673     00BC  00F6               	movwf	i1Lcd_Write_String@a+1
 11674     00BD  319C  24A8  3180   	fcall	i1_Lcd_Write_String
 11675                           
 11676                           ;main.c: 228:                     Lcd_Set_Cursor(2,5);
 11677     00C0  3005               	movlw	5
 11678     00C1  00F3               	movwf	i1Lcd_Set_Cursor@b
 11679     00C2  3002               	movlw	2
 11680     00C3  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11681                           
 11682                           ;main.c: 229:                     Lcd_Write_String("APROBADO");
 11683     00C6  305F               	movlw	low (STR_11| (0+32768))
 11684     00C7  00F5               	movwf	i1Lcd_Write_String@a
 11685     00C8  3098               	movlw	high (STR_11| (0+32768))
 11686     00C9  00F6               	movwf	i1Lcd_Write_String@a+1
 11687     00CA  319C  24A8  3180   	fcall	i1_Lcd_Write_String
 11688                           
 11689                           ;main.c: 230:                     LATAbits.LATA2 = 0;
 11690     00CD  0022               	movlb	2	; select bank2
 11691     00CE  110C               	bcf	12,2	;volatile
 11692                           
 11693                           ;main.c: 231:                     LATCbits.LATC5 = 0;
 11694     00CF  128E               	bcf	14,5	;volatile
 11695                           
 11696                           ;main.c: 232:                     _delay((unsigned long)((15000)*(4000000/4000.0)));
 11697     00D0  304D               	movlw	77
 11698     00D1  00FB               	movwf	??_IOC+1
 11699     00D2  3019               	movlw	25
 11700     00D3  00FA               	movwf	??_IOC
 11701     00D4  3050               	movlw	80
 11702     00D5                     u668_27:
 11703     00D5  0B89               	decfsz	9,f
 11704     00D6  28D5               	goto	u668_27
 11705     00D7  0BFA               	decfsz	??_IOC,f
 11706     00D8  28D5               	goto	u668_27
 11707     00D9  0BFB               	decfsz	??_IOC+1,f
 11708     00DA  28D5               	goto	u668_27
 11709                           
 11710                           ;main.c: 233:                 }
 11711     00DB  2906               	goto	i1l5223
 11712     00DC                     i1l5209:
 11713                           
 11714                           ;main.c: 235:                 {;main.c: 236:                     Lcd_Set_Cursor(1,6);
 11715     00DC  3006               	movlw	6
 11716     00DD  00F3               	movwf	i1Lcd_Set_Cursor@b
 11717     00DE  3001               	movlw	1
 11718     00DF  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11719                           
 11720                           ;main.c: 237:                     Lcd_Write_String("ACCESO");
 11721     00E2  3078               	movlw	low (STR_10| (0+32768))
 11722     00E3  00F5               	movwf	i1Lcd_Write_String@a
 11723     00E4  3098               	movlw	high (STR_10| (0+32768))
 11724     00E5  00F6               	movwf	i1Lcd_Write_String@a+1
 11725     00E6  319C  24A8  3180   	fcall	i1_Lcd_Write_String
 11726                           
 11727                           ;main.c: 238:                     Lcd_Set_Cursor(2,5);
 11728     00E9  3005               	movlw	5
 11729     00EA  00F3               	movwf	i1Lcd_Set_Cursor@b
 11730     00EB  3002               	movlw	2
 11731     00EC  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11732                           
 11733                           ;main.c: 239:                     Lcd_Write_String("DENEGADO");
 11734     00EF  3068               	movlw	low (STR_13| (0+32768))
 11735     00F0  00F5               	movwf	i1Lcd_Write_String@a
 11736     00F1  3098               	movlw	high (STR_13| (0+32768))
 11737     00F2  00F6               	movwf	i1Lcd_Write_String@a+1
 11738     00F3  319C  24A8  3180   	fcall	i1_Lcd_Write_String
 11739                           
 11740                           ;main.c: 240:                     LATAbits.LATA1 = 0;
 11741     00F6  0022               	movlb	2	; select bank2
 11742     00F7  108C               	bcf	12,1	;volatile
 11743                           
 11744                           ;main.c: 241:                     LATCbits.LATC2 = 1;
 11745     00F8  150E               	bsf	14,2	;volatile
 11746                           
 11747                           ;main.c: 242:                     LATCbits.LATC5 = 1;
 11748     00F9  168E               	bsf	14,5	;volatile
 11749                           
 11750                           ;main.c: 243:                     _delay((unsigned long)((5000)*(4000000/4000.0)));
 11751     00FA  301A               	movlw	26
 11752     00FB  00FB               	movwf	??_IOC+1
 11753     00FC  305E               	movlw	94
 11754     00FD  00FA               	movwf	??_IOC
 11755     00FE  306E               	movlw	110
 11756     00FF                     u669_27:
 11757     00FF  0B89               	decfsz	9,f
 11758     0100  28FF               	goto	u669_27
 11759     0101  0BFA               	decfsz	??_IOC,f
 11760     0102  28FF               	goto	u669_27
 11761     0103  0BFB               	decfsz	??_IOC+1,f
 11762     0104  28FF               	goto	u669_27
 11763     0105  3200               	nop2
 11764     0106                     i1l5223:
 11765                           
 11766                           ;main.c: 245:                 cont_key = 0;
 11767     0106  0022               	movlb	2	; select bank2
 11768     0107  01B2               	clrf	_cont_key^(0+256)
 11769     0108  01B3               	clrf	(_cont_key+1)^(0+256)
 11770                           
 11771                           ;main.c: 246:                 estado = 0;
 11772     0109  01B0               	clrf	_estado^(0+256)
 11773     010A  01B1               	clrf	(_estado+1)^(0+256)
 11774                           
 11775                           ;main.c: 247:                 Lcd_Clear();
 11776     010B  319C  240F  3180   	fcall	i1_Lcd_Clear
 11777                           
 11778                           ;main.c: 248:                 LATAbits.LATA2 = 1;
 11779     010E  0022               	movlb	2	; select bank2
 11780     010F  150C               	bsf	12,2	;volatile
 11781                           
 11782                           ;main.c: 249:                 LATAbits.LATA1 = 1;
 11783     0110  148C               	bsf	12,1	;volatile
 11784                           
 11785                           ;main.c: 250:                 LATCbits.LATC2 = 0;
 11786     0111  110E               	bcf	14,2	;volatile
 11787                           
 11788                           ;main.c: 251:                 LATCbits.LATC5 = 1;
 11789     0112  168E               	bsf	14,5	;volatile
 11790                           
 11791                           ;main.c: 254:                 LATBbits.LATB1 = 0;
 11792     0113  108D               	bcf	13,1	;volatile
 11793                           
 11794                           ;main.c: 255:                 LATBbits.LATB2 = 0;
 11795     0114  110D               	bcf	13,2	;volatile
 11796                           
 11797                           ;main.c: 256:                 LATBbits.LATB3 = 0;
 11798     0115  118D               	bcf	13,3	;volatile
 11799                           
 11800                           ;main.c: 259:                 WPUB = 0b00001110;
 11801     0116  300E               	movlw	14
 11802     0117  0024               	movlb	4	; select bank4
 11803     0118  008D               	movwf	13	;volatile
 11804     0119                     i1l5245:
 11805                           
 11806                           ;main.c: 261:                 IOCBF = 0;
 11807     0119  0027               	movlb	7	; select bank7
 11808     011A  0196               	clrf	22	;volatile
 11809                           
 11810                           ;main.c: 262:                 break;
 11811     011B  2A14               	goto	i1l5347
 11812     011C                     i1l5247:
 11813                           
 11814                           ;main.c: 264:                 Lcd_Set_Cursor(1,1);
 11815     011C  01F3               	clrf	i1Lcd_Set_Cursor@b
 11816     011D  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11817     011E  3001               	movlw	1
 11818     011F  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11819                           
 11820                           ;main.c: 265:                 Lcd_Write_String("INGRESAR CLAVE");
 11821     0122  3013               	movlw	low ((STR_7+2)| (0+32768))
 11822     0123  00F5               	movwf	i1Lcd_Write_String@a
 11823     0124  3098               	movlw	high ((STR_7+2)| (0+32768))
 11824     0125  00F6               	movwf	i1Lcd_Write_String@a+1
 11825     0126  319C  24A8  3180   	fcall	i1_Lcd_Write_String
 11826     0129                     i1l5263:	
 11827                           ;main.c: 267:                 while(cont_key < 4)
 11828                           
 11829                           
 11830                           ;main.c: 267:                 while(cont_key < 4)
 11831     0129  0022               	movlb	2	; select bank2
 11832     012A  0833               	movf	(_cont_key+1)^(0+256),w
 11833     012B  3A80               	xorlw	128
 11834     012C  00FA               	movwf	??_IOC
 11835     012D  3080               	movlw	128
 11836     012E  027A               	subwf	??_IOC,w
 11837     012F  1D03               	skipz
 11838     0130  2933               	goto	u653_25
 11839     0131  3004               	movlw	4
 11840     0132  0232               	subwf	_cont_key^(0+256),w
 11841     0133                     u653_25:
 11842     0133  1803               	btfsc	3,0
 11843     0134  2955               	goto	i1l5265
 11844                           
 11845                           ;main.c: 268:                 {;main.c: 269:                     tecla = Keypad_Get_Char
      +                          ();
 11846     0135  3186  26C4  3180   	fcall	_Keypad_Get_Char
 11847     0138  00FD               	movwf	_tecla
 11848                           
 11849                           ;main.c: 270:                     if(tecla != 0)
 11850     0139  087D               	movf	_tecla,w
 11851     013A  1903               	btfsc	3,2
 11852     013B  2929               	goto	i1l5263
 11853                           
 11854                           ;main.c: 271:                     {;main.c: 272:                         clave[cont_key]
      +                           = tecla;
 11855     013C  0022               	movlb	2	; select bank2
 11856     013D  0832               	movf	_cont_key^(0+256),w
 11857     013E  3E38               	addlw	(low (_clave| (0+256)))& (0+255)
 11858     013F  0086               	movwf	6
 11859     0140  3001               	movlw	1	; select bank2/3
 11860     0141  0087               	movwf	7
 11861     0142  087D               	movf	_tecla,w
 11862     0143  0081               	movwf	1
 11863                           
 11864                           ;main.c: 273:                         Lcd_Set_Cursor(2,7+cont_key);
 11865     0144  0832               	movf	_cont_key^(0+256),w
 11866     0145  3E07               	addlw	7
 11867     0146  00F3               	movwf	i1Lcd_Set_Cursor@b
 11868     0147  3002               	movlw	2
 11869     0148  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11870                           
 11871                           ;main.c: 274:                         Lcd_Write_Char('*');
 11872     014B  302A               	movlw	42
 11873     014C  3187  27D8  3180   	fcall	i1_Lcd_Write_Char
 11874                           
 11875                           ;main.c: 275:                         cont_key++;
 11876     014F  3001               	movlw	1
 11877     0150  0022               	movlb	2	; select bank2
 11878     0151  07B2               	addwf	_cont_key^(0+256),f
 11879     0152  3000               	movlw	0
 11880     0153  3DB3               	addwfc	(_cont_key+1)^(0+256),f
 11881     0154  2929               	goto	i1l5263
 11882     0155                     i1l5265:
 11883                           
 11884                           ;main.c: 278:                 _delay((unsigned long)((200)*(4000000/4000.0)));
 11885     0155  3002               	movlw	2
 11886     0156  00FB               	movwf	??_IOC+1
 11887     0157  3004               	movlw	4
 11888     0158  00FA               	movwf	??_IOC
 11889     0159  30BA               	movlw	186
 11890     015A                     u670_27:
 11891     015A  0B89               	decfsz	9,f
 11892     015B  295A               	goto	u670_27
 11893     015C  0BFA               	decfsz	??_IOC,f
 11894     015D  295A               	goto	u670_27
 11895     015E  0BFB               	decfsz	??_IOC+1,f
 11896     015F  295A               	goto	u670_27
 11897     0160  3200               	nop2
 11898                           
 11899                           ;main.c: 279:                 WPUB = 0b11111110;
 11900     0161  30FE               	movlw	254
 11901     0162  0024               	movlb	4	; select bank4
 11902     0163  008D               	movwf	13	;volatile
 11903                           
 11904                           ;main.c: 280:                 Lcd_Clear();
 11905     0164  319C  240F  3180   	fcall	i1_Lcd_Clear
 11906                           
 11907                           ;main.c: 282:                 if(!strcmp(clave, clave_enter))
 11908     0167  305E               	movlw	(low (_clave_enter| (0+256)))& (0+255)
 11909     0168  00F0               	movwf	strcmp@r
 11910     0169  3038               	movlw	(low (_clave| (0+256)))& (0+255)
 11911     016A  319E  2654  3180   	fcall	_strcmp
 11912     016D  0870               	movf	?_strcmp,w
 11913     016E  0471               	iorwf	?_strcmp+1,w
 11914     016F  1D03               	btfss	3,2
 11915     0170  29D2               	goto	i1l5307
 11916                           
 11917                           ;main.c: 283:                 {;main.c: 284:                     Lcd_Set_Cursor(1,1);
 11918     0171  01F3               	clrf	i1Lcd_Set_Cursor@b
 11919     0172  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11920     0173  3001               	movlw	1
 11921     0174  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11922                           
 11923                           ;main.c: 285:                     Lcd_Write_String("CAMBIAR CLAVE");
 11924     0177  3024               	movlw	low ((STR_8+2)| (0+32768))
 11925     0178  00F5               	movwf	i1Lcd_Write_String@a
 11926     0179  3098               	movlw	high ((STR_8+2)| (0+32768))
 11927     017A  00F6               	movwf	i1Lcd_Write_String@a+1
 11928     017B  319C  24A8  3180   	fcall	i1_Lcd_Write_String
 11929                           
 11930                           ;main.c: 286:                     cont_key = 0;
 11931     017E  0022               	movlb	2	; select bank2
 11932     017F  01B2               	clrf	_cont_key^(0+256)
 11933     0180  01B3               	clrf	(_cont_key+1)^(0+256)
 11934                           
 11935                           ;main.c: 288:                     WPUB = 0b00001110;
 11936     0181  300E               	movlw	14
 11937     0182  0024               	movlb	4	; select bank4
 11938     0183  008D               	movwf	13	;volatile
 11939     0184                     i1l5291:	
 11940                           ;main.c: 290:                     while(cont_key < 4) {
 11941                           
 11942                           
 11943                           ;main.c: 290:                     while(cont_key < 4) {
 11944     0184  0022               	movlb	2	; select bank2
 11945     0185  0833               	movf	(_cont_key+1)^(0+256),w
 11946     0186  3A80               	xorlw	128
 11947     0187  00FA               	movwf	??_IOC
 11948     0188  3080               	movlw	128
 11949     0189  027A               	subwf	??_IOC,w
 11950     018A  1D03               	skipz
 11951     018B  298E               	goto	u656_25
 11952     018C  3004               	movlw	4
 11953     018D  0232               	subwf	_cont_key^(0+256),w
 11954     018E                     u656_25:
 11955     018E  1803               	btfsc	3,0
 11956     018F  29B0               	goto	i1l5293
 11957                           
 11958                           ;main.c: 291:                         tecla = Keypad_Get_Char();
 11959     0190  3186  26C4  3180   	fcall	_Keypad_Get_Char
 11960     0193  00FD               	movwf	_tecla
 11961                           
 11962                           ;main.c: 292:                         if (tecla != 0) {
 11963     0194  087D               	movf	_tecla,w
 11964     0195  1903               	btfsc	3,2
 11965     0196  2984               	goto	i1l5291
 11966                           
 11967                           ;main.c: 293:                             clave_enter[cont_key] = tecla;
 11968     0197  0022               	movlb	2	; select bank2
 11969     0198  0832               	movf	_cont_key^(0+256),w
 11970     0199  3E5E               	addlw	(low (_clave_enter| (0+256)))& (0+255)
 11971     019A  0086               	movwf	6
 11972     019B  3001               	movlw	1	; select bank2/3
 11973     019C  0087               	movwf	7
 11974     019D  087D               	movf	_tecla,w
 11975     019E  0081               	movwf	1
 11976                           
 11977                           ;main.c: 294:                             Lcd_Set_Cursor(2,7+cont_key);
 11978     019F  0832               	movf	_cont_key^(0+256),w
 11979     01A0  3E07               	addlw	7
 11980     01A1  00F3               	movwf	i1Lcd_Set_Cursor@b
 11981     01A2  3002               	movlw	2
 11982     01A3  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 11983                           
 11984                           ;main.c: 295:                             Lcd_Write_Char('*');
 11985     01A6  302A               	movlw	42
 11986     01A7  3187  27D8  3180   	fcall	i1_Lcd_Write_Char
 11987                           
 11988                           ;main.c: 296:                             cont_key++;
 11989     01AA  3001               	movlw	1
 11990     01AB  0022               	movlb	2	; select bank2
 11991     01AC  07B2               	addwf	_cont_key^(0+256),f
 11992     01AD  3000               	movlw	0
 11993     01AE  3DB3               	addwfc	(_cont_key+1)^(0+256),f
 11994     01AF  2984               	goto	i1l5291
 11995     01B0                     i1l5293:
 11996                           
 11997                           ;main.c: 299:                     _delay((unsigned long)((200)*(4000000/4000.0)));
 11998     01B0  3002               	movlw	2
 11999     01B1  00FB               	movwf	??_IOC+1
 12000     01B2  3004               	movlw	4
 12001     01B3  00FA               	movwf	??_IOC
 12002     01B4  30BA               	movlw	186
 12003     01B5                     u671_27:
 12004     01B5  0B89               	decfsz	9,f
 12005     01B6  29B5               	goto	u671_27
 12006     01B7  0BFA               	decfsz	??_IOC,f
 12007     01B8  29B5               	goto	u671_27
 12008     01B9  0BFB               	decfsz	??_IOC+1,f
 12009     01BA  29B5               	goto	u671_27
 12010     01BB  3200               	nop2
 12011                           
 12012                           ;main.c: 300:                     WPUB = 0b11111110;
 12013     01BC  30FE               	movlw	254
 12014     01BD  0024               	movlb	4	; select bank4
 12015     01BE  008D               	movwf	13	;volatile
 12016                           
 12017                           ;main.c: 301:                     Lcd_Clear();
 12018     01BF  319C  240F  3180   	fcall	i1_Lcd_Clear
 12019                           
 12020                           ;main.c: 303:                     Lcd_Set_Cursor(1,1);
 12021     01C2  01F3               	clrf	i1Lcd_Set_Cursor@b
 12022     01C3  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 12023     01C4  3001               	movlw	1
 12024     01C5  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 12025                           
 12026                           ;main.c: 304:                     Lcd_Write_String("CLAVE CAMBIADA");
 12027     01C8  3041               	movlw	low (STR_16| (0+32768))
 12028     01C9  00F5               	movwf	i1Lcd_Write_String@a
 12029     01CA  3098               	movlw	high (STR_16| (0+32768))
 12030     01CB  00F6               	movwf	i1Lcd_Write_String@a+1
 12031     01CC  319C  24A8  3180   	fcall	i1_Lcd_Write_String
 12032                           
 12033                           ;main.c: 305:                     LATAbits.LATA2 = 0;
 12034     01CF  0022               	movlb	2	; select bank2
 12035     01D0  110C               	bcf	12,2	;volatile
 12036     01D1  29E2               	goto	L11
 12037     01D2                     i1l5307:	
 12038                           ;main.c: 308:                 } else {
 12039                           
 12040                           ;main.c: 306:                     LATAbits.LATA3 = 1;
 12041                           
 12042                           
 12043                           ;main.c: 309:                     Lcd_Set_Cursor(1,1);
 12044     01D2  01F3               	clrf	i1Lcd_Set_Cursor@b
 12045     01D3  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 12046     01D4  3001               	movlw	1
 12047     01D5  3190  20C3  3180   	fcall	i1_Lcd_Set_Cursor
 12048                           
 12049                           ;main.c: 310:                     Lcd_Write_String("CLAVE INCORRECTA");
 12050     01D8  3000               	movlw	low (STR_17| (0+32768))
 12051     01D9  00F5               	movwf	i1Lcd_Write_String@a
 12052     01DA  3098               	movlw	high (STR_17| (0+32768))
 12053     01DB  00F6               	movwf	i1Lcd_Write_String@a+1
 12054     01DC  319C  24A8  3180   	fcall	i1_Lcd_Write_String
 12055                           
 12056                           ;main.c: 311:                     LATCbits.LATC2 = 1;
 12057     01DF  0022               	movlb	2	; select bank2
 12058     01E0  150E               	bsf	14,2	;volatile
 12059                           
 12060                           ;main.c: 312:                     LATAbits.LATA1 = 0;
 12061     01E1  108C               	bcf	12,1	;volatile
 12062     01E2                     L11:
 12063                           
 12064                           ;main.c: 313:                     LATAbits.LATA3 = 1;
 12065     01E2  158C               	bsf	12,3	;volatile
 12066                           
 12067                           ;main.c: 307:                     _delay((unsigned long)((3000)*(4000000/4000.0)));
 12068     01E3  3010               	movlw	16
 12069     01E4  00FB               	movwf	??_IOC+1
 12070     01E5  3039               	movlw	57
 12071     01E6  00FA               	movwf	??_IOC
 12072     01E7  300E               	movlw	14
 12073     01E8                     u672_27:
 12074     01E8  0B89               	decfsz	9,f
 12075     01E9  29E8               	goto	u672_27
 12076     01EA  0BFA               	decfsz	??_IOC,f
 12077     01EB  29E8               	goto	u672_27
 12078     01EC  0BFB               	decfsz	??_IOC+1,f
 12079     01ED  29E8               	goto	u672_27
 12080                           
 12081                           ;main.c: 316:                 cont_key = 0;
 12082     01EE  0022               	movlb	2	; select bank2
 12083     01EF  01B2               	clrf	_cont_key^(0+256)
 12084     01F0  01B3               	clrf	(_cont_key+1)^(0+256)
 12085                           
 12086                           ;main.c: 317:                 estado = 0;
 12087     01F1  01B0               	clrf	_estado^(0+256)
 12088     01F2  01B1               	clrf	(_estado+1)^(0+256)
 12089                           
 12090                           ;main.c: 318:                 Lcd_Clear();
 12091     01F3  319C  240F  3180   	fcall	i1_Lcd_Clear
 12092                           
 12093                           ;main.c: 320:                 LATBbits.LATB1 = 0;
 12094     01F6  0022               	movlb	2	; select bank2
 12095     01F7  108D               	bcf	13,1	;volatile
 12096                           
 12097                           ;main.c: 321:                 LATBbits.LATB2 = 0;
 12098     01F8  110D               	bcf	13,2	;volatile
 12099                           
 12100                           ;main.c: 322:                 LATBbits.LATB3 = 0;
 12101     01F9  118D               	bcf	13,3	;volatile
 12102                           
 12103                           ;main.c: 324:                 WPUB = 0b00001110;
 12104     01FA  300E               	movlw	14
 12105     01FB  0024               	movlb	4	; select bank4
 12106     01FC  008D               	movwf	13	;volatile
 12107                           
 12108                           ;main.c: 325:                 LATAbits.LATA3 = 1;
 12109     01FD  0022               	movlb	2	; select bank2
 12110     01FE  158C               	bsf	12,3	;volatile
 12111                           
 12112                           ;main.c: 326:                 LATAbits.LATA1 = 1;
 12113     01FF  148C               	bsf	12,1	;volatile
 12114                           
 12115                           ;main.c: 327:                 LATAbits.LATA2 = 1;
 12116     0200  150C               	bsf	12,2	;volatile
 12117                           
 12118                           ;main.c: 328:                 LATCbits.LATC2 = 0;
 12119     0201  110E               	bcf	14,2	;volatile
 12120     0202  2919               	goto	i1l5245
 12121     0203                     i1l5345:
 12122                           
 12123                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12124                           ; Switch size 1, requested type "simple"
 12125                           ; Number of cases is 1, Range of values is 0 to 0
 12126                           ; switch strategies available:
 12127                           ; Name         Instructions Cycles
 12128                           ; simple_byte            4     3 (average)
 12129                           ; direct_byte            8     6 (fixed)
 12130                           ; jumptable            260     6 (fixed)
 12131                           ;	Chosen strategy is simple_byte
 12132     0203  0022               	movlb	2	; select bank2
 12133     0204  0831               	movf	(_estado+1)^(0+256),w
 12134     0205  3A00               	xorlw	0	; case 0
 12135     0206  1903               	skipnz
 12136     0207  2A09               	goto	i1l5543
 12137     0208  2A14               	goto	i1l5347
 12138     0209                     i1l5543:
 12139                           
 12140                           ; Switch size 1, requested type "simple"
 12141                           ; Number of cases is 3, Range of values is 0 to 2
 12142                           ; switch strategies available:
 12143                           ; Name         Instructions Cycles
 12144                           ; simple_byte           10     6 (average)
 12145                           ; direct_byte           12     6 (fixed)
 12146                           ; jumptable            260     6 (fixed)
 12147                           ;	Chosen strategy is simple_byte
 12148     0209  0830               	movf	_estado^(0+256),w
 12149     020A  3A00               	xorlw	0	; case 0
 12150     020B  1903               	skipnz
 12151     020C  281A               	goto	i1l5147
 12152     020D  3A01               	xorlw	1	; case 1
 12153     020E  1903               	skipnz
 12154     020F  285C               	goto	i1l5171
 12155     0210  3A03               	xorlw	3	; case 2
 12156     0211  1903               	skipnz
 12157     0212  291C               	goto	i1l5247
 12158     0213  2A14               	goto	i1l5347
 12159     0214                     i1l5347:
 12160                           
 12161                           ;main.c: 177:     while(IOCBF != 0) {
 12162     0214  0027               	movlb	7	; select bank7
 12163     0215  0816               	movf	22,w	;volatile
 12164     0216  1D03               	btfss	3,2
 12165     0217  2A03               	goto	i1l5345
 12166                           
 12167                           ;main.c: 334:     LATAbits.LATA3 = 1;
 12168     0218  0022               	movlb	2	; select bank2
 12169     0219  158C               	bsf	12,3	;volatile
 12170                           
 12171                           ;main.c: 335:     INTCONbits.IOCIF = 0;
 12172     021A  100B               	bcf	11,0	;volatile
 12173     021B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12174     021C  0009               	retfie
 12175     021D                     __end_of_IOC:
 12176                           
 12177                           	psect	text42
 12178     1CA8                     __ptext42:	
 12179 ;; *************** function i1_Lcd_Write_String *****************
 12180 ;; Defined at:
 12181 ;;		line 104 in file "lcd.c"
 12182 ;; Parameters:    Size  Location     Type
 12183 ;;  a               2    5[COMMON] PTR const unsigned char 
 12184 ;;		 -> STR_17(17), STR_16(15), STR_15(14), STR_14(15), 
 12185 ;;		 -> STR_13(9), STR_12(7), STR_11(9), STR_10(7), 
 12186 ;;		 -> STR_9(15), STR_8(16), STR_7(17), STR_6(2), 
 12187 ;;		 -> STR_4(2), buffer(20), STR_1(15), 
 12188 ;; Auto vars:     Size  Location     Type
 12189 ;;  i               2    8[COMMON] int 
 12190 ;; Return value:  Size  Location     Type
 12191 ;;                  1    wreg      void 
 12192 ;; Registers used:
 12193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12194 ;; Tracked objects:
 12195 ;;		On entry : 0/0
 12196 ;;		On exit  : 0/0
 12197 ;;		Unchanged: 0/0
 12198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12199 ;;      Params:         2       0       0       0       0       0       0       0
 12200 ;;      Locals:         2       0       0       0       0       0       0       0
 12201 ;;      Temps:          1       0       0       0       0       0       0       0
 12202 ;;      Totals:         5       0       0       0       0       0       0       0
 12203 ;;Total ram usage:        5 bytes
 12204 ;; Hardware stack levels used: 1
 12205 ;; Hardware stack levels required when called: 2
 12206 ;; This function calls:
 12207 ;;		i1_Lcd_Write_Char
 12208 ;; This function is called by:
 12209 ;;		_IOC
 12210 ;; This function uses a non-reentrant model
 12211 ;;
 12212                           
 12213     1CA8                     i1_Lcd_Write_String:	
 12214                           ;psect for function i1_Lcd_Write_String
 12215                           
 12216                           
 12217                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
 12218                           
 12219                           ;incstack = 0
 12220                           ; Regs used in i1_Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12221     1CA8  01F8               	clrf	i1Lcd_Write_String@i
 12222     1CA9  01F9               	clrf	i1Lcd_Write_String@i+1
 12223     1CAA                     i1l4987:
 12224     1CAA  0875               	movf	i1Lcd_Write_String@a,w
 12225     1CAB  0778               	addwf	i1Lcd_Write_String@i,w
 12226     1CAC  0084               	movwf	4
 12227     1CAD  0876               	movf	i1Lcd_Write_String@a+1,w
 12228     1CAE  3D79               	addwfc	i1Lcd_Write_String@i+1,w
 12229     1CAF  0085               	movwf	5
 12230     1CB0  0012               	moviw fsr0++
 12231     1CB1  1903               	btfsc	3,2
 12232     1CB2  0008               	return
 12233                           
 12234                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
 12235     1CB3  0875               	movf	i1Lcd_Write_String@a,w
 12236     1CB4  0778               	addwf	i1Lcd_Write_String@i,w
 12237     1CB5  0084               	movwf	4
 12238     1CB6  0876               	movf	i1Lcd_Write_String@a+1,w
 12239     1CB7  3D79               	addwfc	i1Lcd_Write_String@i+1,w
 12240     1CB8  0085               	movwf	5
 12241     1CB9  0800               	movf	0,w	;code access
 12242     1CBA  3187  27D8  319C   	fcall	i1_Lcd_Write_Char
 12243     1CBD  3001               	movlw	1
 12244     1CBE  07F8               	addwf	i1Lcd_Write_String@i,f
 12245     1CBF  3000               	movlw	0
 12246     1CC0  3DF9               	addwfc	i1Lcd_Write_String@i+1,f
 12247     1CC1  2CAA               	goto	i1l4987
 12248     1CC2                     __end_ofi1_Lcd_Write_String:
 12249                           
 12250                           	psect	text43
 12251     07D8                     __ptext43:	
 12252 ;; *************** function i1_Lcd_Write_Char *****************
 12253 ;; Defined at:
 12254 ;;		line 88 in file "lcd.c"
 12255 ;; Parameters:    Size  Location     Type
 12256 ;;  a               1    wreg     unsigned char 
 12257 ;; Auto vars:     Size  Location     Type
 12258 ;;  a               1    4[COMMON] unsigned char 
 12259 ;;  y               1    3[COMMON] unsigned char 
 12260 ;;  temp            1    2[COMMON] unsigned char 
 12261 ;; Return value:  Size  Location     Type
 12262 ;;                  1    wreg      void 
 12263 ;; Registers used:
 12264 ;;		wreg, status,2, status,0, pclath, cstack
 12265 ;; Tracked objects:
 12266 ;;		On entry : 0/0
 12267 ;;		On exit  : 0/0
 12268 ;;		Unchanged: 0/0
 12269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12270 ;;      Params:         0       0       0       0       0       0       0       0
 12271 ;;      Locals:         3       0       0       0       0       0       0       0
 12272 ;;      Temps:          1       0       0       0       0       0       0       0
 12273 ;;      Totals:         4       0       0       0       0       0       0       0
 12274 ;;Total ram usage:        4 bytes
 12275 ;; Hardware stack levels used: 1
 12276 ;; Hardware stack levels required when called: 1
 12277 ;; This function calls:
 12278 ;;		i1_Lcd_Port
 12279 ;; This function is called by:
 12280 ;;		_IOC
 12281 ;;		i1_Lcd_Write_String
 12282 ;; This function uses a non-reentrant model
 12283 ;;
 12284                           
 12285     07D8                     i1_Lcd_Write_Char:	
 12286                           ;psect for function i1_Lcd_Write_Char
 12287                           
 12288                           
 12289                           ;incstack = 0
 12290                           ; Regs used in i1_Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
 12291                           ;i1Lcd_Write_Char@a stored from wreg
 12292     07D8  00F4               	movwf	i1Lcd_Write_Char@a
 12293                           
 12294                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
 12295     07D9  0874               	movf	i1Lcd_Write_Char@a,w
 12296     07DA  390F               	andlw	15
 12297     07DB  00F2               	movwf	i1Lcd_Write_Char@temp
 12298                           
 12299                           ;lcd.c: 92:     y = a&0xF0;
 12300     07DC  0874               	movf	i1Lcd_Write_Char@a,w
 12301     07DD  39F0               	andlw	240
 12302     07DE  00F3               	movwf	i1Lcd_Write_Char@y
 12303                           
 12304                           ;lcd.c: 93:     LATCbits.LATC1 = 1;
 12305     07DF  0022               	movlb	2	; select bank2
 12306     07E0  148E               	bsf	14,1	;volatile
 12307                           
 12308                           ;lcd.c: 94:     Lcd_Port(y>>4);
 12309     07E1  0873               	movf	i1Lcd_Write_Char@y,w
 12310     07E2  00F1               	movwf	??i1_Lcd_Write_Char
 12311     07E3  3004               	movlw	4
 12312     07E4                     u568_25:
 12313     07E4  36F1               	lsrf	??i1_Lcd_Write_Char,f
 12314     07E5  0B89               	decfsz	9,f
 12315     07E6  2FE4               	goto	u568_25
 12316     07E7  0871               	movf	??i1_Lcd_Write_Char,w
 12317     07E8  319C  2490  3187   	fcall	i1_Lcd_Port
 12318                           
 12319                           ;lcd.c: 95:     LATCbits.LATC0 = 1;
 12320     07EB  0022               	movlb	2	; select bank2
 12321     07EC  140E               	bsf	14,0	;volatile
 12322                           
 12323                           ;lcd.c: 96:     _delay((unsigned long)((40)*(4000000/4000000.0)));
 12324     07ED  300D               	movlw	13
 12325     07EE                     u673_27:
 12326     07EE  0B89               	decfsz	9,f
 12327     07EF  2FEE               	goto	u673_27
 12328     07F0  0000               	nop
 12329                           
 12330                           ;lcd.c: 97:     LATCbits.LATC0 = 0;
 12331     07F1  0022               	movlb	2	; select bank2
 12332     07F2  100E               	bcf	14,0	;volatile
 12333                           
 12334                           ;lcd.c: 98:     Lcd_Port(temp);
 12335     07F3  0872               	movf	i1Lcd_Write_Char@temp,w
 12336     07F4  319C  2490  3187   	fcall	i1_Lcd_Port
 12337                           
 12338                           ;lcd.c: 99:     LATCbits.LATC0 = 1;
 12339     07F7  0022               	movlb	2	; select bank2
 12340     07F8  140E               	bsf	14,0	;volatile
 12341                           
 12342                           ;lcd.c: 100:     _delay((unsigned long)((40)*(4000000/4000000.0)));
 12343     07F9  300D               	movlw	13
 12344     07FA                     u674_27:
 12345     07FA  0B89               	decfsz	9,f
 12346     07FB  2FFA               	goto	u674_27
 12347     07FC  0000               	nop
 12348                           
 12349                           ;lcd.c: 101:     LATCbits.LATC0 = 0;
 12350     07FD  0022               	movlb	2	; select bank2
 12351     07FE  100E               	bcf	14,0	;volatile
 12352     07FF  0008               	return
 12353     0800                     __end_ofi1_Lcd_Write_Char:
 12354                           
 12355                           	psect	text44
 12356     10C3                     __ptext44:	
 12357 ;; *************** function i1_Lcd_Set_Cursor *****************
 12358 ;; Defined at:
 12359 ;;		line 26 in file "lcd.c"
 12360 ;; Parameters:    Size  Location     Type
 12361 ;;  a               1    wreg     unsigned char 
 12362 ;;  b               1    3[COMMON] unsigned char 
 12363 ;; Auto vars:     Size  Location     Type
 12364 ;;  a               1    5[COMMON] unsigned char 
 12365 ;;  temp            1    8[COMMON] unsigned char 
 12366 ;;  y               1    7[COMMON] unsigned char 
 12367 ;;  z               1    6[COMMON] unsigned char 
 12368 ;; Return value:  Size  Location     Type
 12369 ;;                  1    wreg      void 
 12370 ;; Registers used:
 12371 ;;		wreg, status,2, status,0, pclath, cstack
 12372 ;; Tracked objects:
 12373 ;;		On entry : 0/0
 12374 ;;		On exit  : 0/0
 12375 ;;		Unchanged: 0/0
 12376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12377 ;;      Params:         1       0       0       0       0       0       0       0
 12378 ;;      Locals:         4       0       0       0       0       0       0       0
 12379 ;;      Temps:          1       0       0       0       0       0       0       0
 12380 ;;      Totals:         6       0       0       0       0       0       0       0
 12381 ;;Total ram usage:        6 bytes
 12382 ;; Hardware stack levels used: 1
 12383 ;; Hardware stack levels required when called: 2
 12384 ;; This function calls:
 12385 ;;		i1_Lcd_Cmd
 12386 ;; This function is called by:
 12387 ;;		_IOC
 12388 ;; This function uses a non-reentrant model
 12389 ;;
 12390                           
 12391     10C3                     i1_Lcd_Set_Cursor:	
 12392                           ;psect for function i1_Lcd_Set_Cursor
 12393                           
 12394                           
 12395                           ;incstack = 0
 12396                           ; Regs used in i1_Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
 12397                           ;i1Lcd_Set_Cursor@a stored from wreg
 12398     10C3  00F5               	movwf	i1Lcd_Set_Cursor@a
 12399                           
 12400                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
 12401     10C4  0375               	decf	i1Lcd_Set_Cursor@a,w
 12402     10C5  1D03               	btfss	3,2
 12403     10C6  28DD               	goto	i1l4951
 12404                           
 12405                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
 12406     10C7  0873               	movf	i1Lcd_Set_Cursor@b,w
 12407     10C8  3E7F               	addlw	127
 12408     10C9  00F8               	movwf	i1Lcd_Set_Cursor@temp
 12409                           
 12410                           ;lcd.c: 32:         z = temp>>4;
 12411     10CA  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12412     10CB  00F4               	movwf	??i1_Lcd_Set_Cursor
 12413     10CC  3004               	movlw	4
 12414     10CD                     u619_25:
 12415     10CD  36F4               	lsrf	??i1_Lcd_Set_Cursor,f
 12416     10CE  0B89               	decfsz	9,f
 12417     10CF  28CD               	goto	u619_25
 12418     10D0  0874               	movf	??i1_Lcd_Set_Cursor,w
 12419     10D1  00F6               	movwf	i1Lcd_Set_Cursor@z
 12420                           
 12421                           ;lcd.c: 33:         y = temp & 0x0F;
 12422     10D2  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12423     10D3  390F               	andlw	15
 12424     10D4  00F7               	movwf	i1Lcd_Set_Cursor@y
 12425                           
 12426                           ;lcd.c: 34:         Lcd_Cmd(z);
 12427     10D5  0876               	movf	i1Lcd_Set_Cursor@z,w
 12428     10D6  319C  2465  3190   	fcall	i1_Lcd_Cmd
 12429                           
 12430                           ;lcd.c: 35:         Lcd_Cmd(y);
 12431     10D9  0877               	movf	i1Lcd_Set_Cursor@y,w
 12432     10DA  319C  2465         	fcall	i1_Lcd_Cmd
 12433                           
 12434                           ;lcd.c: 36:     }
 12435     10DC  0008               	return
 12436     10DD                     i1l4951:
 12437     10DD  3002               	movlw	2
 12438     10DE  0675               	xorwf	i1Lcd_Set_Cursor@a,w
 12439     10DF  1D03               	btfss	3,2
 12440     10E0  28F7               	goto	i1l4961
 12441                           
 12442                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
 12443     10E1  0873               	movf	i1Lcd_Set_Cursor@b,w
 12444     10E2  3EBF               	addlw	191
 12445     10E3  00F8               	movwf	i1Lcd_Set_Cursor@temp
 12446                           
 12447                           ;lcd.c: 40:         z = temp>>4;
 12448     10E4  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12449     10E5  00F4               	movwf	??i1_Lcd_Set_Cursor
 12450     10E6  3004               	movlw	4
 12451     10E7                     u621_25:
 12452     10E7  36F4               	lsrf	??i1_Lcd_Set_Cursor,f
 12453     10E8  0B89               	decfsz	9,f
 12454     10E9  28E7               	goto	u621_25
 12455     10EA  0874               	movf	??i1_Lcd_Set_Cursor,w
 12456     10EB  00F6               	movwf	i1Lcd_Set_Cursor@z
 12457                           
 12458                           ;lcd.c: 41:         y = temp & 0x0F;
 12459     10EC  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12460     10ED  390F               	andlw	15
 12461     10EE  00F7               	movwf	i1Lcd_Set_Cursor@y
 12462                           
 12463                           ;lcd.c: 42:         Lcd_Cmd(z);
 12464     10EF  0876               	movf	i1Lcd_Set_Cursor@z,w
 12465     10F0  319C  2465  3190   	fcall	i1_Lcd_Cmd
 12466                           
 12467                           ;lcd.c: 43:         Lcd_Cmd(y);
 12468     10F3  0877               	movf	i1Lcd_Set_Cursor@y,w
 12469     10F4  319C  2465         	fcall	i1_Lcd_Cmd
 12470                           
 12471                           ;lcd.c: 44:     }
 12472     10F6  0008               	return
 12473     10F7                     i1l4961:
 12474     10F7  3003               	movlw	3
 12475     10F8  0675               	xorwf	i1Lcd_Set_Cursor@a,w
 12476     10F9  1D03               	btfss	3,2
 12477     10FA  2911               	goto	i1l4971
 12478                           
 12479                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x94 + b - 1;
 12480     10FB  0873               	movf	i1Lcd_Set_Cursor@b,w
 12481     10FC  3E93               	addlw	147
 12482     10FD  00F8               	movwf	i1Lcd_Set_Cursor@temp
 12483                           
 12484                           ;lcd.c: 48:         z = temp>>4;
 12485     10FE  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12486     10FF  00F4               	movwf	??i1_Lcd_Set_Cursor
 12487     1100  3004               	movlw	4
 12488     1101                     u623_25:
 12489     1101  36F4               	lsrf	??i1_Lcd_Set_Cursor,f
 12490     1102  0B89               	decfsz	9,f
 12491     1103  2901               	goto	u623_25
 12492     1104  0874               	movf	??i1_Lcd_Set_Cursor,w
 12493     1105  00F6               	movwf	i1Lcd_Set_Cursor@z
 12494                           
 12495                           ;lcd.c: 49:         y = temp & 0x0F;
 12496     1106  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12497     1107  390F               	andlw	15
 12498     1108  00F7               	movwf	i1Lcd_Set_Cursor@y
 12499                           
 12500                           ;lcd.c: 50:         Lcd_Cmd(z);
 12501     1109  0876               	movf	i1Lcd_Set_Cursor@z,w
 12502     110A  319C  2465  3190   	fcall	i1_Lcd_Cmd
 12503                           
 12504                           ;lcd.c: 51:         Lcd_Cmd(y);
 12505     110D  0877               	movf	i1Lcd_Set_Cursor@y,w
 12506     110E  319C  2465         	fcall	i1_Lcd_Cmd
 12507                           
 12508                           ;lcd.c: 52:     }
 12509     1110  0008               	return
 12510     1111                     i1l4971:
 12511     1111  3004               	movlw	4
 12512     1112  0675               	xorwf	i1Lcd_Set_Cursor@a,w
 12513     1113  1D03               	btfss	3,2
 12514     1114  0008               	return
 12515                           
 12516                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD4 + b - 1;
 12517     1115  0873               	movf	i1Lcd_Set_Cursor@b,w
 12518     1116  3ED3               	addlw	211
 12519     1117  00F8               	movwf	i1Lcd_Set_Cursor@temp
 12520                           
 12521                           ;lcd.c: 56:         z = temp>>4;
 12522     1118  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12523     1119  00F4               	movwf	??i1_Lcd_Set_Cursor
 12524     111A  3004               	movlw	4
 12525     111B                     u625_25:
 12526     111B  36F4               	lsrf	??i1_Lcd_Set_Cursor,f
 12527     111C  0B89               	decfsz	9,f
 12528     111D  291B               	goto	u625_25
 12529     111E  0874               	movf	??i1_Lcd_Set_Cursor,w
 12530     111F  00F6               	movwf	i1Lcd_Set_Cursor@z
 12531                           
 12532                           ;lcd.c: 57:         y = temp & 0x0F;
 12533     1120  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12534     1121  390F               	andlw	15
 12535     1122  00F7               	movwf	i1Lcd_Set_Cursor@y
 12536                           
 12537                           ;lcd.c: 58:         Lcd_Cmd(z);
 12538     1123  0876               	movf	i1Lcd_Set_Cursor@z,w
 12539     1124  319C  2465  3190   	fcall	i1_Lcd_Cmd
 12540                           
 12541                           ;lcd.c: 59:         Lcd_Cmd(y);
 12542     1127  0877               	movf	i1Lcd_Set_Cursor@y,w
 12543     1128  319C  2465         	fcall	i1_Lcd_Cmd
 12544     112A  0008               	return
 12545     112B                     __end_ofi1_Lcd_Set_Cursor:
 12546                           
 12547                           	psect	text45
 12548     1C0F                     __ptext45:	
 12549 ;; *************** function i1_Lcd_Clear *****************
 12550 ;; Defined at:
 12551 ;;		line 20 in file "lcd.c"
 12552 ;; Parameters:    Size  Location     Type
 12553 ;;		None
 12554 ;; Auto vars:     Size  Location     Type
 12555 ;;		None
 12556 ;; Return value:  Size  Location     Type
 12557 ;;                  1    wreg      void 
 12558 ;; Registers used:
 12559 ;;		wreg, status,2, status,0, pclath, cstack
 12560 ;; Tracked objects:
 12561 ;;		On entry : 0/0
 12562 ;;		On exit  : 0/0
 12563 ;;		Unchanged: 0/0
 12564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12565 ;;      Params:         0       0       0       0       0       0       0       0
 12566 ;;      Locals:         0       0       0       0       0       0       0       0
 12567 ;;      Temps:          0       0       0       0       0       0       0       0
 12568 ;;      Totals:         0       0       0       0       0       0       0       0
 12569 ;;Total ram usage:        0 bytes
 12570 ;; Hardware stack levels used: 1
 12571 ;; Hardware stack levels required when called: 2
 12572 ;; This function calls:
 12573 ;;		i1_Lcd_Cmd
 12574 ;; This function is called by:
 12575 ;;		_IOC
 12576 ;; This function uses a non-reentrant model
 12577 ;;
 12578                           
 12579     1C0F                     i1_Lcd_Clear:	
 12580                           ;psect for function i1_Lcd_Clear
 12581                           
 12582                           
 12583                           ;lcd.c: 22:     Lcd_Cmd(0);
 12584                           
 12585                           ;incstack = 0
 12586                           ; Regs used in i1_Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
 12587     1C0F  3000               	movlw	0
 12588     1C10  319C  2465  319C   	fcall	i1_Lcd_Cmd
 12589                           
 12590                           ;lcd.c: 23:     Lcd_Cmd(1);
 12591     1C13  3001               	movlw	1
 12592     1C14  319C  2465         	fcall	i1_Lcd_Cmd
 12593     1C16  0008               	return
 12594     1C17                     __end_ofi1_Lcd_Clear:
 12595                           
 12596                           	psect	text46
 12597     1C65                     __ptext46:	
 12598 ;; *************** function i1_Lcd_Cmd *****************
 12599 ;; Defined at:
 12600 ;;		line 11 in file "lcd.c"
 12601 ;; Parameters:    Size  Location     Type
 12602 ;;  a               1    wreg     unsigned char 
 12603 ;; Auto vars:     Size  Location     Type
 12604 ;;  a               1    2[COMMON] unsigned char 
 12605 ;; Return value:  Size  Location     Type
 12606 ;;                  1    wreg      void 
 12607 ;; Registers used:
 12608 ;;		wreg, status,2, status,0, pclath, cstack
 12609 ;; Tracked objects:
 12610 ;;		On entry : 0/0
 12611 ;;		On exit  : 0/0
 12612 ;;		Unchanged: 0/0
 12613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12614 ;;      Params:         0       0       0       0       0       0       0       0
 12615 ;;      Locals:         1       0       0       0       0       0       0       0
 12616 ;;      Temps:          1       0       0       0       0       0       0       0
 12617 ;;      Totals:         2       0       0       0       0       0       0       0
 12618 ;;Total ram usage:        2 bytes
 12619 ;; Hardware stack levels used: 1
 12620 ;; Hardware stack levels required when called: 1
 12621 ;; This function calls:
 12622 ;;		i1_Lcd_Port
 12623 ;; This function is called by:
 12624 ;;		i1_Lcd_Clear
 12625 ;;		i1_Lcd_Set_Cursor
 12626 ;; This function uses a non-reentrant model
 12627 ;;
 12628                           
 12629     1C65                     i1_Lcd_Cmd:	
 12630                           ;psect for function i1_Lcd_Cmd
 12631                           
 12632                           
 12633                           ;incstack = 0
 12634                           ; Regs used in i1_Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
 12635                           ;i1Lcd_Cmd@a stored from wreg
 12636     1C65  00F2               	movwf	i1Lcd_Cmd@a
 12637                           
 12638                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATCbits.LATC1 = 0;
 12639     1C66  0022               	movlb	2	; select bank2
 12640     1C67  108E               	bcf	14,1	;volatile
 12641                           
 12642                           ;lcd.c: 14:     Lcd_Port(a);
 12643     1C68  0872               	movf	i1Lcd_Cmd@a,w
 12644     1C69  319C  2490  319C   	fcall	i1_Lcd_Port
 12645                           
 12646                           ;lcd.c: 15:     LATCbits.LATC0 = 1;
 12647     1C6C  0022               	movlb	2	; select bank2
 12648     1C6D  140E               	bsf	14,0	;volatile
 12649                           
 12650                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
 12651     1C6E  3006               	movlw	6
 12652     1C6F  00F1               	movwf	??i1_Lcd_Cmd
 12653     1C70  3030               	movlw	48
 12654     1C71                     u675_27:
 12655     1C71  0B89               	decfsz	9,f
 12656     1C72  2C71               	goto	u675_27
 12657     1C73  0BF1               	decfsz	??i1_Lcd_Cmd,f
 12658     1C74  2C71               	goto	u675_27
 12659     1C75  3200               	nop2
 12660                           
 12661                           ;lcd.c: 17:     LATCbits.LATC0 = 0;
 12662     1C76  0022               	movlb	2	; select bank2
 12663     1C77  100E               	bcf	14,0	;volatile
 12664     1C78  0008               	return
 12665     1C79                     __end_ofi1_Lcd_Cmd:
 12666                           
 12667                           	psect	text47
 12668     1C90                     __ptext47:	
 12669 ;; *************** function i1_Lcd_Port *****************
 12670 ;; Defined at:
 12671 ;;		line 3 in file "lcd.c"
 12672 ;; Parameters:    Size  Location     Type
 12673 ;;  a               1    wreg     unsigned char 
 12674 ;; Auto vars:     Size  Location     Type
 12675 ;;  a               1    0[COMMON] unsigned char 
 12676 ;; Return value:  Size  Location     Type
 12677 ;;                  1    wreg      void 
 12678 ;; Registers used:
 12679 ;;		wreg
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/0
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12685 ;;      Params:         0       0       0       0       0       0       0       0
 12686 ;;      Locals:         1       0       0       0       0       0       0       0
 12687 ;;      Temps:          0       0       0       0       0       0       0       0
 12688 ;;      Totals:         1       0       0       0       0       0       0       0
 12689 ;;Total ram usage:        1 bytes
 12690 ;; Hardware stack levels used: 1
 12691 ;; This function calls:
 12692 ;;		Nothing
 12693 ;; This function is called by:
 12694 ;;		i1_Lcd_Cmd
 12695 ;;		i1_Lcd_Write_Char
 12696 ;; This function uses a non-reentrant model
 12697 ;;
 12698                           
 12699     1C90                     i1_Lcd_Port:	
 12700                           ;psect for function i1_Lcd_Port
 12701                           
 12702                           
 12703                           ;incstack = 0
 12704                           ; Regs used in i1_Lcd_Port: [wreg]
 12705                           ;i1Lcd_Port@a stored from wreg
 12706     1C90  00F0               	movwf	i1Lcd_Port@a
 12707                           
 12708                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LATD4 = 1
      +                          ) : (LATDbits.LATD4 = 0);
 12709     1C91  1C70               	btfss	i1Lcd_Port@a,0
 12710     1C92  2C96               	goto	i1l361
 12711     1C93  0022               	movlb	2	; select bank2
 12712     1C94  160F               	bsf	15,4	;volatile
 12713     1C95  2C98               	goto	i1l4639
 12714     1C96                     i1l361:
 12715     1C96  0022               	movlb	2	; select bank2
 12716     1C97  120F               	bcf	15,4	;volatile
 12717     1C98                     i1l4639:
 12718                           
 12719                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LATD5 = 1) : (LATDbits.LATD5 = 0);
 12720     1C98  1CF0               	btfss	i1Lcd_Port@a,1
 12721     1C99  2C9C               	goto	i1l365
 12722     1C9A  168F               	bsf	15,5	;volatile
 12723     1C9B  2C9D               	goto	i1l4643
 12724     1C9C                     i1l365:
 12725     1C9C  128F               	bcf	15,5	;volatile
 12726     1C9D                     i1l4643:
 12727                           
 12728                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LATD6 = 1) : (LATDbits.LATD6 = 0);
 12729     1C9D  1D70               	btfss	i1Lcd_Port@a,2
 12730     1C9E  2CA1               	goto	i1l369
 12731     1C9F  170F               	bsf	15,6	;volatile
 12732     1CA0  2CA2               	goto	i1l4647
 12733     1CA1                     i1l369:
 12734     1CA1  130F               	bcf	15,6	;volatile
 12735     1CA2                     i1l4647:
 12736                           
 12737                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LATD7 = 1) : (LATDbits.LATD7 = 0);
 12738     1CA2  1DF0               	btfss	i1Lcd_Port@a,3
 12739     1CA3  2CA6               	goto	i1l373
 12740     1CA4  178F               	bsf	15,7	;volatile
 12741     1CA5  0008               	return
 12742     1CA6                     i1l373:
 12743     1CA6  138F               	bcf	15,7	;volatile
 12744     1CA7  0008               	return
 12745     1CA8                     __end_ofi1_Lcd_Port:
 12746                           
 12747                           	psect	text48
 12748     1E54                     __ptext48:	
 12749 ;; *************** function _strcmp *****************
 12750 ;; Defined at:
 12751 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\strcmp.c"
 12752 ;; Parameters:    Size  Location     Type
 12753 ;;  l               1    wreg     PTR const unsigned char 
 12754 ;;		 -> clave(5), 
 12755 ;;  r               1    0[COMMON] PTR const unsigned char 
 12756 ;;		 -> clave_enter(5), 
 12757 ;; Auto vars:     Size  Location     Type
 12758 ;;  l               1    3[COMMON] PTR const unsigned char 
 12759 ;;		 -> clave(5), 
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  2    0[COMMON] int 
 12762 ;; Registers used:
 12763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 12764 ;; Tracked objects:
 12765 ;;		On entry : 0/0
 12766 ;;		On exit  : 0/0
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12769 ;;      Params:         2       0       0       0       0       0       0       0
 12770 ;;      Locals:         1       0       0       0       0       0       0       0
 12771 ;;      Temps:          1       0       0       0       0       0       0       0
 12772 ;;      Totals:         4       0       0       0       0       0       0       0
 12773 ;;Total ram usage:        4 bytes
 12774 ;; Hardware stack levels used: 1
 12775 ;; This function calls:
 12776 ;;		Nothing
 12777 ;; This function is called by:
 12778 ;;		_IOC
 12779 ;; This function uses a non-reentrant model
 12780 ;;
 12781                           
 12782     1E54                     _strcmp:	
 12783                           ;psect for function _strcmp
 12784                           
 12785                           
 12786                           ;incstack = 0
 12787                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 12788                           ;strcmp@l stored from wreg
 12789     1E54  00F3               	movwf	strcmp@l
 12790     1E55  2E65               	goto	i1l4887
 12791     1E56                     i1l4889:
 12792     1E56  0873               	movf	strcmp@l,w
 12793     1E57  0086               	movwf	6
 12794     1E58  3001               	movlw	1	; select bank2/3
 12795     1E59  0087               	movwf	7
 12796     1E5A  0801               	movf	1,w
 12797     1E5B  1903               	btfsc	3,2
 12798     1E5C  2E71               	goto	i1l4891
 12799     1E5D  3001               	movlw	1
 12800     1E5E  00F2               	movwf	??_strcmp
 12801     1E5F  0872               	movf	??_strcmp,w
 12802     1E60  07F3               	addwf	strcmp@l,f
 12803     1E61  3001               	movlw	1
 12804     1E62  00F2               	movwf	??_strcmp
 12805     1E63  0872               	movf	??_strcmp,w
 12806     1E64  07F0               	addwf	strcmp@r,f
 12807     1E65                     i1l4887:
 12808     1E65  0870               	movf	strcmp@r,w
 12809     1E66  0086               	movwf	6
 12810     1E67  3001               	movlw	1	; select bank2/3
 12811     1E68  0087               	movwf	7
 12812     1E69  0873               	movf	strcmp@l,w
 12813     1E6A  0084               	movwf	4
 12814     1E6B  3001               	movlw	1	; select bank2/3
 12815     1E6C  0085               	movwf	5
 12816     1E6D  0800               	movf	0,w
 12817     1E6E  0601               	xorwf	1,w
 12818     1E6F  1903               	btfsc	3,2
 12819     1E70  2E56               	goto	i1l4889
 12820     1E71                     i1l4891:
 12821     1E71  0873               	movf	strcmp@l,w
 12822     1E72  0086               	movwf	6
 12823     1E73  3001               	movlw	1	; select bank2/3
 12824     1E74  0087               	movwf	7
 12825     1E75  0870               	movf	strcmp@r,w
 12826     1E76  0084               	movwf	4
 12827     1E77  3001               	movlw	1	; select bank2/3
 12828     1E78  0085               	movwf	5
 12829     1E79  0800               	movf	0,w
 12830     1E7A  0201               	subwf	1,w
 12831     1E7B  00F0               	movwf	?_strcmp
 12832     1E7C  01F1               	clrf	?_strcmp+1
 12833     1E7D  1C03               	skipc
 12834     1E7E  03F1               	decf	?_strcmp+1,f
 12835     1E7F  0008               	return
 12836     1E80                     __end_of_strcmp:
 12837                           
 12838                           	psect	text49
 12839     1C27                     __ptext49:	
 12840 ;; *************** function _Keypad_Init *****************
 12841 ;; Defined at:
 12842 ;;		line 3 in file "kbd4x3.c"
 12843 ;; Parameters:    Size  Location     Type
 12844 ;;		None
 12845 ;; Auto vars:     Size  Location     Type
 12846 ;;		None
 12847 ;; Return value:  Size  Location     Type
 12848 ;;                  1    wreg      void 
 12849 ;; Registers used:
 12850 ;;		None
 12851 ;; Tracked objects:
 12852 ;;		On entry : 0/0
 12853 ;;		On exit  : 0/0
 12854 ;;		Unchanged: 0/0
 12855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12856 ;;      Params:         0       0       0       0       0       0       0       0
 12857 ;;      Locals:         0       0       0       0       0       0       0       0
 12858 ;;      Temps:          0       0       0       0       0       0       0       0
 12859 ;;      Totals:         0       0       0       0       0       0       0       0
 12860 ;;Total ram usage:        0 bytes
 12861 ;; Hardware stack levels used: 1
 12862 ;; This function calls:
 12863 ;;		Nothing
 12864 ;; This function is called by:
 12865 ;;		_IOC
 12866 ;; This function uses a non-reentrant model
 12867 ;;
 12868                           
 12869     1C27                     _Keypad_Init:	
 12870                           ;psect for function _Keypad_Init
 12871                           
 12872                           
 12873                           ;kbd4x3.c: 5:     TRISBbits.TRISB4 = 1;
 12874                           
 12875                           ;incstack = 0
 12876                           ; Regs used in _Keypad_Init: []
 12877     1C27  0021               	movlb	1	; select bank1
 12878     1C28  160D               	bsf	13,4	;volatile
 12879                           
 12880                           ;kbd4x3.c: 6:     TRISBbits.TRISB5 = 1;
 12881     1C29  168D               	bsf	13,5	;volatile
 12882                           
 12883                           ;kbd4x3.c: 7:     TRISBbits.TRISB6 = 1;
 12884     1C2A  170D               	bsf	13,6	;volatile
 12885                           
 12886                           ;kbd4x3.c: 8:     TRISBbits.TRISB7 = 1;
 12887     1C2B  178D               	bsf	13,7	;volatile
 12888                           
 12889                           ;kbd4x3.c: 9:     TRISBbits.TRISB1 = 0;
 12890     1C2C  108D               	bcf	13,1	;volatile
 12891                           
 12892                           ;kbd4x3.c: 10:     TRISBbits.TRISB2 = 0;
 12893     1C2D  110D               	bcf	13,2	;volatile
 12894                           
 12895                           ;kbd4x3.c: 11:     TRISBbits.TRISB3 = 0;
 12896     1C2E  118D               	bcf	13,3	;volatile
 12897     1C2F  0008               	return
 12898     1C30                     __end_of_Keypad_Init:
 12899                           
 12900                           	psect	text50
 12901     06C4                     __ptext50:	
 12902 ;; *************** function _Keypad_Get_Char *****************
 12903 ;; Defined at:
 12904 ;;		line 14 in file "kbd4x3.c"
 12905 ;; Parameters:    Size  Location     Type
 12906 ;;		None
 12907 ;; Auto vars:     Size  Location     Type
 12908 ;;		None
 12909 ;; Return value:  Size  Location     Type
 12910 ;;                  1    wreg      unsigned char 
 12911 ;; Registers used:
 12912 ;;		wreg
 12913 ;; Tracked objects:
 12914 ;;		On entry : 0/0
 12915 ;;		On exit  : 0/0
 12916 ;;		Unchanged: 0/0
 12917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12918 ;;      Params:         0       0       0       0       0       0       0       0
 12919 ;;      Locals:         0       0       0       0       0       0       0       0
 12920 ;;      Temps:          1       0       0       0       0       0       0       0
 12921 ;;      Totals:         1       0       0       0       0       0       0       0
 12922 ;;Total ram usage:        1 bytes
 12923 ;; Hardware stack levels used: 1
 12924 ;; This function calls:
 12925 ;;		Nothing
 12926 ;; This function is called by:
 12927 ;;		_IOC
 12928 ;; This function uses a non-reentrant model
 12929 ;;
 12930                           
 12931     06C4                     _Keypad_Get_Char:	
 12932                           ;psect for function _Keypad_Get_Char
 12933                           
 12934                           
 12935                           ;kbd4x3.c: 16:     PORTBbits.RB1 = 1;
 12936                           
 12937                           ;incstack = 0
 12938                           ; Regs used in _Keypad_Get_Char: [wreg]
 12939     06C4  0020               	movlb	0	; select bank0
 12940     06C5  148D               	bsf	13,1	;volatile
 12941                           
 12942                           ;kbd4x3.c: 17:     PORTBbits.RB2 = 0;
 12943     06C6  110D               	bcf	13,2	;volatile
 12944                           
 12945                           ;kbd4x3.c: 18:     PORTBbits.RB3 = 0;
 12946     06C7  118D               	bcf	13,3	;volatile
 12947                           
 12948                           ;kbd4x3.c: 19:     if(PORTBbits.RB4 == 1){
 12949     06C8  1E0D               	btfss	13,4	;volatile
 12950     06C9  2EDE               	goto	i1l299
 12951                           
 12952                           ;kbd4x3.c: 20:         _delay((unsigned long)((2)*(4000000/4000.0)));
 12953     06CA  3003               	movlw	3
 12954     06CB  00F0               	movwf	??_Keypad_Get_Char
 12955     06CC  3098               	movlw	152
 12956     06CD                     u676_27:
 12957     06CD  0B89               	decfsz	9,f
 12958     06CE  2ECD               	goto	u676_27
 12959     06CF  0BF0               	decfsz	??_Keypad_Get_Char,f
 12960     06D0  2ECD               	goto	u676_27
 12961     06D1                     i1l300:	
 12962                           ;kbd4x3.c: 21:         while(PORTBbits.RB4 == 1);
 12963                           
 12964     06D1  0020               	movlb	0	; select bank0
 12965     06D2  1A0D               	btfsc	13,4	;volatile
 12966     06D3  2ED1               	goto	i1l300
 12967                           
 12968                           ;kbd4x3.c: 22:         _delay((unsigned long)((5)*(4000000/4000.0)));
 12969     06D4  3007               	movlw	7
 12970     06D5  00F0               	movwf	??_Keypad_Get_Char
 12971     06D6  307D               	movlw	125
 12972     06D7                     u677_27:
 12973     06D7  0B89               	decfsz	9,f
 12974     06D8  2ED7               	goto	u677_27
 12975     06D9  0BF0               	decfsz	??_Keypad_Get_Char,f
 12976     06DA  2ED7               	goto	u677_27
 12977     06DB  0000               	nop
 12978                           
 12979                           ;kbd4x3.c: 23:         return '1';
 12980     06DC  3031               	movlw	49
 12981     06DD  0008               	return
 12982     06DE                     i1l299:	
 12983                           ;kbd4x3.c: 24:     }
 12984                           
 12985                           
 12986                           ;kbd4x3.c: 25:     if(PORTBbits.RB5 == 1){
 12987     06DE  1E8D               	btfss	13,5	;volatile
 12988     06DF  2EF4               	goto	i1l304
 12989                           
 12990                           ;kbd4x3.c: 26:         _delay((unsigned long)((2)*(4000000/4000.0)));
 12991     06E0  3003               	movlw	3
 12992     06E1  00F0               	movwf	??_Keypad_Get_Char
 12993     06E2  3098               	movlw	152
 12994     06E3                     u678_27:
 12995     06E3  0B89               	decfsz	9,f
 12996     06E4  2EE3               	goto	u678_27
 12997     06E5  0BF0               	decfsz	??_Keypad_Get_Char,f
 12998     06E6  2EE3               	goto	u678_27
 12999     06E7                     i1l305:	
 13000                           ;kbd4x3.c: 27:         while(PORTBbits.RB5 == 1);
 13001                           
 13002     06E7  0020               	movlb	0	; select bank0
 13003     06E8  1A8D               	btfsc	13,5	;volatile
 13004     06E9  2EE7               	goto	i1l305
 13005                           
 13006                           ;kbd4x3.c: 28:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13007     06EA  3007               	movlw	7
 13008     06EB  00F0               	movwf	??_Keypad_Get_Char
 13009     06EC  307D               	movlw	125
 13010     06ED                     u679_27:
 13011     06ED  0B89               	decfsz	9,f
 13012     06EE  2EED               	goto	u679_27
 13013     06EF  0BF0               	decfsz	??_Keypad_Get_Char,f
 13014     06F0  2EED               	goto	u679_27
 13015     06F1  0000               	nop
 13016                           
 13017                           ;kbd4x3.c: 29:         return '4';
 13018     06F2  3034               	movlw	52
 13019     06F3  0008               	return
 13020     06F4                     i1l304:	
 13021                           ;kbd4x3.c: 30:     }
 13022                           
 13023                           
 13024                           ;kbd4x3.c: 31:     if(PORTBbits.RB6 == 1){
 13025     06F4  1F0D               	btfss	13,6	;volatile
 13026     06F5  2F0A               	goto	i1l308
 13027                           
 13028                           ;kbd4x3.c: 32:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13029     06F6  3003               	movlw	3
 13030     06F7  00F0               	movwf	??_Keypad_Get_Char
 13031     06F8  3098               	movlw	152
 13032     06F9                     u680_27:
 13033     06F9  0B89               	decfsz	9,f
 13034     06FA  2EF9               	goto	u680_27
 13035     06FB  0BF0               	decfsz	??_Keypad_Get_Char,f
 13036     06FC  2EF9               	goto	u680_27
 13037     06FD                     i1l309:	
 13038                           ;kbd4x3.c: 33:         while(PORTBbits.RB6 == 1);
 13039                           
 13040     06FD  0020               	movlb	0	; select bank0
 13041     06FE  1B0D               	btfsc	13,6	;volatile
 13042     06FF  2EFD               	goto	i1l309
 13043                           
 13044                           ;kbd4x3.c: 34:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13045     0700  3007               	movlw	7
 13046     0701  00F0               	movwf	??_Keypad_Get_Char
 13047     0702  307D               	movlw	125
 13048     0703                     u681_27:
 13049     0703  0B89               	decfsz	9,f
 13050     0704  2F03               	goto	u681_27
 13051     0705  0BF0               	decfsz	??_Keypad_Get_Char,f
 13052     0706  2F03               	goto	u681_27
 13053     0707  0000               	nop
 13054                           
 13055                           ;kbd4x3.c: 35:         return '7';
 13056     0708  3037               	movlw	55
 13057     0709  0008               	return
 13058     070A                     i1l308:	
 13059                           ;kbd4x3.c: 36:     }
 13060                           
 13061                           
 13062                           ;kbd4x3.c: 37:     if(PORTBbits.RB7 == 1){
 13063     070A  1F8D               	btfss	13,7	;volatile
 13064     070B  2F20               	goto	i1l312
 13065                           
 13066                           ;kbd4x3.c: 38:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13067     070C  3003               	movlw	3
 13068     070D  00F0               	movwf	??_Keypad_Get_Char
 13069     070E  3098               	movlw	152
 13070     070F                     u682_27:
 13071     070F  0B89               	decfsz	9,f
 13072     0710  2F0F               	goto	u682_27
 13073     0711  0BF0               	decfsz	??_Keypad_Get_Char,f
 13074     0712  2F0F               	goto	u682_27
 13075     0713                     i1l313:	
 13076                           ;kbd4x3.c: 39:         while(PORTBbits.RB7 == 1);
 13077                           
 13078     0713  0020               	movlb	0	; select bank0
 13079     0714  1B8D               	btfsc	13,7	;volatile
 13080     0715  2F13               	goto	i1l313
 13081                           
 13082                           ;kbd4x3.c: 40:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13083     0716  3007               	movlw	7
 13084     0717  00F0               	movwf	??_Keypad_Get_Char
 13085     0718  307D               	movlw	125
 13086     0719                     u683_27:
 13087     0719  0B89               	decfsz	9,f
 13088     071A  2F19               	goto	u683_27
 13089     071B  0BF0               	decfsz	??_Keypad_Get_Char,f
 13090     071C  2F19               	goto	u683_27
 13091     071D  0000               	nop
 13092                           
 13093                           ;kbd4x3.c: 41:         return '*';
 13094     071E  302A               	movlw	42
 13095     071F  0008               	return
 13096     0720                     i1l312:	
 13097                           ;kbd4x3.c: 42:     }
 13098                           
 13099                           
 13100                           ;kbd4x3.c: 44:     PORTBbits.RB1 = 0;
 13101     0720  108D               	bcf	13,1	;volatile
 13102                           
 13103                           ;kbd4x3.c: 45:     PORTBbits.RB2 = 1;
 13104     0721  150D               	bsf	13,2	;volatile
 13105                           
 13106                           ;kbd4x3.c: 46:     PORTBbits.RB3 = 0;
 13107     0722  118D               	bcf	13,3	;volatile
 13108                           
 13109                           ;kbd4x3.c: 47:     if(PORTBbits.RB4 == 1){
 13110     0723  1E0D               	btfss	13,4	;volatile
 13111     0724  2F39               	goto	i1l316
 13112                           
 13113                           ;kbd4x3.c: 48:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13114     0725  3003               	movlw	3
 13115     0726  00F0               	movwf	??_Keypad_Get_Char
 13116     0727  3098               	movlw	152
 13117     0728                     u684_27:
 13118     0728  0B89               	decfsz	9,f
 13119     0729  2F28               	goto	u684_27
 13120     072A  0BF0               	decfsz	??_Keypad_Get_Char,f
 13121     072B  2F28               	goto	u684_27
 13122     072C                     i1l317:	
 13123                           ;kbd4x3.c: 49:         while(PORTBbits.RB4 == 1);
 13124                           
 13125     072C  0020               	movlb	0	; select bank0
 13126     072D  1A0D               	btfsc	13,4	;volatile
 13127     072E  2F2C               	goto	i1l317
 13128                           
 13129                           ;kbd4x3.c: 50:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13130     072F  3007               	movlw	7
 13131     0730  00F0               	movwf	??_Keypad_Get_Char
 13132     0731  307D               	movlw	125
 13133     0732                     u685_27:
 13134     0732  0B89               	decfsz	9,f
 13135     0733  2F32               	goto	u685_27
 13136     0734  0BF0               	decfsz	??_Keypad_Get_Char,f
 13137     0735  2F32               	goto	u685_27
 13138     0736  0000               	nop
 13139                           
 13140                           ;kbd4x3.c: 51:         return '2';
 13141     0737  3032               	movlw	50
 13142     0738  0008               	return
 13143     0739                     i1l316:	
 13144                           ;kbd4x3.c: 52:     }
 13145                           
 13146                           
 13147                           ;kbd4x3.c: 53:     if(PORTBbits.RB5 == 1){
 13148     0739  1E8D               	btfss	13,5	;volatile
 13149     073A  2F4F               	goto	i1l320
 13150                           
 13151                           ;kbd4x3.c: 54:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13152     073B  3003               	movlw	3
 13153     073C  00F0               	movwf	??_Keypad_Get_Char
 13154     073D  3098               	movlw	152
 13155     073E                     u686_27:
 13156     073E  0B89               	decfsz	9,f
 13157     073F  2F3E               	goto	u686_27
 13158     0740  0BF0               	decfsz	??_Keypad_Get_Char,f
 13159     0741  2F3E               	goto	u686_27
 13160     0742                     i1l321:	
 13161                           ;kbd4x3.c: 55:         while(PORTBbits.RB5 == 1);
 13162                           
 13163     0742  0020               	movlb	0	; select bank0
 13164     0743  1A8D               	btfsc	13,5	;volatile
 13165     0744  2F42               	goto	i1l321
 13166                           
 13167                           ;kbd4x3.c: 56:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13168     0745  3007               	movlw	7
 13169     0746  00F0               	movwf	??_Keypad_Get_Char
 13170     0747  307D               	movlw	125
 13171     0748                     u687_27:
 13172     0748  0B89               	decfsz	9,f
 13173     0749  2F48               	goto	u687_27
 13174     074A  0BF0               	decfsz	??_Keypad_Get_Char,f
 13175     074B  2F48               	goto	u687_27
 13176     074C  0000               	nop
 13177                           
 13178                           ;kbd4x3.c: 57:         return '5';
 13179     074D  3035               	movlw	53
 13180     074E  0008               	return
 13181     074F                     i1l320:	
 13182                           ;kbd4x3.c: 58:     }
 13183                           
 13184                           
 13185                           ;kbd4x3.c: 59:     if(PORTBbits.RB6 == 1){
 13186     074F  1F0D               	btfss	13,6	;volatile
 13187     0750  2F65               	goto	i1l324
 13188                           
 13189                           ;kbd4x3.c: 60:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13190     0751  3003               	movlw	3
 13191     0752  00F0               	movwf	??_Keypad_Get_Char
 13192     0753  3098               	movlw	152
 13193     0754                     u688_27:
 13194     0754  0B89               	decfsz	9,f
 13195     0755  2F54               	goto	u688_27
 13196     0756  0BF0               	decfsz	??_Keypad_Get_Char,f
 13197     0757  2F54               	goto	u688_27
 13198     0758                     i1l325:	
 13199                           ;kbd4x3.c: 61:         while(PORTBbits.RB6 == 1);
 13200                           
 13201     0758  0020               	movlb	0	; select bank0
 13202     0759  1B0D               	btfsc	13,6	;volatile
 13203     075A  2F58               	goto	i1l325
 13204                           
 13205                           ;kbd4x3.c: 62:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13206     075B  3007               	movlw	7
 13207     075C  00F0               	movwf	??_Keypad_Get_Char
 13208     075D  307D               	movlw	125
 13209     075E                     u689_27:
 13210     075E  0B89               	decfsz	9,f
 13211     075F  2F5E               	goto	u689_27
 13212     0760  0BF0               	decfsz	??_Keypad_Get_Char,f
 13213     0761  2F5E               	goto	u689_27
 13214     0762  0000               	nop
 13215                           
 13216                           ;kbd4x3.c: 63:         return '8';
 13217     0763  3038               	movlw	56
 13218     0764  0008               	return
 13219     0765                     i1l324:	
 13220                           ;kbd4x3.c: 64:     }
 13221                           
 13222                           
 13223                           ;kbd4x3.c: 65:     if(PORTBbits.RB7 == 1){
 13224     0765  1F8D               	btfss	13,7	;volatile
 13225     0766  2F7B               	goto	i1l328
 13226                           
 13227                           ;kbd4x3.c: 66:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13228     0767  3003               	movlw	3
 13229     0768  00F0               	movwf	??_Keypad_Get_Char
 13230     0769  3098               	movlw	152
 13231     076A                     u690_27:
 13232     076A  0B89               	decfsz	9,f
 13233     076B  2F6A               	goto	u690_27
 13234     076C  0BF0               	decfsz	??_Keypad_Get_Char,f
 13235     076D  2F6A               	goto	u690_27
 13236     076E                     i1l329:	
 13237                           ;kbd4x3.c: 67:         while(PORTBbits.RB7 == 1);
 13238                           
 13239     076E  0020               	movlb	0	; select bank0
 13240     076F  1B8D               	btfsc	13,7	;volatile
 13241     0770  2F6E               	goto	i1l329
 13242                           
 13243                           ;kbd4x3.c: 68:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13244     0771  3007               	movlw	7
 13245     0772  00F0               	movwf	??_Keypad_Get_Char
 13246     0773  307D               	movlw	125
 13247     0774                     u691_27:
 13248     0774  0B89               	decfsz	9,f
 13249     0775  2F74               	goto	u691_27
 13250     0776  0BF0               	decfsz	??_Keypad_Get_Char,f
 13251     0777  2F74               	goto	u691_27
 13252     0778  0000               	nop
 13253                           
 13254                           ;kbd4x3.c: 69:         return '0';
 13255     0779  3030               	movlw	48
 13256     077A  0008               	return
 13257     077B                     i1l328:	
 13258                           ;kbd4x3.c: 70:     }
 13259                           
 13260                           
 13261                           ;kbd4x3.c: 72:     PORTBbits.RB1 = 0;
 13262     077B  108D               	bcf	13,1	;volatile
 13263                           
 13264                           ;kbd4x3.c: 73:     PORTBbits.RB2 = 0;
 13265     077C  110D               	bcf	13,2	;volatile
 13266                           
 13267                           ;kbd4x3.c: 74:     PORTBbits.RB3 = 1;
 13268     077D  158D               	bsf	13,3	;volatile
 13269                           
 13270                           ;kbd4x3.c: 75:     if(PORTBbits.RB4 == 1){
 13271     077E  1E0D               	btfss	13,4	;volatile
 13272     077F  2F94               	goto	i1l332
 13273                           
 13274                           ;kbd4x3.c: 76:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13275     0780  3003               	movlw	3
 13276     0781  00F0               	movwf	??_Keypad_Get_Char
 13277     0782  3098               	movlw	152
 13278     0783                     u692_27:
 13279     0783  0B89               	decfsz	9,f
 13280     0784  2F83               	goto	u692_27
 13281     0785  0BF0               	decfsz	??_Keypad_Get_Char,f
 13282     0786  2F83               	goto	u692_27
 13283     0787                     i1l333:	
 13284                           ;kbd4x3.c: 77:         while(PORTBbits.RB4 == 1);
 13285                           
 13286     0787  0020               	movlb	0	; select bank0
 13287     0788  1A0D               	btfsc	13,4	;volatile
 13288     0789  2F87               	goto	i1l333
 13289                           
 13290                           ;kbd4x3.c: 78:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13291     078A  3007               	movlw	7
 13292     078B  00F0               	movwf	??_Keypad_Get_Char
 13293     078C  307D               	movlw	125
 13294     078D                     u693_27:
 13295     078D  0B89               	decfsz	9,f
 13296     078E  2F8D               	goto	u693_27
 13297     078F  0BF0               	decfsz	??_Keypad_Get_Char,f
 13298     0790  2F8D               	goto	u693_27
 13299     0791  0000               	nop
 13300                           
 13301                           ;kbd4x3.c: 79:         return '3';
 13302     0792  3033               	movlw	51
 13303     0793  0008               	return
 13304     0794                     i1l332:	
 13305                           ;kbd4x3.c: 80:     }
 13306                           
 13307                           
 13308                           ;kbd4x3.c: 81:     if(PORTBbits.RB5 == 1){
 13309     0794  1E8D               	btfss	13,5	;volatile
 13310     0795  2FAA               	goto	i1l336
 13311                           
 13312                           ;kbd4x3.c: 82:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13313     0796  3003               	movlw	3
 13314     0797  00F0               	movwf	??_Keypad_Get_Char
 13315     0798  3098               	movlw	152
 13316     0799                     u694_27:
 13317     0799  0B89               	decfsz	9,f
 13318     079A  2F99               	goto	u694_27
 13319     079B  0BF0               	decfsz	??_Keypad_Get_Char,f
 13320     079C  2F99               	goto	u694_27
 13321     079D                     i1l337:	
 13322                           ;kbd4x3.c: 83:         while(PORTBbits.RB5 == 1);
 13323                           
 13324     079D  0020               	movlb	0	; select bank0
 13325     079E  1A8D               	btfsc	13,5	;volatile
 13326     079F  2F9D               	goto	i1l337
 13327                           
 13328                           ;kbd4x3.c: 84:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13329     07A0  3007               	movlw	7
 13330     07A1  00F0               	movwf	??_Keypad_Get_Char
 13331     07A2  307D               	movlw	125
 13332     07A3                     u695_27:
 13333     07A3  0B89               	decfsz	9,f
 13334     07A4  2FA3               	goto	u695_27
 13335     07A5  0BF0               	decfsz	??_Keypad_Get_Char,f
 13336     07A6  2FA3               	goto	u695_27
 13337     07A7  0000               	nop
 13338                           
 13339                           ;kbd4x3.c: 85:         return '6';
 13340     07A8  3036               	movlw	54
 13341     07A9  0008               	return
 13342     07AA                     i1l336:	
 13343                           ;kbd4x3.c: 86:     }
 13344                           
 13345                           
 13346                           ;kbd4x3.c: 87:     if(PORTBbits.RB6 == 1){
 13347     07AA  1F0D               	btfss	13,6	;volatile
 13348     07AB  2FC0               	goto	i1l340
 13349                           
 13350                           ;kbd4x3.c: 88:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13351     07AC  3003               	movlw	3
 13352     07AD  00F0               	movwf	??_Keypad_Get_Char
 13353     07AE  3098               	movlw	152
 13354     07AF                     u696_27:
 13355     07AF  0B89               	decfsz	9,f
 13356     07B0  2FAF               	goto	u696_27
 13357     07B1  0BF0               	decfsz	??_Keypad_Get_Char,f
 13358     07B2  2FAF               	goto	u696_27
 13359     07B3                     i1l341:	
 13360                           ;kbd4x3.c: 89:         while(PORTBbits.RB6 == 1);
 13361                           
 13362     07B3  0020               	movlb	0	; select bank0
 13363     07B4  1B0D               	btfsc	13,6	;volatile
 13364     07B5  2FB3               	goto	i1l341
 13365                           
 13366                           ;kbd4x3.c: 90:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13367     07B6  3007               	movlw	7
 13368     07B7  00F0               	movwf	??_Keypad_Get_Char
 13369     07B8  307D               	movlw	125
 13370     07B9                     u697_27:
 13371     07B9  0B89               	decfsz	9,f
 13372     07BA  2FB9               	goto	u697_27
 13373     07BB  0BF0               	decfsz	??_Keypad_Get_Char,f
 13374     07BC  2FB9               	goto	u697_27
 13375     07BD  0000               	nop
 13376                           
 13377                           ;kbd4x3.c: 91:         return '9';
 13378     07BE  3039               	movlw	57
 13379     07BF  0008               	return
 13380     07C0                     i1l340:	
 13381                           ;kbd4x3.c: 92:     }
 13382                           
 13383                           
 13384                           ;kbd4x3.c: 93:     if(PORTBbits.RB7 == 1){
 13385     07C0  1F8D               	btfss	13,7	;volatile
 13386     07C1  2FD6               	goto	i1l4877
 13387                           
 13388                           ;kbd4x3.c: 94:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13389     07C2  3003               	movlw	3
 13390     07C3  00F0               	movwf	??_Keypad_Get_Char
 13391     07C4  3098               	movlw	152
 13392     07C5                     u698_27:
 13393     07C5  0B89               	decfsz	9,f
 13394     07C6  2FC5               	goto	u698_27
 13395     07C7  0BF0               	decfsz	??_Keypad_Get_Char,f
 13396     07C8  2FC5               	goto	u698_27
 13397     07C9                     i1l345:	
 13398                           ;kbd4x3.c: 95:         while(PORTBbits.RB7 == 1);
 13399                           
 13400     07C9  0020               	movlb	0	; select bank0
 13401     07CA  1B8D               	btfsc	13,7	;volatile
 13402     07CB  2FC9               	goto	i1l345
 13403                           
 13404                           ;kbd4x3.c: 96:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13405     07CC  3007               	movlw	7
 13406     07CD  00F0               	movwf	??_Keypad_Get_Char
 13407     07CE  307D               	movlw	125
 13408     07CF                     u699_27:
 13409     07CF  0B89               	decfsz	9,f
 13410     07D0  2FCF               	goto	u699_27
 13411     07D1  0BF0               	decfsz	??_Keypad_Get_Char,f
 13412     07D2  2FCF               	goto	u699_27
 13413     07D3  0000               	nop
 13414                           
 13415                           ;kbd4x3.c: 97:         return '#';
 13416     07D4  3023               	movlw	35
 13417     07D5  0008               	return
 13418     07D6                     i1l4877:
 13419                           
 13420                           ;kbd4x3.c: 99:     return 0;
 13421     07D6  3000               	movlw	0
 13422     07D7  0008               	return
 13423     07D8                     __end_of_Keypad_Get_Char:
 13424     007E                     btemp	set	126	;btemp
 13425     007E                     int$flags	set	126
 13426     007E                     wtemp0	set	126
 13427                           
 13428                           	psect	config
 13429                           
 13430                           ;Config register CONFIG1 @ 0x8007
 13431                           ;	Oscillator Selection
 13432                           ;	FOSC = XT, XT Oscillator, Crystal/resonator connected between OSC1 and OSC2 pins
 13433                           ;	Watchdog Timer Enable
 13434                           ;	WDTE = OFF, WDT disabled
 13435                           ;	Power-up Timer Enable
 13436                           ;	PWRTE = OFF, PWRT disabled
 13437                           ;	MCLR Pin Function Select
 13438                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 13439                           ;	Flash Program Memory Code Protection
 13440                           ;	CP = OFF, Program memory code protection is disabled
 13441                           ;	Data Memory Code Protection
 13442                           ;	CPD = OFF, Data memory code protection is disabled
 13443                           ;	Brown-out Reset Enable
 13444                           ;	BOREN = OFF, Brown-out Reset disabled
 13445                           ;	Clock Out Enable
 13446                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 13447                           ;	Internal/External Switchover
 13448                           ;	IESO = ON, Internal/External Switchover mode is enabled
 13449                           ;	Fail-Safe Clock Monitor Enable
 13450                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 13451     8007                     	org	32775
 13452     8007  39E1               	dw	14817
 13453                           
 13454                           ;Config register CONFIG2 @ 0x8008
 13455                           ;	Flash Memory Self-Write Protection
 13456                           ;	WRT = OFF, Write protection off
 13457                           ;	Voltage Regulator Capacitor Enable
 13458                           ;	VCAPEN = OFF, All VCAP pin functionality is disabled
 13459                           ;	PLL Enable
 13460                           ;	PLLEN = OFF, 4x PLL disabled
 13461                           ;	Stack Overflow/Underflow Reset Enable
 13462                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 13463                           ;	Brown-out Reset Voltage Selection
 13464                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 13465                           ;	Low-Voltage Programming Enable
 13466                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
 13467     8008                     	org	32776
 13468     8008  1EFF               	dw	7935

Data Sizes:
    Strings     137
    Constant    0
    Data        5
    BSS         134
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     80      80
    BANK1            80     79      80
    BANK2            80     31      67
    BANK3            80      0      20
    BANK4            80      0      80
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    efgtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    Lcd_Write_String@a	PTR const unsigned char  size(2) Largest target is 20
		 -> buffer(BANK3[20]), STR_1(CODE[15]), STR_10(CODE[7]), STR_11(CODE[9]), 
		 -> STR_12(CODE[7]), STR_13(CODE[9]), STR_14(CODE[15]), STR_15(CODE[14]), 
		 -> STR_16(CODE[15]), STR_17(CODE[17]), STR_4(CODE[2]), STR_6(CODE[2]), 
		 -> STR_7(CODE[17]), STR_8(CODE[16]), STR_9(CODE[15]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    memcpy@d1	PTR void  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    memcpy@s1	PTR const void  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    S1229$buffer	PTR unsigned char  size(2) Largest target is 0

    S1229$source	PTR const unsigned char  size(2) Largest target is 0

    sp__memcpy	PTR void  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_3(CODE[7]), STR_5(CODE[7]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK3[20]), 

    strcmp@l	PTR const unsigned char  size(1) Largest target is 5
		 -> clave(BANK2[5]), 

    strcmp@r	PTR const unsigned char  size(1) Largest target is 5
		 -> clave_enter(BANK2[5]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_18(CODE[4]), STR_21(CODE[4]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_3(CODE[7]), STR_5(CODE[7]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_3(CODE[7]), STR_5(CODE[7]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_3(CODE[7]), STR_5(CODE[7]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _IOC in COMMON

    _IOC->i1_Lcd_Write_String
    i1_Lcd_Write_String->i1_Lcd_Write_Char
    i1_Lcd_Write_Char->i1_Lcd_Port
    i1_Lcd_Set_Cursor->i1_Lcd_Cmd
    i1_Lcd_Clear->i1_Lcd_Cmd
    i1_Lcd_Cmd->i1_Lcd_Port

Critical Paths under _main in BANK0

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _read_prec_or_width->___wmul
    _efgtoa->_floorf
    _floorf->___fldiv
    ___flsub->___flmul
    ___flmul->__Umul8_16
    ___flge->___flmul
    ___fldiv->___xxtofl
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    ___xxtofl->___wmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _IOC in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa

Critical Paths under _IOC in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_sprintf

Critical Paths under _IOC in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _IOC in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _IOC in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _IOC in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _IOC in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   32912
                                             77 BANK1      2     2      0
                                             13 BANK2     18    18      0
            _ADC_GetConversionResult
                     _ADC_Initialize
               _ADC_IsConversionDone
                _ADC_StartConversion
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___fldiv
                             ___wmul
                           ___xxtofl
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    16     14   26183
                                             62 BANK1     15     1     14
                                              0 BANK2     13    13      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             7     4      3   25651
                                             77 BANK0      3     0      3
                                             58 BANK1      4     4      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           15    13      2   25329
                                             75 BANK0      2     0      2
                                             45 BANK1     13    13      0
                               _dtoa
                             _efgtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   9     7      2     837
                                              6 BANK0      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     548
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _efgtoa                                              55    50      5   18860
                                             66 BANK0      9     4      5
                                              0 BANK1     45    45      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                               _labs
                             _memcpy
                                _pad
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     4      2     291
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _memcpy                                               8     5      3     328
                                              0 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (5) _labs                                                 4     0      4     294
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _floorf                                              20    16      4     490
                                             46 BANK0     20    16      4
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fpclassifyf                                       16    12      4     287
                                              0 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4     457
                                              0 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    2637
                                             35 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    2288
                                              0 BANK0     20    12      8
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     121
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             26    18      8    3177
                                              9 BANK0     26    18      8
                          __Umul8_16
 ---------------------------------------------------------------------------------
 (6) __Umul8_16                                            9     7      2     799
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8     942
                                             35 BANK0     12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fleq                                              12     4      8     394
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             26    18      8    2185
                                             20 BANK0     26    18      8
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                13    11      2    4006
                                             22 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     4      3    2445
                                             15 BANK0      7     4      3
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     6      1     888
                                              8 BANK0      7     6      1
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 BANK0      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              7     3      4     448
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              9     5      4     452
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) ___xxtofl                                            14    10      4     474
                                              6 BANK0     14    10      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     5     3      2    1274
                                              5 BANK0      5     3      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1    1806
                                              3 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     308
                                              3 BANK0      1     1      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _IOC                                                  2     2      0    2186
                                             10 COMMON     2     2      0
                    _Keypad_Get_Char
                        _Keypad_Init
                             _strcmp
                        i1_Lcd_Clear
                   i1_Lcd_Set_Cursor
                   i1_Lcd_Write_Char
                 i1_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (10) i1_Lcd_Write_String                                  5     3      2     554
                                              5 COMMON     5     3      2
                   i1_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (11) i1_Lcd_Write_Char                                    4     4      0     178
                                              1 COMMON     4     4      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i1_Lcd_Set_Cursor                                    6     5      1    1014
                                              3 COMMON     6     5      1
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (10) i1_Lcd_Clear                                         0     0      0     110
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (11) i1_Lcd_Cmd                                           2     2      0     110
                                              1 COMMON     2     2      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (12) i1_Lcd_Port                                          1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              4     2      2     330
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (10) _Keypad_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Keypad_Get_Char                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversionResult
   _ADC_Initialize
   _ADC_IsConversionDone
   _ADC_StartConversion
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Clear
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___fldiv
     ___wmul (ARG)
     ___xxtofl (ARG)
       ___wmul (ARG)
   ___wmul
   ___xxtofl
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _efgtoa
           ___fladd
           ___fldiv
           ___fleq
           ___flge
             ___flmul (ARG)
               __Umul8_16
           ___flmul
           ___flneg
           ___flsub
             ___fladd
             ___flmul (ARG)
           ___fltol
           ___fpclassifyf
           _floorf
             ___fldiv (ARG)
           _labs
           _memcpy
           _pad
           _strcpy
         _fputc
         _read_prec_or_width
           ___wmul

 _IOC (ROOT)
   _Keypad_Get_Char
   _Keypad_Init
   _strcmp
   i1_Lcd_Clear
     i1_Lcd_Cmd
       i1_Lcd_Port
   i1_Lcd_Set_Cursor
     i1_Lcd_Cmd
   i1_Lcd_Write_Char
     i1_Lcd_Port
   i1_Lcd_Write_String
     i1_Lcd_Write_Char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     155       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4F      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     1F      43      10       83.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      14      12       25.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      50      14      100.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     155      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Jan 29 15:14:19 2025

                   ___fldiv@aexp 004D                     ___fldiv@bexp 004C                     ___fldiv@sign 0045  
                    _SSPSTATbits 0214                     ___awdiv@sign 0026              ___wmul@multiplicand 0022  
            __Umul8_16@word_mpld 0026                              l200 0309                              l203 030D  
                            l212 0314                              l221 031D                              l230 032B  
                            l206 030F                              l215 0317                              l224 0320  
                            l233 0333                              l209 0312                              l242 0341  
                            l218 031B                              l227 0328                              l236 0336  
                            l239 033E                              l361 1D7B                              l373 1D93  
                            l365 1D83                              l369 1D8B                              l901 17E2  
                            l566 1D01                              l735 1EE1                              l736 1EFB  
                            l744 122B                              l923 138C                              l747 1279  
                            l909 17FA                              l871 1702                              l767 10A7  
                            l944 1493                              l945 14AB                              l873 16E7  
                            l947 14B6                              l867 1693                              l982 1D44  
                            l975 06B7                              l888 1783                              _IOC 0004  
                            _abs 1C43                              _pad 1E29                              _hor 0136  
                            _min 0137                              _seg 00EF                     ___awmod@sign 0026  
                            wreg 0009                     ___flmul@aexp 003B                     ___flmul@bexp 003C  
                   ___flmul@sign 0036                     ___flmul@temp 0041                     ___flmul@prod 003D  
                           ?_IOC 0070                     ___fltol@exp1 0029                             l1020 0866  
                           l1021 0870                             l1013 0852                             l1110 0BC1  
                           l1007 081E                             l1120 0E02                             ?_abs 0027  
                           l1070 12C6                             l1214 0963                             l1058 1E2F  
                           l1227 1DE0                             l1156 14E4                             l1069 12AC  
                           l1158 14EF                             l4005 04CA                             l4023 04EB  
                           l4007 04CC                             l4113 0691                             l4025 04ED  
                           l4009 04D4                             l4035 0503                             l4027 04F5  
                           l4211 0946                             l4141 1E4D                             l4109 067C  
                           l4205 091C                             l4119 06A8                             l4207 092D  
                           l5111 03D2                             l4233 1D85                             l3505 169D  
                           l4161 11E3                             l4401 0BF3                             l4305 09C0  
                           l3451 1F40                             l4139 1E31                             l4251 12A5  
                           l3611 17A9                             l4171 120B                             l4403 0CDB  
                           l4323 0A00                             l4315 09D3                             l4237 1D8D  
                           l4229 1D7D                             l3701 1FC4                             l4261 12C0  
                           l3605 17A2                             l3613 17AB                             l4165 11E8  
                           l4413 0D5E                             l4341 0A68                             l4317 09D9  
                           l3711 1FCC                             l3447 1F19                             l4247 129C  
                           l4095 0651                             l4087 0623                             l3623 17B6  
                           l3543 16ED                             l3535 16BB                             l3471 1664  
                           l4503 0FEB                             l4431 0E15                             l4407 0D2E  
                           l4351 0A9D                             l4335 0A48                             l5063 0296  
                           l3713 1FD8                             l4265 12EA                             l4089 063A  
                           l3641 17F2                             l3561 1710                             l3545 16EF  
                           l3553 16FD                             l4177 1CC6                             l4361 0B55  
                           l4329 0A20                             l4521 104A                             l4601 15F8  
                           l5129 046F                             l3723 1FF3                             l4291 133E  
                           l4275 1323                             l4099 0653                             l3619 17B4  
                           l3571 1722                             l3475 1667                             l3811 1069  
                           l4435 0E8E                             l4355 0AF7                             l4371 0BAB  
                           l4523 105C                             l5139 04A6                             l4277 12CD  
                           l4285 132F                             l3645 17F6                             l3477 166F  
                           l4437 0E93                             l4349 0A90                             l4517 102D  
                           l4613 162F                             l5069 02F8                             ?_pad 002F  
                           l3727 1FFB                             l3719 1FEA                             l3751 1E98  
                           l3743 1E92                             l3671 1D9A                             l3655 1D3E  
                           l3495 1688                             l3831 1095                             l3815 1072  
                           l4391 0BE1                             l4359 0B4B                             l4607 1614  
                           l3753 1EA4                             l3761 1EB9                             l3905 13B7  
                           l3569 1720                             l3841 10B4                             l3833 10A3  
                           l4457 0EA8                             l4473 0F52                             l4377 0BBC  
                           l4369 0B86                             l4609 1625                             l4561 1538  
                           l4553 14F1                             l3739 1E8B                             l3931 1417  
                           l3579 1731                             l3499 168B                             l4459 0EC0  
                           l4387 0BD9                             l3675 1CFB                             l4555 1510  
                           l4901 0816                             l3765 1EC1                             l3757 1EB0  
                           l3925 13FE                             l3933 13E0                             l3597 1795  
                           l3589 177B                             l4477 0F70                             l4581 1590  
                           l5533 150A                             l4751 1147                             l4911 082F  
                           l3695 1FB9                             l3951 1439                             l3935 141C  
                           l3871 136A                             l3791 125F                             l4495 0FCC  
                           l4591 15B1                             l5535 159D                             l4583 1593  
                           l4575 157B                             l4567 1551                             l4761 1162  
                           l4921 0864                             l4913 083F                             l3961 1452  
                           l3865 135F                             l3777 1F0D                             l4497 0FAB  
                           l5537 15E0                             l4593 15C4                             l4771 117D  
                           l4923 0857                             l4907 082D                             l3971 147B  
                           l3787 1245                             l4499 0FDC                             l5539 1620  
                           l4579 158B                             l4587 1595                             l3957 1450  
                           l3949 1422                             l3885 1381                             l3869 1362  
                           l4597 15D8                             l4589 15A8                             l4677 1D5D  
                           l4935 088B                             l4599 15E8                             l4679 1D70  
                           l3985 14B2                             l3889 1384                             l4787 1CDF  
                           l3899 13AB                             STR_1 1832                             STR_2 1850  
                           STR_3 1871                             STR_4 1887                             STR_5 1871  
                           STR_6 1887                             STR_7 1811                             STR_8 1822  
                           STR_9 1813                             _LATA 010C                             _LATB 010D  
                           _LATC 010E                             _LATD 010F                             _LATE 0110  
                           u4005 1EAA                             u4015 1EB1                             u4205 10AB  
                           u5005 094F                             u3335 1F3E                             u3440 16DA  
                           u4065 1F09                             u4145 107B                             u3450 16DB  
                           u3435 16CF                             u4325 13E8                             u3605 1796  
                           u5070 1292                             u5135 132D                             u4415 142E  
                           u4335 13EF                             u4175 1096                             u5080 1293  
                           u4505 149D                             u3705 17CD                             u6115 085E  
                           u5155 12DB                             u4355 13F8                             u3563 1743  
                           u3555 1726                             u5165 12E7                             u4365 140C  
                           u4605 0573                             u3485 16F3                             u4615 059E  
                           u3905 1FD9                             u4625 05EC                             u5425 0E70  
                           u3825 1D02                             u6155 0878                             u6075 0838  
                           u3915 1FE3                             u4395 1425                             u4635 0603  
                           u5515 0FDA                             u3835 1D07                             u3925 1FEB  
                           u4485 1469                             u4645 0612                             u5525 0FBA  
                           u5365 0C01                             u6095 084C                             u4495 1484  
                           u4655 0626                             u4815 11B9                             u5480 0F9D  
                           u5705 1136                             u3785 1D45                             u4745 066A  
                           u5465 0F60                             u5490 0F9E                             u4755 0685  
                           u4675 062F                             u4835 11D2                             u4915 08B5  
                           u5475 0F6E                             u6435 034C                             u4940 08E3  
                           u5725 1151                             u3885 1FCF                             u4765 069B  
                           u4925 08D0                             u6445 036C                             u4870 1203  
                           u6607 1E16                             u6455 038C                             u4880 1204  
                           u5745 116C                             u6617 1E23                             u5665 1E0C  
                           u3985 1E9B                             u4865 11F5                             u4945 08DF  
                           u6465 03CD                             u6627 1F6D                             u4795 1E3B  
                           u6637 1F7A                             u5765 1187                             u4965 0908  
                           u6647 1F86                             u6657 1C88                             u4985 0936  
                           u6587 028C                             u6597 04AC                             _WPUB 020D  
                           _WPUE 0210                             abs@a 0027                ?_Lcd_Write_String 0025  
                           _dbuf 0220                             _labs 1C52                             _main 024D  
                           _dtoa 128C                             _prec 012E                             _temp 0128  
                           pad@i 0033                             pad@p 0030                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             btemp 007E  
                  ___fpclassifyf 1198                             start 021D               ??_Lcd_Write_String 0027  
                ___fldiv@new_exp 0046                  __end_of_Lcd_Cmd 1C90                            ??_IOC 007A  
                          ??_abs 0029                            ??_pad 0032                    ___fltol@sign1 0028  
                          ?_labs 0020                  __end_of___fladd 1800                            ?_main 0070  
                          ?_dtoa 0036                  __end_of___fldiv 14B9                  __end_of___awdiv 2000  
                __end_of___flneg 1C43                            STR_10 1878                            STR_11 185F  
                          STR_12 1878                            STR_21 1883                            STR_13 1868  
                          STR_14 1813                            STR_15 1824                            STR_16 1841  
                          STR_17 1800                            STR_18 187F                  __end_of___awmod 1EC6  
                __end_of___flmul 06C4                  __end_of___flsub 1D33                  __end_of___fltol 10C3  
                ___awdiv@divisor 0020                            _IOCBF 0396                            _IOCBN 0395  
                          i1l300 06D1                            i1l320 074F                            i1l312 0720  
                          i1l304 06F4                            i1l321 0742                            i1l313 0713  
                          i1l305 06E7                            i1l340 07C0                            i1l332 0794  
                          i1l324 0765                            i1l316 0739                            i1l308 070A  
                          i1l341 07B3                            i1l333 0787                            i1l325 0758  
                          i1l317 072C                            i1l309 06FD                            i1l336 07AA  
                          i1l328 077B                            i1l345 07C9                            i1l337 079D  
                          i1l329 076E                            i1l361 1C96                            i1l373 1CA6  
                          i1l365 1C9C                            i1l369 1CA1                            i1l299 06DE  
              ?i1_Lcd_Set_Cursor 0073                  ___awdiv@counter 0025                    ??_Keypad_Init 0070  
                   vfpfcnvrt@fmt 006B                            _TRISA 008C                            _TRISB 008D  
                          _TRISC 008E                            _TRISD 008F                            _TRISE 0090  
                    ?i1_Lcd_Port 0070               ??i1_Lcd_Set_Cursor 0074                            _clave 0138  
                          _flags 007C              read_prec_or_width@c 002B              read_prec_or_width@n 002C  
                          _fputc 1F0F                            _fputs 1D96                            _tecla 007D  
                          labs@a 0020                            pad@fp 0035                            _width 012C  
                          _putch 0003                            dtoa@d 0036                            dtoa@i 0041  
                          dtoa@p 003C                            dtoa@s 0040                            dtoa@w 003E  
                          status 0003                            wtemp0 007E                  __end_of_sprintf 1DDA  
                 ?___fpclassifyf 0020                 __end_of_Lcd_Init 1FAE                 __end_of_Lcd_Port 1D96  
                __initialization 021F                     __end_of_labs 1C65                     __end_of_main 04B4  
                   __end_of_dtoa 1349                           ??_labs 0024                           ??_main 014C  
                         ??_dtoa 0038       __end_of_read_prec_or_width 1061                   _convertedValue 013D  
                         _ADCON0 009D                           _ADCON1 009E                           ?_fputc 0020  
                         ?_fputs 0028                           _ADRESH 009C                           _ADRESL 009B  
               ___awdiv@dividend 0022                           _APFCON 011D                           _ANSELA 018C  
                         ?_putch 0070                           _ANSELB 018D                           _ANSELD 018F  
                         _ANSELE 0190              __end_of_Keypad_Init 1C30                           _BORCON 0116  
                         i1l5223 0106                           i1l5209 00DC                           i1l5161 003E  
                         i1l5307 01D2                           i1l5171 005C                           i1l5163 0044  
                         i1l5147 001A                           i1l5245 0119                           i1l5263 0129  
                         i1l5247 011C                           i1l5159 003C                           i1l5167 0048  
                         i1l5345 0203                           i1l5265 0155                           i1l5169 0058  
                         i1l4643 1C9D                           i1l5291 0184                           i1l5187 0069  
                         i1l5347 0214                           i1l5293 01B0                           i1l5189 0095  
                         i1l5541 0050                           i1l4647 1CA2                           i1l4639 1C98  
                         i1l5543 0209                           i1l4951 10DD                           i1l4961 10F7  
                         i1l4891 1E71                           i1l4971 1111                           i1l4877 07D6  
                         i1l4887 1E65                           i1l4889 1E56                           i1l4987 1CAA  
                         u621_25 10E7                           u623_25 1101                           u625_25 111B  
                         _OSCCON 0099                           u650_25 0073                           u619_25 10CD  
              ?i1_Lcd_Write_Char 0070                           u653_25 0133                           u670_27 015A  
                         u671_27 01B5                           u568_25 07E4                           u656_25 018E  
                      ??_Lcd_Cmd 0021                           u680_27 06F9                           u672_27 01E8  
                  vfpfcnvrt@done 00D1                           u681_27 0703                           u673_27 07EE  
                         u690_27 076A                           u682_27 070F                           u674_27 07FA  
                         u666_27 0013                           u691_27 0774                           u683_27 0719  
                         u675_27 1C71                           u667_27 009A                           u692_27 0783  
                         u684_27 0728                           u676_27 06CD                           u668_27 00D5  
                         u693_27 078D                           u685_27 0732                           u677_27 06D7  
                         u669_27 00FF                           u694_27 0799                           u686_27 073E  
                         u678_27 06E3                           u695_27 07A3                           u687_27 0748  
                         u679_27 06ED                           u696_27 07AF                           u688_27 0754  
                         u697_27 07B9                           u689_27 075E                           u698_27 07C5  
                         u699_27 07CF                           _WDTCON 0097                           _SSPADD 0212  
                   ?i1_Lcd_Clear 0070                           _SSPBUF 0211                 __end_of___xxtofl 0894  
             ??i1_Lcd_Write_Char 0071                __end_ofi1_Lcd_Cmd 1C79                     vfprintf@cfmt 00DC  
                         ___flge 1210                           ___fleq 1EC6                i1Lcd_Write_Char@a 0074  
              i1Lcd_Write_Char@y 0073                        ??___fladd 0028                           ___wmul 1CF8  
                      ??___fldiv 003C                        ??___awdiv 0024                        ??___flneg 0024  
                      ??___awmod 0024                        ??___flmul 0031                        ??___flsub 004B  
                      ??___fltol 0024                           _efgtoa 096C                           _buffer 01A0  
                         _floorf 0894                           _estado 0130                           _memcpy 1DDA  
           read_prec_or_width@ap 0026                 ___awdiv@quotient 0027                  ___awmod@divisor 0020  
                ___awmod@counter 0025                           pad@buf 002F                           dtoa@fp 003B  
                         _strcmp 1E54                           _strcpy 1CC2                           fputc@c 0020  
                         fputs@c 002B                           fputs@i 002C                           fputs@s 002E  
                ___fpclassifyf@e 002A                  ___fpclassifyf@u 002C                  ___fpclassifyf@x 0020  
                         putch@c 0070                 __end_of_vfprintf 1D74                        ??_sprintf 00EC  
                Lcd_Set_Cursor@a 0025                  Lcd_Set_Cursor@b 0023                  Lcd_Set_Cursor@y 0027  
                Lcd_Set_Cursor@z 0026                       ___flge@ff1 0043                       ___flge@ff2 0047  
                ??___fpclassifyf 0024                     ___xxtofl@arg 0030                     ___xxtofl@exp 002F  
                   ___xxtofl@val 0026                       ___fleq@ff1 0020                       ___fleq@ff2 0024  
        __end_of__initialization 0249                       ___flneg@f1 0020                __end_of_Lcd_Clear 1C27  
                     ___fltol@f1 0020                   __pcstackCOMMON 0070                     __pidataBANK2 1BFD  
                  __end_of_fputc 1F5E                    __end_of_fputs 1DB8                    __end_of_putch 0004  
        _ADC_GetConversionResult 1C30                   _Lcd_Set_Cursor 112B                   _OPTION_REGbits 0095  
                    _Keypad_Init 1C27                        ?_Lcd_Init 0070                        ?_Lcd_Port 0070  
                        ??_fputc 0023                          ??_fputs 0029                          ??_putch 0020  
                     __pbssBANK1 00EF                       __pbssBANK2 0120                       __pbssBANK3 01A0  
                     __pbssBANK4 0220                __end_of__Umul8_16 1D53                       __pmaintext 024D  
                        ?___flge 0043                          ?___fleq 0020                          ?___wmul 0020  
                     __pintentry 0004                          ?_efgtoa 0062                          ?_floorf 004E  
                        ?_memcpy 0020           __end_of_Lcd_Set_Cursor 1198                          ?_strcmp 0070  
                        ?_strcpy 0020                        ?___xxtofl 0026                     ??i1_Lcd_Port 0070  
                        _OSCTUNE 0098                       ??_Lcd_Init 0023                       ??_Lcd_Port 0020  
               main@contadorTemp 00ED                   _Lcd_Write_Char 1DFE                          _Lcd_Cmd 1C79  
           _ADC_InterruptHandler 0134               __end_ofi1_Lcd_Port 1CA8                          ___fladd 164E  
                        ___fldiv 1349                          ___awdiv 1FAE                          ___flneg 1C39  
                        ___awmod 1E80                          ___flmul 04B4                          ___flsub 1D14  
                        ___fltol 1061                        ?_vfprintf 006D        ??_ADC_GetConversionResult 0022  
                ?_Lcd_Set_Cursor 0023                          __ptext1 1DB8                          __ptext2 1D53  
                        __ptext3 14B9                          __ptext4 1004                          __ptext5 1CF8  
                        __ptext6 096C                          __ptext7 1CC2                          __ptext8 1DDA  
                        __ptext9 1C52            read_prec_or_width@fmt 002E                       ??___xxtofl 002A  
               ___awmod@dividend 0022                          efgtoa@c 0066                          efgtoa@d 00AB  
                        efgtoa@e 00B0                          efgtoa@f 0062                          efgtoa@g 00C3  
                        efgtoa@h 00B8                          efgtoa@i 00C0                          efgtoa@l 00BC  
                        efgtoa@m 00AD                          efgtoa@n 00C7                          efgtoa@p 00A2  
                        efgtoa@t 00A4                          efgtoa@u 00C9                          efgtoa@w 00B2  
     __end_ofi1_Lcd_Write_String 1CC2                          _sprintf 1DB8                          clrloop0 1C03  
         __end_of_Lcd_Write_Char 1E29             end_of_initialization 0249                          floorf@e 005C  
                        floorf@m 0058                          floorf@u 005E                          floorf@x 004E  
              ??_Keypad_Get_Char 0070                          memcpy@d 0026                          memcpy@n 0021  
                        memcpy@s 0027                          fputc@fp 0022                          fputs@fp 0028  
             _read_prec_or_width 1004     __end_of_ADC_IsConversionDone 1C0F                __end_of_vfpfcnvrt 164E  
                     efgtoa@mode 00A9                       efgtoa@sign 00C2              ?_read_prec_or_width 0026  
               vfpfcnvrt@convarg 00D2                        Lcd_Port@a 0020                       ??_vfprintf 00DA  
                        strcmp@l 0073                          strcmp@r 0070                        i1_Lcd_Cmd 1C65  
                        strcpy@d 0024                        _PORTBbits 000D                      ___fladd@grs 0033  
                  ___xxtofl@sign 002E                        _TRISAbits 008C                        _TRISBbits 008D  
                      _TRISCbits 008E                        _TRISDbits 008F              _ADC_StartConversion 1001  
           ??_read_prec_or_width 0028                      ___fldiv@grs 0048                      ___fldiv@rem 0041  
                ?_Lcd_Write_Char 0070                Lcd_Write_String@a 0025                Lcd_Write_String@i 0028  
                    ___flmul@grs 0037             ?_ADC_StartConversion 0070                        _Lcd_Clear 1C1F  
                 __end_of___flge 128C                   __end_of___fleq 1F0F                      vfpfcnvrt@ap 006C  
                    vfpfcnvrt@cp 00D8                      vfpfcnvrt@fp 00D7                   __end_of___wmul 1D14  
                     ?i1_Lcd_Cmd 0070                 _Lcd_Write_String 1CDC                   __end_of_efgtoa 1000  
                 _ADC_Initialize 1C17                   __end_of_floorf 096C                   __end_of_memcpy 1DFE  
                     floorf@F521 0120                     ?_Keypad_Init 0070                   __end_of_strcmp 1E80  
                 __end_of_strcpy 1CDC              start_initialization 021F                      __end_of_IOC 021D  
                    __end_of_abs 1C52                      __end_of_pad 1E54                 i1_Lcd_Set_Cursor 10C3  
          __end_of___fpclassifyf 1210            ??_ADC_StartConversion 0020                      vfprintf@fmt 006D  
                     ?_Lcd_Clear 0070                         ??___flge 004B                         ??___fleq 0028  
                       ??___wmul 0024                         ??_efgtoa 0067           __end_of_ADC_Initialize 1C1F  
                      __Umul8_16 1D33                      __pdataBANK2 015E                         ??_floorf 0052  
                       ??_memcpy 0023                  Lcd_Write_Char@a 0024                  Lcd_Write_Char@y 0023  
                       ??_strcmp 0072                         ??_strcpy 0022                        ___fladd@a 0024  
                      ___fladd@b 0020                        ___fldiv@a 0034                        ___fldiv@b 0038  
                      ___flmul@a 002D                        ___flmul@b 0029                      __pbssCOMMON 007C  
                      ___flsub@a 0043                        ___flsub@b 0047                        ___latbits 0002  
                  __pcstackBANK0 0020                    __pcstackBANK1 00A0                    __pcstackBANK2 013F  
           _ADC_IsConversionDone 1C08             i1Lcd_Write_Char@temp 0072                         ?_Lcd_Cmd 0070  
                    _efgtoa$1370 00A6                        _dtoa$1339 0039                 ??_Lcd_Set_Cursor 0024  
                       ?___fladd 0020                         ?___fldiv 0034                         ?___awdiv 0020  
                       ?___flneg 0020                         ?___awmod 0020                         ?___flmul 0029  
                       ?___flsub 0043                         ?___fltol 0020                       ?__Umul8_16 0020  
                ?_ADC_Initialize 0070                      _clave_enter 015E                 i1_Lcd_Write_Char 07D8  
                    ??i1_Lcd_Cmd 0071             i1Lcd_Set_Cursor@temp 0078                  _Keypad_Get_Char 06C4  
          ?_ADC_IsConversionDone 0070                         ?_sprintf 00DE                    ??i1_Lcd_Clear 0073  
                 ___wmul@product 0024                         _LATAbits 010C                         _LATBbits 010D  
                       _LATCbits 010E                         _LATDbits 010F                        clear_ram0 1C02  
             i1_Lcd_Write_String 1CA8                         Lcd_Cmd@a 0022                      ??_Lcd_Clear 0023  
            ?i1_Lcd_Write_String 0075                        _vfpfcnvrt 14B9                       _ADCON0bits 009D  
              ___wmul@multiplier 0020                 ??_Lcd_Write_Char 0021                         _Lcd_Init 1F5E  
                       _Lcd_Port 1D74                       vfpfcnvrt@c 00D6             ??i1_Lcd_Write_String 0077  
       __end_of_Lcd_Write_String 1CF8                        memcpy@tmp 0024                       vfprintf@ap 006F  
                     vfprintf@fp 00DB         ?_ADC_GetConversionResult 0020              __end_ofi1_Lcd_Clear 1C17  
        __end_of_Keypad_Get_Char 07D8                      ??__Umul8_16 0022                       ?_vfpfcnvrt 006B  
       __end_ofi1_Lcd_Set_Cursor 112B               ___fpclassifyf@F465 0124           ??_ADC_IsConversionDone 0020  
                     sprintf@fmt 00DE                         ___xxtofl 0800                i1Lcd_Set_Cursor@a 0075  
              i1Lcd_Set_Cursor@b 0073                i1Lcd_Set_Cursor@y 0077                i1Lcd_Set_Cursor@z 0076  
                       __ptext10 0894                         __ptext11 1198                         __ptext20 1349  
                       __ptext12 1061                         __ptext21 128C                         __ptext13 1D14  
                       __ptext30 1CDC                         __ptext22 1E29                         __ptext14 164E  
                       __ptext31 1DFE                         __ptext23 1D96                         __ptext15 1C39  
                       __ptext40 1C30                         __ptext32 112B                         __ptext24 1F0F  
                       __ptext16 04B4                         __ptext33 1F5E                         __ptext25 0003  
                       __ptext17 1D33                         __ptext50 06C4                         __ptext42 1CA8  
                       __ptext34 1C1F                         __ptext26 1C43                         __ptext18 1210  
                       __ptext43 07D8                         __ptext35 1C79                         __ptext27 1E80  
                       __ptext19 1EC6                         __ptext44 10C3                         __ptext36 1D74  
                       __ptext28 1FAE                         __ptext45 1C0F                         __ptext37 1001  
                       __ptext29 0800                         __ptext46 1C65                         __ptext38 1C08  
                       __ptext47 1C90                         __ptext39 1C17                         __ptext48 1E54  
                       __ptext49 1C27                         _cont_key 0132                       strcpy@dest 0025  
                    i1Lcd_Port@a 0070                         efgtoa@fp 00AF                         efgtoa@ne 00A0  
                       efgtoa@pp 00A8                         efgtoa@ou 00B4                         int$flags 007E  
                       _vfprintf 1D53              i1Lcd_Write_String@a 0075              i1Lcd_Write_String@i 0078  
                     _INTCONbits 000B                         memcpy@d1 0025                         memcpy@s1 0020  
                 __pstringtext10 1878                   __pstringtext11 187F                   __pstringtext12 1883  
                 __pstringtext13 1887                   __pstringtext14 0000               Lcd_Write_Char@temp 0022  
                       intlevel1 0000                        sprintf@ap 0140         __end_ofi1_Lcd_Write_Char 0800  
    __end_of_ADC_StartConversion 1004                      i1_Lcd_Clear 1C0F  __end_of_ADC_GetConversionResult 1C39  
                     i1Lcd_Cmd@a 0072                        strcpy@src 0020                 ??_ADC_Initialize 0020  
                    efgtoa@nmode 00AA                 ?_Keypad_Get_Char 0070                      ??_vfpfcnvrt 00CD  
             Lcd_Set_Cursor@temp 0028                    __pstringtext1 1800                    __pstringtext2 1811  
                  __pstringtext3 1822                    __pstringtext4 1832                    __pstringtext5 1841  
                  __pstringtext6 1850                    __pstringtext7 185F                    __pstringtext8 1868  
                  __pstringtext9 1871           __Umul8_16@multiplicand 0020                         sprintf@f 0141  
                       sprintf@s 013F                       i1_Lcd_Port 1C90                      _SSPCON1bits 0215  
                    _SSPCON2bits 0216                    ___fladd@signs 0030                     ___fladd@aexp 0031  
                   ___fladd@bexp 0032             __Umul8_16@multiplier 0028                       _SSPCONbits 0215  
              __Umul8_16@product 0024  
