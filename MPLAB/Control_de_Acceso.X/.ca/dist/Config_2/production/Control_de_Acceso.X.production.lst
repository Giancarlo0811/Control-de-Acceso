

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Jan 29 15:14:26 2025

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	16F1937
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext13,global,class=STRCODE,delta=2,noexec
    18                           	psect	stringtext14,global,class=STRCODE,delta=2,noexec
    19                           	psect	cinit,global,class=CODE,merge=1,delta=2
    20                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    25                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    26                           	psect	clrtext,global,class=CODE,delta=2
    27                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    33                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    39                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    40                           	psect	text9,local,class=CODE,merge=1,delta=2,group=3
    41                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    42                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    43                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text23,local,class=CODE,merge=1,delta=2,group=3
    55                           	psect	text24,local,class=CODE,merge=1,delta=2,group=3
    56                           	psect	text25,local,class=CODE,merge=1,delta=2,group=3
    57                           	psect	text26,local,class=CODE,merge=1,delta=2,group=3
    58                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,delta=2
    72                           	psect	intentry,global,class=CODE,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2,group=3
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    83                           	dabs	1,0x7E,2
    84     0000                     
    85                           ; Generated 06/07/2023 GMT
    86                           ; 
    87                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    88                           ; All rights reserved.
    89                           ; 
    90                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    91                           ; 
    92                           ; Redistribution and use in source and binary forms, with or without modification, are
    93                           ; permitted provided that the following conditions are met:
    94                           ; 
    95                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    96                           ;        conditions and the following disclaimer.
    97                           ; 
    98                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    99                           ;        of conditions and the following disclaimer in the documentation and/or other
   100                           ;        materials provided with the distribution. Publication is not required when
   101                           ;        this file is used in an embedded application.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC16F1937 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119     0000                     	;# 
   120     0001                     	;# 
   121     0002                     	;# 
   122     0003                     	;# 
   123     0004                     	;# 
   124     0005                     	;# 
   125     0006                     	;# 
   126     0007                     	;# 
   127     0008                     	;# 
   128     0009                     	;# 
   129     000A                     	;# 
   130     000B                     	;# 
   131     000C                     	;# 
   132     000D                     	;# 
   133     000E                     	;# 
   134     000F                     	;# 
   135     0010                     	;# 
   136     0011                     	;# 
   137     0012                     	;# 
   138     0013                     	;# 
   139     0015                     	;# 
   140     0016                     	;# 
   141     0016                     	;# 
   142     0017                     	;# 
   143     0018                     	;# 
   144     0019                     	;# 
   145     001A                     	;# 
   146     001B                     	;# 
   147     001C                     	;# 
   148     001E                     	;# 
   149     001F                     	;# 
   150     008C                     	;# 
   151     008D                     	;# 
   152     008E                     	;# 
   153     008F                     	;# 
   154     0090                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0095                     	;# 
   159     0096                     	;# 
   160     0097                     	;# 
   161     0098                     	;# 
   162     0099                     	;# 
   163     009A                     	;# 
   164     009B                     	;# 
   165     009B                     	;# 
   166     009C                     	;# 
   167     009D                     	;# 
   168     009E                     	;# 
   169     010C                     	;# 
   170     010D                     	;# 
   171     010E                     	;# 
   172     010F                     	;# 
   173     0110                     	;# 
   174     0111                     	;# 
   175     0112                     	;# 
   176     0113                     	;# 
   177     0114                     	;# 
   178     0115                     	;# 
   179     0116                     	;# 
   180     0117                     	;# 
   181     0118                     	;# 
   182     0119                     	;# 
   183     011A                     	;# 
   184     011B                     	;# 
   185     011D                     	;# 
   186     018C                     	;# 
   187     018D                     	;# 
   188     018F                     	;# 
   189     0190                     	;# 
   190     0191                     	;# 
   191     0191                     	;# 
   192     0192                     	;# 
   193     0193                     	;# 
   194     0193                     	;# 
   195     0193                     	;# 
   196     0194                     	;# 
   197     0195                     	;# 
   198     0196                     	;# 
   199     0199                     	;# 
   200     019A                     	;# 
   201     019B                     	;# 
   202     019B                     	;# 
   203     019B                     	;# 
   204     019B                     	;# 
   205     019C                     	;# 
   206     019C                     	;# 
   207     019D                     	;# 
   208     019E                     	;# 
   209     019F                     	;# 
   210     020D                     	;# 
   211     0210                     	;# 
   212     0211                     	;# 
   213     0212                     	;# 
   214     0213                     	;# 
   215     0214                     	;# 
   216     0215                     	;# 
   217     0215                     	;# 
   218     0216                     	;# 
   219     0217                     	;# 
   220     0291                     	;# 
   221     0291                     	;# 
   222     0292                     	;# 
   223     0293                     	;# 
   224     0294                     	;# 
   225     0295                     	;# 
   226     0295                     	;# 
   227     0296                     	;# 
   228     0298                     	;# 
   229     0298                     	;# 
   230     0299                     	;# 
   231     029A                     	;# 
   232     029B                     	;# 
   233     029C                     	;# 
   234     029C                     	;# 
   235     029D                     	;# 
   236     029E                     	;# 
   237     029F                     	;# 
   238     0311                     	;# 
   239     0311                     	;# 
   240     0312                     	;# 
   241     0313                     	;# 
   242     0314                     	;# 
   243     0315                     	;# 
   244     0315                     	;# 
   245     0316                     	;# 
   246     0318                     	;# 
   247     0318                     	;# 
   248     0319                     	;# 
   249     031A                     	;# 
   250     031C                     	;# 
   251     031C                     	;# 
   252     031D                     	;# 
   253     031E                     	;# 
   254     0394                     	;# 
   255     0395                     	;# 
   256     0396                     	;# 
   257     0415                     	;# 
   258     0416                     	;# 
   259     0417                     	;# 
   260     041C                     	;# 
   261     041D                     	;# 
   262     041E                     	;# 
   263     0791                     	;# 
   264     0792                     	;# 
   265     0793                     	;# 
   266     0794                     	;# 
   267     0795                     	;# 
   268     0798                     	;# 
   269     0799                     	;# 
   270     079A                     	;# 
   271     07A0                     	;# 
   272     07A1                     	;# 
   273     07A2                     	;# 
   274     07A3                     	;# 
   275     07A4                     	;# 
   276     07A5                     	;# 
   277     07A6                     	;# 
   278     07A7                     	;# 
   279     07A8                     	;# 
   280     07A9                     	;# 
   281     07AA                     	;# 
   282     07AB                     	;# 
   283     0FE4                     	;# 
   284     0FE5                     	;# 
   285     0FE6                     	;# 
   286     0FE7                     	;# 
   287     0FE8                     	;# 
   288     0FE9                     	;# 
   289     0FEA                     	;# 
   290     0FEB                     	;# 
   291     0FED                     	;# 
   292     0FEE                     	;# 
   293     0FEF                     	;# 
   294     0000                     	;# 
   295     0001                     	;# 
   296     0002                     	;# 
   297     0003                     	;# 
   298     0004                     	;# 
   299     0005                     	;# 
   300     0006                     	;# 
   301     0007                     	;# 
   302     0008                     	;# 
   303     0009                     	;# 
   304     000A                     	;# 
   305     000B                     	;# 
   306     000C                     	;# 
   307     000D                     	;# 
   308     000E                     	;# 
   309     000F                     	;# 
   310     0010                     	;# 
   311     0011                     	;# 
   312     0012                     	;# 
   313     0013                     	;# 
   314     0015                     	;# 
   315     0016                     	;# 
   316     0016                     	;# 
   317     0017                     	;# 
   318     0018                     	;# 
   319     0019                     	;# 
   320     001A                     	;# 
   321     001B                     	;# 
   322     001C                     	;# 
   323     001E                     	;# 
   324     001F                     	;# 
   325     008C                     	;# 
   326     008D                     	;# 
   327     008E                     	;# 
   328     008F                     	;# 
   329     0090                     	;# 
   330     0091                     	;# 
   331     0092                     	;# 
   332     0093                     	;# 
   333     0095                     	;# 
   334     0096                     	;# 
   335     0097                     	;# 
   336     0098                     	;# 
   337     0099                     	;# 
   338     009A                     	;# 
   339     009B                     	;# 
   340     009B                     	;# 
   341     009C                     	;# 
   342     009D                     	;# 
   343     009E                     	;# 
   344     010C                     	;# 
   345     010D                     	;# 
   346     010E                     	;# 
   347     010F                     	;# 
   348     0110                     	;# 
   349     0111                     	;# 
   350     0112                     	;# 
   351     0113                     	;# 
   352     0114                     	;# 
   353     0115                     	;# 
   354     0116                     	;# 
   355     0117                     	;# 
   356     0118                     	;# 
   357     0119                     	;# 
   358     011A                     	;# 
   359     011B                     	;# 
   360     011D                     	;# 
   361     018C                     	;# 
   362     018D                     	;# 
   363     018F                     	;# 
   364     0190                     	;# 
   365     0191                     	;# 
   366     0191                     	;# 
   367     0192                     	;# 
   368     0193                     	;# 
   369     0193                     	;# 
   370     0193                     	;# 
   371     0194                     	;# 
   372     0195                     	;# 
   373     0196                     	;# 
   374     0199                     	;# 
   375     019A                     	;# 
   376     019B                     	;# 
   377     019B                     	;# 
   378     019B                     	;# 
   379     019B                     	;# 
   380     019C                     	;# 
   381     019C                     	;# 
   382     019D                     	;# 
   383     019E                     	;# 
   384     019F                     	;# 
   385     020D                     	;# 
   386     0210                     	;# 
   387     0211                     	;# 
   388     0212                     	;# 
   389     0213                     	;# 
   390     0214                     	;# 
   391     0215                     	;# 
   392     0215                     	;# 
   393     0216                     	;# 
   394     0217                     	;# 
   395     0291                     	;# 
   396     0291                     	;# 
   397     0292                     	;# 
   398     0293                     	;# 
   399     0294                     	;# 
   400     0295                     	;# 
   401     0295                     	;# 
   402     0296                     	;# 
   403     0298                     	;# 
   404     0298                     	;# 
   405     0299                     	;# 
   406     029A                     	;# 
   407     029B                     	;# 
   408     029C                     	;# 
   409     029C                     	;# 
   410     029D                     	;# 
   411     029E                     	;# 
   412     029F                     	;# 
   413     0311                     	;# 
   414     0311                     	;# 
   415     0312                     	;# 
   416     0313                     	;# 
   417     0314                     	;# 
   418     0315                     	;# 
   419     0315                     	;# 
   420     0316                     	;# 
   421     0318                     	;# 
   422     0318                     	;# 
   423     0319                     	;# 
   424     031A                     	;# 
   425     031C                     	;# 
   426     031C                     	;# 
   427     031D                     	;# 
   428     031E                     	;# 
   429     0394                     	;# 
   430     0395                     	;# 
   431     0396                     	;# 
   432     0415                     	;# 
   433     0416                     	;# 
   434     0417                     	;# 
   435     041C                     	;# 
   436     041D                     	;# 
   437     041E                     	;# 
   438     0791                     	;# 
   439     0792                     	;# 
   440     0793                     	;# 
   441     0794                     	;# 
   442     0795                     	;# 
   443     0798                     	;# 
   444     0799                     	;# 
   445     079A                     	;# 
   446     07A0                     	;# 
   447     07A1                     	;# 
   448     07A2                     	;# 
   449     07A3                     	;# 
   450     07A4                     	;# 
   451     07A5                     	;# 
   452     07A6                     	;# 
   453     07A7                     	;# 
   454     07A8                     	;# 
   455     07A9                     	;# 
   456     07AA                     	;# 
   457     07AB                     	;# 
   458     0FE4                     	;# 
   459     0FE5                     	;# 
   460     0FE6                     	;# 
   461     0FE7                     	;# 
   462     0FE8                     	;# 
   463     0FE9                     	;# 
   464     0FEA                     	;# 
   465     0FEB                     	;# 
   466     0FED                     	;# 
   467     0FEE                     	;# 
   468     0FEF                     	;# 
   469     0000                     	;# 
   470     0001                     	;# 
   471     0002                     	;# 
   472     0003                     	;# 
   473     0004                     	;# 
   474     0005                     	;# 
   475     0006                     	;# 
   476     0007                     	;# 
   477     0008                     	;# 
   478     0009                     	;# 
   479     000A                     	;# 
   480     000B                     	;# 
   481     000C                     	;# 
   482     000D                     	;# 
   483     000E                     	;# 
   484     000F                     	;# 
   485     0010                     	;# 
   486     0011                     	;# 
   487     0012                     	;# 
   488     0013                     	;# 
   489     0015                     	;# 
   490     0016                     	;# 
   491     0016                     	;# 
   492     0017                     	;# 
   493     0018                     	;# 
   494     0019                     	;# 
   495     001A                     	;# 
   496     001B                     	;# 
   497     001C                     	;# 
   498     001E                     	;# 
   499     001F                     	;# 
   500     008C                     	;# 
   501     008D                     	;# 
   502     008E                     	;# 
   503     008F                     	;# 
   504     0090                     	;# 
   505     0091                     	;# 
   506     0092                     	;# 
   507     0093                     	;# 
   508     0095                     	;# 
   509     0096                     	;# 
   510     0097                     	;# 
   511     0098                     	;# 
   512     0099                     	;# 
   513     009A                     	;# 
   514     009B                     	;# 
   515     009B                     	;# 
   516     009C                     	;# 
   517     009D                     	;# 
   518     009E                     	;# 
   519     010C                     	;# 
   520     010D                     	;# 
   521     010E                     	;# 
   522     010F                     	;# 
   523     0110                     	;# 
   524     0111                     	;# 
   525     0112                     	;# 
   526     0113                     	;# 
   527     0114                     	;# 
   528     0115                     	;# 
   529     0116                     	;# 
   530     0117                     	;# 
   531     0118                     	;# 
   532     0119                     	;# 
   533     011A                     	;# 
   534     011B                     	;# 
   535     011D                     	;# 
   536     018C                     	;# 
   537     018D                     	;# 
   538     018F                     	;# 
   539     0190                     	;# 
   540     0191                     	;# 
   541     0191                     	;# 
   542     0192                     	;# 
   543     0193                     	;# 
   544     0193                     	;# 
   545     0193                     	;# 
   546     0194                     	;# 
   547     0195                     	;# 
   548     0196                     	;# 
   549     0199                     	;# 
   550     019A                     	;# 
   551     019B                     	;# 
   552     019B                     	;# 
   553     019B                     	;# 
   554     019B                     	;# 
   555     019C                     	;# 
   556     019C                     	;# 
   557     019D                     	;# 
   558     019E                     	;# 
   559     019F                     	;# 
   560     020D                     	;# 
   561     0210                     	;# 
   562     0211                     	;# 
   563     0212                     	;# 
   564     0213                     	;# 
   565     0214                     	;# 
   566     0215                     	;# 
   567     0215                     	;# 
   568     0216                     	;# 
   569     0217                     	;# 
   570     0291                     	;# 
   571     0291                     	;# 
   572     0292                     	;# 
   573     0293                     	;# 
   574     0294                     	;# 
   575     0295                     	;# 
   576     0295                     	;# 
   577     0296                     	;# 
   578     0298                     	;# 
   579     0298                     	;# 
   580     0299                     	;# 
   581     029A                     	;# 
   582     029B                     	;# 
   583     029C                     	;# 
   584     029C                     	;# 
   585     029D                     	;# 
   586     029E                     	;# 
   587     029F                     	;# 
   588     0311                     	;# 
   589     0311                     	;# 
   590     0312                     	;# 
   591     0313                     	;# 
   592     0314                     	;# 
   593     0315                     	;# 
   594     0315                     	;# 
   595     0316                     	;# 
   596     0318                     	;# 
   597     0318                     	;# 
   598     0319                     	;# 
   599     031A                     	;# 
   600     031C                     	;# 
   601     031C                     	;# 
   602     031D                     	;# 
   603     031E                     	;# 
   604     0394                     	;# 
   605     0395                     	;# 
   606     0396                     	;# 
   607     0415                     	;# 
   608     0416                     	;# 
   609     0417                     	;# 
   610     041C                     	;# 
   611     041D                     	;# 
   612     041E                     	;# 
   613     0791                     	;# 
   614     0792                     	;# 
   615     0793                     	;# 
   616     0794                     	;# 
   617     0795                     	;# 
   618     0798                     	;# 
   619     0799                     	;# 
   620     079A                     	;# 
   621     07A0                     	;# 
   622     07A1                     	;# 
   623     07A2                     	;# 
   624     07A3                     	;# 
   625     07A4                     	;# 
   626     07A5                     	;# 
   627     07A6                     	;# 
   628     07A7                     	;# 
   629     07A8                     	;# 
   630     07A9                     	;# 
   631     07AA                     	;# 
   632     07AB                     	;# 
   633     0FE4                     	;# 
   634     0FE5                     	;# 
   635     0FE6                     	;# 
   636     0FE7                     	;# 
   637     0FE8                     	;# 
   638     0FE9                     	;# 
   639     0FEA                     	;# 
   640     0FEB                     	;# 
   641     0FED                     	;# 
   642     0FEE                     	;# 
   643     0FEF                     	;# 
   644     0000                     	;# 
   645     0001                     	;# 
   646     0002                     	;# 
   647     0003                     	;# 
   648     0004                     	;# 
   649     0005                     	;# 
   650     0006                     	;# 
   651     0007                     	;# 
   652     0008                     	;# 
   653     0009                     	;# 
   654     000A                     	;# 
   655     000B                     	;# 
   656     000C                     	;# 
   657     000D                     	;# 
   658     000E                     	;# 
   659     000F                     	;# 
   660     0010                     	;# 
   661     0011                     	;# 
   662     0012                     	;# 
   663     0013                     	;# 
   664     0015                     	;# 
   665     0016                     	;# 
   666     0016                     	;# 
   667     0017                     	;# 
   668     0018                     	;# 
   669     0019                     	;# 
   670     001A                     	;# 
   671     001B                     	;# 
   672     001C                     	;# 
   673     001E                     	;# 
   674     001F                     	;# 
   675     008C                     	;# 
   676     008D                     	;# 
   677     008E                     	;# 
   678     008F                     	;# 
   679     0090                     	;# 
   680     0091                     	;# 
   681     0092                     	;# 
   682     0093                     	;# 
   683     0095                     	;# 
   684     0096                     	;# 
   685     0097                     	;# 
   686     0098                     	;# 
   687     0099                     	;# 
   688     009A                     	;# 
   689     009B                     	;# 
   690     009B                     	;# 
   691     009C                     	;# 
   692     009D                     	;# 
   693     009E                     	;# 
   694     010C                     	;# 
   695     010D                     	;# 
   696     010E                     	;# 
   697     010F                     	;# 
   698     0110                     	;# 
   699     0111                     	;# 
   700     0112                     	;# 
   701     0113                     	;# 
   702     0114                     	;# 
   703     0115                     	;# 
   704     0116                     	;# 
   705     0117                     	;# 
   706     0118                     	;# 
   707     0119                     	;# 
   708     011A                     	;# 
   709     011B                     	;# 
   710     011D                     	;# 
   711     018C                     	;# 
   712     018D                     	;# 
   713     018F                     	;# 
   714     0190                     	;# 
   715     0191                     	;# 
   716     0191                     	;# 
   717     0192                     	;# 
   718     0193                     	;# 
   719     0193                     	;# 
   720     0193                     	;# 
   721     0194                     	;# 
   722     0195                     	;# 
   723     0196                     	;# 
   724     0199                     	;# 
   725     019A                     	;# 
   726     019B                     	;# 
   727     019B                     	;# 
   728     019B                     	;# 
   729     019B                     	;# 
   730     019C                     	;# 
   731     019C                     	;# 
   732     019D                     	;# 
   733     019E                     	;# 
   734     019F                     	;# 
   735     020D                     	;# 
   736     0210                     	;# 
   737     0211                     	;# 
   738     0212                     	;# 
   739     0213                     	;# 
   740     0214                     	;# 
   741     0215                     	;# 
   742     0215                     	;# 
   743     0216                     	;# 
   744     0217                     	;# 
   745     0291                     	;# 
   746     0291                     	;# 
   747     0292                     	;# 
   748     0293                     	;# 
   749     0294                     	;# 
   750     0295                     	;# 
   751     0295                     	;# 
   752     0296                     	;# 
   753     0298                     	;# 
   754     0298                     	;# 
   755     0299                     	;# 
   756     029A                     	;# 
   757     029B                     	;# 
   758     029C                     	;# 
   759     029C                     	;# 
   760     029D                     	;# 
   761     029E                     	;# 
   762     029F                     	;# 
   763     0311                     	;# 
   764     0311                     	;# 
   765     0312                     	;# 
   766     0313                     	;# 
   767     0314                     	;# 
   768     0315                     	;# 
   769     0315                     	;# 
   770     0316                     	;# 
   771     0318                     	;# 
   772     0318                     	;# 
   773     0319                     	;# 
   774     031A                     	;# 
   775     031C                     	;# 
   776     031C                     	;# 
   777     031D                     	;# 
   778     031E                     	;# 
   779     0394                     	;# 
   780     0395                     	;# 
   781     0396                     	;# 
   782     0415                     	;# 
   783     0416                     	;# 
   784     0417                     	;# 
   785     041C                     	;# 
   786     041D                     	;# 
   787     041E                     	;# 
   788     0791                     	;# 
   789     0792                     	;# 
   790     0793                     	;# 
   791     0794                     	;# 
   792     0795                     	;# 
   793     0798                     	;# 
   794     0799                     	;# 
   795     079A                     	;# 
   796     07A0                     	;# 
   797     07A1                     	;# 
   798     07A2                     	;# 
   799     07A3                     	;# 
   800     07A4                     	;# 
   801     07A5                     	;# 
   802     07A6                     	;# 
   803     07A7                     	;# 
   804     07A8                     	;# 
   805     07A9                     	;# 
   806     07AA                     	;# 
   807     07AB                     	;# 
   808     0FE4                     	;# 
   809     0FE5                     	;# 
   810     0FE6                     	;# 
   811     0FE7                     	;# 
   812     0FE8                     	;# 
   813     0FE9                     	;# 
   814     0FEA                     	;# 
   815     0FEB                     	;# 
   816     0FED                     	;# 
   817     0FEE                     	;# 
   818     0FEF                     	;# 
   819     0000                     	;# 
   820     0001                     	;# 
   821     0002                     	;# 
   822     0003                     	;# 
   823     0004                     	;# 
   824     0005                     	;# 
   825     0006                     	;# 
   826     0007                     	;# 
   827     0008                     	;# 
   828     0009                     	;# 
   829     000A                     	;# 
   830     000B                     	;# 
   831     000C                     	;# 
   832     000D                     	;# 
   833     000E                     	;# 
   834     000F                     	;# 
   835     0010                     	;# 
   836     0011                     	;# 
   837     0012                     	;# 
   838     0013                     	;# 
   839     0015                     	;# 
   840     0016                     	;# 
   841     0016                     	;# 
   842     0017                     	;# 
   843     0018                     	;# 
   844     0019                     	;# 
   845     001A                     	;# 
   846     001B                     	;# 
   847     001C                     	;# 
   848     001E                     	;# 
   849     001F                     	;# 
   850     008C                     	;# 
   851     008D                     	;# 
   852     008E                     	;# 
   853     008F                     	;# 
   854     0090                     	;# 
   855     0091                     	;# 
   856     0092                     	;# 
   857     0093                     	;# 
   858     0095                     	;# 
   859     0096                     	;# 
   860     0097                     	;# 
   861     0098                     	;# 
   862     0099                     	;# 
   863     009A                     	;# 
   864     009B                     	;# 
   865     009B                     	;# 
   866     009C                     	;# 
   867     009D                     	;# 
   868     009E                     	;# 
   869     010C                     	;# 
   870     010D                     	;# 
   871     010E                     	;# 
   872     010F                     	;# 
   873     0110                     	;# 
   874     0111                     	;# 
   875     0112                     	;# 
   876     0113                     	;# 
   877     0114                     	;# 
   878     0115                     	;# 
   879     0116                     	;# 
   880     0117                     	;# 
   881     0118                     	;# 
   882     0119                     	;# 
   883     011A                     	;# 
   884     011B                     	;# 
   885     011D                     	;# 
   886     018C                     	;# 
   887     018D                     	;# 
   888     018F                     	;# 
   889     0190                     	;# 
   890     0191                     	;# 
   891     0191                     	;# 
   892     0192                     	;# 
   893     0193                     	;# 
   894     0193                     	;# 
   895     0193                     	;# 
   896     0194                     	;# 
   897     0195                     	;# 
   898     0196                     	;# 
   899     0199                     	;# 
   900     019A                     	;# 
   901     019B                     	;# 
   902     019B                     	;# 
   903     019B                     	;# 
   904     019B                     	;# 
   905     019C                     	;# 
   906     019C                     	;# 
   907     019D                     	;# 
   908     019E                     	;# 
   909     019F                     	;# 
   910     020D                     	;# 
   911     0210                     	;# 
   912     0211                     	;# 
   913     0212                     	;# 
   914     0213                     	;# 
   915     0214                     	;# 
   916     0215                     	;# 
   917     0215                     	;# 
   918     0216                     	;# 
   919     0217                     	;# 
   920     0291                     	;# 
   921     0291                     	;# 
   922     0292                     	;# 
   923     0293                     	;# 
   924     0294                     	;# 
   925     0295                     	;# 
   926     0295                     	;# 
   927     0296                     	;# 
   928     0298                     	;# 
   929     0298                     	;# 
   930     0299                     	;# 
   931     029A                     	;# 
   932     029B                     	;# 
   933     029C                     	;# 
   934     029C                     	;# 
   935     029D                     	;# 
   936     029E                     	;# 
   937     029F                     	;# 
   938     0311                     	;# 
   939     0311                     	;# 
   940     0312                     	;# 
   941     0313                     	;# 
   942     0314                     	;# 
   943     0315                     	;# 
   944     0315                     	;# 
   945     0316                     	;# 
   946     0318                     	;# 
   947     0318                     	;# 
   948     0319                     	;# 
   949     031A                     	;# 
   950     031C                     	;# 
   951     031C                     	;# 
   952     031D                     	;# 
   953     031E                     	;# 
   954     0394                     	;# 
   955     0395                     	;# 
   956     0396                     	;# 
   957     0415                     	;# 
   958     0416                     	;# 
   959     0417                     	;# 
   960     041C                     	;# 
   961     041D                     	;# 
   962     041E                     	;# 
   963     0791                     	;# 
   964     0792                     	;# 
   965     0793                     	;# 
   966     0794                     	;# 
   967     0795                     	;# 
   968     0798                     	;# 
   969     0799                     	;# 
   970     079A                     	;# 
   971     07A0                     	;# 
   972     07A1                     	;# 
   973     07A2                     	;# 
   974     07A3                     	;# 
   975     07A4                     	;# 
   976     07A5                     	;# 
   977     07A6                     	;# 
   978     07A7                     	;# 
   979     07A8                     	;# 
   980     07A9                     	;# 
   981     07AA                     	;# 
   982     07AB                     	;# 
   983     0FE4                     	;# 
   984     0FE5                     	;# 
   985     0FE6                     	;# 
   986     0FE7                     	;# 
   987     0FE8                     	;# 
   988     0FE9                     	;# 
   989     0FEA                     	;# 
   990     0FEB                     	;# 
   991     0FED                     	;# 
   992     0FEE                     	;# 
   993     0FEF                     	;# 
   994     0000                     	;# 
   995     0001                     	;# 
   996     0002                     	;# 
   997     0003                     	;# 
   998     0004                     	;# 
   999     0005                     	;# 
  1000     0006                     	;# 
  1001     0007                     	;# 
  1002     0008                     	;# 
  1003     0009                     	;# 
  1004     000A                     	;# 
  1005     000B                     	;# 
  1006     000C                     	;# 
  1007     000D                     	;# 
  1008     000E                     	;# 
  1009     000F                     	;# 
  1010     0010                     	;# 
  1011     0011                     	;# 
  1012     0012                     	;# 
  1013     0013                     	;# 
  1014     0015                     	;# 
  1015     0016                     	;# 
  1016     0016                     	;# 
  1017     0017                     	;# 
  1018     0018                     	;# 
  1019     0019                     	;# 
  1020     001A                     	;# 
  1021     001B                     	;# 
  1022     001C                     	;# 
  1023     001E                     	;# 
  1024     001F                     	;# 
  1025     008C                     	;# 
  1026     008D                     	;# 
  1027     008E                     	;# 
  1028     008F                     	;# 
  1029     0090                     	;# 
  1030     0091                     	;# 
  1031     0092                     	;# 
  1032     0093                     	;# 
  1033     0095                     	;# 
  1034     0096                     	;# 
  1035     0097                     	;# 
  1036     0098                     	;# 
  1037     0099                     	;# 
  1038     009A                     	;# 
  1039     009B                     	;# 
  1040     009B                     	;# 
  1041     009C                     	;# 
  1042     009D                     	;# 
  1043     009E                     	;# 
  1044     010C                     	;# 
  1045     010D                     	;# 
  1046     010E                     	;# 
  1047     010F                     	;# 
  1048     0110                     	;# 
  1049     0111                     	;# 
  1050     0112                     	;# 
  1051     0113                     	;# 
  1052     0114                     	;# 
  1053     0115                     	;# 
  1054     0116                     	;# 
  1055     0117                     	;# 
  1056     0118                     	;# 
  1057     0119                     	;# 
  1058     011A                     	;# 
  1059     011B                     	;# 
  1060     011D                     	;# 
  1061     018C                     	;# 
  1062     018D                     	;# 
  1063     018F                     	;# 
  1064     0190                     	;# 
  1065     0191                     	;# 
  1066     0191                     	;# 
  1067     0192                     	;# 
  1068     0193                     	;# 
  1069     0193                     	;# 
  1070     0193                     	;# 
  1071     0194                     	;# 
  1072     0195                     	;# 
  1073     0196                     	;# 
  1074     0199                     	;# 
  1075     019A                     	;# 
  1076     019B                     	;# 
  1077     019B                     	;# 
  1078     019B                     	;# 
  1079     019B                     	;# 
  1080     019C                     	;# 
  1081     019C                     	;# 
  1082     019D                     	;# 
  1083     019E                     	;# 
  1084     019F                     	;# 
  1085     020D                     	;# 
  1086     0210                     	;# 
  1087     0211                     	;# 
  1088     0212                     	;# 
  1089     0213                     	;# 
  1090     0214                     	;# 
  1091     0215                     	;# 
  1092     0215                     	;# 
  1093     0216                     	;# 
  1094     0217                     	;# 
  1095     0291                     	;# 
  1096     0291                     	;# 
  1097     0292                     	;# 
  1098     0293                     	;# 
  1099     0294                     	;# 
  1100     0295                     	;# 
  1101     0295                     	;# 
  1102     0296                     	;# 
  1103     0298                     	;# 
  1104     0298                     	;# 
  1105     0299                     	;# 
  1106     029A                     	;# 
  1107     029B                     	;# 
  1108     029C                     	;# 
  1109     029C                     	;# 
  1110     029D                     	;# 
  1111     029E                     	;# 
  1112     029F                     	;# 
  1113     0311                     	;# 
  1114     0311                     	;# 
  1115     0312                     	;# 
  1116     0313                     	;# 
  1117     0314                     	;# 
  1118     0315                     	;# 
  1119     0315                     	;# 
  1120     0316                     	;# 
  1121     0318                     	;# 
  1122     0318                     	;# 
  1123     0319                     	;# 
  1124     031A                     	;# 
  1125     031C                     	;# 
  1126     031C                     	;# 
  1127     031D                     	;# 
  1128     031E                     	;# 
  1129     0394                     	;# 
  1130     0395                     	;# 
  1131     0396                     	;# 
  1132     0415                     	;# 
  1133     0416                     	;# 
  1134     0417                     	;# 
  1135     041C                     	;# 
  1136     041D                     	;# 
  1137     041E                     	;# 
  1138     0791                     	;# 
  1139     0792                     	;# 
  1140     0793                     	;# 
  1141     0794                     	;# 
  1142     0795                     	;# 
  1143     0798                     	;# 
  1144     0799                     	;# 
  1145     079A                     	;# 
  1146     07A0                     	;# 
  1147     07A1                     	;# 
  1148     07A2                     	;# 
  1149     07A3                     	;# 
  1150     07A4                     	;# 
  1151     07A5                     	;# 
  1152     07A6                     	;# 
  1153     07A7                     	;# 
  1154     07A8                     	;# 
  1155     07A9                     	;# 
  1156     07AA                     	;# 
  1157     07AB                     	;# 
  1158     0FE4                     	;# 
  1159     0FE5                     	;# 
  1160     0FE6                     	;# 
  1161     0FE7                     	;# 
  1162     0FE8                     	;# 
  1163     0FE9                     	;# 
  1164     0FEA                     	;# 
  1165     0FEB                     	;# 
  1166     0FED                     	;# 
  1167     0FEE                     	;# 
  1168     0FEF                     	;# 
  1169     0000                     	;# 
  1170     0001                     	;# 
  1171     0002                     	;# 
  1172     0003                     	;# 
  1173     0004                     	;# 
  1174     0005                     	;# 
  1175     0006                     	;# 
  1176     0007                     	;# 
  1177     0008                     	;# 
  1178     0009                     	;# 
  1179     000A                     	;# 
  1180     000B                     	;# 
  1181     000C                     	;# 
  1182     000D                     	;# 
  1183     000E                     	;# 
  1184     000F                     	;# 
  1185     0010                     	;# 
  1186     0011                     	;# 
  1187     0012                     	;# 
  1188     0013                     	;# 
  1189     0015                     	;# 
  1190     0016                     	;# 
  1191     0016                     	;# 
  1192     0017                     	;# 
  1193     0018                     	;# 
  1194     0019                     	;# 
  1195     001A                     	;# 
  1196     001B                     	;# 
  1197     001C                     	;# 
  1198     001E                     	;# 
  1199     001F                     	;# 
  1200     008C                     	;# 
  1201     008D                     	;# 
  1202     008E                     	;# 
  1203     008F                     	;# 
  1204     0090                     	;# 
  1205     0091                     	;# 
  1206     0092                     	;# 
  1207     0093                     	;# 
  1208     0095                     	;# 
  1209     0096                     	;# 
  1210     0097                     	;# 
  1211     0098                     	;# 
  1212     0099                     	;# 
  1213     009A                     	;# 
  1214     009B                     	;# 
  1215     009B                     	;# 
  1216     009C                     	;# 
  1217     009D                     	;# 
  1218     009E                     	;# 
  1219     010C                     	;# 
  1220     010D                     	;# 
  1221     010E                     	;# 
  1222     010F                     	;# 
  1223     0110                     	;# 
  1224     0111                     	;# 
  1225     0112                     	;# 
  1226     0113                     	;# 
  1227     0114                     	;# 
  1228     0115                     	;# 
  1229     0116                     	;# 
  1230     0117                     	;# 
  1231     0118                     	;# 
  1232     0119                     	;# 
  1233     011A                     	;# 
  1234     011B                     	;# 
  1235     011D                     	;# 
  1236     018C                     	;# 
  1237     018D                     	;# 
  1238     018F                     	;# 
  1239     0190                     	;# 
  1240     0191                     	;# 
  1241     0191                     	;# 
  1242     0192                     	;# 
  1243     0193                     	;# 
  1244     0193                     	;# 
  1245     0193                     	;# 
  1246     0194                     	;# 
  1247     0195                     	;# 
  1248     0196                     	;# 
  1249     0199                     	;# 
  1250     019A                     	;# 
  1251     019B                     	;# 
  1252     019B                     	;# 
  1253     019B                     	;# 
  1254     019B                     	;# 
  1255     019C                     	;# 
  1256     019C                     	;# 
  1257     019D                     	;# 
  1258     019E                     	;# 
  1259     019F                     	;# 
  1260     020D                     	;# 
  1261     0210                     	;# 
  1262     0211                     	;# 
  1263     0212                     	;# 
  1264     0213                     	;# 
  1265     0214                     	;# 
  1266     0215                     	;# 
  1267     0215                     	;# 
  1268     0216                     	;# 
  1269     0217                     	;# 
  1270     0291                     	;# 
  1271     0291                     	;# 
  1272     0292                     	;# 
  1273     0293                     	;# 
  1274     0294                     	;# 
  1275     0295                     	;# 
  1276     0295                     	;# 
  1277     0296                     	;# 
  1278     0298                     	;# 
  1279     0298                     	;# 
  1280     0299                     	;# 
  1281     029A                     	;# 
  1282     029B                     	;# 
  1283     029C                     	;# 
  1284     029C                     	;# 
  1285     029D                     	;# 
  1286     029E                     	;# 
  1287     029F                     	;# 
  1288     0311                     	;# 
  1289     0311                     	;# 
  1290     0312                     	;# 
  1291     0313                     	;# 
  1292     0314                     	;# 
  1293     0315                     	;# 
  1294     0315                     	;# 
  1295     0316                     	;# 
  1296     0318                     	;# 
  1297     0318                     	;# 
  1298     0319                     	;# 
  1299     031A                     	;# 
  1300     031C                     	;# 
  1301     031C                     	;# 
  1302     031D                     	;# 
  1303     031E                     	;# 
  1304     0394                     	;# 
  1305     0395                     	;# 
  1306     0396                     	;# 
  1307     0415                     	;# 
  1308     0416                     	;# 
  1309     0417                     	;# 
  1310     041C                     	;# 
  1311     041D                     	;# 
  1312     041E                     	;# 
  1313     0791                     	;# 
  1314     0792                     	;# 
  1315     0793                     	;# 
  1316     0794                     	;# 
  1317     0795                     	;# 
  1318     0798                     	;# 
  1319     0799                     	;# 
  1320     079A                     	;# 
  1321     07A0                     	;# 
  1322     07A1                     	;# 
  1323     07A2                     	;# 
  1324     07A3                     	;# 
  1325     07A4                     	;# 
  1326     07A5                     	;# 
  1327     07A6                     	;# 
  1328     07A7                     	;# 
  1329     07A8                     	;# 
  1330     07A9                     	;# 
  1331     07AA                     	;# 
  1332     07AB                     	;# 
  1333     0FE4                     	;# 
  1334     0FE5                     	;# 
  1335     0FE6                     	;# 
  1336     0FE7                     	;# 
  1337     0FE8                     	;# 
  1338     0FE9                     	;# 
  1339     0FEA                     	;# 
  1340     0FEB                     	;# 
  1341     0FED                     	;# 
  1342     0FEE                     	;# 
  1343     0FEF                     	;# 
  1344                           
  1345                           	psect	idataBANK2
  1346     07FB                     __pidataBANK2:
  1347                           
  1348                           ;initializer for _clave_enter
  1349     07FB  3431               	retlw	49
  1350     07FC  3432               	retlw	50
  1351     07FD  3433               	retlw	51
  1352     07FE  3434               	retlw	52
  1353     07FF  3400               	retlw	0
  1354     000D                     _PORTBbits	set	13
  1355     000B                     _INTCONbits	set	11
  1356     008F                     _TRISDbits	set	143
  1357     008D                     _TRISBbits	set	141
  1358     008E                     _TRISCbits	set	142
  1359     008C                     _TRISAbits	set	140
  1360     0095                     _OPTION_REGbits	set	149
  1361     009D                     _ADCON0bits	set	157
  1362     009D                     _ADCON0	set	157
  1363     009C                     _ADRESH	set	156
  1364     009B                     _ADRESL	set	155
  1365     009E                     _ADCON1	set	158
  1366     010F                     _LATDbits	set	271
  1367     010D                     _LATBbits	set	269
  1368     010E                     _LATCbits	set	270
  1369     010C                     _LATAbits	set	268
  1370     018D                     _ANSELB	set	397
  1371     0214                     _SSPSTATbits	set	532
  1372     0211                     _SSPBUF	set	529
  1373     0216                     _SSPCON2bits	set	534
  1374     0212                     _SSPADD	set	530
  1375     0215                     _SSPCONbits	set	533
  1376     0215                     _SSPCON1bits	set	533
  1377     020D                     _WPUB	set	525
  1378     0396                     _IOCBF	set	918
  1379     0395                     _IOCBN	set	917
  1380                           
  1381                           	psect	stringtext1
  1382     1800                     __pstringtext1:
  1383     1800                     STR_17:
  1384     1800  3443               	retlw	67	;'C'
  1385     1801  344C               	retlw	76	;'L'
  1386     1802  3441               	retlw	65	;'A'
  1387     1803  3456               	retlw	86	;'V'
  1388     1804  3445               	retlw	69	;'E'
  1389     1805  3420               	retlw	32	;' '
  1390     1806  3449               	retlw	73	;'I'
  1391     1807  344E               	retlw	78	;'N'
  1392     1808  3443               	retlw	67	;'C'
  1393     1809  344F               	retlw	79	;'O'
  1394     180A  3452               	retlw	82	;'R'
  1395     180B  3452               	retlw	82	;'R'
  1396     180C  3445               	retlw	69	;'E'
  1397     180D  3443               	retlw	67	;'C'
  1398     180E  3454               	retlw	84	;'T'
  1399     180F  3441               	retlw	65	;'A'
  1400     1810  3400               	retlw	0
  1401                           
  1402                           	psect	stringtext2
  1403     1811                     __pstringtext2:
  1404     1811                     STR_7:
  1405     1811  3431               	retlw	49	;'1'
  1406     1812  343A               	retlw	58	;':'
  1407     1813  3449               	retlw	73	;'I'
  1408     1814  344E               	retlw	78	;'N'
  1409     1815  3447               	retlw	71	;'G'
  1410     1816  3452               	retlw	82	;'R'
  1411     1817  3445               	retlw	69	;'E'
  1412     1818  3453               	retlw	83	;'S'
  1413     1819  3441               	retlw	65	;'A'
  1414     181A  3452               	retlw	82	;'R'
  1415     181B  3420               	retlw	32	;' '
  1416     181C  3443               	retlw	67	;'C'
  1417     181D  344C               	retlw	76	;'L'
  1418     181E  3441               	retlw	65	;'A'
  1419     181F  3456               	retlw	86	;'V'
  1420     1820  3445               	retlw	69	;'E'
  1421     1821  3400               	retlw	0
  1422                           
  1423                           	psect	stringtext3
  1424     1822                     __pstringtext3:
  1425     1822                     STR_8:
  1426     1822  3432               	retlw	50	;'2'
  1427     1823  343A               	retlw	58	;':'
  1428     1824  3443               	retlw	67	;'C'
  1429     1825  3441               	retlw	65	;'A'
  1430     1826  344D               	retlw	77	;'M'
  1431     1827  3442               	retlw	66	;'B'
  1432     1828  3449               	retlw	73	;'I'
  1433     1829  3441               	retlw	65	;'A'
  1434     182A  3452               	retlw	82	;'R'
  1435     182B  3420               	retlw	32	;' '
  1436     182C  3443               	retlw	67	;'C'
  1437     182D  344C               	retlw	76	;'L'
  1438     182E  3441               	retlw	65	;'A'
  1439     182F  3456               	retlw	86	;'V'
  1440     1830  3445               	retlw	69	;'E'
  1441     1831  3400               	retlw	0
  1442                           
  1443                           	psect	stringtext4
  1444     1832                     __pstringtext4:
  1445     1832                     STR_1:
  1446     1832  3443               	retlw	67	;'C'
  1447     1833  346F               	retlw	111	;'o'
  1448     1834  346E               	retlw	110	;'n'
  1449     1835  3474               	retlw	116	;'t'
  1450     1836  3472               	retlw	114	;'r'
  1451     1837  346F               	retlw	111	;'o'
  1452     1838  346C               	retlw	108	;'l'
  1453     1839  3454               	retlw	84	;'T'
  1454     183A  3465               	retlw	101	;'e'
  1455     183B  3463               	retlw	99	;'c'
  1456     183C  3468               	retlw	104	;'h'
  1457     183D  3420               	retlw	32	;' '
  1458     183E  3443               	retlw	67	;'C'
  1459     183F  3441               	retlw	65	;'A'
  1460     1840  3400               	retlw	0
  1461                           
  1462                           	psect	stringtext5
  1463     1841                     __pstringtext5:
  1464     1841                     STR_16:
  1465     1841  3443               	retlw	67	;'C'
  1466     1842  344C               	retlw	76	;'L'
  1467     1843  3441               	retlw	65	;'A'
  1468     1844  3456               	retlw	86	;'V'
  1469     1845  3445               	retlw	69	;'E'
  1470     1846  3420               	retlw	32	;' '
  1471     1847  3443               	retlw	67	;'C'
  1472     1848  3441               	retlw	65	;'A'
  1473     1849  344D               	retlw	77	;'M'
  1474     184A  3442               	retlw	66	;'B'
  1475     184B  3449               	retlw	73	;'I'
  1476     184C  3441               	retlw	65	;'A'
  1477     184D  3444               	retlw	68	;'D'
  1478     184E  3441               	retlw	65	;'A'
  1479     184F  3400               	retlw	0
  1480                           
  1481                           	psect	stringtext6
  1482     1850                     __pstringtext6:
  1483     1850                     STR_2:
  1484     1850  3425               	retlw	37	;'%'
  1485     1851  3464               	retlw	100	;'d'
  1486     1852  3425               	retlw	37	;'%'
  1487     1853  3464               	retlw	100	;'d'
  1488     1854  343A               	retlw	58	;':'
  1489     1855  3425               	retlw	37	;'%'
  1490     1856  3464               	retlw	100	;'d'
  1491     1857  3425               	retlw	37	;'%'
  1492     1858  3464               	retlw	100	;'d'
  1493     1859  343A               	retlw	58	;':'
  1494     185A  3425               	retlw	37	;'%'
  1495     185B  3464               	retlw	100	;'d'
  1496     185C  3425               	retlw	37	;'%'
  1497     185D  3464               	retlw	100	;'d'
  1498     185E  3400               	retlw	0
  1499                           
  1500                           	psect	stringtext7
  1501     185F                     __pstringtext7:
  1502     185F                     STR_11:
  1503     185F  3441               	retlw	65	;'A'
  1504     1860  3450               	retlw	80	;'P'
  1505     1861  3452               	retlw	82	;'R'
  1506     1862  344F               	retlw	79	;'O'
  1507     1863  3442               	retlw	66	;'B'
  1508     1864  3441               	retlw	65	;'A'
  1509     1865  3444               	retlw	68	;'D'
  1510     1866  344F               	retlw	79	;'O'
  1511     1867  3400               	retlw	0
  1512                           
  1513                           	psect	stringtext8
  1514     1868                     __pstringtext8:
  1515     1868                     STR_13:
  1516     1868  3444               	retlw	68	;'D'
  1517     1869  3445               	retlw	69	;'E'
  1518     186A  344E               	retlw	78	;'N'
  1519     186B  3445               	retlw	69	;'E'
  1520     186C  3447               	retlw	71	;'G'
  1521     186D  3441               	retlw	65	;'A'
  1522     186E  3444               	retlw	68	;'D'
  1523     186F  344F               	retlw	79	;'O'
  1524     1870  3400               	retlw	0
  1525                           
  1526                           	psect	stringtext9
  1527     1871                     __pstringtext9:
  1528     1871                     STR_3:
  1529     1871  3425               	retlw	37	;'%'
  1530     1872  3430               	retlw	48	;'0'
  1531     1873  342E               	retlw	46	;'.'
  1532     1874  3432               	retlw	50	;'2'
  1533     1875  3466               	retlw	102	;'f'
  1534     1876  34DF               	retlw	-33
  1535     1877  3400               	retlw	0
  1536                           
  1537                           	psect	stringtext10
  1538     1878                     __pstringtext10:
  1539     1878                     STR_10:
  1540     1878  3441               	retlw	65	;'A'
  1541     1879  3443               	retlw	67	;'C'
  1542     187A  3443               	retlw	67	;'C'
  1543     187B  3445               	retlw	69	;'E'
  1544     187C  3453               	retlw	83	;'S'
  1545     187D  344F               	retlw	79	;'O'
  1546     187E  3400               	retlw	0
  1547                           
  1548                           	psect	stringtext11
  1549     187F                     __pstringtext11:
  1550     187F                     STR_18:
  1551     187F  3469               	retlw	105	;'i'
  1552     1880  346E               	retlw	110	;'n'
  1553     1881  3466               	retlw	102	;'f'
  1554     1882  3400               	retlw	0
  1555                           
  1556                           	psect	stringtext12
  1557     1883                     __pstringtext12:
  1558     1883                     STR_21:
  1559     1883  346E               	retlw	110	;'n'
  1560     1884  3461               	retlw	97	;'a'
  1561     1885  346E               	retlw	110	;'n'
  1562     1886  3400               	retlw	0
  1563                           
  1564                           	psect	stringtext13
  1565     1887                     __pstringtext13:
  1566     1887                     STR_4:
  1567     1887  3443               	retlw	67	;'C'
  1568     1888  3400               	retlw	0
  1569                           
  1570                           	psect	stringtext14
  1571     0000                     __pstringtext14:
  1572     1871                     
  1573                           	psect	cinit
  1574     0218                     start_initialization:	
  1575                           ; #config settings
  1576                           
  1577     0218                     __initialization:
  1578                           
  1579                           ; Initialize objects allocated to BANK2
  1580     0218  30FB               	movlw	low __pidataBANK2
  1581     0219  0084               	movwf	4
  1582     021A  3087               	movlw	(high __pidataBANK2)| (0+128)
  1583     021B  0085               	movwf	5
  1584     021C  0022               	movlb	2	; select bank2
  1585     021D  0012               	moviw fsr0++
  1586     021E  00DE               	movwf	__pdataBANK2& (0+127)
  1587     021F  0012               	moviw fsr0++
  1588     0220  00DF               	movwf	(__pdataBANK2+1)& (0+127)
  1589     0221  0012               	moviw fsr0++
  1590     0222  00E0               	movwf	(__pdataBANK2+2)& (0+127)
  1591     0223  0012               	moviw fsr0++
  1592     0224  00E1               	movwf	(__pdataBANK2+3)& (0+127)
  1593     0225  0012               	moviw fsr0++
  1594     0226  00E2               	movwf	(__pdataBANK2+4)& (0+127)
  1595                           
  1596                           ; Clear objects allocated to COMMON
  1597     0227  01FC               	clrf	__pbssCOMMON& (0+127)
  1598     0228  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  1599                           
  1600                           ; Clear objects allocated to BANK1
  1601     0229  0021               	movlb	1	; select bank1
  1602     022A  01EF               	clrf	__pbssBANK1& (0+127)
  1603                           
  1604                           ; Clear objects allocated to BANK2
  1605     022B  3020               	movlw	low __pbssBANK2
  1606     022C  0084               	movwf	4
  1607     022D  3001               	movlw	high __pbssBANK2
  1608     022E  0085               	movwf	5
  1609     022F  301F               	movlw	31
  1610     0230  319C  2467  3182   	fcall	clear_ram0
  1611                           
  1612                           ; Clear objects allocated to BANK3
  1613     0233  30A0               	movlw	low __pbssBANK3
  1614     0234  0084               	movwf	4
  1615     0235  3001               	movlw	high __pbssBANK3
  1616     0236  0085               	movwf	5
  1617     0237  3014               	movlw	20
  1618     0238  319C  2467  3182   	fcall	clear_ram0
  1619                           
  1620                           ; Clear objects allocated to BANK4
  1621     023B  3020               	movlw	low __pbssBANK4
  1622     023C  0084               	movwf	4
  1623     023D  3002               	movlw	high __pbssBANK4
  1624     023E  0085               	movwf	5
  1625     023F  3050               	movlw	80
  1626     0240  319C  2467         	fcall	clear_ram0
  1627     0242                     end_of_initialization:	
  1628                           ;End of C runtime variable initialization code
  1629                           
  1630     0242                     __end_of__initialization:
  1631     0242  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1632     0243  0020               	movlb	0
  1633     0244  3182  2A46         	ljmp	_main	;jump to C main() function
  1634                           
  1635                           	psect	bssCOMMON
  1636     007C                     __pbssCOMMON:
  1637     007C                     _flags:
  1638     007C                     	ds	1
  1639     007D                     _tecla:
  1640     007D                     	ds	1
  1641                           
  1642                           	psect	bssBANK1
  1643     00EF                     __pbssBANK1:
  1644     00EF                     _seg:
  1645     00EF                     	ds	1
  1646                           
  1647                           	psect	bssBANK2
  1648     0120                     __pbssBANK2:
  1649     0120                     floorf@F521:
  1650     0120                     	ds	4
  1651     0124                     ___fpclassifyf@F465:
  1652     0124                     	ds	4
  1653     0128                     _temp:
  1654     0128                     	ds	4
  1655     012C                     _width:
  1656     012C                     	ds	2
  1657     012E                     _prec:
  1658     012E                     	ds	2
  1659     0130                     _estado:
  1660     0130                     	ds	2
  1661     0132                     _cont_key:
  1662     0132                     	ds	2
  1663     0134                     _ADC_InterruptHandler:
  1664     0134                     	ds	2
  1665     0136                     _hor:
  1666     0136                     	ds	1
  1667     0137                     _min:
  1668     0137                     	ds	1
  1669     0138                     _clave:
  1670     0138                     	ds	5
  1671     013D                     _convertedValue:
  1672     013D                     	ds	2
  1673                           
  1674                           	psect	dataBANK2
  1675     015E                     __pdataBANK2:
  1676     015E                     _clave_enter:
  1677     015E                     	ds	5
  1678                           
  1679                           	psect	bssBANK3
  1680     01A0                     __pbssBANK3:
  1681     01A0                     _buffer:
  1682     01A0                     	ds	20
  1683                           
  1684                           	psect	bssBANK4
  1685     0220                     __pbssBANK4:
  1686     0220                     _dbuf:
  1687     0220                     	ds	80
  1688                           
  1689                           	psect	clrtext
  1690     1C67                     clear_ram0:	
  1691                           ;	Called with FSR0 containing the base address, and
  1692                           ;	WREG with the size to clear
  1693                           
  1694     1C67  0064               	clrwdt	;clear the watchdog before getting into this loop
  1695     1C68                     clrloop0:
  1696     1C68  0180               	clrf	0	;clear RAM location pointed to by FSR
  1697     1C69  3101               	addfsr 0,1
  1698     1C6A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1699     1C6B  2C68               	goto	clrloop0	;have we reached the end yet?
  1700     1C6C  3400               	retlw	0	;all done for this memory range, return
  1701                           
  1702                           	psect	cstackBANK2
  1703     013F                     __pcstackBANK2:
  1704     013F                     sprintf@s:
  1705                           
  1706                           ; 1 bytes @ 0x0
  1707     013F                     	ds	1
  1708     0140                     sprintf@ap:
  1709                           
  1710                           ; 1 bytes @ 0x1
  1711     0140                     	ds	1
  1712     0141                     sprintf@f:
  1713                           
  1714                           ; 11 bytes @ 0x2
  1715     0141                     	ds	11
  1716     014C                     ??_main:
  1717                           
  1718                           ; 1 bytes @ 0xD
  1719     014C                     	ds	18
  1720                           
  1721                           	psect	cstackBANK1
  1722     00A0                     __pcstackBANK1:
  1723     00A0                     efgtoa@ne:
  1724                           
  1725                           ; 2 bytes @ 0x0
  1726     00A0                     	ds	2
  1727     00A2                     efgtoa@p:
  1728                           
  1729                           ; 2 bytes @ 0x2
  1730     00A2                     	ds	2
  1731     00A4                     efgtoa@t:
  1732                           
  1733                           ; 2 bytes @ 0x4
  1734     00A4                     	ds	2
  1735     00A6                     _efgtoa$1370:
  1736                           
  1737                           ; 2 bytes @ 0x6
  1738     00A6                     	ds	2
  1739     00A8                     efgtoa@pp:
  1740                           
  1741                           ; 1 bytes @ 0x8
  1742     00A8                     	ds	1
  1743     00A9                     efgtoa@mode:
  1744                           
  1745                           ; 1 bytes @ 0x9
  1746     00A9                     	ds	1
  1747     00AA                     efgtoa@nmode:
  1748                           
  1749                           ; 1 bytes @ 0xA
  1750     00AA                     	ds	1
  1751     00AB                     efgtoa@d:
  1752                           
  1753                           ; 2 bytes @ 0xB
  1754     00AB                     	ds	2
  1755     00AD                     efgtoa@m:
  1756                           
  1757                           ; 2 bytes @ 0xD
  1758     00AD                     	ds	2
  1759     00AF                     efgtoa@fp:
  1760                           
  1761                           ; 1 bytes @ 0xF
  1762     00AF                     	ds	1
  1763     00B0                     efgtoa@e:
  1764                           
  1765                           ; 2 bytes @ 0x10
  1766     00B0                     	ds	2
  1767     00B2                     efgtoa@w:
  1768                           
  1769                           ; 2 bytes @ 0x12
  1770     00B2                     	ds	2
  1771     00B4                     efgtoa@ou:
  1772                           
  1773                           ; 4 bytes @ 0x14
  1774     00B4                     	ds	4
  1775     00B8                     efgtoa@h:
  1776                           
  1777                           ; 4 bytes @ 0x18
  1778     00B8                     	ds	4
  1779     00BC                     efgtoa@l:
  1780                           
  1781                           ; 4 bytes @ 0x1C
  1782     00BC                     	ds	4
  1783     00C0                     efgtoa@i:
  1784                           
  1785                           ; 2 bytes @ 0x20
  1786     00C0                     	ds	2
  1787     00C2                     efgtoa@sign:
  1788                           
  1789                           ; 1 bytes @ 0x22
  1790     00C2                     	ds	1
  1791     00C3                     efgtoa@g:
  1792                           
  1793                           ; 4 bytes @ 0x23
  1794     00C3                     	ds	4
  1795     00C7                     efgtoa@n:
  1796                           
  1797                           ; 2 bytes @ 0x27
  1798     00C7                     	ds	2
  1799     00C9                     efgtoa@u:
  1800                           
  1801                           ; 4 bytes @ 0x29
  1802     00C9                     	ds	4
  1803     00CD                     ??_vfpfcnvrt:
  1804                           
  1805                           ; 1 bytes @ 0x2D
  1806     00CD                     	ds	4
  1807     00D1                     vfpfcnvrt@done:
  1808                           
  1809                           ; 1 bytes @ 0x31
  1810     00D1                     	ds	1
  1811     00D2                     vfpfcnvrt@convarg:
  1812                           
  1813                           ; 4 bytes @ 0x32
  1814     00D2                     	ds	4
  1815     00D6                     vfpfcnvrt@c:
  1816                           
  1817                           ; 1 bytes @ 0x36
  1818     00D6                     	ds	1
  1819     00D7                     vfpfcnvrt@fp:
  1820                           
  1821                           ; 1 bytes @ 0x37
  1822     00D7                     	ds	1
  1823     00D8                     vfpfcnvrt@cp:
  1824                           
  1825                           ; 2 bytes @ 0x38
  1826     00D8                     	ds	2
  1827     00DA                     ??_vfprintf:
  1828                           
  1829                           ; 1 bytes @ 0x3A
  1830     00DA                     	ds	1
  1831     00DB                     vfprintf@fp:
  1832                           
  1833                           ; 1 bytes @ 0x3B
  1834     00DB                     	ds	1
  1835     00DC                     vfprintf@cfmt:
  1836                           
  1837                           ; 2 bytes @ 0x3C
  1838     00DC                     	ds	2
  1839     00DE                     ?_sprintf:
  1840     00DE                     sprintf@fmt:	
  1841                           ; 2 bytes @ 0x3E
  1842                           
  1843                           
  1844                           ; 2 bytes @ 0x3E
  1845     00DE                     	ds	14
  1846     00EC                     ??_sprintf:
  1847                           
  1848                           ; 1 bytes @ 0x4C
  1849     00EC                     	ds	1
  1850     00ED                     main@contadorTemp:
  1851                           
  1852                           ; 2 bytes @ 0x4D
  1853     00ED                     	ds	2
  1854                           
  1855                           	psect	cstackCOMMON
  1856     0070                     __pcstackCOMMON:
  1857     0070                     ?_Lcd_Init:
  1858     0070                     ?_Lcd_Clear:	
  1859                           ; 1 bytes @ 0x0
  1860                           
  1861     0070                     ?_Keypad_Init:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864     0070                     ??_Keypad_Init:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867     0070                     ?_Keypad_Get_Char:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870     0070                     ??_Keypad_Get_Char:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873     0070                     ?_Lcd_Write_Char:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876     0070                     ?_putch:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879     0070                     ?_ADC_Initialize:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882     0070                     ?_ADC_StartConversion:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885     0070                     ?_ADC_IsConversionDone:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888     0070                     ?_main:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891     0070                     ?_IOC:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894     0070                     ?_Lcd_Port:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897     0070                     ?_Lcd_Cmd:	
  1898                           ; 1 bytes @ 0x0
  1899                           
  1900     0070                     ?i1_Lcd_Port:	
  1901                           ; 1 bytes @ 0x0
  1902                           
  1903     0070                     ??i1_Lcd_Port:	
  1904                           ; 1 bytes @ 0x0
  1905                           
  1906     0070                     ?i1_Lcd_Cmd:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909     0070                     ?i1_Lcd_Clear:	
  1910                           ; 1 bytes @ 0x0
  1911                           
  1912     0070                     ?i1_Lcd_Write_Char:	
  1913                           ; 1 bytes @ 0x0
  1914                           
  1915     0070                     ?_strcmp:	
  1916                           ; 1 bytes @ 0x0
  1917                           
  1918     0070                     putch@c:	
  1919                           ; 2 bytes @ 0x0
  1920                           
  1921     0070                     strcmp@r:	
  1922                           ; 1 bytes @ 0x0
  1923                           
  1924     0070                     i1Lcd_Port@a:	
  1925                           ; 1 bytes @ 0x0
  1926                           
  1927                           
  1928                           ; 1 bytes @ 0x0
  1929     0070                     	ds	1
  1930     0071                     ??i1_Lcd_Cmd:
  1931     0071                     ??i1_Lcd_Write_Char:	
  1932                           ; 1 bytes @ 0x1
  1933                           
  1934                           
  1935                           ; 1 bytes @ 0x1
  1936     0071                     	ds	1
  1937     0072                     ??_strcmp:
  1938     0072                     i1Lcd_Cmd@a:	
  1939                           ; 1 bytes @ 0x2
  1940                           
  1941     0072                     i1Lcd_Write_Char@temp:	
  1942                           ; 1 bytes @ 0x2
  1943                           
  1944                           
  1945                           ; 1 bytes @ 0x2
  1946     0072                     	ds	1
  1947     0073                     ??i1_Lcd_Clear:
  1948     0073                     ?i1_Lcd_Set_Cursor:	
  1949                           ; 1 bytes @ 0x3
  1950                           
  1951     0073                     strcmp@l:	
  1952                           ; 1 bytes @ 0x3
  1953                           
  1954     0073                     i1Lcd_Set_Cursor@b:	
  1955                           ; 1 bytes @ 0x3
  1956                           
  1957     0073                     i1Lcd_Write_Char@y:	
  1958                           ; 1 bytes @ 0x3
  1959                           
  1960                           
  1961                           ; 1 bytes @ 0x3
  1962     0073                     	ds	1
  1963     0074                     ??i1_Lcd_Set_Cursor:
  1964     0074                     i1Lcd_Write_Char@a:	
  1965                           ; 1 bytes @ 0x4
  1966                           
  1967                           
  1968                           ; 1 bytes @ 0x4
  1969     0074                     	ds	1
  1970     0075                     ?i1_Lcd_Write_String:
  1971     0075                     i1Lcd_Set_Cursor@a:	
  1972                           ; 1 bytes @ 0x5
  1973                           
  1974     0075                     i1Lcd_Write_String@a:	
  1975                           ; 1 bytes @ 0x5
  1976                           
  1977                           
  1978                           ; 2 bytes @ 0x5
  1979     0075                     	ds	1
  1980     0076                     i1Lcd_Set_Cursor@z:
  1981                           
  1982                           ; 1 bytes @ 0x6
  1983     0076                     	ds	1
  1984     0077                     ??i1_Lcd_Write_String:
  1985     0077                     i1Lcd_Set_Cursor@y:	
  1986                           ; 1 bytes @ 0x7
  1987                           
  1988                           
  1989                           ; 1 bytes @ 0x7
  1990     0077                     	ds	1
  1991     0078                     i1Lcd_Set_Cursor@temp:
  1992     0078                     i1Lcd_Write_String@i:	
  1993                           ; 1 bytes @ 0x8
  1994                           
  1995                           
  1996                           ; 2 bytes @ 0x8
  1997     0078                     	ds	2
  1998     007A                     ??_IOC:
  1999                           
  2000                           ; 1 bytes @ 0xA
  2001     007A                     	ds	2
  2002                           
  2003                           	psect	cstackBANK0
  2004     0020                     __pcstackBANK0:
  2005     0020                     ?___fleq:
  2006     0020                     ?_strcpy:	
  2007                           ; 1 bit 
  2008                           
  2009     0020                     ?_memcpy:	
  2010                           ; 1 bytes @ 0x0
  2011                           
  2012     0020                     ??_putch:	
  2013                           ; 1 bytes @ 0x0
  2014                           
  2015     0020                     ??_ADC_Initialize:	
  2016                           ; 1 bytes @ 0x0
  2017                           
  2018     0020                     ??_ADC_StartConversion:	
  2019                           ; 1 bytes @ 0x0
  2020                           
  2021     0020                     ??_ADC_IsConversionDone:	
  2022                           ; 1 bytes @ 0x0
  2023                           
  2024     0020                     ??_Lcd_Port:	
  2025                           ; 1 bytes @ 0x0
  2026                           
  2027     0020                     ?__Umul8_16:	
  2028                           ; 1 bytes @ 0x0
  2029                           
  2030     0020                     ?_fputc:	
  2031                           ; 2 bytes @ 0x0
  2032                           
  2033     0020                     ?___fpclassifyf:	
  2034                           ; 2 bytes @ 0x0
  2035                           
  2036     0020                     ?_ADC_GetConversionResult:	
  2037                           ; 2 bytes @ 0x0
  2038                           
  2039     0020                     ?___wmul:	
  2040                           ; 2 bytes @ 0x0
  2041                           
  2042     0020                     ?___awdiv:	
  2043                           ; 2 bytes @ 0x0
  2044                           
  2045     0020                     ?___awmod:	
  2046                           ; 2 bytes @ 0x0
  2047                           
  2048     0020                     ?_labs:	
  2049                           ; 2 bytes @ 0x0
  2050                           
  2051     0020                     ?___flneg:	
  2052                           ; 4 bytes @ 0x0
  2053                           
  2054     0020                     ?___fltol:	
  2055                           ; 4 bytes @ 0x0
  2056                           
  2057     0020                     ?___fladd:	
  2058                           ; 4 bytes @ 0x0
  2059                           
  2060     0020                     Lcd_Port@a:	
  2061                           ; 4 bytes @ 0x0
  2062                           
  2063     0020                     __Umul8_16@multiplicand:	
  2064                           ; 1 bytes @ 0x0
  2065                           
  2066     0020                     memcpy@s1:	
  2067                           ; 1 bytes @ 0x0
  2068                           
  2069     0020                     ___wmul@multiplier:	
  2070                           ; 1 bytes @ 0x0
  2071                           
  2072     0020                     ___awdiv@divisor:	
  2073                           ; 2 bytes @ 0x0
  2074                           
  2075     0020                     ___awmod@divisor:	
  2076                           ; 2 bytes @ 0x0
  2077                           
  2078     0020                     fputc@c:	
  2079                           ; 2 bytes @ 0x0
  2080                           
  2081     0020                     strcpy@src:	
  2082                           ; 2 bytes @ 0x0
  2083                           
  2084     0020                     ___fleq@ff1:	
  2085                           ; 2 bytes @ 0x0
  2086                           
  2087     0020                     ___flneg@f1:	
  2088                           ; 4 bytes @ 0x0
  2089                           
  2090     0020                     ___fltol@f1:	
  2091                           ; 4 bytes @ 0x0
  2092                           
  2093     0020                     ___fladd@b:	
  2094                           ; 4 bytes @ 0x0
  2095                           
  2096     0020                     ___fpclassifyf@x:	
  2097                           ; 4 bytes @ 0x0
  2098                           
  2099     0020                     labs@a:	
  2100                           ; 4 bytes @ 0x0
  2101                           
  2102                           
  2103                           ; 4 bytes @ 0x0
  2104     0020                     	ds	1
  2105     0021                     ??_Lcd_Write_Char:
  2106     0021                     ??_Lcd_Cmd:	
  2107                           ; 1 bytes @ 0x1
  2108                           
  2109     0021                     memcpy@n:	
  2110                           ; 1 bytes @ 0x1
  2111                           
  2112                           
  2113                           ; 2 bytes @ 0x1
  2114     0021                     	ds	1
  2115     0022                     ??__Umul8_16:
  2116     0022                     ??_strcpy:	
  2117                           ; 1 bytes @ 0x2
  2118                           
  2119     0022                     ??_ADC_GetConversionResult:	
  2120                           ; 1 bytes @ 0x2
  2121                           
  2122     0022                     Lcd_Cmd@a:	
  2123                           ; 1 bytes @ 0x2
  2124                           
  2125     0022                     Lcd_Write_Char@temp:	
  2126                           ; 1 bytes @ 0x2
  2127                           
  2128     0022                     fputc@fp:	
  2129                           ; 1 bytes @ 0x2
  2130                           
  2131     0022                     ___wmul@multiplicand:	
  2132                           ; 1 bytes @ 0x2
  2133                           
  2134     0022                     ___awdiv@dividend:	
  2135                           ; 2 bytes @ 0x2
  2136                           
  2137     0022                     ___awmod@dividend:	
  2138                           ; 2 bytes @ 0x2
  2139                           
  2140                           
  2141                           ; 2 bytes @ 0x2
  2142     0022                     	ds	1
  2143     0023                     ??_Lcd_Init:
  2144     0023                     ??_Lcd_Clear:	
  2145                           ; 1 bytes @ 0x3
  2146                           
  2147     0023                     ?_Lcd_Set_Cursor:	
  2148                           ; 1 bytes @ 0x3
  2149                           
  2150     0023                     ??_fputc:	
  2151                           ; 1 bytes @ 0x3
  2152                           
  2153     0023                     ??_memcpy:	
  2154                           ; 1 bytes @ 0x3
  2155                           
  2156     0023                     Lcd_Set_Cursor@b:	
  2157                           ; 1 bytes @ 0x3
  2158                           
  2159     0023                     Lcd_Write_Char@y:	
  2160                           ; 1 bytes @ 0x3
  2161                           
  2162                           
  2163                           ; 1 bytes @ 0x3
  2164     0023                     	ds	1
  2165     0024                     ??_Lcd_Set_Cursor:
  2166     0024                     ??___fpclassifyf:	
  2167                           ; 1 bytes @ 0x4
  2168                           
  2169     0024                     ??_labs:	
  2170                           ; 1 bytes @ 0x4
  2171                           
  2172     0024                     ??___wmul:	
  2173                           ; 1 bytes @ 0x4
  2174                           
  2175     0024                     ??___awdiv:	
  2176                           ; 1 bytes @ 0x4
  2177                           
  2178     0024                     ??___awmod:	
  2179                           ; 1 bytes @ 0x4
  2180                           
  2181     0024                     ??___flneg:	
  2182                           ; 1 bytes @ 0x4
  2183                           
  2184     0024                     ??___fltol:	
  2185                           ; 1 bytes @ 0x4
  2186                           
  2187     0024                     Lcd_Write_Char@a:	
  2188                           ; 1 bytes @ 0x4
  2189                           
  2190     0024                     memcpy@tmp:	
  2191                           ; 1 bytes @ 0x4
  2192                           
  2193     0024                     strcpy@d:	
  2194                           ; 1 bytes @ 0x4
  2195                           
  2196     0024                     ___wmul@product:	
  2197                           ; 1 bytes @ 0x4
  2198                           
  2199     0024                     __Umul8_16@product:	
  2200                           ; 2 bytes @ 0x4
  2201                           
  2202     0024                     ___fleq@ff2:	
  2203                           ; 2 bytes @ 0x4
  2204                           
  2205     0024                     ___fladd@a:	
  2206                           ; 4 bytes @ 0x4
  2207                           
  2208                           
  2209                           ; 4 bytes @ 0x4
  2210     0024                     	ds	1
  2211     0025                     ?_Lcd_Write_String:
  2212     0025                     Lcd_Set_Cursor@a:	
  2213                           ; 1 bytes @ 0x5
  2214                           
  2215     0025                     ___awdiv@counter:	
  2216                           ; 1 bytes @ 0x5
  2217                           
  2218     0025                     ___awmod@counter:	
  2219                           ; 1 bytes @ 0x5
  2220                           
  2221     0025                     memcpy@d1:	
  2222                           ; 1 bytes @ 0x5
  2223                           
  2224     0025                     strcpy@dest:	
  2225                           ; 1 bytes @ 0x5
  2226                           
  2227     0025                     Lcd_Write_String@a:	
  2228                           ; 1 bytes @ 0x5
  2229                           
  2230                           
  2231                           ; 2 bytes @ 0x5
  2232     0025                     	ds	1
  2233     0026                     ?_read_prec_or_width:
  2234     0026                     ?___xxtofl:	
  2235                           ; 2 bytes @ 0x6
  2236                           
  2237     0026                     Lcd_Set_Cursor@z:	
  2238                           ; 4 bytes @ 0x6
  2239                           
  2240     0026                     ___awdiv@sign:	
  2241                           ; 1 bytes @ 0x6
  2242                           
  2243     0026                     ___awmod@sign:	
  2244                           ; 1 bytes @ 0x6
  2245                           
  2246     0026                     read_prec_or_width@ap:	
  2247                           ; 1 bytes @ 0x6
  2248                           
  2249     0026                     memcpy@d:	
  2250                           ; 1 bytes @ 0x6
  2251                           
  2252     0026                     __Umul8_16@word_mpld:	
  2253                           ; 1 bytes @ 0x6
  2254                           
  2255     0026                     ___xxtofl@val:	
  2256                           ; 2 bytes @ 0x6
  2257                           
  2258                           
  2259                           ; 4 bytes @ 0x6
  2260     0026                     	ds	1
  2261     0027                     ??_Lcd_Write_String:
  2262     0027                     ?_abs:	
  2263                           ; 1 bytes @ 0x7
  2264                           
  2265     0027                     Lcd_Set_Cursor@y:	
  2266                           ; 2 bytes @ 0x7
  2267                           
  2268     0027                     memcpy@s:	
  2269                           ; 1 bytes @ 0x7
  2270                           
  2271     0027                     ___awdiv@quotient:	
  2272                           ; 1 bytes @ 0x7
  2273                           
  2274     0027                     abs@a:	
  2275                           ; 2 bytes @ 0x7
  2276                           
  2277                           
  2278                           ; 2 bytes @ 0x7
  2279     0027                     	ds	1
  2280     0028                     ??___fleq:
  2281     0028                     ??___fladd:	
  2282                           ; 1 bytes @ 0x8
  2283                           
  2284     0028                     ??_read_prec_or_width:	
  2285                           ; 1 bytes @ 0x8
  2286                           
  2287     0028                     ?_fputs:	
  2288                           ; 1 bytes @ 0x8
  2289                           
  2290     0028                     Lcd_Set_Cursor@temp:	
  2291                           ; 2 bytes @ 0x8
  2292                           
  2293     0028                     ___fltol@sign1:	
  2294                           ; 1 bytes @ 0x8
  2295                           
  2296     0028                     __Umul8_16@multiplier:	
  2297                           ; 1 bytes @ 0x8
  2298                           
  2299     0028                     fputs@fp:	
  2300                           ; 1 bytes @ 0x8
  2301                           
  2302     0028                     Lcd_Write_String@i:	
  2303                           ; 1 bytes @ 0x8
  2304                           
  2305                           
  2306                           ; 2 bytes @ 0x8
  2307     0028                     	ds	1
  2308     0029                     ??_fputs:
  2309     0029                     ??_abs:	
  2310                           ; 1 bytes @ 0x9
  2311                           
  2312     0029                     ?___flmul:	
  2313                           ; 1 bytes @ 0x9
  2314                           
  2315     0029                     ___fltol@exp1:	
  2316                           ; 4 bytes @ 0x9
  2317                           
  2318     0029                     ___flmul@b:	
  2319                           ; 1 bytes @ 0x9
  2320                           
  2321                           
  2322                           ; 4 bytes @ 0x9
  2323     0029                     	ds	1
  2324     002A                     ??___xxtofl:
  2325     002A                     ___fpclassifyf@e:	
  2326                           ; 1 bytes @ 0xA
  2327                           
  2328                           
  2329                           ; 2 bytes @ 0xA
  2330     002A                     	ds	1
  2331     002B                     read_prec_or_width@c:
  2332     002B                     fputs@c:	
  2333                           ; 1 bytes @ 0xB
  2334                           
  2335                           
  2336                           ; 1 bytes @ 0xB
  2337     002B                     	ds	1
  2338     002C                     read_prec_or_width@n:
  2339     002C                     fputs@i:	
  2340                           ; 2 bytes @ 0xC
  2341                           
  2342     002C                     ___fpclassifyf@u:	
  2343                           ; 2 bytes @ 0xC
  2344                           
  2345                           
  2346                           ; 4 bytes @ 0xC
  2347     002C                     	ds	1
  2348     002D                     ___flmul@a:
  2349                           
  2350                           ; 4 bytes @ 0xD
  2351     002D                     	ds	1
  2352     002E                     ___xxtofl@sign:
  2353     002E                     read_prec_or_width@fmt:	
  2354                           ; 1 bytes @ 0xE
  2355                           
  2356     002E                     fputs@s:	
  2357                           ; 1 bytes @ 0xE
  2358                           
  2359                           
  2360                           ; 1 bytes @ 0xE
  2361     002E                     	ds	1
  2362     002F                     ?_pad:
  2363     002F                     ___xxtofl@exp:	
  2364                           ; 1 bytes @ 0xF
  2365                           
  2366     002F                     pad@buf:	
  2367                           ; 1 bytes @ 0xF
  2368                           
  2369                           
  2370                           ; 1 bytes @ 0xF
  2371     002F                     	ds	1
  2372     0030                     ___fladd@signs:
  2373     0030                     pad@p:	
  2374                           ; 1 bytes @ 0x10
  2375                           
  2376     0030                     ___xxtofl@arg:	
  2377                           ; 2 bytes @ 0x10
  2378                           
  2379                           
  2380                           ; 4 bytes @ 0x10
  2381     0030                     	ds	1
  2382     0031                     ??___flmul:
  2383     0031                     ___fladd@aexp:	
  2384                           ; 1 bytes @ 0x11
  2385                           
  2386                           
  2387                           ; 1 bytes @ 0x11
  2388     0031                     	ds	1
  2389     0032                     ??_pad:
  2390     0032                     ___fladd@bexp:	
  2391                           ; 1 bytes @ 0x12
  2392                           
  2393                           
  2394                           ; 1 bytes @ 0x12
  2395     0032                     	ds	1
  2396     0033                     ___fladd@grs:
  2397     0033                     pad@i:	
  2398                           ; 1 bytes @ 0x13
  2399                           
  2400                           
  2401                           ; 2 bytes @ 0x13
  2402     0033                     	ds	1
  2403     0034                     ?___fldiv:
  2404     0034                     ___fldiv@a:	
  2405                           ; 4 bytes @ 0x14
  2406                           
  2407                           
  2408                           ; 4 bytes @ 0x14
  2409     0034                     	ds	1
  2410     0035                     pad@fp:
  2411                           
  2412                           ; 1 bytes @ 0x15
  2413     0035                     	ds	1
  2414     0036                     ?_dtoa:
  2415     0036                     ___flmul@sign:	
  2416                           ; 1 bytes @ 0x16
  2417                           
  2418     0036                     dtoa@d:	
  2419                           ; 1 bytes @ 0x16
  2420                           
  2421                           
  2422                           ; 2 bytes @ 0x16
  2423     0036                     	ds	1
  2424     0037                     ___flmul@aexp:
  2425                           
  2426                           ; 1 bytes @ 0x17
  2427     0037                     	ds	1
  2428     0038                     ??_dtoa:
  2429     0038                     ___fldiv@b:	
  2430                           ; 1 bytes @ 0x18
  2431                           
  2432     0038                     ___flmul@grs:	
  2433                           ; 4 bytes @ 0x18
  2434                           
  2435                           
  2436                           ; 4 bytes @ 0x18
  2437     0038                     	ds	1
  2438     0039                     _dtoa$1339:
  2439                           
  2440                           ; 2 bytes @ 0x19
  2441     0039                     	ds	2
  2442     003B                     dtoa@fp:
  2443                           
  2444                           ; 1 bytes @ 0x1B
  2445     003B                     	ds	1
  2446     003C                     ??___fldiv:
  2447     003C                     ___flmul@bexp:	
  2448                           ; 1 bytes @ 0x1C
  2449                           
  2450     003C                     dtoa@p:	
  2451                           ; 1 bytes @ 0x1C
  2452                           
  2453                           
  2454                           ; 2 bytes @ 0x1C
  2455     003C                     	ds	1
  2456     003D                     ___flmul@prod:
  2457                           
  2458                           ; 4 bytes @ 0x1D
  2459     003D                     	ds	1
  2460     003E                     dtoa@w:
  2461                           
  2462                           ; 2 bytes @ 0x1E
  2463     003E                     	ds	2
  2464     0040                     dtoa@s:
  2465                           
  2466                           ; 1 bytes @ 0x20
  2467     0040                     	ds	1
  2468     0041                     ___flmul@temp:
  2469     0041                     dtoa@i:	
  2470                           ; 2 bytes @ 0x21
  2471                           
  2472     0041                     ___fldiv@rem:	
  2473                           ; 2 bytes @ 0x21
  2474                           
  2475                           
  2476                           ; 4 bytes @ 0x21
  2477     0041                     	ds	2
  2478     0043                     ?___flge:
  2479     0043                     ?___flsub:	
  2480                           ; 1 bit 
  2481                           
  2482     0043                     ___flge@ff1:	
  2483                           ; 4 bytes @ 0x23
  2484                           
  2485     0043                     ___flsub@a:	
  2486                           ; 4 bytes @ 0x23
  2487                           
  2488                           
  2489                           ; 4 bytes @ 0x23
  2490     0043                     	ds	2
  2491     0045                     ___fldiv@sign:
  2492                           
  2493                           ; 1 bytes @ 0x25
  2494     0045                     	ds	1
  2495     0046                     ___fldiv@new_exp:
  2496                           
  2497                           ; 2 bytes @ 0x26
  2498     0046                     	ds	1
  2499     0047                     ___flge@ff2:
  2500     0047                     ___flsub@b:	
  2501                           ; 4 bytes @ 0x27
  2502                           
  2503                           
  2504                           ; 4 bytes @ 0x27
  2505     0047                     	ds	1
  2506     0048                     ___fldiv@grs:
  2507                           
  2508                           ; 4 bytes @ 0x28
  2509     0048                     	ds	3
  2510     004B                     ??___flge:
  2511     004B                     ??___flsub:	
  2512                           ; 1 bytes @ 0x2B
  2513                           
  2514                           
  2515                           ; 1 bytes @ 0x2B
  2516     004B                     	ds	1
  2517     004C                     ___fldiv@bexp:
  2518                           
  2519                           ; 1 bytes @ 0x2C
  2520     004C                     	ds	1
  2521     004D                     ___fldiv@aexp:
  2522                           
  2523                           ; 1 bytes @ 0x2D
  2524     004D                     	ds	1
  2525     004E                     ?_floorf:
  2526     004E                     floorf@x:	
  2527                           ; 4 bytes @ 0x2E
  2528                           
  2529                           
  2530                           ; 4 bytes @ 0x2E
  2531     004E                     	ds	4
  2532     0052                     ??_floorf:
  2533                           
  2534                           ; 1 bytes @ 0x32
  2535     0052                     	ds	6
  2536     0058                     floorf@m:
  2537                           
  2538                           ; 4 bytes @ 0x38
  2539     0058                     	ds	4
  2540     005C                     floorf@e:
  2541                           
  2542                           ; 2 bytes @ 0x3C
  2543     005C                     	ds	2
  2544     005E                     floorf@u:
  2545                           
  2546                           ; 4 bytes @ 0x3E
  2547     005E                     	ds	4
  2548     0062                     ?_efgtoa:
  2549     0062                     efgtoa@f:	
  2550                           ; 1 bytes @ 0x42
  2551                           
  2552                           
  2553                           ; 4 bytes @ 0x42
  2554     0062                     	ds	4
  2555     0066                     efgtoa@c:
  2556                           
  2557                           ; 1 bytes @ 0x46
  2558     0066                     	ds	1
  2559     0067                     ??_efgtoa:
  2560                           
  2561                           ; 1 bytes @ 0x47
  2562     0067                     	ds	4
  2563     006B                     ?_vfpfcnvrt:
  2564     006B                     vfpfcnvrt@fmt:	
  2565                           ; 1 bytes @ 0x4B
  2566                           
  2567                           
  2568                           ; 1 bytes @ 0x4B
  2569     006B                     	ds	1
  2570     006C                     vfpfcnvrt@ap:
  2571                           
  2572                           ; 1 bytes @ 0x4C
  2573     006C                     	ds	1
  2574     006D                     ?_vfprintf:
  2575     006D                     vfprintf@fmt:	
  2576                           ; 2 bytes @ 0x4D
  2577                           
  2578                           
  2579                           ; 2 bytes @ 0x4D
  2580     006D                     	ds	2
  2581     006F                     vfprintf@ap:
  2582                           
  2583                           ; 1 bytes @ 0x4F
  2584     006F                     	ds	1
  2585                           
  2586                           	psect	maintext
  2587     0246                     __pmaintext:	
  2588 ;;
  2589 ;;Main: autosize = 0, tempsize = 18, incstack = 0, save=0
  2590 ;;
  2591 ;; *************** function _main *****************
  2592 ;; Defined at:
  2593 ;;		line 34 in file "main.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;		None
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  contadorTemp    2   77[BANK1 ] int 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  1    wreg      void 
  2600 ;; Registers used:
  2601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2602 ;; Tracked objects:
  2603 ;;		On entry : B1F/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2607 ;;      Params:         0       0       0       0       0       0       0       0
  2608 ;;      Locals:         0       0       2       0       0       0       0       0
  2609 ;;      Temps:          0       0       0      18       0       0       0       0
  2610 ;;      Totals:         0       0       2      18       0       0       0       0
  2611 ;;Total ram usage:       20 bytes
  2612 ;; Hardware stack levels required when called: 12
  2613 ;; This function calls:
  2614 ;;		_ADC_GetConversionResult
  2615 ;;		_ADC_Initialize
  2616 ;;		_ADC_IsConversionDone
  2617 ;;		_ADC_StartConversion
  2618 ;;		_Lcd_Clear
  2619 ;;		_Lcd_Init
  2620 ;;		_Lcd_Set_Cursor
  2621 ;;		_Lcd_Write_String
  2622 ;;		___fldiv
  2623 ;;		___wmul
  2624 ;;		___xxtofl
  2625 ;;		_sprintf
  2626 ;; This function is called by:
  2627 ;;		Startup code after reset
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631     0246                     _main:	
  2632                           ;psect for function _main
  2633                           
  2634                           
  2635                           ;main.c: 37:     ANSELB = 0;
  2636                           
  2637                           ;incstack = 0
  2638                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2639     0246  0023               	movlb	3	; select bank3
  2640     0247  018D               	clrf	13	;volatile
  2641                           
  2642                           ;main.c: 38:     TRISAbits.TRISA1 = 0;
  2643     0248  0021               	movlb	1	; select bank1
  2644     0249  108C               	bcf	12,1	;volatile
  2645                           
  2646                           ;main.c: 39:     TRISAbits.TRISA2 = 0;
  2647     024A  110C               	bcf	12,2	;volatile
  2648                           
  2649                           ;main.c: 40:     TRISAbits.TRISA3 = 0;
  2650     024B  118C               	bcf	12,3	;volatile
  2651                           
  2652                           ;main.c: 41:     TRISCbits.TRISC2 = 0;
  2653     024C  110E               	bcf	14,2	;volatile
  2654                           
  2655                           ;main.c: 42:     TRISCbits.TRISC5 = 0;
  2656     024D  128E               	bcf	14,5	;volatile
  2657                           
  2658                           ;main.c: 43:     TRISCbits.TRISC3 = 1;
  2659     024E  158E               	bsf	14,3	;volatile
  2660                           
  2661                           ;main.c: 44:     TRISCbits.TRISC4 = 1;
  2662     024F  160E               	bsf	14,4	;volatile
  2663                           
  2664                           ;main.c: 45:     LATAbits.LATA1 = 1;
  2665     0250  0022               	movlb	2	; select bank2
  2666     0251  148C               	bsf	12,1	;volatile
  2667                           
  2668                           ;main.c: 46:     LATAbits.LATA2 = 1;
  2669     0252  150C               	bsf	12,2	;volatile
  2670                           
  2671                           ;main.c: 47:     LATAbits.LATA3 = 1;
  2672     0253  158C               	bsf	12,3	;volatile
  2673                           
  2674                           ;main.c: 48:     LATCbits.LATC2 = 0;
  2675     0254  110E               	bcf	14,2	;volatile
  2676                           
  2677                           ;main.c: 49:     LATCbits.LATC5 = 1;
  2678     0255  168E               	bsf	14,5	;volatile
  2679                           
  2680                           ;main.c: 52:     OPTION_REGbits.nWPUEN = 0;
  2681     0256  0021               	movlb	1	; select bank1
  2682     0257  1395               	bcf	21,7	;volatile
  2683                           
  2684                           ;main.c: 53:     WPUB = 0b00001110;
  2685     0258  300E               	movlw	14
  2686     0259  0024               	movlb	4	; select bank4
  2687     025A  008D               	movwf	13	;volatile
  2688                           
  2689                           ;main.c: 56:     TRISBbits.TRISB1 = 0;
  2690     025B  0021               	movlb	1	; select bank1
  2691     025C  108D               	bcf	13,1	;volatile
  2692                           
  2693                           ;main.c: 57:     LATBbits.LATB1 = 0;
  2694     025D  0022               	movlb	2	; select bank2
  2695     025E  108D               	bcf	13,1	;volatile
  2696                           
  2697                           ;main.c: 58:     TRISBbits.TRISB2 = 0;
  2698     025F  0021               	movlb	1	; select bank1
  2699     0260  110D               	bcf	13,2	;volatile
  2700                           
  2701                           ;main.c: 59:     LATBbits.LATB2 = 0;
  2702     0261  0022               	movlb	2	; select bank2
  2703     0262  110D               	bcf	13,2	;volatile
  2704                           
  2705                           ;main.c: 60:     TRISBbits.TRISB3 = 0;
  2706     0263  0021               	movlb	1	; select bank1
  2707     0264  118D               	bcf	13,3	;volatile
  2708                           
  2709                           ;main.c: 61:     LATBbits.LATB3 = 0;
  2710     0265  0022               	movlb	2	; select bank2
  2711     0266  118D               	bcf	13,3	;volatile
  2712                           
  2713                           ;main.c: 64:     INTCONbits.GIE = 1;
  2714     0267  178B               	bsf	11,7	;volatile
  2715                           
  2716                           ;main.c: 65:     INTCONbits.IOCIE = 0;
  2717     0268  118B               	bcf	11,3	;volatile
  2718                           
  2719                           ;main.c: 66:     INTCONbits.IOCIE = 1;
  2720     0269  158B               	bsf	11,3	;volatile
  2721                           
  2722                           ;main.c: 68:     IOCBN = 0b11110000;
  2723     026A  30F0               	movlw	240
  2724     026B  0027               	movlb	7	; select bank7
  2725     026C  0095               	movwf	21	;volatile
  2726                           
  2727                           ;main.c: 69:     IOCBF = 0;
  2728     026D  0196               	clrf	22	;volatile
  2729                           
  2730                           ;main.c: 72:     SSPCON1bits.SSPEN = 1;
  2731     026E  0024               	movlb	4	; select bank4
  2732     026F  1695               	bsf	21,5	;volatile
  2733                           
  2734                           ;main.c: 73:     SSPCON1bits.SSPM3 = 1;
  2735     0270  1595               	bsf	21,3	;volatile
  2736                           
  2737                           ;main.c: 74:     SSPCONbits.SSPM2 = 0;
  2738     0271  1115               	bcf	21,2	;volatile
  2739                           
  2740                           ;main.c: 75:     SSPCONbits.SSPM1 = 0;
  2741     0272  1095               	bcf	21,1	;volatile
  2742                           
  2743                           ;main.c: 76:     SSPCON1bits.SSPM0 = 0;
  2744     0273  1015               	bcf	21,0	;volatile
  2745                           
  2746                           ;main.c: 77:     SSPADD = 0x4F;
  2747     0274  304F               	movlw	79
  2748     0275  0092               	movwf	18	;volatile
  2749                           
  2750                           ;main.c: 80:     ADC_Initialize();
  2751     0276  319C  2484  3182   	fcall	_ADC_Initialize
  2752                           
  2753                           ;main.c: 81:     Lcd_Init();
  2754     0279  319F  2760  3182   	fcall	_Lcd_Init
  2755                           
  2756                           ;main.c: 82:     Lcd_Clear();
  2757     027C  319C  248C  3182   	fcall	_Lcd_Clear
  2758                           
  2759                           ;main.c: 84:     _delay((unsigned long)((200)*(4000000/4000.0)));
  2760     027F  3002               	movlw	2
  2761     0280  0022               	movlb	2	; select bank2
  2762     0281  00CD               	movwf	(??_main^(0+256)+1)
  2763     0282  3004               	movlw	4
  2764     0283  00CC               	movwf	??_main^(0+256)
  2765     0284  30BA               	movlw	186
  2766     0285                     u6557:
  2767     0285  0B89               	decfsz	9,f
  2768     0286  2A85               	goto	u6557
  2769     0287  0BCC               	decfsz	??_main^(0+256),f
  2770     0288  2A85               	goto	u6557
  2771     0289  0BCD               	decfsz	(??_main^(0+256)+1),f
  2772     028A  2A85               	goto	u6557
  2773     028B  0000               	nop
  2774                           
  2775                           ;main.c: 87:     ADC_StartConversion();
  2776     028C  319C  2464  3182   	fcall	_ADC_StartConversion
  2777     028F                     l4995:	
  2778                           ;main.c: 88:     while (!ADC_IsConversionDone());
  2779                           
  2780     028F  319C  246D  3182   	fcall	_ADC_IsConversionDone
  2781     0292  3A00               	xorlw	0
  2782     0293  1903               	skipnz
  2783     0294  2A8F               	goto	l4995
  2784                           
  2785                           ;main.c: 89:     convertedValue = ADC_GetConversionResult();
  2786     0295  319C  247C  3182   	fcall	_ADC_GetConversionResult
  2787     0298  0821               	movf	?_ADC_GetConversionResult+1,w
  2788     0299  0022               	movlb	2	; select bank2
  2789     029A  00BE               	movwf	(_convertedValue+1)^(0+256)
  2790     029B  0020               	movlb	0	; select bank0
  2791     029C  0820               	movf	?_ADC_GetConversionResult,w
  2792     029D  0022               	movlb	2	; select bank2
  2793     029E  00BD               	movwf	_convertedValue^(0+256)
  2794                           
  2795                           ;main.c: 90:     temp = (float)(convertedValue*5*100)/1024;
  2796     029F  3044               	movlw	68
  2797     02A0  0020               	movlb	0	; select bank0
  2798     02A1  00B7               	movwf	___fldiv@a+3
  2799     02A2  3080               	movlw	128
  2800     02A3  00B6               	movwf	___fldiv@a+2
  2801     02A4  3000               	movlw	0
  2802     02A5  00B5               	movwf	___fldiv@a+1
  2803     02A6  3000               	movlw	0
  2804     02A7  00B4               	movwf	___fldiv@a
  2805     02A8  30F4               	movlw	244
  2806     02A9  00A2               	movwf	___wmul@multiplicand
  2807     02AA  3001               	movlw	1
  2808     02AB  00A3               	movwf	___wmul@multiplicand+1
  2809     02AC  0022               	movlb	2	; select bank2
  2810     02AD  083E               	movf	(_convertedValue+1)^(0+256),w
  2811     02AE  0020               	movlb	0	; select bank0
  2812     02AF  00A1               	movwf	___wmul@multiplier+1
  2813     02B0  0022               	movlb	2	; select bank2
  2814     02B1  083D               	movf	_convertedValue^(0+256),w
  2815     02B2  0020               	movlb	0	; select bank0
  2816     02B3  00A0               	movwf	___wmul@multiplier
  2817     02B4  319D  2527  3182   	fcall	___wmul
  2818     02B7  0820               	movf	?___wmul,w
  2819     02B8  0022               	movlb	2	; select bank2
  2820     02B9  00CC               	movwf	??_main^(0+256)
  2821     02BA  0020               	movlb	0	; select bank0
  2822     02BB  0821               	movf	?___wmul+1,w
  2823     02BC  0022               	movlb	2	; select bank2
  2824     02BD  00CD               	movwf	(??_main^(0+256)+1)
  2825     02BE  01CE               	clrf	(??_main^(0+256)+2)
  2826     02BF  01CF               	clrf	(??_main^(0+256)+3)
  2827     02C0  084F               	movf	(??_main+3)^(0+256),w
  2828     02C1  0020               	movlb	0	; select bank0
  2829     02C2  00A9               	movwf	___xxtofl@val+3
  2830     02C3  0022               	movlb	2	; select bank2
  2831     02C4  084E               	movf	(??_main+2)^(0+256),w
  2832     02C5  0020               	movlb	0	; select bank0
  2833     02C6  00A8               	movwf	___xxtofl@val+2
  2834     02C7  0022               	movlb	2	; select bank2
  2835     02C8  084D               	movf	(??_main+1)^(0+256),w
  2836     02C9  0020               	movlb	0	; select bank0
  2837     02CA  00A7               	movwf	___xxtofl@val+1
  2838     02CB  0022               	movlb	2	; select bank2
  2839     02CC  084C               	movf	??_main^(0+256),w
  2840     02CD  0020               	movlb	0	; select bank0
  2841     02CE  00A6               	movwf	___xxtofl@val
  2842     02CF  3000               	movlw	0
  2843     02D0  3192  229D  3182   	fcall	___xxtofl
  2844     02D3  0829               	movf	?___xxtofl+3,w
  2845     02D4  00BB               	movwf	___fldiv@b+3
  2846     02D5  0828               	movf	?___xxtofl+2,w
  2847     02D6  00BA               	movwf	___fldiv@b+2
  2848     02D7  0827               	movf	?___xxtofl+1,w
  2849     02D8  00B9               	movwf	___fldiv@b+1
  2850     02D9  0826               	movf	?___xxtofl,w
  2851     02DA  00B8               	movwf	___fldiv@b
  2852     02DB  3188  2015  3182   	fcall	___fldiv
  2853     02DE  0837               	movf	?___fldiv+3,w
  2854     02DF  0022               	movlb	2	; select bank2
  2855     02E0  00AB               	movwf	(_temp+3)^(0+256)
  2856     02E1  0020               	movlb	0	; select bank0
  2857     02E2  0836               	movf	?___fldiv+2,w
  2858     02E3  0022               	movlb	2	; select bank2
  2859     02E4  00AA               	movwf	(_temp+2)^(0+256)
  2860     02E5  0020               	movlb	0	; select bank0
  2861     02E6  0835               	movf	?___fldiv+1,w
  2862     02E7  0022               	movlb	2	; select bank2
  2863     02E8  00A9               	movwf	(_temp+1)^(0+256)
  2864     02E9  0020               	movlb	0	; select bank0
  2865     02EA  0834               	movf	?___fldiv,w
  2866     02EB  0022               	movlb	2	; select bank2
  2867     02EC  00A8               	movwf	_temp^(0+256)
  2868     02ED                     l5001:
  2869                           
  2870                           ;main.c: 95:         Lcd_Set_Cursor(1,2);
  2871     02ED  3002               	movlw	2
  2872     02EE  0020               	movlb	0	; select bank0
  2873     02EF  00A3               	movwf	Lcd_Set_Cursor@b
  2874     02F0  3001               	movlw	1
  2875     02F1  3191  213E  3182   	fcall	_Lcd_Set_Cursor
  2876                           
  2877                           ;main.c: 96:         Lcd_Write_String("ControlTech CA");
  2878     02F4  3032               	movlw	low (STR_1| (0+32768))
  2879     02F5  0020               	movlb	0	; select bank0
  2880     02F6  00A5               	movwf	Lcd_Write_String@a
  2881     02F7  3098               	movlw	high (STR_1| (0+32768))
  2882     02F8  00A6               	movwf	Lcd_Write_String@a+1
  2883     02F9  319D  250C  3182   	fcall	_Lcd_Write_String
  2884                           
  2885                           ;main.c: 99:         SSPCON2bits.SEN = 1;
  2886     02FC  0024               	movlb	4	; select bank4
  2887     02FD  1416               	bsf	22,0	;volatile
  2888     02FE                     l200:	
  2889                           ;main.c: 100:         while(SSPCON2bits.SEN);
  2890                           
  2891     02FE  1816               	btfsc	22,0	;volatile
  2892     02FF  2AFE               	goto	l200
  2893                           
  2894                           ;main.c: 101:         SSPBUF = 0b11010000;
  2895     0300  30D0               	movlw	208
  2896     0301  0091               	movwf	17	;volatile
  2897     0302                     l203:	
  2898                           ;main.c: 102:         while(SSPSTATbits.BF);
  2899                           
  2900     0302  1814               	btfsc	20,0	;volatile
  2901     0303  2B02               	goto	l203
  2902     0304                     l206:
  2903     0304  1914               	btfsc	20,2	;volatile
  2904     0305  2B04               	goto	l206
  2905                           
  2906                           ;main.c: 104:         SSPBUF = 0;
  2907     0306  0191               	clrf	17	;volatile
  2908     0307                     l209:	
  2909                           ;main.c: 105:         while(SSPSTATbits.BF);
  2910                           
  2911     0307  1814               	btfsc	20,0	;volatile
  2912     0308  2B07               	goto	l209
  2913     0309                     l212:
  2914     0309  1914               	btfsc	20,2	;volatile
  2915     030A  2B09               	goto	l212
  2916                           
  2917                           ;main.c: 107:         SSPCON2bits.RSEN = 1;
  2918     030B  1496               	bsf	22,1	;volatile
  2919     030C                     l215:	
  2920                           ;main.c: 108:         while(SSPCON2bits.RSEN);
  2921                           
  2922     030C  1896               	btfsc	22,1	;volatile
  2923     030D  2B0C               	goto	l215
  2924                           
  2925                           ;main.c: 109:         SSPBUF = 0b11010001;
  2926     030E  30D1               	movlw	209
  2927     030F  0091               	movwf	17	;volatile
  2928     0310                     l218:	
  2929                           ;main.c: 110:         while(SSPSTATbits.BF);
  2930                           
  2931     0310  1814               	btfsc	20,0	;volatile
  2932     0311  2B10               	goto	l218
  2933     0312                     l221:
  2934     0312  1914               	btfsc	20,2	;volatile
  2935     0313  2B12               	goto	l221
  2936                           
  2937                           ;main.c: 112:         SSPCON2bits.RCEN = 1;
  2938     0314  1596               	bsf	22,3	;volatile
  2939     0315                     l224:	
  2940                           ;main.c: 113:         while(SSPSTATbits.BF==0);
  2941                           
  2942     0315  1C14               	btfss	20,0	;volatile
  2943     0316  2B15               	goto	l224
  2944                           
  2945                           ;main.c: 114:         seg = SSPBUF;
  2946     0317  0811               	movf	17,w	;volatile
  2947     0318  0021               	movlb	1	; select bank1
  2948     0319  00EF               	movwf	_seg^(0+128)
  2949                           
  2950                           ;main.c: 115:         SSPCON2bits.ACKDT = 0;
  2951     031A  0024               	movlb	4	; select bank4
  2952     031B  1296               	bcf	22,5	;volatile
  2953                           
  2954                           ;main.c: 116:         SSPCON2bits.ACKEN = 1;
  2955     031C  1616               	bsf	22,4	;volatile
  2956     031D                     l227:	
  2957                           ;main.c: 117:         while(SSPCON2bits.ACKEN);
  2958                           
  2959     031D  1A16               	btfsc	22,4	;volatile
  2960     031E  2B1D               	goto	l227
  2961                           
  2962                           ;main.c: 118:         SSPCON2bits.RCEN = 1;
  2963     031F  1596               	bsf	22,3	;volatile
  2964     0320                     l230:	
  2965                           ;main.c: 119:         while(SSPSTATbits.BF==0);
  2966                           
  2967     0320  1C14               	btfss	20,0	;volatile
  2968     0321  2B20               	goto	l230
  2969                           
  2970                           ;main.c: 120:         min = SSPBUF;
  2971     0322  0811               	movf	17,w	;volatile
  2972     0323  0022               	movlb	2	; select bank2
  2973     0324  00B7               	movwf	_min^(0+256)
  2974                           
  2975                           ;main.c: 121:         SSPCON2bits.ACKDT = 0;
  2976     0325  0024               	movlb	4	; select bank4
  2977     0326  1296               	bcf	22,5	;volatile
  2978                           
  2979                           ;main.c: 122:         SSPCON2bits.ACKEN = 1;
  2980     0327  1616               	bsf	22,4	;volatile
  2981     0328                     l233:	
  2982                           ;main.c: 123:         while(SSPCON2bits.ACKEN);
  2983                           
  2984     0328  1A16               	btfsc	22,4	;volatile
  2985     0329  2B28               	goto	l233
  2986                           
  2987                           ;main.c: 124:         SSPCON2bits.RCEN = 1;
  2988     032A  1596               	bsf	22,3	;volatile
  2989     032B                     l236:	
  2990                           ;main.c: 125:         while(SSPSTATbits.BF==0);
  2991                           
  2992     032B  1C14               	btfss	20,0	;volatile
  2993     032C  2B2B               	goto	l236
  2994                           
  2995                           ;main.c: 126:         hor = SSPBUF;
  2996     032D  0811               	movf	17,w	;volatile
  2997     032E  0022               	movlb	2	; select bank2
  2998     032F  00B6               	movwf	_hor^(0+256)
  2999                           
  3000                           ;main.c: 127:         SSPCON2bits.ACKDT = 1;
  3001     0330  0024               	movlb	4	; select bank4
  3002     0331  1696               	bsf	22,5	;volatile
  3003                           
  3004                           ;main.c: 128:         SSPCON2bits.ACKEN = 1;
  3005     0332  1616               	bsf	22,4	;volatile
  3006     0333                     l239:	
  3007                           ;main.c: 129:         while(SSPCON2bits.ACKEN);
  3008                           
  3009     0333  1A16               	btfsc	22,4	;volatile
  3010     0334  2B33               	goto	l239
  3011                           
  3012                           ;main.c: 130:         SSPCON2bits.PEN = 1;
  3013     0335  1516               	bsf	22,2	;volatile
  3014     0336                     l242:	
  3015                           ;main.c: 131:         while(SSPCON2bits.PEN);
  3016                           
  3017     0336  1916               	btfsc	22,2	;volatile
  3018     0337  2B36               	goto	l242
  3019                           
  3020                           ;main.c: 134:         sprintf(buffer,"%d%d:%d%d:%d%d",hor>>4,hor&=0x0F,min>>4,min&=0x0F,
      +                          seg>>4,seg&=0x0F);
  3021     0338  3050               	movlw	low (STR_2| (0+32768))
  3022     0339  0021               	movlb	1	; select bank1
  3023     033A  00DE               	movwf	sprintf@fmt^(0+128)
  3024     033B  3098               	movlw	high (STR_2| (0+32768))
  3025     033C  00DF               	movwf	(sprintf@fmt^(0+128)+1)
  3026     033D  0022               	movlb	2	; select bank2
  3027     033E  0836               	movf	_hor^(0+256),w
  3028     033F  00CC               	movwf	??_main^(0+256)
  3029     0340  3004               	movlw	4
  3030     0341                     u6405:
  3031     0341  36CC               	lsrf	??_main^(0+256),f
  3032     0342  0B89               	decfsz	9,f
  3033     0343  2B41               	goto	u6405
  3034     0344  084C               	movf	??_main^(0+256),w
  3035     0345  00CD               	movwf	(??_main+1)^(0+256)
  3036     0346  01CE               	clrf	((??_main+1)^(0+256)+1)
  3037     0347  084D               	movf	(??_main+1)^(0+256),w
  3038     0348  0021               	movlb	1	; select bank1
  3039     0349  00E0               	movwf	(?_sprintf^(0+128)+2)
  3040     034A  0022               	movlb	2	; select bank2
  3041     034B  084E               	movf	(??_main+2)^(0+256),w
  3042     034C  0021               	movlb	1	; select bank1
  3043     034D  00E1               	movwf	((?_sprintf+1)^(0+128)+2)
  3044     034E  300F               	movlw	15
  3045     034F  0022               	movlb	2	; select bank2
  3046     0350  00CF               	movwf	(??_main+3)^(0+256)
  3047     0351  084F               	movf	(??_main+3)^(0+256),w
  3048     0352  05B6               	andwf	_hor^(0+256),f
  3049     0353  0836               	movf	_hor^(0+256),w
  3050     0354  00D0               	movwf	(??_main+4)^(0+256)
  3051     0355  01D1               	clrf	((??_main+4)^(0+256)+1)
  3052     0356  0850               	movf	(??_main+4)^(0+256),w
  3053     0357  0021               	movlb	1	; select bank1
  3054     0358  00E2               	movwf	(?_sprintf^(0+128)+4)
  3055     0359  0022               	movlb	2	; select bank2
  3056     035A  0851               	movf	(??_main+5)^(0+256),w
  3057     035B  0021               	movlb	1	; select bank1
  3058     035C  00E3               	movwf	((?_sprintf+1)^(0+128)+4)
  3059     035D  0022               	movlb	2	; select bank2
  3060     035E  0837               	movf	_min^(0+256),w
  3061     035F  00D2               	movwf	(??_main+6)^(0+256)
  3062     0360  3004               	movlw	4
  3063     0361                     u6415:
  3064     0361  36D2               	lsrf	(??_main+6)^(0+256),f
  3065     0362  0B89               	decfsz	9,f
  3066     0363  2B61               	goto	u6415
  3067     0364  0852               	movf	(??_main+6)^(0+256),w
  3068     0365  00D3               	movwf	(??_main+7)^(0+256)
  3069     0366  01D4               	clrf	((??_main+7)^(0+256)+1)
  3070     0367  0853               	movf	(??_main+7)^(0+256),w
  3071     0368  0021               	movlb	1	; select bank1
  3072     0369  00E4               	movwf	(?_sprintf^(0+128)+6)
  3073     036A  0022               	movlb	2	; select bank2
  3074     036B  0854               	movf	(??_main+8)^(0+256),w
  3075     036C  0021               	movlb	1	; select bank1
  3076     036D  00E5               	movwf	((?_sprintf+1)^(0+128)+6)
  3077     036E  300F               	movlw	15
  3078     036F  0022               	movlb	2	; select bank2
  3079     0370  00D5               	movwf	(??_main+9)^(0+256)
  3080     0371  0855               	movf	(??_main+9)^(0+256),w
  3081     0372  05B7               	andwf	_min^(0+256),f
  3082     0373  0837               	movf	_min^(0+256),w
  3083     0374  00D6               	movwf	(??_main+10)^(0+256)
  3084     0375  01D7               	clrf	((??_main+10)^(0+256)+1)
  3085     0376  0856               	movf	(??_main+10)^(0+256),w
  3086     0377  0021               	movlb	1	; select bank1
  3087     0378  00E6               	movwf	(?_sprintf^(0+128)+8)
  3088     0379  0022               	movlb	2	; select bank2
  3089     037A  0857               	movf	(??_main+11)^(0+256),w
  3090     037B  0021               	movlb	1	; select bank1
  3091     037C  00E7               	movwf	((?_sprintf+1)^(0+128)+8)
  3092     037D  086F               	movf	_seg^(0+128),w
  3093     037E  0022               	movlb	2	; select bank2
  3094     037F  00D8               	movwf	(??_main+12)^(0+256)
  3095     0380  3004               	movlw	4
  3096     0381                     u6425:
  3097     0381  36D8               	lsrf	(??_main+12)^(0+256),f
  3098     0382  0B89               	decfsz	9,f
  3099     0383  2B81               	goto	u6425
  3100     0384  0858               	movf	(??_main+12)^(0+256),w
  3101     0385  00D9               	movwf	(??_main+13)^(0+256)
  3102     0386  01DA               	clrf	((??_main+13)^(0+256)+1)
  3103     0387  0859               	movf	(??_main+13)^(0+256),w
  3104     0388  0021               	movlb	1	; select bank1
  3105     0389  00E8               	movwf	(?_sprintf^(0+128)+10)
  3106     038A  0022               	movlb	2	; select bank2
  3107     038B  085A               	movf	(??_main+14)^(0+256),w
  3108     038C  0021               	movlb	1	; select bank1
  3109     038D  00E9               	movwf	((?_sprintf+1)^(0+128)+10)
  3110     038E  300F               	movlw	15
  3111     038F  0022               	movlb	2	; select bank2
  3112     0390  00DB               	movwf	(??_main+15)^(0+256)
  3113     0391  085B               	movf	(??_main+15)^(0+256),w
  3114     0392  0021               	movlb	1	; select bank1
  3115     0393  05EF               	andwf	_seg^(0+128),f
  3116     0394  086F               	movf	_seg^(0+128),w
  3117     0395  0022               	movlb	2	; select bank2
  3118     0396  00DC               	movwf	(??_main+16)^(0+256)
  3119     0397  01DD               	clrf	((??_main+16)^(0+256)+1)
  3120     0398  085C               	movf	(??_main+16)^(0+256),w
  3121     0399  0021               	movlb	1	; select bank1
  3122     039A  00EA               	movwf	(?_sprintf^(0+128)+12)
  3123     039B  0022               	movlb	2	; select bank2
  3124     039C  085D               	movf	(??_main+17)^(0+256),w
  3125     039D  0021               	movlb	1	; select bank1
  3126     039E  00EB               	movwf	((?_sprintf+1)^(0+128)+12)
  3127     039F  30A0               	movlw	(low (_buffer| (0+256)))& (0+255)
  3128     03A0  319D  25E2  3182   	fcall	_sprintf
  3129                           
  3130                           ;main.c: 135:         Lcd_Set_Cursor(2,1);
  3131     03A3  0020               	movlb	0	; select bank0
  3132     03A4  01A3               	clrf	Lcd_Set_Cursor@b
  3133     03A5  0AA3               	incf	Lcd_Set_Cursor@b,f
  3134     03A6  3002               	movlw	2
  3135     03A7  3191  213E  3182   	fcall	_Lcd_Set_Cursor
  3136                           
  3137                           ;main.c: 136:         Lcd_Write_String(buffer);
  3138     03AA  30A0               	movlw	low _buffer
  3139     03AB  0020               	movlb	0	; select bank0
  3140     03AC  00A5               	movwf	Lcd_Write_String@a
  3141     03AD  3001               	movlw	high _buffer
  3142     03AE  00A6               	movwf	Lcd_Write_String@a+1
  3143     03AF  319D  250C  3182   	fcall	_Lcd_Write_String
  3144                           
  3145                           ;main.c: 139:         contadorTemp++;
  3146     03B2  3001               	movlw	1
  3147     03B3  0021               	movlb	1	; select bank1
  3148     03B4  07ED               	addwf	main@contadorTemp^(0+128),f
  3149     03B5  3000               	movlw	0
  3150     03B6  3DEE               	addwfc	(main@contadorTemp+1)^(0+128),f
  3151                           
  3152                           ;main.c: 142:         if (contadorTemp >= 300) {
  3153     03B7  086E               	movf	(main@contadorTemp+1)^(0+128),w
  3154     03B8  3A80               	xorlw	128
  3155     03B9  0022               	movlb	2	; select bank2
  3156     03BA  00CC               	movwf	??_main^(0+256)
  3157     03BB  3081               	movlw	129
  3158     03BC  024C               	subwf	??_main^(0+256),w
  3159     03BD  1D03               	skipz
  3160     03BE  2BC2               	goto	u6435
  3161     03BF  302C               	movlw	44
  3162     03C0  0021               	movlb	1	; select bank1
  3163     03C1  026D               	subwf	main@contadorTemp^(0+128),w
  3164     03C2                     u6435:
  3165     03C2  1C03               	skipc
  3166     03C3  2C5F               	goto	l5061
  3167                           
  3168                           ;main.c: 144:             ADC_StartConversion();
  3169     03C4  319C  2464  3182   	fcall	_ADC_StartConversion
  3170     03C7                     l5043:	
  3171                           ;main.c: 145:             while(!ADC_IsConversionDone());
  3172                           
  3173     03C7  319C  246D  3182   	fcall	_ADC_IsConversionDone
  3174     03CA  3A00               	xorlw	0
  3175     03CB  1903               	skipnz
  3176     03CC  2BC7               	goto	l5043
  3177                           
  3178                           ;main.c: 146:             convertedValue = ADC_GetConversionResult();
  3179     03CD  319C  247C  3182   	fcall	_ADC_GetConversionResult
  3180     03D0  0821               	movf	?_ADC_GetConversionResult+1,w
  3181     03D1  0022               	movlb	2	; select bank2
  3182     03D2  00BE               	movwf	(_convertedValue+1)^(0+256)
  3183     03D3  0020               	movlb	0	; select bank0
  3184     03D4  0820               	movf	?_ADC_GetConversionResult,w
  3185     03D5  0022               	movlb	2	; select bank2
  3186     03D6  00BD               	movwf	_convertedValue^(0+256)
  3187                           
  3188                           ;main.c: 147:             temp = (float) (convertedValue*5*100)/1024;
  3189     03D7  3044               	movlw	68
  3190     03D8  0020               	movlb	0	; select bank0
  3191     03D9  00B7               	movwf	___fldiv@a+3
  3192     03DA  3080               	movlw	128
  3193     03DB  00B6               	movwf	___fldiv@a+2
  3194     03DC  3000               	movlw	0
  3195     03DD  00B5               	movwf	___fldiv@a+1
  3196     03DE  3000               	movlw	0
  3197     03DF  00B4               	movwf	___fldiv@a
  3198     03E0  30F4               	movlw	244
  3199     03E1  00A2               	movwf	___wmul@multiplicand
  3200     03E2  3001               	movlw	1
  3201     03E3  00A3               	movwf	___wmul@multiplicand+1
  3202     03E4  0022               	movlb	2	; select bank2
  3203     03E5  083E               	movf	(_convertedValue+1)^(0+256),w
  3204     03E6  0020               	movlb	0	; select bank0
  3205     03E7  00A1               	movwf	___wmul@multiplier+1
  3206     03E8  0022               	movlb	2	; select bank2
  3207     03E9  083D               	movf	_convertedValue^(0+256),w
  3208     03EA  0020               	movlb	0	; select bank0
  3209     03EB  00A0               	movwf	___wmul@multiplier
  3210     03EC  319D  2527  3182   	fcall	___wmul
  3211     03EF  0820               	movf	?___wmul,w
  3212     03F0  0022               	movlb	2	; select bank2
  3213     03F1  00CC               	movwf	??_main^(0+256)
  3214     03F2  0020               	movlb	0	; select bank0
  3215     03F3  0821               	movf	?___wmul+1,w
  3216     03F4  0022               	movlb	2	; select bank2
  3217     03F5  00CD               	movwf	(??_main^(0+256)+1)
  3218     03F6  01CE               	clrf	(??_main^(0+256)+2)
  3219     03F7  01CF               	clrf	(??_main^(0+256)+3)
  3220     03F8  084F               	movf	(??_main+3)^(0+256),w
  3221     03F9  0020               	movlb	0	; select bank0
  3222     03FA  00A9               	movwf	___xxtofl@val+3
  3223     03FB  0022               	movlb	2	; select bank2
  3224     03FC  084E               	movf	(??_main+2)^(0+256),w
  3225     03FD  0020               	movlb	0	; select bank0
  3226     03FE  00A8               	movwf	___xxtofl@val+2
  3227     03FF  0022               	movlb	2	; select bank2
  3228     0400  084D               	movf	(??_main+1)^(0+256),w
  3229     0401  0020               	movlb	0	; select bank0
  3230     0402  00A7               	movwf	___xxtofl@val+1
  3231     0403  0022               	movlb	2	; select bank2
  3232     0404  084C               	movf	??_main^(0+256),w
  3233     0405  0020               	movlb	0	; select bank0
  3234     0406  00A6               	movwf	___xxtofl@val
  3235     0407  3000               	movlw	0
  3236     0408  3192  229D  3182   	fcall	___xxtofl
  3237     040B  0829               	movf	?___xxtofl+3,w
  3238     040C  00BB               	movwf	___fldiv@b+3
  3239     040D  0828               	movf	?___xxtofl+2,w
  3240     040E  00BA               	movwf	___fldiv@b+2
  3241     040F  0827               	movf	?___xxtofl+1,w
  3242     0410  00B9               	movwf	___fldiv@b+1
  3243     0411  0826               	movf	?___xxtofl,w
  3244     0412  00B8               	movwf	___fldiv@b
  3245     0413  3188  2015  3182   	fcall	___fldiv
  3246     0416  0837               	movf	?___fldiv+3,w
  3247     0417  0022               	movlb	2	; select bank2
  3248     0418  00AB               	movwf	(_temp+3)^(0+256)
  3249     0419  0020               	movlb	0	; select bank0
  3250     041A  0836               	movf	?___fldiv+2,w
  3251     041B  0022               	movlb	2	; select bank2
  3252     041C  00AA               	movwf	(_temp+2)^(0+256)
  3253     041D  0020               	movlb	0	; select bank0
  3254     041E  0835               	movf	?___fldiv+1,w
  3255     041F  0022               	movlb	2	; select bank2
  3256     0420  00A9               	movwf	(_temp+1)^(0+256)
  3257     0421  0020               	movlb	0	; select bank0
  3258     0422  0834               	movf	?___fldiv,w
  3259     0423  0022               	movlb	2	; select bank2
  3260     0424  00A8               	movwf	_temp^(0+256)
  3261                           
  3262                           ;main.c: 150:             Lcd_Set_Cursor(2,10);
  3263     0425  300A               	movlw	10
  3264     0426  0020               	movlb	0	; select bank0
  3265     0427  00A3               	movwf	Lcd_Set_Cursor@b
  3266     0428  3002               	movlw	2
  3267     0429  3191  213E  3182   	fcall	_Lcd_Set_Cursor
  3268                           
  3269                           ;main.c: 151:             sprintf(buffer,"%0.2f\xDF",temp);
  3270     042C  3071               	movlw	low (STR_3| (0+32768))
  3271     042D  0021               	movlb	1	; select bank1
  3272     042E  00DE               	movwf	sprintf@fmt^(0+128)
  3273     042F  3098               	movlw	high (STR_3| (0+32768))
  3274     0430  00DF               	movwf	(sprintf@fmt^(0+128)+1)
  3275     0431  0022               	movlb	2	; select bank2
  3276     0432  082B               	movf	(_temp+3)^(0+256),w
  3277     0433  0021               	movlb	1	; select bank1
  3278     0434  00E3               	movwf	((?_sprintf+3)^(0+128)+2)
  3279     0435  0022               	movlb	2	; select bank2
  3280     0436  082A               	movf	(_temp+2)^(0+256),w
  3281     0437  0021               	movlb	1	; select bank1
  3282     0438  00E2               	movwf	((?_sprintf+2)^(0+128)+2)
  3283     0439  0022               	movlb	2	; select bank2
  3284     043A  0829               	movf	(_temp+1)^(0+256),w
  3285     043B  0021               	movlb	1	; select bank1
  3286     043C  00E1               	movwf	((?_sprintf+1)^(0+128)+2)
  3287     043D  0022               	movlb	2	; select bank2
  3288     043E  0828               	movf	_temp^(0+256),w
  3289     043F  0021               	movlb	1	; select bank1
  3290     0440  00E0               	movwf	(?_sprintf^(0+128)+2)
  3291     0441  30A0               	movlw	(low (_buffer| (0+256)))& (0+255)
  3292     0442  319D  25E2  3182   	fcall	_sprintf
  3293                           
  3294                           ;main.c: 152:             Lcd_Write_String(buffer);
  3295     0445  30A0               	movlw	low _buffer
  3296     0446  0020               	movlb	0	; select bank0
  3297     0447  00A5               	movwf	Lcd_Write_String@a
  3298     0448  3001               	movlw	high _buffer
  3299     0449  00A6               	movwf	Lcd_Write_String@a+1
  3300     044A  319D  250C  3182   	fcall	_Lcd_Write_String
  3301                           
  3302                           ;main.c: 153:             Lcd_Set_Cursor(2,16);
  3303     044D  3010               	movlw	16
  3304     044E  00A3               	movwf	Lcd_Set_Cursor@b
  3305     044F  3002               	movlw	2
  3306     0450  3191  213E  3182   	fcall	_Lcd_Set_Cursor
  3307                           
  3308                           ;main.c: 154:             Lcd_Write_String("C");
  3309     0453  3087               	movlw	low (STR_4| (0+32768))
  3310     0454  0020               	movlb	0	; select bank0
  3311     0455  00A5               	movwf	Lcd_Write_String@a
  3312     0456  3098               	movlw	high (STR_4| (0+32768))
  3313     0457  00A6               	movwf	Lcd_Write_String@a+1
  3314     0458  319D  250C  3182   	fcall	_Lcd_Write_String
  3315                           
  3316                           ;main.c: 157:             contadorTemp = 0;
  3317     045B  0021               	movlb	1	; select bank1
  3318     045C  01ED               	clrf	main@contadorTemp^(0+128)
  3319     045D  01EE               	clrf	(main@contadorTemp+1)^(0+128)
  3320                           
  3321                           ;main.c: 158:         } else {
  3322     045E  2C95               	goto	l5071
  3323     045F                     l5061:
  3324                           
  3325                           ;main.c: 160:             Lcd_Set_Cursor(2,10);
  3326     045F  300A               	movlw	10
  3327     0460  0020               	movlb	0	; select bank0
  3328     0461  00A3               	movwf	Lcd_Set_Cursor@b
  3329     0462  3002               	movlw	2
  3330     0463  3191  213E  3182   	fcall	_Lcd_Set_Cursor
  3331                           
  3332                           ;main.c: 161:             sprintf(buffer,"%0.2f\xDF",temp);
  3333     0466  3071               	movlw	low (STR_3| (0+32768))
  3334     0467  0021               	movlb	1	; select bank1
  3335     0468  00DE               	movwf	sprintf@fmt^(0+128)
  3336     0469  3098               	movlw	high (STR_3| (0+32768))
  3337     046A  00DF               	movwf	(sprintf@fmt^(0+128)+1)
  3338     046B  0022               	movlb	2	; select bank2
  3339     046C  082B               	movf	(_temp+3)^(0+256),w
  3340     046D  0021               	movlb	1	; select bank1
  3341     046E  00E3               	movwf	((?_sprintf+3)^(0+128)+2)
  3342     046F  0022               	movlb	2	; select bank2
  3343     0470  082A               	movf	(_temp+2)^(0+256),w
  3344     0471  0021               	movlb	1	; select bank1
  3345     0472  00E2               	movwf	((?_sprintf+2)^(0+128)+2)
  3346     0473  0022               	movlb	2	; select bank2
  3347     0474  0829               	movf	(_temp+1)^(0+256),w
  3348     0475  0021               	movlb	1	; select bank1
  3349     0476  00E1               	movwf	((?_sprintf+1)^(0+128)+2)
  3350     0477  0022               	movlb	2	; select bank2
  3351     0478  0828               	movf	_temp^(0+256),w
  3352     0479  0021               	movlb	1	; select bank1
  3353     047A  00E0               	movwf	(?_sprintf^(0+128)+2)
  3354     047B  30A0               	movlw	(low (_buffer| (0+256)))& (0+255)
  3355     047C  319D  25E2  3182   	fcall	_sprintf
  3356                           
  3357                           ;main.c: 162:             Lcd_Write_String(buffer);
  3358     047F  30A0               	movlw	low _buffer
  3359     0480  0020               	movlb	0	; select bank0
  3360     0481  00A5               	movwf	Lcd_Write_String@a
  3361     0482  3001               	movlw	high _buffer
  3362     0483  00A6               	movwf	Lcd_Write_String@a+1
  3363     0484  319D  250C  3182   	fcall	_Lcd_Write_String
  3364                           
  3365                           ;main.c: 163:             Lcd_Set_Cursor(2,16);
  3366     0487  3010               	movlw	16
  3367     0488  00A3               	movwf	Lcd_Set_Cursor@b
  3368     0489  3002               	movlw	2
  3369     048A  3191  213E  3182   	fcall	_Lcd_Set_Cursor
  3370                           
  3371                           ;main.c: 164:             Lcd_Write_String("C");
  3372     048D  3087               	movlw	low (STR_4| (0+32768))
  3373     048E  0020               	movlb	0	; select bank0
  3374     048F  00A5               	movwf	Lcd_Write_String@a
  3375     0490  3098               	movlw	high (STR_4| (0+32768))
  3376     0491  00A6               	movwf	Lcd_Write_String@a+1
  3377     0492  319D  250C  3182   	fcall	_Lcd_Write_String
  3378     0495                     l5071:
  3379                           
  3380                           ;main.c: 166:         _delay((unsigned long)((1000)*(4000000/4000.0)));
  3381     0495  3006               	movlw	6
  3382     0496  0022               	movlb	2	; select bank2
  3383     0497  00CD               	movwf	(??_main^(0+256)+1)
  3384     0498  3013               	movlw	19
  3385     0499  00CC               	movwf	??_main^(0+256)
  3386     049A  30AD               	movlw	173
  3387     049B                     u6567:
  3388     049B  0B89               	decfsz	9,f
  3389     049C  2C9B               	goto	u6567
  3390     049D  0BCC               	decfsz	??_main^(0+256),f
  3391     049E  2C9B               	goto	u6567
  3392     049F  0BCD               	decfsz	(??_main^(0+256)+1),f
  3393     04A0  2C9B               	goto	u6567
  3394     04A1  3200               	nop2
  3395     04A2  2AED               	goto	l5001
  3396     04A3                     __end_of_main:
  3397                           
  3398                           	psect	text1
  3399     1DE2                     __ptext1:	
  3400 ;; *************** function _sprintf *****************
  3401 ;; Defined at:
  3402 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  s               1    wreg     PTR unsigned char 
  3405 ;;		 -> buffer(20), 
  3406 ;;  fmt             2   62[BANK1 ] PTR const unsigned char 
  3407 ;;		 -> STR_5(7), STR_3(7), STR_2(15), 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;  s               1    0[BANK2 ] PTR unsigned char 
  3410 ;;		 -> buffer(20), 
  3411 ;;  f              11    2[BANK2 ] struct _IO_FILE
  3412 ;;  ret             2    0        int 
  3413 ;;  ap              1    1[BANK2 ] PTR void [1]
  3414 ;;		 -> ?_sprintf(2), 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  2   62[BANK1 ] int 
  3417 ;; Registers used:
  3418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 1F/1
  3421 ;;		On exit  : 1F/1
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3424 ;;      Params:         0       0      14       0       0       0       0       0
  3425 ;;      Locals:         0       0       0      13       0       0       0       0
  3426 ;;      Temps:          0       0       1       0       0       0       0       0
  3427 ;;      Totals:         0       0      15      13       0       0       0       0
  3428 ;;Total ram usage:       28 bytes
  3429 ;; Hardware stack levels used: 1
  3430 ;; Hardware stack levels required when called: 11
  3431 ;; This function calls:
  3432 ;;		_vfprintf
  3433 ;; This function is called by:
  3434 ;;		_main
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438     1DE2                     _sprintf:	
  3439                           ;psect for function _sprintf
  3440                           
  3441                           
  3442                           ;incstack = 0
  3443                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3444                           ;sprintf@s stored from wreg
  3445     1DE2  0022               	movlb	2	; select bank2
  3446     1DE3  00BF               	movwf	sprintf@s^(0+256)
  3447     1DE4  30E0               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  3448     1DE5  00C0               	movwf	sprintf@ap^(0+256)
  3449     1DE6  083F               	movf	sprintf@s^(0+256),w
  3450     1DE7  00C1               	movwf	sprintf@f^(0+256)
  3451     1DE8  01C3               	clrf	(sprintf@f^(0+256)+2)
  3452     1DE9  01C4               	clrf	((sprintf@f+1)^(0+256)+2)
  3453     1DEA  01CA               	clrf	(sprintf@f^(0+256)+9)
  3454     1DEB  01CB               	clrf	((sprintf@f+1)^(0+256)+9)
  3455     1DEC  0021               	movlb	1	; select bank1
  3456     1DED  085F               	movf	(sprintf@fmt+1)^(0+128),w
  3457     1DEE  0020               	movlb	0	; select bank0
  3458     1DEF  00EE               	movwf	vfprintf@fmt+1
  3459     1DF0  0021               	movlb	1	; select bank1
  3460     1DF1  085E               	movf	sprintf@fmt^(0+128),w
  3461     1DF2  0020               	movlb	0	; select bank0
  3462     1DF3  00ED               	movwf	vfprintf@fmt
  3463     1DF4  3040               	movlw	(low (sprintf@ap| (0+256)))& (0+255)
  3464     1DF5  00EF               	movwf	vfprintf@ap
  3465     1DF6  3041               	movlw	(low (sprintf@f| (0+256)))& (0+255)
  3466     1DF7  319D  259F         	fcall	_vfprintf
  3467     1DF9  0022               	movlb	2	; select bank2
  3468     1DFA  0843               	movf	(sprintf@f^(0+256)+2),w
  3469     1DFB  073F               	addwf	sprintf@s^(0+256),w
  3470     1DFC  0021               	movlb	1	; select bank1
  3471     1DFD  00EC               	movwf	??_sprintf^(0+128)
  3472     1DFE  086C               	movf	??_sprintf^(0+128),w
  3473     1DFF  0086               	movwf	6
  3474     1E00  3001               	movlw	1	; select bank2/3
  3475     1E01  0087               	movwf	7
  3476     1E02  0181               	clrf	1
  3477     1E03  0008               	return
  3478     1E04                     __end_of_sprintf:
  3479                           
  3480                           	psect	text2
  3481     1D9F                     __ptext2:	
  3482 ;; *************** function _vfprintf *****************
  3483 ;; Defined at:
  3484 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  fp              1    wreg     PTR struct _IO_FILE
  3487 ;;		 -> sprintf@f(11), 
  3488 ;;  fmt             2   77[BANK0 ] PTR const unsigned char 
  3489 ;;		 -> STR_5(7), STR_3(7), STR_2(15), 
  3490 ;;  ap              1   79[BANK0 ] PTR PTR void 
  3491 ;;		 -> sprintf@ap(1), 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;  fp              1   59[BANK1 ] PTR struct _IO_FILE
  3494 ;;		 -> sprintf@f(11), 
  3495 ;;  cfmt            2   60[BANK1 ] PTR unsigned char 
  3496 ;;		 -> STR_5(7), STR_3(7), STR_2(15), 
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  2   77[BANK0 ] int 
  3499 ;; Registers used:
  3500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3501 ;; Tracked objects:
  3502 ;;		On entry : 1F/0
  3503 ;;		On exit  : 1F/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3506 ;;      Params:         0       3       0       0       0       0       0       0
  3507 ;;      Locals:         0       0       3       0       0       0       0       0
  3508 ;;      Temps:          0       0       1       0       0       0       0       0
  3509 ;;      Totals:         0       3       4       0       0       0       0       0
  3510 ;;Total ram usage:        7 bytes
  3511 ;; Hardware stack levels used: 1
  3512 ;; Hardware stack levels required when called: 10
  3513 ;; This function calls:
  3514 ;;		_vfpfcnvrt
  3515 ;; This function is called by:
  3516 ;;		_sprintf
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520     1D9F                     _vfprintf:	
  3521                           ;psect for function _vfprintf
  3522                           
  3523                           
  3524                           ;incstack = 0
  3525                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3526                           ;vfprintf@fp stored from wreg
  3527     1D9F  0021               	movlb	1	; select bank1
  3528     1DA0  00DB               	movwf	vfprintf@fp^(0+128)
  3529                           
  3530                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  3531     1DA1  0020               	movlb	0	; select bank0
  3532     1DA2  086E               	movf	vfprintf@fmt+1,w
  3533     1DA3  0021               	movlb	1	; select bank1
  3534     1DA4  00DD               	movwf	(vfprintf@cfmt+1)^(0+128)
  3535     1DA5  0020               	movlb	0	; select bank0
  3536     1DA6  086D               	movf	vfprintf@fmt,w
  3537     1DA7  0021               	movlb	1	; select bank1
  3538     1DA8  00DC               	movwf	vfprintf@cfmt^(0+128)
  3539     1DA9                     l4611:	
  3540                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3541                           
  3542                           
  3543                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3544     1DA9  0021               	movlb	1	; select bank1
  3545     1DAA  085C               	movf	vfprintf@cfmt^(0+128),w
  3546     1DAB  0084               	movwf	4
  3547     1DAC  085D               	movf	(vfprintf@cfmt+1)^(0+128),w
  3548     1DAD  0085               	movwf	5
  3549     1DAE  0012               	moviw fsr0++
  3550     1DAF  1903               	btfsc	3,2
  3551     1DB0  2DBC               	goto	l4613
  3552                           
  3553                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  3554     1DB1  30DC               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  3555     1DB2  0020               	movlb	0	; select bank0
  3556     1DB3  00EB               	movwf	vfpfcnvrt@fmt
  3557     1DB4  086F               	movf	vfprintf@ap,w
  3558     1DB5  00EC               	movwf	vfpfcnvrt@ap
  3559     1DB6  0021               	movlb	1	; select bank1
  3560     1DB7  085B               	movf	vfprintf@fp^(0+128),w
  3561     1DB8  3194  24BC  319D   	fcall	_vfpfcnvrt
  3562     1DBB  2DA9               	goto	l4611
  3563     1DBC                     l4613:
  3564                           
  3565                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  3566     1DBC  0020               	movlb	0	; select bank0
  3567     1DBD  01ED               	clrf	?_vfprintf
  3568     1DBE  01EE               	clrf	?_vfprintf+1
  3569     1DBF  0008               	return
  3570     1DC0                     __end_of_vfprintf:
  3571                           
  3572                           	psect	text3
  3573     14BC                     __ptext3:	
  3574 ;; *************** function _vfpfcnvrt *****************
  3575 ;; Defined at:
  3576 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;  fp              1    wreg     PTR struct _IO_FILE
  3579 ;;		 -> sprintf@f(11), 
  3580 ;;  fmt             1   75[BANK0 ] PTR PTR unsigned char 
  3581 ;;		 -> vfprintf@cfmt(2), 
  3582 ;;  ap              1   76[BANK0 ] PTR PTR void 
  3583 ;;		 -> sprintf@ap(1), 
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;  fp              1   55[BANK1 ] PTR struct _IO_FILE
  3586 ;;		 -> sprintf@f(11), 
  3587 ;;  convarg         4   50[BANK1 ] struct .
  3588 ;;  cp              2   56[BANK1 ] PTR unsigned char 
  3589 ;;		 -> STR_5(7), STR_3(7), STR_2(15), 
  3590 ;;  c               1   54[BANK1 ] unsigned char 
  3591 ;;  done            1   49[BANK1 ] _Bool 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  1    wreg      void 
  3594 ;; Registers used:
  3595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 1F/1
  3598 ;;		On exit  : 1F/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3601 ;;      Params:         0       2       0       0       0       0       0       0
  3602 ;;      Locals:         0       0       9       0       0       0       0       0
  3603 ;;      Temps:          0       0       4       0       0       0       0       0
  3604 ;;      Totals:         0       2      13       0       0       0       0       0
  3605 ;;Total ram usage:       15 bytes
  3606 ;; Hardware stack levels used: 1
  3607 ;; Hardware stack levels required when called: 9
  3608 ;; This function calls:
  3609 ;;		_dtoa
  3610 ;;		_efgtoa
  3611 ;;		_fputc
  3612 ;;		_read_prec_or_width
  3613 ;; This function is called by:
  3614 ;;		_vfprintf
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618     14BC                     _vfpfcnvrt:	
  3619                           ;psect for function _vfpfcnvrt
  3620                           
  3621                           
  3622                           ;incstack = 0
  3623                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3624                           ;vfpfcnvrt@fp stored from wreg
  3625     14BC  00D7               	movwf	vfpfcnvrt@fp^(0+128)
  3626                           
  3627                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  3628     14BD  0020               	movlb	0	; select bank0
  3629     14BE  086B               	movf	vfpfcnvrt@fmt,w
  3630     14BF  0086               	movwf	6
  3631     14C0  0187               	clrf	7
  3632     14C1  3F40               	moviw [0]fsr1
  3633     14C2  0021               	movlb	1	; select bank1
  3634     14C3  00CD               	movwf	??_vfpfcnvrt^(0+128)
  3635     14C4  3F41               	moviw [1]fsr1
  3636     14C5  00CE               	movwf	(??_vfpfcnvrt^(0+128)+1)
  3637     14C6  084D               	movf	??_vfpfcnvrt^(0+128),w
  3638     14C7  0084               	movwf	4
  3639     14C8  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  3640     14C9  0085               	movwf	5
  3641     14CA  0012               	moviw fsr0++
  3642     14CB  3A25               	xorlw	37
  3643     14CC  1D03               	btfss	3,2
  3644     14CD  2E30               	goto	l4547
  3645                           
  3646                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  3647     14CE  0020               	movlb	0	; select bank0
  3648     14CF  086B               	movf	vfpfcnvrt@fmt,w
  3649     14D0  0086               	movwf	6
  3650     14D1  0187               	clrf	7
  3651     14D2  3001               	movlw	1
  3652     14D3  0781               	addwf	1,f
  3653     14D4  3141               	addfsr 1,1
  3654     14D5  1803               	skipnc
  3655     14D6  0A81               	incf	1,f
  3656                           
  3657                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  3658     14D7  0022               	movlb	2	; select bank2
  3659     14D8  01AC               	clrf	_width^(0+256)
  3660     14D9  01AD               	clrf	(_width+1)^(0+256)
  3661     14DA  1003               	clrc
  3662     14DB  3000               	movlw	0
  3663     14DC  1803               	btfsc	3,0
  3664     14DD  3001               	movlw	1
  3665     14DE  00FC               	movwf	_flags
  3666                           
  3667                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  3668     14DF  30FF               	movlw	255
  3669     14E0  00AE               	movwf	_prec^(0+256)
  3670     14E1  30FF               	movlw	255
  3671     14E2  00AF               	movwf	(_prec^(0+256)+1)
  3672                           
  3673                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  3674     14E3  0021               	movlb	1	; select bank1
  3675     14E4  01D1               	clrf	vfpfcnvrt@done^(0+128)
  3676                           
  3677                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  3678     14E5  2CF3               	goto	l4487
  3679     14E6                     l1156:	
  3680                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1219:            
      +                               case '0' :
  3681                           
  3682                           
  3683                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  3684     14E6  14FC               	bsf	_flags,1
  3685                           
  3686                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  3687     14E7  0020               	movlb	0	; select bank0
  3688     14E8  086B               	movf	vfpfcnvrt@fmt,w
  3689     14E9  0086               	movwf	6
  3690     14EA  0187               	clrf	7
  3691     14EB  3001               	movlw	1
  3692     14EC  0781               	addwf	1,f
  3693     14ED  3141               	addfsr 1,1
  3694     14EE  1803               	skipnc
  3695     14EF  0A81               	incf	1,f
  3696                           
  3697                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  3698     14F0  2CF3               	goto	l4487
  3699     14F1                     l1158:	
  3700                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1242:            
      +                               default:
  3701                           
  3702                           
  3703                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  3704     14F1  01D1               	clrf	vfpfcnvrt@done^(0+128)
  3705     14F2  0AD1               	incf	vfpfcnvrt@done^(0+128),f
  3706     14F3                     l4487:	
  3707                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  3708                           
  3709                           
  3710                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  3711     14F3  0021               	movlb	1	; select bank1
  3712     14F4  0851               	movf	vfpfcnvrt@done^(0+128),w
  3713     14F5  1D03               	btfss	3,2
  3714     14F6  2D12               	goto	l4489
  3715     14F7  0020               	movlb	0	; select bank0
  3716     14F8  086B               	movf	vfpfcnvrt@fmt,w
  3717     14F9  0086               	movwf	6
  3718     14FA  0187               	clrf	7
  3719     14FB  3F40               	moviw [0]fsr1
  3720     14FC  0021               	movlb	1	; select bank1
  3721     14FD  00CD               	movwf	??_vfpfcnvrt^(0+128)
  3722     14FE  3F41               	moviw [1]fsr1
  3723     14FF  00CE               	movwf	(??_vfpfcnvrt^(0+128)+1)
  3724     1500  084D               	movf	??_vfpfcnvrt^(0+128),w
  3725     1501  0084               	movwf	4
  3726     1502  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  3727     1503  0085               	movwf	5
  3728     1504  0800               	movf	0,w	;code access
  3729     1505  00CF               	movwf	(??_vfpfcnvrt+2)^(0+128)
  3730     1506  01D0               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
  3731                           
  3732                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3733                           ; Switch size 1, requested type "simple"
  3734                           ; Number of cases is 1, Range of values is 0 to 0
  3735                           ; switch strategies available:
  3736                           ; Name         Instructions Cycles
  3737                           ; simple_byte            4     3 (average)
  3738                           ; direct_byte            8     6 (fixed)
  3739                           ; jumptable            260     6 (fixed)
  3740                           ;	Chosen strategy is simple_byte
  3741     1507  0850               	movf	(??_vfpfcnvrt+3)^(0+128),w
  3742     1508  3A00               	xorlw	0	; case 0
  3743     1509  1903               	skipnz
  3744     150A  2D0C               	goto	l5457
  3745     150B  2CF1               	goto	l1158
  3746     150C                     l5457:
  3747                           
  3748                           ; Switch size 1, requested type "simple"
  3749                           ; Number of cases is 1, Range of values is 48 to 48
  3750                           ; switch strategies available:
  3751                           ; Name         Instructions Cycles
  3752                           ; simple_byte            4     3 (average)
  3753                           ; direct_byte           11     9 (fixed)
  3754                           ; jumptable            263     9 (fixed)
  3755                           ;	Chosen strategy is simple_byte
  3756     150C  084F               	movf	(??_vfpfcnvrt+2)^(0+128),w
  3757     150D  3A30               	xorlw	48	; case 48
  3758     150E  1903               	skipnz
  3759     150F  2CE6               	goto	l1156
  3760     1510  2CF1               	goto	l1158
  3761     1511  2CF3               	goto	l4487
  3762     1512                     l4489:
  3763                           
  3764                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1265:         if 
      +                          ((*fmt)[0] == '.') {
  3765     1512  0020               	movlb	0	; select bank0
  3766     1513  086B               	movf	vfpfcnvrt@fmt,w
  3767     1514  0086               	movwf	6
  3768     1515  0187               	clrf	7
  3769     1516  3F40               	moviw [0]fsr1
  3770     1517  0021               	movlb	1	; select bank1
  3771     1518  00CD               	movwf	??_vfpfcnvrt^(0+128)
  3772     1519  3F41               	moviw [1]fsr1
  3773     151A  00CE               	movwf	(??_vfpfcnvrt^(0+128)+1)
  3774     151B  084D               	movf	??_vfpfcnvrt^(0+128),w
  3775     151C  0084               	movwf	4
  3776     151D  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  3777     151E  0085               	movwf	5
  3778     151F  0012               	moviw fsr0++
  3779     1520  3A2E               	xorlw	46
  3780     1521  1D03               	btfss	3,2
  3781     1522  2D39               	goto	l4495
  3782                           
  3783                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1266:            
      +                           ++*fmt;
  3784     1523  0020               	movlb	0	; select bank0
  3785     1524  086B               	movf	vfpfcnvrt@fmt,w
  3786     1525  0086               	movwf	6
  3787     1526  0187               	clrf	7
  3788     1527  3001               	movlw	1
  3789     1528  0781               	addwf	1,f
  3790     1529  3141               	addfsr 1,1
  3791     152A  1803               	skipnc
  3792     152B  0A81               	incf	1,f
  3793                           
  3794                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1267:    prec = r
      +                          ead_prec_or_width(fmt, ap);
  3795     152C  086C               	movf	vfpfcnvrt@ap,w
  3796     152D  00A6               	movwf	read_prec_or_width@ap
  3797     152E  086B               	movf	vfpfcnvrt@fmt,w
  3798     152F  3190  201A  3194   	fcall	_read_prec_or_width
  3799     1532  0827               	movf	?_read_prec_or_width+1,w
  3800     1533  0022               	movlb	2	; select bank2
  3801     1534  00AF               	movwf	(_prec+1)^(0+256)
  3802     1535  0020               	movlb	0	; select bank0
  3803     1536  0826               	movf	?_read_prec_or_width,w
  3804     1537  0022               	movlb	2	; select bank2
  3805     1538  00AE               	movwf	_prec^(0+256)
  3806     1539                     l4495:
  3807                           
  3808                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  3809     1539  0020               	movlb	0	; select bank0
  3810     153A  086B               	movf	vfpfcnvrt@fmt,w
  3811     153B  0086               	movwf	6
  3812     153C  0187               	clrf	7
  3813     153D  3F40               	moviw [0]fsr1
  3814     153E  0021               	movlb	1	; select bank1
  3815     153F  00D8               	movwf	vfpfcnvrt@cp^(0+128)
  3816     1540  3F41               	moviw [1]fsr1
  3817     1541  00D9               	movwf	(vfpfcnvrt@cp+1)^(0+128)
  3818                           
  3819                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  3820     1542  0858               	movf	vfpfcnvrt@cp^(0+128),w
  3821     1543  0084               	movwf	4
  3822     1544  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  3823     1545  0085               	movwf	5
  3824     1546  0012               	moviw fsr0++
  3825     1547  3A64               	xorlw	100
  3826     1548  1903               	btfsc	3,2
  3827     1549  2D52               	goto	l4501
  3828     154A  0858               	movf	vfpfcnvrt@cp^(0+128),w
  3829     154B  0084               	movwf	4
  3830     154C  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  3831     154D  0085               	movwf	5
  3832     154E  0012               	moviw fsr0++
  3833     154F  3A69               	xorlw	105
  3834     1550  1D03               	btfss	3,2
  3835     1551  2D7C               	goto	l4509
  3836     1552                     l4501:
  3837                           
  3838                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3839     1552  0020               	movlb	0	; select bank0
  3840     1553  086C               	movf	vfpfcnvrt@ap,w
  3841     1554  0086               	movwf	6
  3842     1555  3001               	movlw	1	; select bank2/3
  3843     1556  0087               	movwf	7
  3844     1557  0801               	movf	1,w
  3845     1558  0084               	movwf	4
  3846     1559  0185               	clrf	5
  3847     155A  3002               	movlw	2
  3848     155B  0781               	addwf	1,f
  3849     155C  3F00               	moviw [0]fsr0
  3850     155D  0021               	movlb	1	; select bank1
  3851     155E  00D2               	movwf	vfpfcnvrt@convarg^(0+128)
  3852     155F  3F01               	moviw [1]fsr0
  3853     1560  00D3               	movwf	(vfpfcnvrt@convarg+1)^(0+128)
  3854                           
  3855                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  3856     1561  0858               	movf	vfpfcnvrt@cp^(0+128),w
  3857     1562  3E01               	addlw	1
  3858     1563  00CD               	movwf	??_vfpfcnvrt^(0+128)
  3859     1564  3000               	movlw	0
  3860     1565  3D59               	addwfc	(vfpfcnvrt@cp+1)^(0+128),w
  3861     1566  00CE               	movwf	(??_vfpfcnvrt+1)^(0+128)
  3862     1567  0020               	movlb	0	; select bank0
  3863     1568  086B               	movf	vfpfcnvrt@fmt,w
  3864     1569  0086               	movwf	6
  3865     156A  0187               	clrf	7
  3866     156B  0021               	movlb	1	; select bank1
  3867     156C  084D               	movf	??_vfpfcnvrt^(0+128),w
  3868     156D  3FC0               	movwi [0]fsr1
  3869     156E  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  3870     156F  3FC1               	movwi [1]fsr1
  3871                           
  3872                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  3873     1570  0853               	movf	(vfpfcnvrt@convarg+1)^(0+128),w
  3874     1571  0020               	movlb	0	; select bank0
  3875     1572  00B7               	movwf	dtoa@d+1
  3876     1573  0021               	movlb	1	; select bank1
  3877     1574  0852               	movf	vfpfcnvrt@convarg^(0+128),w
  3878     1575  0020               	movlb	0	; select bank0
  3879     1576  00B6               	movwf	dtoa@d
  3880     1577  0021               	movlb	1	; select bank1
  3881     1578  0857               	movf	vfpfcnvrt@fp^(0+128),w
  3882     1579  3193  2330         	fcall	_dtoa
  3883     157B  0008               	return
  3884     157C                     l4509:
  3885                           
  3886                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1689:   cp = *fmt
      +                          ;
  3887     157C  0020               	movlb	0	; select bank0
  3888     157D  086B               	movf	vfpfcnvrt@fmt,w
  3889     157E  0086               	movwf	6
  3890     157F  0187               	clrf	7
  3891     1580  3F40               	moviw [0]fsr1
  3892     1581  0021               	movlb	1	; select bank1
  3893     1582  00D8               	movwf	vfpfcnvrt@cp^(0+128)
  3894     1583  3F41               	moviw [1]fsr1
  3895     1584  00D9               	movwf	(vfpfcnvrt@cp+1)^(0+128)
  3896                           
  3897                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1690:   c = *cp;
  3898     1585  0858               	movf	vfpfcnvrt@cp^(0+128),w
  3899     1586  0084               	movwf	4
  3900     1587  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  3901     1588  0085               	movwf	5
  3902     1589  0800               	movf	0,w	;code access
  3903     158A  00D6               	movwf	vfpfcnvrt@c^(0+128)
  3904                           
  3905                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1691:   switch(c)
      +                           {
  3906     158B  2D96               	goto	l4521
  3907     158C                     l4513:
  3908                           
  3909                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1695:     cp++;
  3910     158C  3001               	movlw	1
  3911     158D  07D8               	addwf	vfpfcnvrt@cp^(0+128),f
  3912     158E  3000               	movlw	0
  3913     158F  3DD9               	addwfc	(vfpfcnvrt@cp+1)^(0+128),f
  3914                           
  3915                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1696:     break;
  3916     1590  2DA9               	goto	l4523
  3917     1591                     l4515:
  3918                           
  3919                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1721:     c = 'l'
      +                          ;
  3920     1591  306C               	movlw	108
  3921     1592  00D6               	movwf	vfpfcnvrt@c^(0+128)
  3922                           
  3923                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1722:     break;
  3924     1593  2DA9               	goto	l4523
  3925     1594                     l4517:
  3926                           
  3927                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1724:     c = 0;
  3928     1594  01D6               	clrf	vfpfcnvrt@c^(0+128)
  3929                           
  3930                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1725:     break;
  3931     1595  2DA9               	goto	l4523
  3932     1596                     l4521:
  3933     1596  0856               	movf	vfpfcnvrt@c^(0+128),w
  3934     1597  00CD               	movwf	??_vfpfcnvrt^(0+128)
  3935     1598  01CE               	clrf	(??_vfpfcnvrt^(0+128)+1)
  3936                           
  3937                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3938                           ; Switch size 1, requested type "simple"
  3939                           ; Number of cases is 1, Range of values is 0 to 0
  3940                           ; switch strategies available:
  3941                           ; Name         Instructions Cycles
  3942                           ; simple_byte            4     3 (average)
  3943                           ; direct_byte            8     6 (fixed)
  3944                           ; jumptable            260     6 (fixed)
  3945                           ;	Chosen strategy is simple_byte
  3946     1599  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  3947     159A  3A00               	xorlw	0	; case 0
  3948     159B  1903               	skipnz
  3949     159C  2D9E               	goto	l5459
  3950     159D  2D94               	goto	l4517
  3951     159E                     l5459:
  3952                           
  3953                           ; Switch size 1, requested type "simple"
  3954                           ; Number of cases is 3, Range of values is 76 to 108
  3955                           ; switch strategies available:
  3956                           ; Name         Instructions Cycles
  3957                           ; simple_byte           10     6 (average)
  3958                           ; direct_byte           75     9 (fixed)
  3959                           ; jumptable            263     9 (fixed)
  3960                           ;	Chosen strategy is simple_byte
  3961     159E  084D               	movf	??_vfpfcnvrt^(0+128),w
  3962     159F  3A4C               	xorlw	76	; case 76
  3963     15A0  1903               	skipnz
  3964     15A1  2D8C               	goto	l4513
  3965     15A2  3A2A               	xorlw	42	; case 102
  3966     15A3  1903               	skipnz
  3967     15A4  2D91               	goto	l4515
  3968     15A5  3A0A               	xorlw	10	; case 108
  3969     15A6  1903               	skipnz
  3970     15A7  2D8C               	goto	l4513
  3971     15A8  2D94               	goto	l4517
  3972     15A9                     l4523:
  3973     15A9  0858               	movf	vfpfcnvrt@cp^(0+128),w
  3974     15AA  0084               	movwf	4
  3975     15AB  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  3976     15AC  0085               	movwf	5
  3977     15AD  0012               	moviw fsr0++
  3978     15AE  3A66               	xorlw	102
  3979     15AF  1903               	btfsc	3,2
  3980     15B0  2DD9               	goto	l4531
  3981     15B1  2E26               	goto	l4543
  3982     15B2                     l4525:
  3983                           
  3984                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1756:      convar
      +                          g.f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  3985     15B2  0020               	movlb	0	; select bank0
  3986     15B3  086C               	movf	vfpfcnvrt@ap,w
  3987     15B4  0086               	movwf	6
  3988     15B5  3001               	movlw	1	; select bank2/3
  3989     15B6  0087               	movwf	7
  3990     15B7  0801               	movf	1,w
  3991     15B8  0084               	movwf	4
  3992     15B9  0185               	clrf	5
  3993     15BA  3004               	movlw	4
  3994     15BB  0781               	addwf	1,f
  3995     15BC  3F00               	moviw [0]fsr0
  3996     15BD  0021               	movlb	1	; select bank1
  3997     15BE  00D2               	movwf	vfpfcnvrt@convarg^(0+128)
  3998     15BF  3F01               	moviw [1]fsr0
  3999     15C0  00D3               	movwf	(vfpfcnvrt@convarg+1)^(0+128)
  4000     15C1  3F02               	moviw [2]fsr0
  4001     15C2  00D4               	movwf	(vfpfcnvrt@convarg+2)^(0+128)
  4002     15C3  3F03               	moviw [3]fsr0
  4003     15C4  2DD7               	goto	L1
  4004     15C5                     l4527:	
  4005                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1757:      break;
  4006                           
  4007                           
  4008                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1759:      convar
      +                          g.f = (long double)(*(long double *)__va_arg(*(long double **)ap, (long double)0));
  4009     15C5  0020               	movlb	0	; select bank0
  4010     15C6  086C               	movf	vfpfcnvrt@ap,w
  4011     15C7  0086               	movwf	6
  4012     15C8  3001               	movlw	1	; select bank2/3
  4013     15C9  0087               	movwf	7
  4014     15CA  0801               	movf	1,w
  4015     15CB  0084               	movwf	4
  4016     15CC  0185               	clrf	5
  4017     15CD  3004               	movlw	4
  4018     15CE  0781               	addwf	1,f
  4019     15CF  3F00               	moviw [0]fsr0
  4020     15D0  0021               	movlb	1	; select bank1
  4021     15D1  00D2               	movwf	vfpfcnvrt@convarg^(0+128)
  4022     15D2  3F01               	moviw [1]fsr0
  4023     15D3  00D3               	movwf	(vfpfcnvrt@convarg+1)^(0+128)
  4024     15D4  3F02               	moviw [2]fsr0
  4025     15D5  00D4               	movwf	(vfpfcnvrt@convarg+2)^(0+128)
  4026     15D6  3F03               	moviw [3]fsr0
  4027     15D7                     L1:
  4028     15D7  00D5               	movwf	(vfpfcnvrt@convarg+3)^(0+128)
  4029                           
  4030                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1760:      break;
  4031     15D8  2DE9               	goto	l4533
  4032     15D9                     l4531:
  4033     15D9  0856               	movf	vfpfcnvrt@c^(0+128),w
  4034     15DA  00CD               	movwf	??_vfpfcnvrt^(0+128)
  4035     15DB  01CE               	clrf	(??_vfpfcnvrt^(0+128)+1)
  4036                           
  4037                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4038                           ; Switch size 1, requested type "simple"
  4039                           ; Number of cases is 1, Range of values is 0 to 0
  4040                           ; switch strategies available:
  4041                           ; Name         Instructions Cycles
  4042                           ; simple_byte            4     3 (average)
  4043                           ; direct_byte            8     6 (fixed)
  4044                           ; jumptable            260     6 (fixed)
  4045                           ;	Chosen strategy is simple_byte
  4046     15DC  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4047     15DD  3A00               	xorlw	0	; case 0
  4048     15DE  1903               	skipnz
  4049     15DF  2DE1               	goto	l5461
  4050     15E0  2DE9               	goto	l4533
  4051     15E1                     l5461:
  4052                           
  4053                           ; Switch size 1, requested type "simple"
  4054                           ; Number of cases is 2, Range of values is 76 to 108
  4055                           ; switch strategies available:
  4056                           ; Name         Instructions Cycles
  4057                           ; simple_byte            7     4 (average)
  4058                           ; direct_byte           75     9 (fixed)
  4059                           ; jumptable            263     9 (fixed)
  4060                           ;	Chosen strategy is simple_byte
  4061     15E1  084D               	movf	??_vfpfcnvrt^(0+128),w
  4062     15E2  3A4C               	xorlw	76	; case 76
  4063     15E3  1903               	skipnz
  4064     15E4  2DC5               	goto	l4527
  4065     15E5  3A20               	xorlw	32	; case 108
  4066     15E6  1903               	skipnz
  4067     15E7  2DB2               	goto	l4525
  4068     15E8  2DE9               	goto	l4533
  4069     15E9                     l4533:
  4070                           
  4071                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1762:    *fmt = c
      +                          p+1;
  4072     15E9  0858               	movf	vfpfcnvrt@cp^(0+128),w
  4073     15EA  3E01               	addlw	1
  4074     15EB  00CD               	movwf	??_vfpfcnvrt^(0+128)
  4075     15EC  3000               	movlw	0
  4076     15ED  3D59               	addwfc	(vfpfcnvrt@cp+1)^(0+128),w
  4077     15EE  00CE               	movwf	(??_vfpfcnvrt+1)^(0+128)
  4078     15EF  0020               	movlb	0	; select bank0
  4079     15F0  086B               	movf	vfpfcnvrt@fmt,w
  4080     15F1  0086               	movwf	6
  4081     15F2  0187               	clrf	7
  4082     15F3  0021               	movlb	1	; select bank1
  4083     15F4  084D               	movf	??_vfpfcnvrt^(0+128),w
  4084     15F5  3FC0               	movwi [0]fsr1
  4085     15F6  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4086     15F7  3FC1               	movwi [1]fsr1
  4087                           
  4088                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1763:    switch (
      +                          *cp) {
  4089     15F8  2E15               	goto	l4541
  4090     15F9                     l4535:
  4091                           
  4092                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1790:      return
      +                           (void) efgtoa(fp, convarg.f, *cp);;	Return value of _vfpfcnvrt is never used
  4093     15F9  0855               	movf	(vfpfcnvrt@convarg+3)^(0+128),w
  4094     15FA  0020               	movlb	0	; select bank0
  4095     15FB  00E5               	movwf	efgtoa@f+3
  4096     15FC  0021               	movlb	1	; select bank1
  4097     15FD  0854               	movf	(vfpfcnvrt@convarg+2)^(0+128),w
  4098     15FE  0020               	movlb	0	; select bank0
  4099     15FF  00E4               	movwf	efgtoa@f+2
  4100     1600  0021               	movlb	1	; select bank1
  4101     1601  0853               	movf	(vfpfcnvrt@convarg+1)^(0+128),w
  4102     1602  0020               	movlb	0	; select bank0
  4103     1603  00E3               	movwf	efgtoa@f+1
  4104     1604  0021               	movlb	1	; select bank1
  4105     1605  0852               	movf	vfpfcnvrt@convarg^(0+128),w
  4106     1606  0020               	movlb	0	; select bank0
  4107     1607  00E2               	movwf	efgtoa@f
  4108     1608  0021               	movlb	1	; select bank1
  4109     1609  0858               	movf	vfpfcnvrt@cp^(0+128),w
  4110     160A  0084               	movwf	4
  4111     160B  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  4112     160C  0085               	movwf	5
  4113     160D  0800               	movf	0,w	;code access
  4114     160E  0020               	movlb	0	; select bank0
  4115     160F  00E6               	movwf	efgtoa@c
  4116     1610  0021               	movlb	1	; select bank1
  4117     1611  0857               	movf	vfpfcnvrt@fp^(0+128),w
  4118     1612  3189  2184         	fcall	_efgtoa
  4119     1614  0008               	return
  4120     1615                     l4541:
  4121     1615  0858               	movf	vfpfcnvrt@cp^(0+128),w
  4122     1616  0084               	movwf	4
  4123     1617  0859               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  4124     1618  0085               	movwf	5
  4125     1619  0800               	movf	0,w	;code access
  4126     161A  00CD               	movwf	??_vfpfcnvrt^(0+128)
  4127     161B  01CE               	clrf	(??_vfpfcnvrt^(0+128)+1)
  4128                           
  4129                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4130                           ; Switch size 1, requested type "simple"
  4131                           ; Number of cases is 1, Range of values is 0 to 0
  4132                           ; switch strategies available:
  4133                           ; Name         Instructions Cycles
  4134                           ; simple_byte            4     3 (average)
  4135                           ; direct_byte            8     6 (fixed)
  4136                           ; jumptable            260     6 (fixed)
  4137                           ;	Chosen strategy is simple_byte
  4138     161C  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4139     161D  3A00               	xorlw	0	; case 0
  4140     161E  1903               	skipnz
  4141     161F  2E21               	goto	l5463
  4142     1620  2E26               	goto	l4543
  4143     1621                     l5463:
  4144                           
  4145                           ; Switch size 1, requested type "simple"
  4146                           ; Number of cases is 1, Range of values is 102 to 102
  4147                           ; switch strategies available:
  4148                           ; Name         Instructions Cycles
  4149                           ; simple_byte            4     3 (average)
  4150                           ; direct_byte           11     9 (fixed)
  4151                           ; jumptable            263     9 (fixed)
  4152                           ;	Chosen strategy is simple_byte
  4153     1621  084D               	movf	??_vfpfcnvrt^(0+128),w
  4154     1622  3A66               	xorlw	102	; case 102
  4155     1623  1903               	skipnz
  4156     1624  2DF9               	goto	l4535
  4157     1625  2E26               	goto	l4543
  4158     1626                     l4543:
  4159                           
  4160                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  4161     1626  0020               	movlb	0	; select bank0
  4162     1627  086B               	movf	vfpfcnvrt@fmt,w
  4163     1628  0086               	movwf	6
  4164     1629  0187               	clrf	7
  4165     162A  3001               	movlw	1
  4166     162B  0781               	addwf	1,f
  4167     162C  3141               	addfsr 1,1
  4168     162D  1803               	skipnc
  4169     162E  0A81               	incf	1,f
  4170     162F  0008               	return
  4171     1630                     l4547:
  4172                           
  4173                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  4174     1630  0020               	movlb	0	; select bank0
  4175     1631  086B               	movf	vfpfcnvrt@fmt,w
  4176     1632  0086               	movwf	6
  4177     1633  0187               	clrf	7
  4178     1634  3F40               	moviw [0]fsr1
  4179     1635  0021               	movlb	1	; select bank1
  4180     1636  00CD               	movwf	??_vfpfcnvrt^(0+128)
  4181     1637  3F41               	moviw [1]fsr1
  4182     1638  00CE               	movwf	(??_vfpfcnvrt^(0+128)+1)
  4183     1639  084D               	movf	??_vfpfcnvrt^(0+128),w
  4184     163A  0084               	movwf	4
  4185     163B  084E               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4186     163C  0085               	movwf	5
  4187     163D  0800               	movf	0,w	;code access
  4188     163E  00CF               	movwf	(??_vfpfcnvrt+2)^(0+128)
  4189     163F  01D0               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
  4190     1640  084F               	movf	(??_vfpfcnvrt+2)^(0+128),w
  4191     1641  0020               	movlb	0	; select bank0
  4192     1642  00A0               	movwf	fputc@c
  4193     1643  0021               	movlb	1	; select bank1
  4194     1644  0850               	movf	(??_vfpfcnvrt+3)^(0+128),w
  4195     1645  0020               	movlb	0	; select bank0
  4196     1646  00A1               	movwf	fputc@c+1
  4197     1647  0021               	movlb	1	; select bank1
  4198     1648  0857               	movf	vfpfcnvrt@fp^(0+128),w
  4199     1649  0020               	movlb	0	; select bank0
  4200     164A  00A2               	movwf	fputc@fp
  4201     164B  319F  2712  3194   	fcall	_fputc
  4202     164E  2E26               	goto	l4543
  4203     164F                     __end_of_vfpfcnvrt:
  4204                           
  4205                           	psect	text4
  4206     101A                     __ptext4:	
  4207 ;; *************** function _read_prec_or_width *****************
  4208 ;; Defined at:
  4209 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;  fmt             1    wreg     PTR PTR const unsigned c
  4212 ;;		 -> vfprintf@cfmt(2), 
  4213 ;;  ap              1    6[BANK0 ] PTR PTR void [1]
  4214 ;;		 -> sprintf@ap(1), 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  fmt             1   14[BANK0 ] PTR PTR const unsigned c
  4217 ;;		 -> vfprintf@cfmt(2), 
  4218 ;;  c               1   11[BANK0 ] unsigned char 
  4219 ;;  n               2   12[BANK0 ] int 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  2    6[BANK0 ] int 
  4222 ;; Registers used:
  4223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 1F/0
  4226 ;;		On exit  : 1F/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4229 ;;      Params:         0       2       0       0       0       0       0       0
  4230 ;;      Locals:         0       4       0       0       0       0       0       0
  4231 ;;      Temps:          0       3       0       0       0       0       0       0
  4232 ;;      Totals:         0       9       0       0       0       0       0       0
  4233 ;;Total ram usage:        9 bytes
  4234 ;; Hardware stack levels used: 1
  4235 ;; Hardware stack levels required when called: 5
  4236 ;; This function calls:
  4237 ;;		___wmul
  4238 ;; This function is called by:
  4239 ;;		_vfpfcnvrt
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243     101A                     _read_prec_or_width:	
  4244                           ;psect for function _read_prec_or_width
  4245                           
  4246                           
  4247                           ;incstack = 0
  4248                           ; Regs used in _read_prec_or_width: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4249                           ;read_prec_or_width@fmt stored from wreg
  4250     101A  00AE               	movwf	read_prec_or_width@fmt
  4251                           
  4252                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  4253     101B  01AC               	clrf	read_prec_or_width@n
  4254     101C  01AD               	clrf	read_prec_or_width@n+1
  4255                           
  4256                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  4257     101D  082E               	movf	read_prec_or_width@fmt,w
  4258     101E  0086               	movwf	6
  4259     101F  0187               	clrf	7
  4260     1020  3F40               	moviw [0]fsr1
  4261     1021  00A8               	movwf	??_read_prec_or_width
  4262     1022  3F41               	moviw [1]fsr1
  4263     1023  00A9               	movwf	??_read_prec_or_width+1
  4264     1024  0828               	movf	??_read_prec_or_width,w
  4265     1025  0084               	movwf	4
  4266     1026  0829               	movf	??_read_prec_or_width+1,w
  4267     1027  0085               	movwf	5
  4268     1028  0012               	moviw fsr0++
  4269     1029  3A2A               	xorlw	42
  4270     102A  1D03               	btfss	3,2
  4271     102B  285E               	goto	l4455
  4272                           
  4273                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  4274     102C  082E               	movf	read_prec_or_width@fmt,w
  4275     102D  0086               	movwf	6
  4276     102E  0187               	clrf	7
  4277     102F  3001               	movlw	1
  4278     1030  0781               	addwf	1,f
  4279     1031  3141               	addfsr 1,1
  4280     1032  1803               	skipnc
  4281     1033  0A81               	incf	1,f
  4282                           
  4283                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  4284     1034  0826               	movf	read_prec_or_width@ap,w
  4285     1035  0086               	movwf	6
  4286     1036  3001               	movlw	1	; select bank2/3
  4287     1037  0087               	movwf	7
  4288     1038  0801               	movf	1,w
  4289     1039  0084               	movwf	4
  4290     103A  0185               	clrf	5
  4291     103B  3002               	movlw	2
  4292     103C  0781               	addwf	1,f
  4293     103D  3F00               	moviw [0]fsr0
  4294     103E  00AC               	movwf	read_prec_or_width@n
  4295     103F  3F01               	moviw [1]fsr0
  4296     1040  00AD               	movwf	read_prec_or_width@n+1
  4297                           
  4298                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  4299     1041  2870               	goto	l4457
  4300     1042                     l4451:
  4301                           
  4302                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  4303     1042  082B               	movf	read_prec_or_width@c,w
  4304     1043  00A8               	movwf	??_read_prec_or_width
  4305     1044  01A9               	clrf	??_read_prec_or_width+1
  4306     1045  082D               	movf	read_prec_or_width@n+1,w
  4307     1046  00A1               	movwf	___wmul@multiplier+1
  4308     1047  082C               	movf	read_prec_or_width@n,w
  4309     1048  00A0               	movwf	___wmul@multiplier
  4310     1049  300A               	movlw	10
  4311     104A  00A2               	movwf	___wmul@multiplicand
  4312     104B  3000               	movlw	0
  4313     104C  00A3               	movwf	___wmul@multiplicand+1
  4314     104D  319D  2527  3190   	fcall	___wmul
  4315     1050  0828               	movf	??_read_prec_or_width,w
  4316     1051  0720               	addwf	?___wmul,w
  4317     1052  00AC               	movwf	read_prec_or_width@n
  4318     1053  0829               	movf	??_read_prec_or_width+1,w
  4319     1054  3D21               	addwfc	?___wmul+1,w
  4320     1055  00AD               	movwf	read_prec_or_width@n+1
  4321                           
  4322                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  4323     1056  082E               	movf	read_prec_or_width@fmt,w
  4324     1057  0086               	movwf	6
  4325     1058  0187               	clrf	7
  4326     1059  3001               	movlw	1
  4327     105A  0781               	addwf	1,f
  4328     105B  3141               	addfsr 1,1
  4329     105C  1803               	skipnc
  4330     105D  0A81               	incf	1,f
  4331     105E                     l4455:
  4332                           
  4333                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  4334     105E  082E               	movf	read_prec_or_width@fmt,w
  4335     105F  0086               	movwf	6
  4336     1060  0187               	clrf	7
  4337     1061  3F40               	moviw [0]fsr1
  4338     1062  00A8               	movwf	??_read_prec_or_width
  4339     1063  3F41               	moviw [1]fsr1
  4340     1064  00A9               	movwf	??_read_prec_or_width+1
  4341     1065  0828               	movf	??_read_prec_or_width,w
  4342     1066  0084               	movwf	4
  4343     1067  0829               	movf	??_read_prec_or_width+1,w
  4344     1068  0085               	movwf	5
  4345     1069  0800               	movf	0,w	;code access
  4346     106A  3ED0               	addlw	208
  4347     106B  00AB               	movwf	read_prec_or_width@c
  4348     106C  300A               	movlw	10
  4349     106D  022B               	subwf	read_prec_or_width@c,w
  4350     106E  1C03               	skipc
  4351     106F  2842               	goto	l4451
  4352     1070                     l4457:
  4353                           
  4354                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  4355     1070  082D               	movf	read_prec_or_width@n+1,w
  4356     1071  00A7               	movwf	?_read_prec_or_width+1
  4357     1072  082C               	movf	read_prec_or_width@n,w
  4358     1073  00A6               	movwf	?_read_prec_or_width
  4359     1074  0008               	return
  4360     1075                     __end_of_read_prec_or_width:
  4361                           
  4362                           	psect	text5
  4363     1D27                     __ptext5:	
  4364 ;; *************** function ___wmul *****************
  4365 ;; Defined at:
  4366 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4369 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  product         2    4[BANK0 ] unsigned int 
  4372 ;; Return value:  Size  Location     Type
  4373 ;;                  2    0[BANK0 ] unsigned int 
  4374 ;; Registers used:
  4375 ;;		wreg, status,2, status,0
  4376 ;; Tracked objects:
  4377 ;;		On entry : 1F/0
  4378 ;;		On exit  : 1F/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4381 ;;      Params:         0       4       0       0       0       0       0       0
  4382 ;;      Locals:         0       2       0       0       0       0       0       0
  4383 ;;      Temps:          0       0       0       0       0       0       0       0
  4384 ;;      Totals:         0       6       0       0       0       0       0       0
  4385 ;;Total ram usage:        6 bytes
  4386 ;; Hardware stack levels used: 1
  4387 ;; Hardware stack levels required when called: 4
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_main
  4392 ;;		_read_prec_or_width
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396     1D27                     ___wmul:	
  4397                           ;psect for function ___wmul
  4398                           
  4399                           
  4400                           ;incstack = 0
  4401                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4402     1D27  01A4               	clrf	___wmul@product
  4403     1D28  01A5               	clrf	___wmul@product+1
  4404     1D29                     l3609:
  4405     1D29  1C20               	btfss	___wmul@multiplier,0
  4406     1D2A  2D2F               	goto	l566
  4407     1D2B  0822               	movf	___wmul@multiplicand,w
  4408     1D2C  07A4               	addwf	___wmul@product,f
  4409     1D2D  0823               	movf	___wmul@multiplicand+1,w
  4410     1D2E  3DA5               	addwfc	___wmul@product+1,f
  4411     1D2F                     l566:
  4412     1D2F  3001               	movlw	1
  4413     1D30                     u3805:
  4414     1D30  35A2               	lslf	___wmul@multiplicand,f
  4415     1D31  0DA3               	rlf	___wmul@multiplicand+1,f
  4416     1D32  0B89               	decfsz	9,f
  4417     1D33  2D30               	goto	u3805
  4418     1D34  3001               	movlw	1
  4419     1D35                     u3815:
  4420     1D35  36A1               	lsrf	___wmul@multiplier+1,f
  4421     1D36  0CA0               	rrf	___wmul@multiplier,f
  4422     1D37  0B89               	decfsz	9,f
  4423     1D38  2D35               	goto	u3815
  4424     1D39  0820               	movf	___wmul@multiplier,w
  4425     1D3A  0421               	iorwf	___wmul@multiplier+1,w
  4426     1D3B  1D03               	btfss	3,2
  4427     1D3C  2D29               	goto	l3609
  4428     1D3D  0825               	movf	___wmul@product+1,w
  4429     1D3E  00A1               	movwf	?___wmul+1
  4430     1D3F  0824               	movf	___wmul@product,w
  4431     1D40  00A0               	movwf	?___wmul
  4432     1D41  0008               	return
  4433     1D42                     __end_of___wmul:
  4434                           
  4435                           	psect	text6
  4436     0984                     __ptext6:	
  4437 ;; *************** function _efgtoa *****************
  4438 ;; Defined at:
  4439 ;;		line 587 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  fp              1    wreg     PTR struct _IO_FILE
  4442 ;;		 -> sprintf@f(11), 
  4443 ;;  f               4   66[BANK0 ] PTR struct _IO_FILE
  4444 ;;  c               1   70[BANK0 ] unsigned char 
  4445 ;; Auto vars:     Size  Location     Type
  4446 ;;  fp              1   15[BANK1 ] PTR struct _IO_FILE
  4447 ;;		 -> sprintf@f(11), 
  4448 ;;  u               4   41[BANK1 ] struct flui
  4449 ;;  g               4   35[BANK1 ] struct flui
  4450 ;;  l               4   28[BANK1 ] struct flui
  4451 ;;  h               4   24[BANK1 ] struct flui
  4452 ;;  ou              4   20[BANK1 ] struct flui
  4453 ;;  n               2   39[BANK1 ] int 
  4454 ;;  i               2   32[BANK1 ] int 
  4455 ;;  w               2   18[BANK1 ] int 
  4456 ;;  e               2   16[BANK1 ] int 
  4457 ;;  m               2   13[BANK1 ] int 
  4458 ;;  d               2   11[BANK1 ] int 
  4459 ;;  t               2    4[BANK1 ] int 
  4460 ;;  p               2    2[BANK1 ] int 
  4461 ;;  ne              2    0[BANK1 ] int 
  4462 ;;  sign            1   34[BANK1 ] unsigned char 
  4463 ;;  nmode           1   10[BANK1 ] unsigned char 
  4464 ;;  mode            1    9[BANK1 ] unsigned char 
  4465 ;;  pp              1    8[BANK1 ] unsigned char 
  4466 ;;  esign           1    0        unsigned char 
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      void 
  4469 ;; Registers used:
  4470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 1F/1
  4473 ;;		On exit  : 1F/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4476 ;;      Params:         0       5       0       0       0       0       0       0
  4477 ;;      Locals:         0       0      45       0       0       0       0       0
  4478 ;;      Temps:          0       4       0       0       0       0       0       0
  4479 ;;      Totals:         0       9      45       0       0       0       0       0
  4480 ;;Total ram usage:       54 bytes
  4481 ;; Hardware stack levels used: 1
  4482 ;; Hardware stack levels required when called: 8
  4483 ;; This function calls:
  4484 ;;		___fladd
  4485 ;;		___fldiv
  4486 ;;		___fleq
  4487 ;;		___flge
  4488 ;;		___flmul
  4489 ;;		___flneg
  4490 ;;		___flsub
  4491 ;;		___fltol
  4492 ;;		___fpclassifyf
  4493 ;;		_floorf
  4494 ;;		_labs
  4495 ;;		_memcpy
  4496 ;;		_pad
  4497 ;;		_strcpy
  4498 ;; This function is called by:
  4499 ;;		_vfpfcnvrt
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503     0984                     _efgtoa:	
  4504                           ;psect for function _efgtoa
  4505                           
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _efgtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4509                           ;efgtoa@fp stored from wreg
  4510     0984  00AF               	movwf	efgtoa@fp^(0+128)
  4511                           
  4512                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 587: static void 
      +                          efgtoa(FILE *fp, long double f, char c);C:\Program Files\Microchip\xc8\v2.45\pic\sources
      +                          \c99\common\doprnt.c: 588: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 589:     char mode, nmode, pp, sign, esign;;C:\Program Files\Microchip\xc8\v2
      +                          .45\pic\sources\c99\common\doprnt.c: 590:     int d, e, i, m, n, ne, p, t, w;;C:\Program
      +                           Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 591:     long double h, l;
  4513     0985  01C2               	clrf	efgtoa@sign^(0+128)
  4514                           
  4515                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 596:     g.f = f;
  4516     0986  0020               	movlb	0	; select bank0
  4517     0987  0865               	movf	efgtoa@f+3,w
  4518     0988  0021               	movlb	1	; select bank1
  4519     0989  00C6               	movwf	(efgtoa@g+3)^(0+128)
  4520     098A  0020               	movlb	0	; select bank0
  4521     098B  0864               	movf	efgtoa@f+2,w
  4522     098C  0021               	movlb	1	; select bank1
  4523     098D  00C5               	movwf	(efgtoa@g+2)^(0+128)
  4524     098E  0020               	movlb	0	; select bank0
  4525     098F  0863               	movf	efgtoa@f+1,w
  4526     0990  0021               	movlb	1	; select bank1
  4527     0991  00C4               	movwf	(efgtoa@g+1)^(0+128)
  4528     0992  0020               	movlb	0	; select bank0
  4529     0993  0862               	movf	efgtoa@f,w
  4530     0994  0021               	movlb	1	; select bank1
  4531     0995  00C3               	movwf	efgtoa@g^(0+128)
  4532                           
  4533                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 597:     if (g.f 
      +                          < 0.0) {
  4534     0996  0846               	movf	(efgtoa@g+3)^(0+128),w
  4535     0997  0020               	movlb	0	; select bank0
  4536     0998  00C6               	movwf	___flge@ff1+3
  4537     0999  0021               	movlb	1	; select bank1
  4538     099A  0845               	movf	(efgtoa@g+2)^(0+128),w
  4539     099B  0020               	movlb	0	; select bank0
  4540     099C  00C5               	movwf	___flge@ff1+2
  4541     099D  0021               	movlb	1	; select bank1
  4542     099E  0844               	movf	(efgtoa@g+1)^(0+128),w
  4543     099F  0020               	movlb	0	; select bank0
  4544     09A0  00C4               	movwf	___flge@ff1+1
  4545     09A1  0021               	movlb	1	; select bank1
  4546     09A2  0843               	movf	efgtoa@g^(0+128),w
  4547     09A3  0020               	movlb	0	; select bank0
  4548     09A4  00C3               	movwf	___flge@ff1
  4549     09A5  3000               	movlw	0
  4550     09A6  00CA               	movwf	___flge@ff2+3
  4551     09A7  3000               	movlw	0
  4552     09A8  00C9               	movwf	___flge@ff2+2
  4553     09A9  3000               	movlw	0
  4554     09AA  00C8               	movwf	___flge@ff2+1
  4555     09AB  3000               	movlw	0
  4556     09AC  00C7               	movwf	___flge@ff2
  4557     09AD  3192  2222  3189   	fcall	___flge
  4558     09B0  1803               	btfsc	3,0
  4559     09B1  29D6               	goto	l4239
  4560                           
  4561                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 598:         sign
      +                           = 1;
  4562     09B2  0021               	movlb	1	; select bank1
  4563     09B3  01C2               	clrf	efgtoa@sign^(0+128)
  4564     09B4  0AC2               	incf	efgtoa@sign^(0+128),f
  4565                           
  4566                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 599:         g.f 
      +                          = -g.f;
  4567     09B5  0846               	movf	(efgtoa@g+3)^(0+128),w
  4568     09B6  0020               	movlb	0	; select bank0
  4569     09B7  00A3               	movwf	___flneg@f1+3
  4570     09B8  0021               	movlb	1	; select bank1
  4571     09B9  0845               	movf	(efgtoa@g+2)^(0+128),w
  4572     09BA  0020               	movlb	0	; select bank0
  4573     09BB  00A2               	movwf	___flneg@f1+2
  4574     09BC  0021               	movlb	1	; select bank1
  4575     09BD  0844               	movf	(efgtoa@g+1)^(0+128),w
  4576     09BE  0020               	movlb	0	; select bank0
  4577     09BF  00A1               	movwf	___flneg@f1+1
  4578     09C0  0021               	movlb	1	; select bank1
  4579     09C1  0843               	movf	efgtoa@g^(0+128),w
  4580     09C2  0020               	movlb	0	; select bank0
  4581     09C3  00A0               	movwf	___flneg@f1
  4582     09C4  319C  249D  3189   	fcall	___flneg
  4583     09C7  0823               	movf	?___flneg+3,w
  4584     09C8  0021               	movlb	1	; select bank1
  4585     09C9  00C6               	movwf	(efgtoa@g+3)^(0+128)
  4586     09CA  0020               	movlb	0	; select bank0
  4587     09CB  0822               	movf	?___flneg+2,w
  4588     09CC  0021               	movlb	1	; select bank1
  4589     09CD  00C5               	movwf	(efgtoa@g+2)^(0+128)
  4590     09CE  0020               	movlb	0	; select bank0
  4591     09CF  0821               	movf	?___flneg+1,w
  4592     09D0  0021               	movlb	1	; select bank1
  4593     09D1  00C4               	movwf	(efgtoa@g+1)^(0+128)
  4594     09D2  0020               	movlb	0	; select bank0
  4595     09D3  0820               	movf	?___flneg,w
  4596     09D4  0021               	movlb	1	; select bank1
  4597     09D5  00C3               	movwf	efgtoa@g^(0+128)
  4598     09D6                     l4239:
  4599                           
  4600                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 603:     n = 0;
  4601     09D6  0021               	movlb	1	; select bank1
  4602     09D7  01C7               	clrf	efgtoa@n^(0+128)
  4603     09D8  01C8               	clrf	(efgtoa@n+1)^(0+128)
  4604                           
  4605                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 604:     w = widt
      +                          h;
  4606     09D9  0022               	movlb	2	; select bank2
  4607     09DA  082D               	movf	(_width+1)^(0+256),w
  4608     09DB  0021               	movlb	1	; select bank1
  4609     09DC  00B3               	movwf	(efgtoa@w+1)^(0+128)
  4610     09DD  0022               	movlb	2	; select bank2
  4611     09DE  082C               	movf	_width^(0+256),w
  4612     09DF  0021               	movlb	1	; select bank1
  4613     09E0  00B2               	movwf	efgtoa@w^(0+128)
  4614                           
  4615                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 605:     if (sign
  4616     09E1  0842               	movf	efgtoa@sign^(0+128),w
  4617     09E2  1903               	btfsc	3,2
  4618     09E3  29EF               	goto	l4251
  4619                           
  4620                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 609:    ) {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 610:   sign = sign ? '-
      +                          ' : '+';
  4621     09E4  0842               	movf	efgtoa@sign^(0+128),w
  4622     09E5  1D03               	btfss	3,2
  4623     09E6  29E9               	goto	l4249
  4624     09E7  302B               	movlw	43
  4625     09E8  29EA               	goto	L2
  4626     09E9                     l4249:
  4627     09E9  302D               	movlw	45
  4628     09EA                     L2:
  4629     09EA  00A6               	movwf	_efgtoa$1370^(0+128)
  4630     09EB  3000               	movlw	0
  4631     09EC  00A7               	movwf	(_efgtoa$1370^(0+128)+1)
  4632     09ED  0826               	movf	_efgtoa$1370^(0+128),w
  4633     09EE  00C2               	movwf	efgtoa@sign^(0+128)
  4634     09EF                     l4251:
  4635                           
  4636                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 619:     if (( __
      +                          fpclassifyf(g.f) == 1 )) {
  4637     09EF  0846               	movf	(efgtoa@g+3)^(0+128),w
  4638     09F0  0020               	movlb	0	; select bank0
  4639     09F1  00A3               	movwf	___fpclassifyf@x+3
  4640     09F2  0021               	movlb	1	; select bank1
  4641     09F3  0845               	movf	(efgtoa@g+2)^(0+128),w
  4642     09F4  0020               	movlb	0	; select bank0
  4643     09F5  00A2               	movwf	___fpclassifyf@x+2
  4644     09F6  0021               	movlb	1	; select bank1
  4645     09F7  0844               	movf	(efgtoa@g+1)^(0+128),w
  4646     09F8  0020               	movlb	0	; select bank0
  4647     09F9  00A1               	movwf	___fpclassifyf@x+1
  4648     09FA  0021               	movlb	1	; select bank1
  4649     09FB  0843               	movf	efgtoa@g^(0+128),w
  4650     09FC  0020               	movlb	0	; select bank0
  4651     09FD  00A0               	movwf	___fpclassifyf@x
  4652     09FE  3191  21AA  3189   	fcall	___fpclassifyf
  4653     0A01  0320               	decf	?___fpclassifyf,w
  4654     0A02  0421               	iorwf	?___fpclassifyf+1,w
  4655     0A03  1D03               	btfss	3,2
  4656     0A04  2A35               	goto	l4263
  4657                           
  4658                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 620:   if (sign) 
      +                          {
  4659     0A05  0021               	movlb	1	; select bank1
  4660     0A06  0842               	movf	efgtoa@sign^(0+128),w
  4661     0A07  1903               	btfsc	3,2
  4662     0A08  2A15               	goto	l4257
  4663                           
  4664                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 621:    dbuf[0] =
      +                           sign;
  4665     0A09  0842               	movf	efgtoa@sign^(0+128),w
  4666     0A0A  0024               	movlb	4	; select bank4
  4667     0A0B  00A0               	movwf	_dbuf^(0+512)
  4668                           
  4669                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 622:    w--;
  4670     0A0C  30FF               	movlw	255
  4671     0A0D  0021               	movlb	1	; select bank1
  4672     0A0E  07B2               	addwf	efgtoa@w^(0+128),f
  4673     0A0F  30FF               	movlw	255
  4674     0A10  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  4675                           
  4676                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 623:    n = 1;
  4677     0A11  3001               	movlw	1
  4678     0A12  00C7               	movwf	efgtoa@n^(0+128)
  4679     0A13  3000               	movlw	0
  4680     0A14  00C8               	movwf	(efgtoa@n^(0+128)+1)
  4681     0A15                     l4257:
  4682                           
  4683                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 631:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 632:             strcpy(&d
      +                          buf[n], "inf");
  4684     0A15  307F               	movlw	low (STR_18| (0+32768))
  4685     0A16  0020               	movlb	0	; select bank0
  4686     0A17  00A0               	movwf	strcpy@src
  4687     0A18  3098               	movlw	high (STR_18| (0+32768))
  4688     0A19  00A1               	movwf	strcpy@src+1
  4689     0A1A  0021               	movlb	1	; select bank1
  4690     0A1B  0847               	movf	efgtoa@n^(0+128),w
  4691     0A1C  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  4692     0A1D  3190  2000  3189   	fcall	_strcpy
  4693                           
  4694                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 633:         };C:
      +                          \Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 634:         w -= ((
      +                          sizeof("inf")/sizeof("inf"[0]))-1);
  4695     0A20  30FD               	movlw	253
  4696     0A21  0021               	movlb	1	; select bank1
  4697     0A22  07B2               	addwf	efgtoa@w^(0+128),f
  4698     0A23  30FF               	movlw	255
  4699     0A24  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  4700                           
  4701                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 635:         retu
      +                          rn (void) pad(fp, &dbuf[0], w);
  4702     0A25  3020               	movlw	(low (_dbuf| (0+512)))& (0+255)
  4703     0A26  0020               	movlb	0	; select bank0
  4704     0A27  00AF               	movwf	pad@buf
  4705     0A28  0021               	movlb	1	; select bank1
  4706     0A29  0833               	movf	(efgtoa@w+1)^(0+128),w
  4707     0A2A  0020               	movlb	0	; select bank0
  4708     0A2B  00B1               	movwf	pad@p+1
  4709     0A2C  0021               	movlb	1	; select bank1
  4710     0A2D  0832               	movf	efgtoa@w^(0+128),w
  4711     0A2E  0020               	movlb	0	; select bank0
  4712     0A2F  00B0               	movwf	pad@p
  4713     0A30  0021               	movlb	1	; select bank1
  4714     0A31  082F               	movf	efgtoa@fp^(0+128),w
  4715     0A32  319E  2676         	fcall	_pad
  4716     0A34  0008               	return
  4717     0A35                     l4263:
  4718                           
  4719                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 637:     if (( __
      +                          fpclassifyf(g.f) == 0 )) {
  4720     0A35  0021               	movlb	1	; select bank1
  4721     0A36  0846               	movf	(efgtoa@g+3)^(0+128),w
  4722     0A37  0020               	movlb	0	; select bank0
  4723     0A38  00A3               	movwf	___fpclassifyf@x+3
  4724     0A39  0021               	movlb	1	; select bank1
  4725     0A3A  0845               	movf	(efgtoa@g+2)^(0+128),w
  4726     0A3B  0020               	movlb	0	; select bank0
  4727     0A3C  00A2               	movwf	___fpclassifyf@x+2
  4728     0A3D  0021               	movlb	1	; select bank1
  4729     0A3E  0844               	movf	(efgtoa@g+1)^(0+128),w
  4730     0A3F  0020               	movlb	0	; select bank0
  4731     0A40  00A1               	movwf	___fpclassifyf@x+1
  4732     0A41  0021               	movlb	1	; select bank1
  4733     0A42  0843               	movf	efgtoa@g^(0+128),w
  4734     0A43  0020               	movlb	0	; select bank0
  4735     0A44  00A0               	movwf	___fpclassifyf@x
  4736     0A45  3191  21AA  3189   	fcall	___fpclassifyf
  4737     0A48  0820               	movf	?___fpclassifyf,w
  4738     0A49  0421               	iorwf	?___fpclassifyf+1,w
  4739     0A4A  1D03               	btfss	3,2
  4740     0A4B  2A7C               	goto	l4275
  4741                           
  4742                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 638:   if (sign) 
      +                          {
  4743     0A4C  0021               	movlb	1	; select bank1
  4744     0A4D  0842               	movf	efgtoa@sign^(0+128),w
  4745     0A4E  1903               	btfsc	3,2
  4746     0A4F  2A5C               	goto	l4269
  4747                           
  4748                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 639:    dbuf[0] =
      +                           sign;
  4749     0A50  0842               	movf	efgtoa@sign^(0+128),w
  4750     0A51  0024               	movlb	4	; select bank4
  4751     0A52  00A0               	movwf	_dbuf^(0+512)
  4752                           
  4753                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 640:    w--;
  4754     0A53  30FF               	movlw	255
  4755     0A54  0021               	movlb	1	; select bank1
  4756     0A55  07B2               	addwf	efgtoa@w^(0+128),f
  4757     0A56  30FF               	movlw	255
  4758     0A57  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  4759                           
  4760                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 641:    n = 1;
  4761     0A58  3001               	movlw	1
  4762     0A59  00C7               	movwf	efgtoa@n^(0+128)
  4763     0A5A  3000               	movlw	0
  4764     0A5B  00C8               	movwf	(efgtoa@n^(0+128)+1)
  4765     0A5C                     l4269:
  4766                           
  4767                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 649:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 650:             strcpy(&d
      +                          buf[n], "nan");
  4768     0A5C  3083               	movlw	low (STR_21| (0+32768))
  4769     0A5D  0020               	movlb	0	; select bank0
  4770     0A5E  00A0               	movwf	strcpy@src
  4771     0A5F  3098               	movlw	high (STR_21| (0+32768))
  4772     0A60  00A1               	movwf	strcpy@src+1
  4773     0A61  0021               	movlb	1	; select bank1
  4774     0A62  0847               	movf	efgtoa@n^(0+128),w
  4775     0A63  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  4776     0A64  3190  2000  3189   	fcall	_strcpy
  4777                           
  4778                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 651:         };C:
      +                          \Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 652:         w -= ((
      +                          sizeof("nan")/sizeof("nan"[0]))-1);
  4779     0A67  30FD               	movlw	253
  4780     0A68  0021               	movlb	1	; select bank1
  4781     0A69  07B2               	addwf	efgtoa@w^(0+128),f
  4782     0A6A  30FF               	movlw	255
  4783     0A6B  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  4784                           
  4785                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 653:         retu
      +                          rn (void) pad(fp, &dbuf[0], w);
  4786     0A6C  3020               	movlw	(low (_dbuf| (0+512)))& (0+255)
  4787     0A6D  0020               	movlb	0	; select bank0
  4788     0A6E  00AF               	movwf	pad@buf
  4789     0A6F  0021               	movlb	1	; select bank1
  4790     0A70  0833               	movf	(efgtoa@w+1)^(0+128),w
  4791     0A71  0020               	movlb	0	; select bank0
  4792     0A72  00B1               	movwf	pad@p+1
  4793     0A73  0021               	movlb	1	; select bank1
  4794     0A74  0832               	movf	efgtoa@w^(0+128),w
  4795     0A75  0020               	movlb	0	; select bank0
  4796     0A76  00B0               	movwf	pad@p
  4797     0A77  0021               	movlb	1	; select bank1
  4798     0A78  082F               	movf	efgtoa@fp^(0+128),w
  4799     0A79  319E  2676         	fcall	_pad
  4800     0A7B  0008               	return
  4801     0A7C                     l4275:
  4802                           
  4803                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 657:     u.f = 1.
      +                          0;
  4804     0A7C  303F               	movlw	63
  4805     0A7D  0021               	movlb	1	; select bank1
  4806     0A7E  00CC               	movwf	(efgtoa@u+3)^(0+128)
  4807     0A7F  3080               	movlw	128
  4808     0A80  00CB               	movwf	(efgtoa@u+2)^(0+128)
  4809     0A81  3000               	movlw	0
  4810     0A82  00CA               	movwf	(efgtoa@u+1)^(0+128)
  4811     0A83  3000               	movlw	0
  4812     0A84  00C9               	movwf	efgtoa@u^(0+128)
  4813                           
  4814                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 658:     e = 0;
  4815     0A85  01B0               	clrf	efgtoa@e^(0+128)
  4816     0A86  01B1               	clrf	(efgtoa@e+1)^(0+128)
  4817                           
  4818                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 659:  if (!(g.f =
      +                          = 0.0)) {
  4819     0A87  0846               	movf	(efgtoa@g+3)^(0+128),w
  4820     0A88  0020               	movlb	0	; select bank0
  4821     0A89  00A3               	movwf	___fleq@ff1+3
  4822     0A8A  0021               	movlb	1	; select bank1
  4823     0A8B  0845               	movf	(efgtoa@g+2)^(0+128),w
  4824     0A8C  0020               	movlb	0	; select bank0
  4825     0A8D  00A2               	movwf	___fleq@ff1+2
  4826     0A8E  0021               	movlb	1	; select bank1
  4827     0A8F  0844               	movf	(efgtoa@g+1)^(0+128),w
  4828     0A90  0020               	movlb	0	; select bank0
  4829     0A91  00A1               	movwf	___fleq@ff1+1
  4830     0A92  0021               	movlb	1	; select bank1
  4831     0A93  0843               	movf	efgtoa@g^(0+128),w
  4832     0A94  0020               	movlb	0	; select bank0
  4833     0A95  00A0               	movwf	___fleq@ff1
  4834     0A96  3000               	movlw	0
  4835     0A97  00A7               	movwf	___fleq@ff2+3
  4836     0A98  3000               	movlw	0
  4837     0A99  00A6               	movwf	___fleq@ff2+2
  4838     0A9A  3000               	movlw	0
  4839     0A9B  00A5               	movwf	___fleq@ff2+1
  4840     0A9C  3000               	movlw	0
  4841     0A9D  00A4               	movwf	___fleq@ff2
  4842     0A9E  3187  27B3  3189   	fcall	___fleq
  4843     0AA1  1C03               	btfss	3,0
  4844     0AA2  2AB1               	goto	l4285
  4845     0AA3  2BBA               	goto	l4305
  4846     0AA4                     l4283:
  4847                           
  4848                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 661:    u = ou;
  4849     0AA4  0021               	movlb	1	; select bank1
  4850     0AA5  0837               	movf	(efgtoa@ou+3)^(0+128),w
  4851     0AA6  00CC               	movwf	(efgtoa@u+3)^(0+128)
  4852     0AA7  0836               	movf	(efgtoa@ou+2)^(0+128),w
  4853     0AA8  00CB               	movwf	(efgtoa@u+2)^(0+128)
  4854     0AA9  0835               	movf	(efgtoa@ou+1)^(0+128),w
  4855     0AAA  00CA               	movwf	(efgtoa@u+1)^(0+128)
  4856     0AAB  0834               	movf	efgtoa@ou^(0+128),w
  4857     0AAC  00C9               	movwf	efgtoa@u^(0+128)
  4858                           
  4859                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 662:    ++e;
  4860     0AAD  3001               	movlw	1
  4861     0AAE  07B0               	addwf	efgtoa@e^(0+128),f
  4862     0AAF  3000               	movlw	0
  4863     0AB0  3DB1               	addwfc	(efgtoa@e+1)^(0+128),f
  4864     0AB1                     l4285:
  4865                           
  4866                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 660:   while ((la
      +                          bs((g).u-((ou.f = u.f*10.0,ou)).u) <= 1) || g.f > ou.f) {
  4867     0AB1  3041               	movlw	65
  4868     0AB2  0020               	movlb	0	; select bank0
  4869     0AB3  00AC               	movwf	___flmul@b+3
  4870     0AB4  3020               	movlw	32
  4871     0AB5  00AB               	movwf	___flmul@b+2
  4872     0AB6  3000               	movlw	0
  4873     0AB7  00AA               	movwf	___flmul@b+1
  4874     0AB8  3000               	movlw	0
  4875     0AB9  00A9               	movwf	___flmul@b
  4876     0ABA  0021               	movlb	1	; select bank1
  4877     0ABB  084C               	movf	(efgtoa@u+3)^(0+128),w
  4878     0ABC  0020               	movlb	0	; select bank0
  4879     0ABD  00B0               	movwf	___flmul@a+3
  4880     0ABE  0021               	movlb	1	; select bank1
  4881     0ABF  084B               	movf	(efgtoa@u+2)^(0+128),w
  4882     0AC0  0020               	movlb	0	; select bank0
  4883     0AC1  00AF               	movwf	___flmul@a+2
  4884     0AC2  0021               	movlb	1	; select bank1
  4885     0AC3  084A               	movf	(efgtoa@u+1)^(0+128),w
  4886     0AC4  0020               	movlb	0	; select bank0
  4887     0AC5  00AE               	movwf	___flmul@a+1
  4888     0AC6  0021               	movlb	1	; select bank1
  4889     0AC7  0849               	movf	efgtoa@u^(0+128),w
  4890     0AC8  0020               	movlb	0	; select bank0
  4891     0AC9  00AD               	movwf	___flmul@a
  4892     0ACA  3184  24A3  3189   	fcall	___flmul
  4893     0ACD  082C               	movf	?___flmul+3,w
  4894     0ACE  0021               	movlb	1	; select bank1
  4895     0ACF  00B7               	movwf	(efgtoa@ou+3)^(0+128)
  4896     0AD0  0020               	movlb	0	; select bank0
  4897     0AD1  082B               	movf	?___flmul+2,w
  4898     0AD2  0021               	movlb	1	; select bank1
  4899     0AD3  00B6               	movwf	(efgtoa@ou+2)^(0+128)
  4900     0AD4  0020               	movlb	0	; select bank0
  4901     0AD5  082A               	movf	?___flmul+1,w
  4902     0AD6  0021               	movlb	1	; select bank1
  4903     0AD7  00B5               	movwf	(efgtoa@ou+1)^(0+128)
  4904     0AD8  0020               	movlb	0	; select bank0
  4905     0AD9  0829               	movf	?___flmul,w
  4906     0ADA  0021               	movlb	1	; select bank1
  4907     0ADB  00B4               	movwf	efgtoa@ou^(0+128)
  4908     0ADC  0834               	movf	efgtoa@ou^(0+128),w
  4909     0ADD  0243               	subwf	efgtoa@g^(0+128),w
  4910     0ADE  0020               	movlb	0	; select bank0
  4911     0ADF  00E7               	movwf	??_efgtoa
  4912     0AE0  0021               	movlb	1	; select bank1
  4913     0AE1  0835               	movf	(efgtoa@ou+1)^(0+128),w
  4914     0AE2  3B44               	subwfb	(efgtoa@g+1)^(0+128),w
  4915     0AE3  0020               	movlb	0	; select bank0
  4916     0AE4  00E8               	movwf	??_efgtoa+1
  4917     0AE5  0021               	movlb	1	; select bank1
  4918     0AE6  0836               	movf	(efgtoa@ou+2)^(0+128),w
  4919     0AE7  3B45               	subwfb	(efgtoa@g+2)^(0+128),w
  4920     0AE8  0020               	movlb	0	; select bank0
  4921     0AE9  00E9               	movwf	??_efgtoa+2
  4922     0AEA  0021               	movlb	1	; select bank1
  4923     0AEB  0837               	movf	(efgtoa@ou+3)^(0+128),w
  4924     0AEC  3B46               	subwfb	(efgtoa@g+3)^(0+128),w
  4925     0AED  0020               	movlb	0	; select bank0
  4926     0AEE  00EA               	movwf	??_efgtoa+3
  4927     0AEF  086A               	movf	??_efgtoa+3,w
  4928     0AF0  00A3               	movwf	labs@a+3
  4929     0AF1  0869               	movf	??_efgtoa+2,w
  4930     0AF2  00A2               	movwf	labs@a+2
  4931     0AF3  0868               	movf	??_efgtoa+1,w
  4932     0AF4  00A1               	movwf	labs@a+1
  4933     0AF5  0867               	movf	??_efgtoa,w
  4934     0AF6  00A0               	movwf	labs@a
  4935     0AF7  319C  24B4  3189   	fcall	_labs
  4936     0AFA  1BA3               	btfsc	?_labs+3,7
  4937     0AFB  2AA4               	goto	l4283
  4938     0AFC  0823               	movf	?_labs+3,w
  4939     0AFD  1D03               	btfss	3,2
  4940     0AFE  2B09               	goto	l4289
  4941     0AFF  0822               	movf	?_labs+2,w
  4942     0B00  1D03               	btfss	3,2
  4943     0B01  2B09               	goto	l4289
  4944     0B02  0821               	movf	?_labs+1,w
  4945     0B03  1D03               	btfss	3,2
  4946     0B04  2B09               	goto	l4289
  4947     0B05  3002               	movlw	2
  4948     0B06  0220               	subwf	?_labs,w
  4949     0B07  1C03               	btfss	3,0
  4950     0B08  2AA4               	goto	l4283
  4951     0B09                     l4289:
  4952     0B09  0021               	movlb	1	; select bank1
  4953     0B0A  0837               	movf	(efgtoa@ou+3)^(0+128),w
  4954     0B0B  0020               	movlb	0	; select bank0
  4955     0B0C  00C6               	movwf	___flge@ff1+3
  4956     0B0D  0021               	movlb	1	; select bank1
  4957     0B0E  0836               	movf	(efgtoa@ou+2)^(0+128),w
  4958     0B0F  0020               	movlb	0	; select bank0
  4959     0B10  00C5               	movwf	___flge@ff1+2
  4960     0B11  0021               	movlb	1	; select bank1
  4961     0B12  0835               	movf	(efgtoa@ou+1)^(0+128),w
  4962     0B13  0020               	movlb	0	; select bank0
  4963     0B14  00C4               	movwf	___flge@ff1+1
  4964     0B15  0021               	movlb	1	; select bank1
  4965     0B16  0834               	movf	efgtoa@ou^(0+128),w
  4966     0B17  0020               	movlb	0	; select bank0
  4967     0B18  00C3               	movwf	___flge@ff1
  4968     0B19  0021               	movlb	1	; select bank1
  4969     0B1A  0846               	movf	(efgtoa@g+3)^(0+128),w
  4970     0B1B  0020               	movlb	0	; select bank0
  4971     0B1C  00CA               	movwf	___flge@ff2+3
  4972     0B1D  0021               	movlb	1	; select bank1
  4973     0B1E  0845               	movf	(efgtoa@g+2)^(0+128),w
  4974     0B1F  0020               	movlb	0	; select bank0
  4975     0B20  00C9               	movwf	___flge@ff2+2
  4976     0B21  0021               	movlb	1	; select bank1
  4977     0B22  0844               	movf	(efgtoa@g+1)^(0+128),w
  4978     0B23  0020               	movlb	0	; select bank0
  4979     0B24  00C8               	movwf	___flge@ff2+1
  4980     0B25  0021               	movlb	1	; select bank1
  4981     0B26  0843               	movf	efgtoa@g^(0+128),w
  4982     0B27  0020               	movlb	0	; select bank0
  4983     0B28  00C7               	movwf	___flge@ff2
  4984     0B29  3192  2222  3189   	fcall	___flge
  4985     0B2C  1C03               	btfss	3,0
  4986     0B2D  2AA4               	goto	l4283
  4987                           
  4988                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 664:   if ((labs(
      +                          (g).u-(u).u) <= 1)) {
  4989     0B2E  0021               	movlb	1	; select bank1
  4990     0B2F                     L3:
  4991     0B2F  0849               	movf	efgtoa@u^(0+128),w
  4992     0B30  0243               	subwf	efgtoa@g^(0+128),w
  4993     0B31  0020               	movlb	0	; select bank0
  4994     0B32  00E7               	movwf	??_efgtoa
  4995     0B33  0021               	movlb	1	; select bank1
  4996     0B34  084A               	movf	(efgtoa@u+1)^(0+128),w
  4997     0B35  3B44               	subwfb	(efgtoa@g+1)^(0+128),w
  4998     0B36  0020               	movlb	0	; select bank0
  4999     0B37  00E8               	movwf	??_efgtoa+1
  5000     0B38  0021               	movlb	1	; select bank1
  5001     0B39  084B               	movf	(efgtoa@u+2)^(0+128),w
  5002     0B3A  3B45               	subwfb	(efgtoa@g+2)^(0+128),w
  5003     0B3B  0020               	movlb	0	; select bank0
  5004     0B3C  00E9               	movwf	??_efgtoa+2
  5005     0B3D  0021               	movlb	1	; select bank1
  5006     0B3E  084C               	movf	(efgtoa@u+3)^(0+128),w
  5007     0B3F  3B46               	subwfb	(efgtoa@g+3)^(0+128),w
  5008     0B40  0020               	movlb	0	; select bank0
  5009     0B41  00EA               	movwf	??_efgtoa+3
  5010     0B42  086A               	movf	??_efgtoa+3,w
  5011     0B43  00A3               	movwf	labs@a+3
  5012     0B44  0869               	movf	??_efgtoa+2,w
  5013     0B45  00A2               	movwf	labs@a+2
  5014     0B46  0868               	movf	??_efgtoa+1,w
  5015     0B47  00A1               	movwf	labs@a+1
  5016     0B48  0867               	movf	??_efgtoa,w
  5017     0B49  00A0               	movwf	labs@a
  5018     0B4A  319C  24B4  3189   	fcall	_labs
  5019     0B4D  1BA3               	btfsc	?_labs+3,7
  5020     0B4E  2B5C               	goto	l4293
  5021     0B4F  0823               	movf	?_labs+3,w
  5022     0B50  1D03               	btfss	3,2
  5023     0B51  2B95               	goto	l4303
  5024     0B52  0822               	movf	?_labs+2,w
  5025     0B53  1D03               	btfss	3,2
  5026     0B54  2B95               	goto	l4303
  5027     0B55  0821               	movf	?_labs+1,w
  5028     0B56  1D03               	btfss	3,2
  5029     0B57  2B95               	goto	l4303
  5030     0B58  3002               	movlw	2
  5031     0B59  0220               	subwf	?_labs,w
  5032     0B5A  1803               	btfsc	3,0
  5033     0B5B  2B95               	goto	l4303
  5034     0B5C                     l4293:
  5035                           
  5036                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 665:    g = u;
  5037     0B5C  0021               	movlb	1	; select bank1
  5038     0B5D  084C               	movf	(efgtoa@u+3)^(0+128),w
  5039     0B5E  00C6               	movwf	(efgtoa@g+3)^(0+128)
  5040     0B5F  084B               	movf	(efgtoa@u+2)^(0+128),w
  5041     0B60  00C5               	movwf	(efgtoa@g+2)^(0+128)
  5042     0B61  084A               	movf	(efgtoa@u+1)^(0+128),w
  5043     0B62  00C4               	movwf	(efgtoa@g+1)^(0+128)
  5044     0B63  0849               	movf	efgtoa@u^(0+128),w
  5045     0B64  00C3               	movwf	efgtoa@g^(0+128)
  5046                           
  5047                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 666:   }
  5048     0B65  2BBA               	goto	l4305
  5049     0B66                     l4295:
  5050                           
  5051                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 669:     u.f = u.
      +                          f/10.0;
  5052     0B66  3041               	movlw	65
  5053     0B67  00B7               	movwf	___fldiv@a+3
  5054     0B68  3020               	movlw	32
  5055     0B69  00B6               	movwf	___fldiv@a+2
  5056     0B6A  3000               	movlw	0
  5057     0B6B  00B5               	movwf	___fldiv@a+1
  5058     0B6C  3000               	movlw	0
  5059     0B6D  00B4               	movwf	___fldiv@a
  5060     0B6E  0021               	movlb	1	; select bank1
  5061     0B6F  084C               	movf	(efgtoa@u+3)^(0+128),w
  5062     0B70  0020               	movlb	0	; select bank0
  5063     0B71  00BB               	movwf	___fldiv@b+3
  5064     0B72  0021               	movlb	1	; select bank1
  5065     0B73  084B               	movf	(efgtoa@u+2)^(0+128),w
  5066     0B74  0020               	movlb	0	; select bank0
  5067     0B75  00BA               	movwf	___fldiv@b+2
  5068     0B76  0021               	movlb	1	; select bank1
  5069     0B77  084A               	movf	(efgtoa@u+1)^(0+128),w
  5070     0B78  0020               	movlb	0	; select bank0
  5071     0B79  00B9               	movwf	___fldiv@b+1
  5072     0B7A  0021               	movlb	1	; select bank1
  5073     0B7B  0849               	movf	efgtoa@u^(0+128),w
  5074     0B7C  0020               	movlb	0	; select bank0
  5075     0B7D  00B8               	movwf	___fldiv@b
  5076     0B7E  3188  2015  3189   	fcall	___fldiv
  5077     0B81  0837               	movf	?___fldiv+3,w
  5078     0B82  0021               	movlb	1	; select bank1
  5079     0B83  00CC               	movwf	(efgtoa@u+3)^(0+128)
  5080     0B84  0020               	movlb	0	; select bank0
  5081     0B85  0836               	movf	?___fldiv+2,w
  5082     0B86  0021               	movlb	1	; select bank1
  5083     0B87  00CB               	movwf	(efgtoa@u+2)^(0+128)
  5084     0B88  0020               	movlb	0	; select bank0
  5085     0B89  0835               	movf	?___fldiv+1,w
  5086     0B8A  0021               	movlb	1	; select bank1
  5087     0B8B  00CA               	movwf	(efgtoa@u+1)^(0+128)
  5088     0B8C  0020               	movlb	0	; select bank0
  5089     0B8D  0834               	movf	?___fldiv,w
  5090     0B8E  0021               	movlb	1	; select bank1
  5091     0B8F  00C9               	movwf	efgtoa@u^(0+128)
  5092                           
  5093                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 670:     --e;
  5094     0B90  30FF               	movlw	255
  5095     0B91  07B0               	addwf	efgtoa@e^(0+128),f
  5096     0B92  30FF               	movlw	255
  5097     0B93  3DB1               	addwfc	(efgtoa@e+1)^(0+128),f
  5098     0B94  2B2F               	goto	L3
  5099     0B95                     l4303:	
  5100                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 671:     if ((lab
      +                          s((g).u-(u).u) <= 1)) {
  5101                           
  5102                           
  5103                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 668:    while (g.
      +                          f < u.f) {
  5104     0B95  0021               	movlb	1	; select bank1
  5105     0B96  0846               	movf	(efgtoa@g+3)^(0+128),w
  5106     0B97  0020               	movlb	0	; select bank0
  5107     0B98  00C6               	movwf	___flge@ff1+3
  5108     0B99  0021               	movlb	1	; select bank1
  5109     0B9A  0845               	movf	(efgtoa@g+2)^(0+128),w
  5110     0B9B  0020               	movlb	0	; select bank0
  5111     0B9C  00C5               	movwf	___flge@ff1+2
  5112     0B9D  0021               	movlb	1	; select bank1
  5113     0B9E  0844               	movf	(efgtoa@g+1)^(0+128),w
  5114     0B9F  0020               	movlb	0	; select bank0
  5115     0BA0  00C4               	movwf	___flge@ff1+1
  5116     0BA1  0021               	movlb	1	; select bank1
  5117     0BA2  0843               	movf	efgtoa@g^(0+128),w
  5118     0BA3  0020               	movlb	0	; select bank0
  5119     0BA4  00C3               	movwf	___flge@ff1
  5120     0BA5  0021               	movlb	1	; select bank1
  5121     0BA6  084C               	movf	(efgtoa@u+3)^(0+128),w
  5122     0BA7  0020               	movlb	0	; select bank0
  5123     0BA8  00CA               	movwf	___flge@ff2+3
  5124     0BA9  0021               	movlb	1	; select bank1
  5125     0BAA  084B               	movf	(efgtoa@u+2)^(0+128),w
  5126     0BAB  0020               	movlb	0	; select bank0
  5127     0BAC  00C9               	movwf	___flge@ff2+2
  5128     0BAD  0021               	movlb	1	; select bank1
  5129     0BAE  084A               	movf	(efgtoa@u+1)^(0+128),w
  5130     0BAF  0020               	movlb	0	; select bank0
  5131     0BB0  00C8               	movwf	___flge@ff2+1
  5132     0BB1  0021               	movlb	1	; select bank1
  5133     0BB2  0849               	movf	efgtoa@u^(0+128),w
  5134     0BB3  0020               	movlb	0	; select bank0
  5135     0BB4  00C7               	movwf	___flge@ff2
  5136     0BB5  3192  2222  3189   	fcall	___flge
  5137     0BB8  1C03               	btfss	3,0
  5138     0BB9  2B66               	goto	l4295
  5139     0BBA                     l4305:
  5140                           
  5141                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 683:  mode = c;
  5142     0BBA  0020               	movlb	0	; select bank0
  5143     0BBB  0866               	movf	efgtoa@c,w
  5144     0BBC  0021               	movlb	1	; select bank1
  5145     0BBD  00A9               	movwf	efgtoa@mode^(0+128)
  5146                           
  5147                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 685:     nmode = 
      +                          mode;
  5148     0BBE  0829               	movf	efgtoa@mode^(0+128),w
  5149     0BBF  00AA               	movwf	efgtoa@nmode^(0+128)
  5150                           
  5151                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 695:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 696:         p = (prec < 0)
      +                           ? 6 : prec;
  5152     0BC0  0022               	movlb	2	; select bank2
  5153     0BC1  1BAF               	btfsc	(_prec+1)^(0+256),7
  5154     0BC2  2BCB               	goto	l4311
  5155     0BC3  082F               	movf	(_prec+1)^(0+256),w
  5156     0BC4  0021               	movlb	1	; select bank1
  5157     0BC5  00A3               	movwf	(efgtoa@p+1)^(0+128)
  5158     0BC6  0022               	movlb	2	; select bank2
  5159     0BC7  082E               	movf	_prec^(0+256),w
  5160     0BC8  0021               	movlb	1	; select bank1
  5161     0BC9  00A2               	movwf	efgtoa@p^(0+128)
  5162     0BCA  2BD0               	goto	l1110
  5163     0BCB                     l4311:
  5164     0BCB  3006               	movlw	6
  5165     0BCC  0021               	movlb	1	; select bank1
  5166     0BCD  00A2               	movwf	efgtoa@p^(0+128)
  5167     0BCE  3000               	movlw	0
  5168     0BCF  00A3               	movwf	(efgtoa@p^(0+128)+1)
  5169     0BD0                     l1110:
  5170                           
  5171                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 697:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 711:     m = p;
  5172     0BD0  0823               	movf	(efgtoa@p+1)^(0+128),w
  5173     0BD1  00AE               	movwf	(efgtoa@m+1)^(0+128)
  5174     0BD2  0822               	movf	efgtoa@p^(0+128),w
  5175     0BD3  00AD               	movwf	efgtoa@m^(0+128)
  5176                           
  5177                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 715:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 716:         ++m;
  5178     0BD4  3001               	movlw	1
  5179     0BD5  07AD               	addwf	efgtoa@m^(0+128),f
  5180     0BD6  3000               	movlw	0
  5181     0BD7  3DAE               	addwfc	(efgtoa@m+1)^(0+128),f
  5182                           
  5183                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 717:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 721:     if (nmode == 'f
      +                          ') {
  5184     0BD8  3066               	movlw	102
  5185     0BD9  062A               	xorwf	efgtoa@nmode^(0+128),w
  5186     0BDA  1D03               	btfss	3,2
  5187     0BDB  2BF0               	goto	l4325
  5188                           
  5189                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 722:         if (
      +                          e < 0) {
  5190     0BDC  1FB1               	btfss	(efgtoa@e+1)^(0+128),7
  5191     0BDD  2BE8               	goto	l4321
  5192                           
  5193                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 723:             
      +                          u.f = 1.0;
  5194     0BDE  303F               	movlw	63
  5195     0BDF  00CC               	movwf	(efgtoa@u+3)^(0+128)
  5196     0BE0  3080               	movlw	128
  5197     0BE1  00CB               	movwf	(efgtoa@u+2)^(0+128)
  5198     0BE2  3000               	movlw	0
  5199     0BE3  00CA               	movwf	(efgtoa@u+1)^(0+128)
  5200     0BE4  3000               	movlw	0
  5201     0BE5  00C9               	movwf	efgtoa@u^(0+128)
  5202                           
  5203                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 724:             
      +                          e = 0;
  5204     0BE6  01B0               	clrf	efgtoa@e^(0+128)
  5205     0BE7  01B1               	clrf	(efgtoa@e+1)^(0+128)
  5206     0BE8                     l4321:
  5207                           
  5208                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 726:         if (
      +                          !(mode == 'g')) {
  5209     0BE8  3067               	movlw	103
  5210     0BE9  0629               	xorwf	efgtoa@mode^(0+128),w
  5211     0BEA  1903               	btfsc	3,2
  5212     0BEB  2BF0               	goto	l4325
  5213                           
  5214                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 727:             
      +                          m += e;
  5215     0BEC  0830               	movf	efgtoa@e^(0+128),w
  5216     0BED  07AD               	addwf	efgtoa@m^(0+128),f
  5217     0BEE  0831               	movf	(efgtoa@e+1)^(0+128),w
  5218     0BEF  3DAE               	addwfc	(efgtoa@m+1)^(0+128),f
  5219     0BF0                     l4325:
  5220                           
  5221                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 733:     i = 0;
  5222     0BF0  01C0               	clrf	efgtoa@i^(0+128)
  5223     0BF1  01C1               	clrf	(efgtoa@i+1)^(0+128)
  5224                           
  5225                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 734:     h = g.f;
  5226     0BF2  0846               	movf	(efgtoa@g+3)^(0+128),w
  5227     0BF3  00BB               	movwf	(efgtoa@h+3)^(0+128)
  5228     0BF4  0845               	movf	(efgtoa@g+2)^(0+128),w
  5229     0BF5  00BA               	movwf	(efgtoa@h+2)^(0+128)
  5230     0BF6  0844               	movf	(efgtoa@g+1)^(0+128),w
  5231     0BF7  00B9               	movwf	(efgtoa@h+1)^(0+128)
  5232     0BF8  0843               	movf	efgtoa@g^(0+128),w
  5233     0BF9  00B8               	movwf	efgtoa@h^(0+128)
  5234                           
  5235                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 735:     ou = u;
  5236     0BFA  084C               	movf	(efgtoa@u+3)^(0+128),w
  5237     0BFB  00B7               	movwf	(efgtoa@ou+3)^(0+128)
  5238     0BFC  084B               	movf	(efgtoa@u+2)^(0+128),w
  5239     0BFD  00B6               	movwf	(efgtoa@ou+2)^(0+128)
  5240     0BFE  084A               	movf	(efgtoa@u+1)^(0+128),w
  5241     0BFF  00B5               	movwf	(efgtoa@ou+1)^(0+128)
  5242     0C00  0849               	movf	efgtoa@u^(0+128),w
  5243     0C01  00B4               	movwf	efgtoa@ou^(0+128)
  5244     0C02                     l4335:	
  5245                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 736:     while (i
      +                           < m) {
  5246                           
  5247                           
  5248                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 736:     while (i
      +                           < m) {
  5249     0C02  0841               	movf	(efgtoa@i+1)^(0+128),w
  5250     0C03  3A80               	xorlw	128
  5251     0C04  0020               	movlb	0	; select bank0
  5252     0C05  00E7               	movwf	??_efgtoa
  5253     0C06  0021               	movlb	1	; select bank1
  5254     0C07  082E               	movf	(efgtoa@m+1)^(0+128),w
  5255     0C08  3A80               	xorlw	128
  5256     0C09  0020               	movlb	0	; select bank0
  5257     0C0A  0267               	subwf	??_efgtoa,w
  5258     0C0B  1D03               	skipz
  5259     0C0C  2C10               	goto	u5335
  5260     0C0D  0021               	movlb	1	; select bank1
  5261     0C0E  082D               	movf	efgtoa@m^(0+128),w
  5262     0C0F  0240               	subwf	efgtoa@i^(0+128),w
  5263     0C10                     u5335:
  5264     0C10  1803               	btfsc	3,0
  5265     0C11  2CE5               	goto	l4337
  5266                           
  5267                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 737:         l = 
      +                          floorf(h/u.f);
  5268     0C12  0021               	movlb	1	; select bank1
  5269     0C13  084C               	movf	(efgtoa@u+3)^(0+128),w
  5270     0C14  0020               	movlb	0	; select bank0
  5271     0C15  00B7               	movwf	___fldiv@a+3
  5272     0C16  0021               	movlb	1	; select bank1
  5273     0C17  084B               	movf	(efgtoa@u+2)^(0+128),w
  5274     0C18  0020               	movlb	0	; select bank0
  5275     0C19  00B6               	movwf	___fldiv@a+2
  5276     0C1A  0021               	movlb	1	; select bank1
  5277     0C1B  084A               	movf	(efgtoa@u+1)^(0+128),w
  5278     0C1C  0020               	movlb	0	; select bank0
  5279     0C1D  00B5               	movwf	___fldiv@a+1
  5280     0C1E  0021               	movlb	1	; select bank1
  5281     0C1F  0849               	movf	efgtoa@u^(0+128),w
  5282     0C20  0020               	movlb	0	; select bank0
  5283     0C21  00B4               	movwf	___fldiv@a
  5284     0C22  0021               	movlb	1	; select bank1
  5285     0C23  083B               	movf	(efgtoa@h+3)^(0+128),w
  5286     0C24  0020               	movlb	0	; select bank0
  5287     0C25  00BB               	movwf	___fldiv@b+3
  5288     0C26  0021               	movlb	1	; select bank1
  5289     0C27  083A               	movf	(efgtoa@h+2)^(0+128),w
  5290     0C28  0020               	movlb	0	; select bank0
  5291     0C29  00BA               	movwf	___fldiv@b+2
  5292     0C2A  0021               	movlb	1	; select bank1
  5293     0C2B  0839               	movf	(efgtoa@h+1)^(0+128),w
  5294     0C2C  0020               	movlb	0	; select bank0
  5295     0C2D  00B9               	movwf	___fldiv@b+1
  5296     0C2E  0021               	movlb	1	; select bank1
  5297     0C2F  0838               	movf	efgtoa@h^(0+128),w
  5298     0C30  0020               	movlb	0	; select bank0
  5299     0C31  00B8               	movwf	___fldiv@b
  5300     0C32  3188  2015  3189   	fcall	___fldiv
  5301     0C35  0837               	movf	?___fldiv+3,w
  5302     0C36  00D1               	movwf	floorf@x+3
  5303     0C37  0836               	movf	?___fldiv+2,w
  5304     0C38  00D0               	movwf	floorf@x+2
  5305     0C39  0835               	movf	?___fldiv+1,w
  5306     0C3A  00CF               	movwf	floorf@x+1
  5307     0C3B  0834               	movf	?___fldiv,w
  5308     0C3C  00CE               	movwf	floorf@x
  5309     0C3D  3193  23EA  3189   	fcall	_floorf
  5310     0C40  0020               	movlb	0	; select bank0
  5311     0C41  0851               	movf	?_floorf+3,w
  5312     0C42  0021               	movlb	1	; select bank1
  5313     0C43  00BF               	movwf	(efgtoa@l+3)^(0+128)
  5314     0C44  0020               	movlb	0	; select bank0
  5315     0C45  0850               	movf	?_floorf+2,w
  5316     0C46  0021               	movlb	1	; select bank1
  5317     0C47  00BE               	movwf	(efgtoa@l+2)^(0+128)
  5318     0C48  0020               	movlb	0	; select bank0
  5319     0C49  084F               	movf	?_floorf+1,w
  5320     0C4A  0021               	movlb	1	; select bank1
  5321     0C4B  00BD               	movwf	(efgtoa@l+1)^(0+128)
  5322     0C4C  0020               	movlb	0	; select bank0
  5323     0C4D  084E               	movf	?_floorf,w
  5324     0C4E  0021               	movlb	1	; select bank1
  5325     0C4F  00BC               	movwf	efgtoa@l^(0+128)
  5326                           
  5327                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 738:         d = 
      +                          (int)l;
  5328     0C50  083F               	movf	(efgtoa@l+3)^(0+128),w
  5329     0C51  0020               	movlb	0	; select bank0
  5330     0C52  00A3               	movwf	___fltol@f1+3
  5331     0C53  0021               	movlb	1	; select bank1
  5332     0C54  083E               	movf	(efgtoa@l+2)^(0+128),w
  5333     0C55  0020               	movlb	0	; select bank0
  5334     0C56  00A2               	movwf	___fltol@f1+2
  5335     0C57  0021               	movlb	1	; select bank1
  5336     0C58  083D               	movf	(efgtoa@l+1)^(0+128),w
  5337     0C59  0020               	movlb	0	; select bank0
  5338     0C5A  00A1               	movwf	___fltol@f1+1
  5339     0C5B  0021               	movlb	1	; select bank1
  5340     0C5C  083C               	movf	efgtoa@l^(0+128),w
  5341     0C5D  0020               	movlb	0	; select bank0
  5342     0C5E  00A0               	movwf	___fltol@f1
  5343     0C5F  3190  2075  3189   	fcall	___fltol
  5344     0C62  0821               	movf	?___fltol+1,w
  5345     0C63  0021               	movlb	1	; select bank1
  5346     0C64  00AC               	movwf	(efgtoa@d+1)^(0+128)
  5347     0C65  0020               	movlb	0	; select bank0
  5348     0C66  0820               	movf	?___fltol,w
  5349     0C67  0021               	movlb	1	; select bank1
  5350     0C68  00AB               	movwf	efgtoa@d^(0+128)
  5351                           
  5352                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 739:         h -=
      +                           l*u.f;
  5353     0C69  084C               	movf	(efgtoa@u+3)^(0+128),w
  5354     0C6A  0020               	movlb	0	; select bank0
  5355     0C6B  00B0               	movwf	___flmul@a+3
  5356     0C6C  0021               	movlb	1	; select bank1
  5357     0C6D  084B               	movf	(efgtoa@u+2)^(0+128),w
  5358     0C6E  0020               	movlb	0	; select bank0
  5359     0C6F  00AF               	movwf	___flmul@a+2
  5360     0C70  0021               	movlb	1	; select bank1
  5361     0C71  084A               	movf	(efgtoa@u+1)^(0+128),w
  5362     0C72  0020               	movlb	0	; select bank0
  5363     0C73  00AE               	movwf	___flmul@a+1
  5364     0C74  0021               	movlb	1	; select bank1
  5365     0C75  0849               	movf	efgtoa@u^(0+128),w
  5366     0C76  0020               	movlb	0	; select bank0
  5367     0C77  00AD               	movwf	___flmul@a
  5368     0C78  0021               	movlb	1	; select bank1
  5369     0C79  083F               	movf	(efgtoa@l+3)^(0+128),w
  5370     0C7A  0020               	movlb	0	; select bank0
  5371     0C7B  00AC               	movwf	___flmul@b+3
  5372     0C7C  0021               	movlb	1	; select bank1
  5373     0C7D  083E               	movf	(efgtoa@l+2)^(0+128),w
  5374     0C7E  0020               	movlb	0	; select bank0
  5375     0C7F  00AB               	movwf	___flmul@b+2
  5376     0C80  0021               	movlb	1	; select bank1
  5377     0C81  083D               	movf	(efgtoa@l+1)^(0+128),w
  5378     0C82  0020               	movlb	0	; select bank0
  5379     0C83  00AA               	movwf	___flmul@b+1
  5380     0C84  0021               	movlb	1	; select bank1
  5381     0C85  083C               	movf	efgtoa@l^(0+128),w
  5382     0C86  0020               	movlb	0	; select bank0
  5383     0C87  00A9               	movwf	___flmul@b
  5384     0C88  3184  24A3  3189   	fcall	___flmul
  5385     0C8B  082C               	movf	?___flmul+3,w
  5386     0C8C  00C6               	movwf	___flsub@a+3
  5387     0C8D  082B               	movf	?___flmul+2,w
  5388     0C8E  00C5               	movwf	___flsub@a+2
  5389     0C8F  082A               	movf	?___flmul+1,w
  5390     0C90  00C4               	movwf	___flsub@a+1
  5391     0C91  0829               	movf	?___flmul,w
  5392     0C92  00C3               	movwf	___flsub@a
  5393     0C93  0021               	movlb	1	; select bank1
  5394     0C94  083B               	movf	(efgtoa@h+3)^(0+128),w
  5395     0C95  0020               	movlb	0	; select bank0
  5396     0C96  00CA               	movwf	___flsub@b+3
  5397     0C97  0021               	movlb	1	; select bank1
  5398     0C98  083A               	movf	(efgtoa@h+2)^(0+128),w
  5399     0C99  0020               	movlb	0	; select bank0
  5400     0C9A  00C9               	movwf	___flsub@b+2
  5401     0C9B  0021               	movlb	1	; select bank1
  5402     0C9C  0839               	movf	(efgtoa@h+1)^(0+128),w
  5403     0C9D  0020               	movlb	0	; select bank0
  5404     0C9E  00C8               	movwf	___flsub@b+1
  5405     0C9F  0021               	movlb	1	; select bank1
  5406     0CA0  0838               	movf	efgtoa@h^(0+128),w
  5407     0CA1  0020               	movlb	0	; select bank0
  5408     0CA2  00C7               	movwf	___flsub@b
  5409     0CA3  319D  2542  3189   	fcall	___flsub
  5410     0CA6  0846               	movf	?___flsub+3,w
  5411     0CA7  0021               	movlb	1	; select bank1
  5412     0CA8  00BB               	movwf	(efgtoa@h+3)^(0+128)
  5413     0CA9  0020               	movlb	0	; select bank0
  5414     0CAA  0845               	movf	?___flsub+2,w
  5415     0CAB  0021               	movlb	1	; select bank1
  5416     0CAC  00BA               	movwf	(efgtoa@h+2)^(0+128)
  5417     0CAD  0020               	movlb	0	; select bank0
  5418     0CAE  0844               	movf	?___flsub+1,w
  5419     0CAF  0021               	movlb	1	; select bank1
  5420     0CB0  00B9               	movwf	(efgtoa@h+1)^(0+128)
  5421     0CB1  0020               	movlb	0	; select bank0
  5422     0CB2  0843               	movf	?___flsub,w
  5423     0CB3  0021               	movlb	1	; select bank1
  5424     0CB4  00B8               	movwf	efgtoa@h^(0+128)
  5425                           
  5426                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 740:         u.f 
      +                          = u.f/10.0;
  5427     0CB5  3041               	movlw	65
  5428     0CB6  0020               	movlb	0	; select bank0
  5429     0CB7  00B7               	movwf	___fldiv@a+3
  5430     0CB8  3020               	movlw	32
  5431     0CB9  00B6               	movwf	___fldiv@a+2
  5432     0CBA  3000               	movlw	0
  5433     0CBB  00B5               	movwf	___fldiv@a+1
  5434     0CBC  3000               	movlw	0
  5435     0CBD  00B4               	movwf	___fldiv@a
  5436     0CBE  0021               	movlb	1	; select bank1
  5437     0CBF  084C               	movf	(efgtoa@u+3)^(0+128),w
  5438     0CC0  0020               	movlb	0	; select bank0
  5439     0CC1  00BB               	movwf	___fldiv@b+3
  5440     0CC2  0021               	movlb	1	; select bank1
  5441     0CC3  084B               	movf	(efgtoa@u+2)^(0+128),w
  5442     0CC4  0020               	movlb	0	; select bank0
  5443     0CC5  00BA               	movwf	___fldiv@b+2
  5444     0CC6  0021               	movlb	1	; select bank1
  5445     0CC7  084A               	movf	(efgtoa@u+1)^(0+128),w
  5446     0CC8  0020               	movlb	0	; select bank0
  5447     0CC9  00B9               	movwf	___fldiv@b+1
  5448     0CCA  0021               	movlb	1	; select bank1
  5449     0CCB  0849               	movf	efgtoa@u^(0+128),w
  5450     0CCC  0020               	movlb	0	; select bank0
  5451     0CCD  00B8               	movwf	___fldiv@b
  5452     0CCE  3188  2015  3189   	fcall	___fldiv
  5453     0CD1  0837               	movf	?___fldiv+3,w
  5454     0CD2  0021               	movlb	1	; select bank1
  5455     0CD3  00CC               	movwf	(efgtoa@u+3)^(0+128)
  5456     0CD4  0020               	movlb	0	; select bank0
  5457     0CD5  0836               	movf	?___fldiv+2,w
  5458     0CD6  0021               	movlb	1	; select bank1
  5459     0CD7  00CB               	movwf	(efgtoa@u+2)^(0+128)
  5460     0CD8  0020               	movlb	0	; select bank0
  5461     0CD9  0835               	movf	?___fldiv+1,w
  5462     0CDA  0021               	movlb	1	; select bank1
  5463     0CDB  00CA               	movwf	(efgtoa@u+1)^(0+128)
  5464     0CDC  0020               	movlb	0	; select bank0
  5465     0CDD  0834               	movf	?___fldiv,w
  5466     0CDE  0021               	movlb	1	; select bank1
  5467     0CDF  00C9               	movwf	efgtoa@u^(0+128)
  5468                           
  5469                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 741:         ++i;
  5470     0CE0  3001               	movlw	1
  5471     0CE1  07C0               	addwf	efgtoa@i^(0+128),f
  5472     0CE2  3000               	movlw	0
  5473     0CE3  3DC1               	addwfc	(efgtoa@i+1)^(0+128),f
  5474     0CE4  2C02               	goto	l4335
  5475     0CE5                     l4337:
  5476                           
  5477                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 745:     l = u.f*
      +                          5.0;
  5478     0CE5  3040               	movlw	64
  5479     0CE6  0020               	movlb	0	; select bank0
  5480     0CE7  00AC               	movwf	___flmul@b+3
  5481     0CE8  30A0               	movlw	160
  5482     0CE9  00AB               	movwf	___flmul@b+2
  5483     0CEA  3000               	movlw	0
  5484     0CEB  00AA               	movwf	___flmul@b+1
  5485     0CEC  3000               	movlw	0
  5486     0CED  00A9               	movwf	___flmul@b
  5487     0CEE  0021               	movlb	1	; select bank1
  5488     0CEF  084C               	movf	(efgtoa@u+3)^(0+128),w
  5489     0CF0  0020               	movlb	0	; select bank0
  5490     0CF1  00B0               	movwf	___flmul@a+3
  5491     0CF2  0021               	movlb	1	; select bank1
  5492     0CF3  084B               	movf	(efgtoa@u+2)^(0+128),w
  5493     0CF4  0020               	movlb	0	; select bank0
  5494     0CF5  00AF               	movwf	___flmul@a+2
  5495     0CF6  0021               	movlb	1	; select bank1
  5496     0CF7  084A               	movf	(efgtoa@u+1)^(0+128),w
  5497     0CF8  0020               	movlb	0	; select bank0
  5498     0CF9  00AE               	movwf	___flmul@a+1
  5499     0CFA  0021               	movlb	1	; select bank1
  5500     0CFB  0849               	movf	efgtoa@u^(0+128),w
  5501     0CFC  0020               	movlb	0	; select bank0
  5502     0CFD  00AD               	movwf	___flmul@a
  5503     0CFE  3184  24A3  3189   	fcall	___flmul
  5504     0D01  082C               	movf	?___flmul+3,w
  5505     0D02  0021               	movlb	1	; select bank1
  5506     0D03  00BF               	movwf	(efgtoa@l+3)^(0+128)
  5507     0D04  0020               	movlb	0	; select bank0
  5508     0D05  082B               	movf	?___flmul+2,w
  5509     0D06  0021               	movlb	1	; select bank1
  5510     0D07  00BE               	movwf	(efgtoa@l+2)^(0+128)
  5511     0D08  0020               	movlb	0	; select bank0
  5512     0D09  082A               	movf	?___flmul+1,w
  5513     0D0A  0021               	movlb	1	; select bank1
  5514     0D0B  00BD               	movwf	(efgtoa@l+1)^(0+128)
  5515     0D0C  0020               	movlb	0	; select bank0
  5516     0D0D  0829               	movf	?___flmul,w
  5517     0D0E  0021               	movlb	1	; select bank1
  5518     0D0F  00BC               	movwf	efgtoa@l^(0+128)
  5519                           
  5520                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 746:     if (h < 
      +                          l) {
  5521     0D10  083B               	movf	(efgtoa@h+3)^(0+128),w
  5522     0D11  0020               	movlb	0	; select bank0
  5523     0D12  00C6               	movwf	___flge@ff1+3
  5524     0D13  0021               	movlb	1	; select bank1
  5525     0D14  083A               	movf	(efgtoa@h+2)^(0+128),w
  5526     0D15  0020               	movlb	0	; select bank0
  5527     0D16  00C5               	movwf	___flge@ff1+2
  5528     0D17  0021               	movlb	1	; select bank1
  5529     0D18  0839               	movf	(efgtoa@h+1)^(0+128),w
  5530     0D19  0020               	movlb	0	; select bank0
  5531     0D1A  00C4               	movwf	___flge@ff1+1
  5532     0D1B  0021               	movlb	1	; select bank1
  5533     0D1C  0838               	movf	efgtoa@h^(0+128),w
  5534     0D1D  0020               	movlb	0	; select bank0
  5535     0D1E  00C3               	movwf	___flge@ff1
  5536     0D1F  0021               	movlb	1	; select bank1
  5537     0D20  083F               	movf	(efgtoa@l+3)^(0+128),w
  5538     0D21  0020               	movlb	0	; select bank0
  5539     0D22  00CA               	movwf	___flge@ff2+3
  5540     0D23  0021               	movlb	1	; select bank1
  5541     0D24  083E               	movf	(efgtoa@l+2)^(0+128),w
  5542     0D25  0020               	movlb	0	; select bank0
  5543     0D26  00C9               	movwf	___flge@ff2+2
  5544     0D27  0021               	movlb	1	; select bank1
  5545     0D28  083D               	movf	(efgtoa@l+1)^(0+128),w
  5546     0D29  0020               	movlb	0	; select bank0
  5547     0D2A  00C8               	movwf	___flge@ff2+1
  5548     0D2B  0021               	movlb	1	; select bank1
  5549     0D2C  083C               	movf	efgtoa@l^(0+128),w
  5550     0D2D  0020               	movlb	0	; select bank0
  5551     0D2E  00C7               	movwf	___flge@ff2
  5552     0D2F  3192  2222  3189   	fcall	___flge
  5553     0D32  1803               	btfsc	3,0
  5554     0D33  2D37               	goto	l4341
  5555                           
  5556                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 747:         l = 
      +                          0.0;
  5557     0D34  3000               	movlw	0
  5558     0D35  0021               	movlb	1	; select bank1
  5559     0D36  2D60               	goto	L4
  5560     0D37                     l4341:	
  5561                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 748:     } else {
  5562                           
  5563                           
  5564                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 750:         if (
      +                          (h == l) && !(d % 2)) {
  5565     0D37  0021               	movlb	1	; select bank1
  5566     0D38  083B               	movf	(efgtoa@h+3)^(0+128),w
  5567     0D39  0020               	movlb	0	; select bank0
  5568     0D3A  00A3               	movwf	___fleq@ff1+3
  5569     0D3B  0021               	movlb	1	; select bank1
  5570     0D3C  083A               	movf	(efgtoa@h+2)^(0+128),w
  5571     0D3D  0020               	movlb	0	; select bank0
  5572     0D3E  00A2               	movwf	___fleq@ff1+2
  5573     0D3F  0021               	movlb	1	; select bank1
  5574     0D40  0839               	movf	(efgtoa@h+1)^(0+128),w
  5575     0D41  0020               	movlb	0	; select bank0
  5576     0D42  00A1               	movwf	___fleq@ff1+1
  5577     0D43  0021               	movlb	1	; select bank1
  5578     0D44  0838               	movf	efgtoa@h^(0+128),w
  5579     0D45  0020               	movlb	0	; select bank0
  5580     0D46  00A0               	movwf	___fleq@ff1
  5581     0D47  0021               	movlb	1	; select bank1
  5582     0D48  083F               	movf	(efgtoa@l+3)^(0+128),w
  5583     0D49  0020               	movlb	0	; select bank0
  5584     0D4A  00A7               	movwf	___fleq@ff2+3
  5585     0D4B  0021               	movlb	1	; select bank1
  5586     0D4C  083E               	movf	(efgtoa@l+2)^(0+128),w
  5587     0D4D  0020               	movlb	0	; select bank0
  5588     0D4E  00A6               	movwf	___fleq@ff2+2
  5589     0D4F  0021               	movlb	1	; select bank1
  5590     0D50  083D               	movf	(efgtoa@l+1)^(0+128),w
  5591     0D51  0020               	movlb	0	; select bank0
  5592     0D52  00A5               	movwf	___fleq@ff2+1
  5593     0D53  0021               	movlb	1	; select bank1
  5594     0D54  083C               	movf	efgtoa@l^(0+128),w
  5595     0D55  0020               	movlb	0	; select bank0
  5596     0D56  00A4               	movwf	___fleq@ff2
  5597     0D57  3187  27B3  3189   	fcall	___fleq
  5598     0D5A  1C03               	btfss	3,0
  5599     0D5B  2D67               	goto	l4347
  5600     0D5C  0021               	movlb	1	; select bank1
  5601     0D5D  182B               	btfsc	efgtoa@d^(0+128),0
  5602     0D5E  2D67               	goto	l4347
  5603                           
  5604                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 751:             
      +                          l = 0.0;
  5605     0D5F  3000               	movlw	0
  5606     0D60                     L4:
  5607     0D60  00BF               	movwf	(efgtoa@l+3)^(0+128)
  5608     0D61  3000               	movlw	0
  5609     0D62  00BE               	movwf	(efgtoa@l+2)^(0+128)
  5610     0D63  3000               	movlw	0
  5611     0D64  00BD               	movwf	(efgtoa@l+1)^(0+128)
  5612     0D65  3000               	movlw	0
  5613     0D66  00BC               	movwf	efgtoa@l^(0+128)
  5614     0D67                     l4347:
  5615                           
  5616                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 756:     h = g.f 
      +                          + l;
  5617     0D67  0021               	movlb	1	; select bank1
  5618     0D68  083F               	movf	(efgtoa@l+3)^(0+128),w
  5619     0D69  0020               	movlb	0	; select bank0
  5620     0D6A  00A3               	movwf	___fladd@b+3
  5621     0D6B  0021               	movlb	1	; select bank1
  5622     0D6C  083E               	movf	(efgtoa@l+2)^(0+128),w
  5623     0D6D  0020               	movlb	0	; select bank0
  5624     0D6E  00A2               	movwf	___fladd@b+2
  5625     0D6F  0021               	movlb	1	; select bank1
  5626     0D70  083D               	movf	(efgtoa@l+1)^(0+128),w
  5627     0D71  0020               	movlb	0	; select bank0
  5628     0D72  00A1               	movwf	___fladd@b+1
  5629     0D73  0021               	movlb	1	; select bank1
  5630     0D74  083C               	movf	efgtoa@l^(0+128),w
  5631     0D75  0020               	movlb	0	; select bank0
  5632     0D76  00A0               	movwf	___fladd@b
  5633     0D77  0021               	movlb	1	; select bank1
  5634     0D78  0846               	movf	(efgtoa@g+3)^(0+128),w
  5635     0D79  0020               	movlb	0	; select bank0
  5636     0D7A  00A7               	movwf	___fladd@a+3
  5637     0D7B  0021               	movlb	1	; select bank1
  5638     0D7C  0845               	movf	(efgtoa@g+2)^(0+128),w
  5639     0D7D  0020               	movlb	0	; select bank0
  5640     0D7E  00A6               	movwf	___fladd@a+2
  5641     0D7F  0021               	movlb	1	; select bank1
  5642     0D80  0844               	movf	(efgtoa@g+1)^(0+128),w
  5643     0D81  0020               	movlb	0	; select bank0
  5644     0D82  00A5               	movwf	___fladd@a+1
  5645     0D83  0021               	movlb	1	; select bank1
  5646     0D84  0843               	movf	efgtoa@g^(0+128),w
  5647     0D85  0020               	movlb	0	; select bank0
  5648     0D86  00A4               	movwf	___fladd@a
  5649     0D87  3196  264F  3189   	fcall	___fladd
  5650     0D8A  0823               	movf	?___fladd+3,w
  5651     0D8B  0021               	movlb	1	; select bank1
  5652     0D8C  00BB               	movwf	(efgtoa@h+3)^(0+128)
  5653     0D8D  0020               	movlb	0	; select bank0
  5654     0D8E  0822               	movf	?___fladd+2,w
  5655     0D8F  0021               	movlb	1	; select bank1
  5656     0D90  00BA               	movwf	(efgtoa@h+2)^(0+128)
  5657     0D91  0020               	movlb	0	; select bank0
  5658     0D92  0821               	movf	?___fladd+1,w
  5659     0D93  0021               	movlb	1	; select bank1
  5660     0D94  00B9               	movwf	(efgtoa@h+1)^(0+128)
  5661     0D95  0020               	movlb	0	; select bank0
  5662     0D96  0820               	movf	?___fladd,w
  5663     0D97  0021               	movlb	1	; select bank1
  5664     0D98  00B8               	movwf	efgtoa@h^(0+128)
  5665                           
  5666                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 758:  if (h >= (o
      +                          u.f*10.0)) {
  5667     0D99  083B               	movf	(efgtoa@h+3)^(0+128),w
  5668     0D9A  0020               	movlb	0	; select bank0
  5669     0D9B  00C6               	movwf	___flge@ff1+3
  5670     0D9C  0021               	movlb	1	; select bank1
  5671     0D9D  083A               	movf	(efgtoa@h+2)^(0+128),w
  5672     0D9E  0020               	movlb	0	; select bank0
  5673     0D9F  00C5               	movwf	___flge@ff1+2
  5674     0DA0  0021               	movlb	1	; select bank1
  5675     0DA1  0839               	movf	(efgtoa@h+1)^(0+128),w
  5676     0DA2  0020               	movlb	0	; select bank0
  5677     0DA3  00C4               	movwf	___flge@ff1+1
  5678     0DA4  0021               	movlb	1	; select bank1
  5679     0DA5  0838               	movf	efgtoa@h^(0+128),w
  5680     0DA6  0020               	movlb	0	; select bank0
  5681     0DA7  00C3               	movwf	___flge@ff1
  5682     0DA8  3041               	movlw	65
  5683     0DA9  00AC               	movwf	___flmul@b+3
  5684     0DAA  3020               	movlw	32
  5685     0DAB  00AB               	movwf	___flmul@b+2
  5686     0DAC  3000               	movlw	0
  5687     0DAD  00AA               	movwf	___flmul@b+1
  5688     0DAE  3000               	movlw	0
  5689     0DAF  00A9               	movwf	___flmul@b
  5690     0DB0  0021               	movlb	1	; select bank1
  5691     0DB1  0837               	movf	(efgtoa@ou+3)^(0+128),w
  5692     0DB2  0020               	movlb	0	; select bank0
  5693     0DB3  00B0               	movwf	___flmul@a+3
  5694     0DB4  0021               	movlb	1	; select bank1
  5695     0DB5  0836               	movf	(efgtoa@ou+2)^(0+128),w
  5696     0DB6  0020               	movlb	0	; select bank0
  5697     0DB7  00AF               	movwf	___flmul@a+2
  5698     0DB8  0021               	movlb	1	; select bank1
  5699     0DB9  0835               	movf	(efgtoa@ou+1)^(0+128),w
  5700     0DBA  0020               	movlb	0	; select bank0
  5701     0DBB  00AE               	movwf	___flmul@a+1
  5702     0DBC  0021               	movlb	1	; select bank1
  5703     0DBD  0834               	movf	efgtoa@ou^(0+128),w
  5704     0DBE  0020               	movlb	0	; select bank0
  5705     0DBF  00AD               	movwf	___flmul@a
  5706     0DC0  3184  24A3  3189   	fcall	___flmul
  5707     0DC3  082C               	movf	?___flmul+3,w
  5708     0DC4  00CA               	movwf	___flge@ff2+3
  5709     0DC5  082B               	movf	?___flmul+2,w
  5710     0DC6  00C9               	movwf	___flge@ff2+2
  5711     0DC7  082A               	movf	?___flmul+1,w
  5712     0DC8  00C8               	movwf	___flge@ff2+1
  5713     0DC9  0829               	movf	?___flmul,w
  5714     0DCA  00C7               	movwf	___flge@ff2
  5715     0DCB  3192  2222  3189   	fcall	___flge
  5716     0DCE  1C03               	btfss	3,0
  5717     0DCF  2E08               	goto	l1120
  5718                           
  5719                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 759:   e++;
  5720     0DD0  3001               	movlw	1
  5721     0DD1  0021               	movlb	1	; select bank1
  5722     0DD2  07B0               	addwf	efgtoa@e^(0+128),f
  5723     0DD3  3000               	movlw	0
  5724     0DD4  3DB1               	addwfc	(efgtoa@e+1)^(0+128),f
  5725                           
  5726                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 760:   ou.f *= 10
      +                          .0;
  5727     0DD5  3041               	movlw	65
  5728     0DD6  0020               	movlb	0	; select bank0
  5729     0DD7  00AC               	movwf	___flmul@b+3
  5730     0DD8  3020               	movlw	32
  5731     0DD9  00AB               	movwf	___flmul@b+2
  5732     0DDA  3000               	movlw	0
  5733     0DDB  00AA               	movwf	___flmul@b+1
  5734     0DDC  3000               	movlw	0
  5735     0DDD  00A9               	movwf	___flmul@b
  5736     0DDE  0021               	movlb	1	; select bank1
  5737     0DDF  0837               	movf	(efgtoa@ou+3)^(0+128),w
  5738     0DE0  0020               	movlb	0	; select bank0
  5739     0DE1  00B0               	movwf	___flmul@a+3
  5740     0DE2  0021               	movlb	1	; select bank1
  5741     0DE3  0836               	movf	(efgtoa@ou+2)^(0+128),w
  5742     0DE4  0020               	movlb	0	; select bank0
  5743     0DE5  00AF               	movwf	___flmul@a+2
  5744     0DE6  0021               	movlb	1	; select bank1
  5745     0DE7  0835               	movf	(efgtoa@ou+1)^(0+128),w
  5746     0DE8  0020               	movlb	0	; select bank0
  5747     0DE9  00AE               	movwf	___flmul@a+1
  5748     0DEA  0021               	movlb	1	; select bank1
  5749     0DEB  0834               	movf	efgtoa@ou^(0+128),w
  5750     0DEC  0020               	movlb	0	; select bank0
  5751     0DED  00AD               	movwf	___flmul@a
  5752     0DEE  3184  24A3  3189   	fcall	___flmul
  5753     0DF1  082C               	movf	?___flmul+3,w
  5754     0DF2  0021               	movlb	1	; select bank1
  5755     0DF3  00B7               	movwf	(efgtoa@ou+3)^(0+128)
  5756     0DF4  0020               	movlb	0	; select bank0
  5757     0DF5  082B               	movf	?___flmul+2,w
  5758     0DF6  0021               	movlb	1	; select bank1
  5759     0DF7  00B6               	movwf	(efgtoa@ou+2)^(0+128)
  5760     0DF8  0020               	movlb	0	; select bank0
  5761     0DF9  082A               	movf	?___flmul+1,w
  5762     0DFA  0021               	movlb	1	; select bank1
  5763     0DFB  00B5               	movwf	(efgtoa@ou+1)^(0+128)
  5764     0DFC  0020               	movlb	0	; select bank0
  5765     0DFD  0829               	movf	?___flmul,w
  5766     0DFE  0021               	movlb	1	; select bank1
  5767     0DFF  00B4               	movwf	efgtoa@ou^(0+128)
  5768                           
  5769                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 762:   if (nmode 
      +                          == 'f') {
  5770     0E00  3066               	movlw	102
  5771     0E01  062A               	xorwf	efgtoa@nmode^(0+128),w
  5772     0E02  1D03               	btfss	3,2
  5773     0E03  2E08               	goto	l1120
  5774                           
  5775                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 764:    m++;
  5776     0E04  3001               	movlw	1
  5777     0E05  07AD               	addwf	efgtoa@m^(0+128),f
  5778     0E06  3000               	movlw	0
  5779     0E07  3DAE               	addwfc	(efgtoa@m+1)^(0+128),f
  5780     0E08                     l1120:	
  5781                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 767:  }
  5782                           
  5783                           
  5784                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 770:     u = ou;
  5785     0E08  0021               	movlb	1	; select bank1
  5786     0E09  0837               	movf	(efgtoa@ou+3)^(0+128),w
  5787     0E0A  00CC               	movwf	(efgtoa@u+3)^(0+128)
  5788     0E0B  0836               	movf	(efgtoa@ou+2)^(0+128),w
  5789     0E0C  00CB               	movwf	(efgtoa@u+2)^(0+128)
  5790     0E0D  0835               	movf	(efgtoa@ou+1)^(0+128),w
  5791     0E0E  00CA               	movwf	(efgtoa@u+1)^(0+128)
  5792     0E0F  0834               	movf	efgtoa@ou^(0+128),w
  5793     0E10  00C9               	movwf	efgtoa@u^(0+128)
  5794                           
  5795                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 774:  ne = e;
  5796     0E11  0831               	movf	(efgtoa@e+1)^(0+128),w
  5797     0E12  00A1               	movwf	(efgtoa@ne+1)^(0+128)
  5798     0E13  0830               	movf	efgtoa@e^(0+128),w
  5799     0E14  00A0               	movwf	efgtoa@ne^(0+128)
  5800                           
  5801                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 776:     pp = 0;
  5802     0E15  01A8               	clrf	efgtoa@pp^(0+128)
  5803                           
  5804                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 777:     t = 0;
  5805     0E16  01A4               	clrf	efgtoa@t^(0+128)
  5806     0E17  01A5               	clrf	(efgtoa@t+1)^(0+128)
  5807                           
  5808                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 778:     i = 0;
  5809     0E18  01C0               	clrf	efgtoa@i^(0+128)
  5810     0E19  01C1               	clrf	(efgtoa@i+1)^(0+128)
  5811                           
  5812                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 779:     while ((
      +                          i < m) && (n < (80 - 5))) {
  5813     0E1A  2F52               	goto	l4407
  5814     0E1B                     l4365:
  5815                           
  5816                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 780:         l = 
      +                          floorf(h/u.f);
  5817     0E1B  0021               	movlb	1	; select bank1
  5818     0E1C  084C               	movf	(efgtoa@u+3)^(0+128),w
  5819     0E1D  0020               	movlb	0	; select bank0
  5820     0E1E  00B7               	movwf	___fldiv@a+3
  5821     0E1F  0021               	movlb	1	; select bank1
  5822     0E20  084B               	movf	(efgtoa@u+2)^(0+128),w
  5823     0E21  0020               	movlb	0	; select bank0
  5824     0E22  00B6               	movwf	___fldiv@a+2
  5825     0E23  0021               	movlb	1	; select bank1
  5826     0E24  084A               	movf	(efgtoa@u+1)^(0+128),w
  5827     0E25  0020               	movlb	0	; select bank0
  5828     0E26  00B5               	movwf	___fldiv@a+1
  5829     0E27  0021               	movlb	1	; select bank1
  5830     0E28  0849               	movf	efgtoa@u^(0+128),w
  5831     0E29  0020               	movlb	0	; select bank0
  5832     0E2A  00B4               	movwf	___fldiv@a
  5833     0E2B  0021               	movlb	1	; select bank1
  5834     0E2C  083B               	movf	(efgtoa@h+3)^(0+128),w
  5835     0E2D  0020               	movlb	0	; select bank0
  5836     0E2E  00BB               	movwf	___fldiv@b+3
  5837     0E2F  0021               	movlb	1	; select bank1
  5838     0E30  083A               	movf	(efgtoa@h+2)^(0+128),w
  5839     0E31  0020               	movlb	0	; select bank0
  5840     0E32  00BA               	movwf	___fldiv@b+2
  5841     0E33  0021               	movlb	1	; select bank1
  5842     0E34  0839               	movf	(efgtoa@h+1)^(0+128),w
  5843     0E35  0020               	movlb	0	; select bank0
  5844     0E36  00B9               	movwf	___fldiv@b+1
  5845     0E37  0021               	movlb	1	; select bank1
  5846     0E38  0838               	movf	efgtoa@h^(0+128),w
  5847     0E39  0020               	movlb	0	; select bank0
  5848     0E3A  00B8               	movwf	___fldiv@b
  5849     0E3B  3188  2015  3189   	fcall	___fldiv
  5850     0E3E  0837               	movf	?___fldiv+3,w
  5851     0E3F  00D1               	movwf	floorf@x+3
  5852     0E40  0836               	movf	?___fldiv+2,w
  5853     0E41  00D0               	movwf	floorf@x+2
  5854     0E42  0835               	movf	?___fldiv+1,w
  5855     0E43  00CF               	movwf	floorf@x+1
  5856     0E44  0834               	movf	?___fldiv,w
  5857     0E45  00CE               	movwf	floorf@x
  5858     0E46  3193  23EA  3189   	fcall	_floorf
  5859     0E49  0020               	movlb	0	; select bank0
  5860     0E4A  0851               	movf	?_floorf+3,w
  5861     0E4B  0021               	movlb	1	; select bank1
  5862     0E4C  00BF               	movwf	(efgtoa@l+3)^(0+128)
  5863     0E4D  0020               	movlb	0	; select bank0
  5864     0E4E  0850               	movf	?_floorf+2,w
  5865     0E4F  0021               	movlb	1	; select bank1
  5866     0E50  00BE               	movwf	(efgtoa@l+2)^(0+128)
  5867     0E51  0020               	movlb	0	; select bank0
  5868     0E52  084F               	movf	?_floorf+1,w
  5869     0E53  0021               	movlb	1	; select bank1
  5870     0E54  00BD               	movwf	(efgtoa@l+1)^(0+128)
  5871     0E55  0020               	movlb	0	; select bank0
  5872     0E56  084E               	movf	?_floorf,w
  5873     0E57  0021               	movlb	1	; select bank1
  5874     0E58  00BC               	movwf	efgtoa@l^(0+128)
  5875                           
  5876                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 781:         d = 
      +                          (int)l > 9 ? 9 : (int)l;
  5877     0E59  083F               	movf	(efgtoa@l+3)^(0+128),w
  5878     0E5A  0020               	movlb	0	; select bank0
  5879     0E5B  00A3               	movwf	___fltol@f1+3
  5880     0E5C  0021               	movlb	1	; select bank1
  5881     0E5D  083E               	movf	(efgtoa@l+2)^(0+128),w
  5882     0E5E  0020               	movlb	0	; select bank0
  5883     0E5F  00A2               	movwf	___fltol@f1+2
  5884     0E60  0021               	movlb	1	; select bank1
  5885     0E61  083D               	movf	(efgtoa@l+1)^(0+128),w
  5886     0E62  0020               	movlb	0	; select bank0
  5887     0E63  00A1               	movwf	___fltol@f1+1
  5888     0E64  0021               	movlb	1	; select bank1
  5889     0E65  083C               	movf	efgtoa@l^(0+128),w
  5890     0E66  0020               	movlb	0	; select bank0
  5891     0E67  00A0               	movwf	___fltol@f1
  5892     0E68  3190  2075  3189   	fcall	___fltol
  5893     0E6B  0821               	movf	?___fltol+1,w
  5894     0E6C  3A80               	xorlw	128
  5895     0E6D  00E7               	movwf	??_efgtoa
  5896     0E6E  3080               	movlw	128
  5897     0E6F  0267               	subwf	??_efgtoa,w
  5898     0E70  1D03               	skipz
  5899     0E71  2E74               	goto	u5395
  5900     0E72  300A               	movlw	10
  5901     0E73  0220               	subwf	?___fltol,w
  5902     0E74                     u5395:
  5903     0E74  1803               	skipnc
  5904     0E75  2E91               	goto	l4369
  5905     0E76  0021               	movlb	1	; select bank1
  5906     0E77  083F               	movf	(efgtoa@l+3)^(0+128),w
  5907     0E78  0020               	movlb	0	; select bank0
  5908     0E79  00A3               	movwf	___fltol@f1+3
  5909     0E7A  0021               	movlb	1	; select bank1
  5910     0E7B  083E               	movf	(efgtoa@l+2)^(0+128),w
  5911     0E7C  0020               	movlb	0	; select bank0
  5912     0E7D  00A2               	movwf	___fltol@f1+2
  5913     0E7E  0021               	movlb	1	; select bank1
  5914     0E7F  083D               	movf	(efgtoa@l+1)^(0+128),w
  5915     0E80  0020               	movlb	0	; select bank0
  5916     0E81  00A1               	movwf	___fltol@f1+1
  5917     0E82  0021               	movlb	1	; select bank1
  5918     0E83  083C               	movf	efgtoa@l^(0+128),w
  5919     0E84  0020               	movlb	0	; select bank0
  5920     0E85  00A0               	movwf	___fltol@f1
  5921     0E86  3190  2075  3189   	fcall	___fltol
  5922     0E89  0821               	movf	?___fltol+1,w
  5923     0E8A  0021               	movlb	1	; select bank1
  5924     0E8B  00AC               	movwf	(efgtoa@d+1)^(0+128)
  5925     0E8C  0020               	movlb	0	; select bank0
  5926     0E8D  0820               	movf	?___fltol,w
  5927     0E8E  0021               	movlb	1	; select bank1
  5928     0E8F  00AB               	movwf	efgtoa@d^(0+128)
  5929     0E90  2E96               	goto	l4371
  5930     0E91                     l4369:
  5931     0E91  3009               	movlw	9
  5932     0E92  0021               	movlb	1	; select bank1
  5933     0E93  00AB               	movwf	efgtoa@d^(0+128)
  5934     0E94  3000               	movlw	0
  5935     0E95  00AC               	movwf	(efgtoa@d^(0+128)+1)
  5936     0E96                     l4371:
  5937                           
  5938                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 792:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 793:             if (!pp &
      +                          & (ne < 0)) {
  5939     0E96  0828               	movf	efgtoa@pp^(0+128),w
  5940     0E97  1903               	btfsc	3,2
  5941     0E98  1FA1               	btfss	(efgtoa@ne+1)^(0+128),7
  5942     0E99  2EAB               	goto	l4391
  5943                           
  5944                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 794:             
      +                              dbuf[n++] = '.';
  5945     0E9A  0847               	movf	efgtoa@n^(0+128),w
  5946     0E9B  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5947     0E9C  0086               	movwf	6
  5948     0E9D  3002               	movlw	2	; select bank4/5
  5949     0E9E  0087               	movwf	7
  5950     0E9F  302E               	movlw	46
  5951     0EA0  0081               	movwf	1
  5952     0EA1  3001               	movlw	1
  5953     0EA2  07C7               	addwf	efgtoa@n^(0+128),f
  5954     0EA3  3000               	movlw	0
  5955     0EA4  3DC8               	addwfc	(efgtoa@n+1)^(0+128),f
  5956                           
  5957                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 795:             
      +                              --w;
  5958     0EA5  30FF               	movlw	255
  5959     0EA6  07B2               	addwf	efgtoa@w^(0+128),f
  5960     0EA7  30FF               	movlw	255
  5961     0EA8  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  5962                           
  5963                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 796:             
      +                              pp = 1;
  5964     0EA9  01A8               	clrf	efgtoa@pp^(0+128)
  5965     0EAA  0AA8               	incf	efgtoa@pp^(0+128),f
  5966     0EAB                     l4391:
  5967                           
  5968                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 798:             
      +                          while (t) {
  5969     0EAB  0824               	movf	efgtoa@t^(0+128),w
  5970     0EAC  0425               	iorwf	(efgtoa@t+1)^(0+128),w
  5971     0EAD  1903               	btfsc	3,2
  5972     0EAE  2EC3               	goto	l4393
  5973                           
  5974                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 799:             
      +                              dbuf[n++] = '0';
  5975     0EAF  0847               	movf	efgtoa@n^(0+128),w
  5976     0EB0  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5977     0EB1  0086               	movwf	6
  5978     0EB2  3002               	movlw	2	; select bank4/5
  5979     0EB3  0087               	movwf	7
  5980     0EB4  3030               	movlw	48
  5981     0EB5  0081               	movwf	1
  5982     0EB6  3001               	movlw	1
  5983     0EB7  07C7               	addwf	efgtoa@n^(0+128),f
  5984     0EB8  3000               	movlw	0
  5985     0EB9  3DC8               	addwfc	(efgtoa@n+1)^(0+128),f
  5986                           
  5987                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 800:             
      +                              --w;
  5988     0EBA  30FF               	movlw	255
  5989     0EBB  07B2               	addwf	efgtoa@w^(0+128),f
  5990     0EBC  30FF               	movlw	255
  5991     0EBD  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  5992                           
  5993                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 801:             
      +                              --t;
  5994     0EBE  30FF               	movlw	255
  5995     0EBF  07A4               	addwf	efgtoa@t^(0+128),f
  5996     0EC0  30FF               	movlw	255
  5997     0EC1  3DA5               	addwfc	(efgtoa@t+1)^(0+128),f
  5998     0EC2  2EAB               	goto	l4391
  5999     0EC3                     l4393:
  6000                           
  6001                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 803:             
      +                          dbuf[n++] = (char)((int)'0' + d);
  6002     0EC3  0847               	movf	efgtoa@n^(0+128),w
  6003     0EC4  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6004     0EC5  0086               	movwf	6
  6005     0EC6  3002               	movlw	2	; select bank4/5
  6006     0EC7  0087               	movwf	7
  6007     0EC8  082B               	movf	efgtoa@d^(0+128),w
  6008     0EC9  3E30               	addlw	48
  6009     0ECA  0081               	movwf	1
  6010     0ECB  3001               	movlw	1
  6011     0ECC  07C7               	addwf	efgtoa@n^(0+128),f
  6012     0ECD  3000               	movlw	0
  6013     0ECE  3DC8               	addwfc	(efgtoa@n+1)^(0+128),f
  6014                           
  6015                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 804:             
      +                          --w;
  6016     0ECF  30FF               	movlw	255
  6017     0ED0  07B2               	addwf	efgtoa@w^(0+128),f
  6018     0ED1  30FF               	movlw	255
  6019     0ED2  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  6020                           
  6021                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 805:         };C:
      +                          \Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 806:         h -= l*
      +                          u.f;
  6022     0ED3  084C               	movf	(efgtoa@u+3)^(0+128),w
  6023     0ED4  0020               	movlb	0	; select bank0
  6024     0ED5  00B0               	movwf	___flmul@a+3
  6025     0ED6  0021               	movlb	1	; select bank1
  6026     0ED7  084B               	movf	(efgtoa@u+2)^(0+128),w
  6027     0ED8  0020               	movlb	0	; select bank0
  6028     0ED9  00AF               	movwf	___flmul@a+2
  6029     0EDA  0021               	movlb	1	; select bank1
  6030     0EDB  084A               	movf	(efgtoa@u+1)^(0+128),w
  6031     0EDC  0020               	movlb	0	; select bank0
  6032     0EDD  00AE               	movwf	___flmul@a+1
  6033     0EDE  0021               	movlb	1	; select bank1
  6034     0EDF  0849               	movf	efgtoa@u^(0+128),w
  6035     0EE0  0020               	movlb	0	; select bank0
  6036     0EE1  00AD               	movwf	___flmul@a
  6037     0EE2  0021               	movlb	1	; select bank1
  6038     0EE3  083F               	movf	(efgtoa@l+3)^(0+128),w
  6039     0EE4  0020               	movlb	0	; select bank0
  6040     0EE5  00AC               	movwf	___flmul@b+3
  6041     0EE6  0021               	movlb	1	; select bank1
  6042     0EE7  083E               	movf	(efgtoa@l+2)^(0+128),w
  6043     0EE8  0020               	movlb	0	; select bank0
  6044     0EE9  00AB               	movwf	___flmul@b+2
  6045     0EEA  0021               	movlb	1	; select bank1
  6046     0EEB  083D               	movf	(efgtoa@l+1)^(0+128),w
  6047     0EEC  0020               	movlb	0	; select bank0
  6048     0EED  00AA               	movwf	___flmul@b+1
  6049     0EEE  0021               	movlb	1	; select bank1
  6050     0EEF  083C               	movf	efgtoa@l^(0+128),w
  6051     0EF0  0020               	movlb	0	; select bank0
  6052     0EF1  00A9               	movwf	___flmul@b
  6053     0EF2  3184  24A3  3189   	fcall	___flmul
  6054     0EF5  082C               	movf	?___flmul+3,w
  6055     0EF6  00C6               	movwf	___flsub@a+3
  6056     0EF7  082B               	movf	?___flmul+2,w
  6057     0EF8  00C5               	movwf	___flsub@a+2
  6058     0EF9  082A               	movf	?___flmul+1,w
  6059     0EFA  00C4               	movwf	___flsub@a+1
  6060     0EFB  0829               	movf	?___flmul,w
  6061     0EFC  00C3               	movwf	___flsub@a
  6062     0EFD  0021               	movlb	1	; select bank1
  6063     0EFE  083B               	movf	(efgtoa@h+3)^(0+128),w
  6064     0EFF  0020               	movlb	0	; select bank0
  6065     0F00  00CA               	movwf	___flsub@b+3
  6066     0F01  0021               	movlb	1	; select bank1
  6067     0F02  083A               	movf	(efgtoa@h+2)^(0+128),w
  6068     0F03  0020               	movlb	0	; select bank0
  6069     0F04  00C9               	movwf	___flsub@b+2
  6070     0F05  0021               	movlb	1	; select bank1
  6071     0F06  0839               	movf	(efgtoa@h+1)^(0+128),w
  6072     0F07  0020               	movlb	0	; select bank0
  6073     0F08  00C8               	movwf	___flsub@b+1
  6074     0F09  0021               	movlb	1	; select bank1
  6075     0F0A  0838               	movf	efgtoa@h^(0+128),w
  6076     0F0B  0020               	movlb	0	; select bank0
  6077     0F0C  00C7               	movwf	___flsub@b
  6078     0F0D  319D  2542  3189   	fcall	___flsub
  6079     0F10  0846               	movf	?___flsub+3,w
  6080     0F11  0021               	movlb	1	; select bank1
  6081     0F12  00BB               	movwf	(efgtoa@h+3)^(0+128)
  6082     0F13  0020               	movlb	0	; select bank0
  6083     0F14  0845               	movf	?___flsub+2,w
  6084     0F15  0021               	movlb	1	; select bank1
  6085     0F16  00BA               	movwf	(efgtoa@h+2)^(0+128)
  6086     0F17  0020               	movlb	0	; select bank0
  6087     0F18  0844               	movf	?___flsub+1,w
  6088     0F19  0021               	movlb	1	; select bank1
  6089     0F1A  00B9               	movwf	(efgtoa@h+1)^(0+128)
  6090     0F1B  0020               	movlb	0	; select bank0
  6091     0F1C  0843               	movf	?___flsub,w
  6092     0F1D  0021               	movlb	1	; select bank1
  6093     0F1E  00B8               	movwf	efgtoa@h^(0+128)
  6094                           
  6095                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 807:         u.f 
      +                          = u.f/10.0;
  6096     0F1F  3041               	movlw	65
  6097     0F20  0020               	movlb	0	; select bank0
  6098     0F21  00B7               	movwf	___fldiv@a+3
  6099     0F22  3020               	movlw	32
  6100     0F23  00B6               	movwf	___fldiv@a+2
  6101     0F24  3000               	movlw	0
  6102     0F25  00B5               	movwf	___fldiv@a+1
  6103     0F26  3000               	movlw	0
  6104     0F27  00B4               	movwf	___fldiv@a
  6105     0F28  0021               	movlb	1	; select bank1
  6106     0F29  084C               	movf	(efgtoa@u+3)^(0+128),w
  6107     0F2A  0020               	movlb	0	; select bank0
  6108     0F2B  00BB               	movwf	___fldiv@b+3
  6109     0F2C  0021               	movlb	1	; select bank1
  6110     0F2D  084B               	movf	(efgtoa@u+2)^(0+128),w
  6111     0F2E  0020               	movlb	0	; select bank0
  6112     0F2F  00BA               	movwf	___fldiv@b+2
  6113     0F30  0021               	movlb	1	; select bank1
  6114     0F31  084A               	movf	(efgtoa@u+1)^(0+128),w
  6115     0F32  0020               	movlb	0	; select bank0
  6116     0F33  00B9               	movwf	___fldiv@b+1
  6117     0F34  0021               	movlb	1	; select bank1
  6118     0F35  0849               	movf	efgtoa@u^(0+128),w
  6119     0F36  0020               	movlb	0	; select bank0
  6120     0F37  00B8               	movwf	___fldiv@b
  6121     0F38  3188  2015  3189   	fcall	___fldiv
  6122     0F3B  0837               	movf	?___fldiv+3,w
  6123     0F3C  0021               	movlb	1	; select bank1
  6124     0F3D  00CC               	movwf	(efgtoa@u+3)^(0+128)
  6125     0F3E  0020               	movlb	0	; select bank0
  6126     0F3F  0836               	movf	?___fldiv+2,w
  6127     0F40  0021               	movlb	1	; select bank1
  6128     0F41  00CB               	movwf	(efgtoa@u+2)^(0+128)
  6129     0F42  0020               	movlb	0	; select bank0
  6130     0F43  0835               	movf	?___fldiv+1,w
  6131     0F44  0021               	movlb	1	; select bank1
  6132     0F45  00CA               	movwf	(efgtoa@u+1)^(0+128)
  6133     0F46  0020               	movlb	0	; select bank0
  6134     0F47  0834               	movf	?___fldiv,w
  6135     0F48  0021               	movlb	1	; select bank1
  6136     0F49  00C9               	movwf	efgtoa@u^(0+128)
  6137                           
  6138                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 808:         --ne
      +                          ;
  6139     0F4A  30FF               	movlw	255
  6140     0F4B  07A0               	addwf	efgtoa@ne^(0+128),f
  6141     0F4C  30FF               	movlw	255
  6142     0F4D  3DA1               	addwfc	(efgtoa@ne+1)^(0+128),f
  6143                           
  6144                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 809:         ++i;
  6145     0F4E  3001               	movlw	1
  6146     0F4F  07C0               	addwf	efgtoa@i^(0+128),f
  6147     0F50  3000               	movlw	0
  6148     0F51  3DC1               	addwfc	(efgtoa@i+1)^(0+128),f
  6149     0F52                     l4407:
  6150                           
  6151                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 779:     while ((
      +                          i < m) && (n < (80 - 5))) {
  6152     0F52  0841               	movf	(efgtoa@i+1)^(0+128),w
  6153     0F53  3A80               	xorlw	128
  6154     0F54  0020               	movlb	0	; select bank0
  6155     0F55  00E7               	movwf	??_efgtoa
  6156     0F56  0021               	movlb	1	; select bank1
  6157     0F57  082E               	movf	(efgtoa@m+1)^(0+128),w
  6158     0F58  3A80               	xorlw	128
  6159     0F59  0020               	movlb	0	; select bank0
  6160     0F5A  0267               	subwf	??_efgtoa,w
  6161     0F5B  1D03               	skipz
  6162     0F5C  2F60               	goto	u5435
  6163     0F5D  0021               	movlb	1	; select bank1
  6164     0F5E  082D               	movf	efgtoa@m^(0+128),w
  6165     0F5F  0240               	subwf	efgtoa@i^(0+128),w
  6166     0F60                     u5435:
  6167     0F60  1803               	skipnc
  6168     0F61  2F70               	goto	l4411
  6169     0F62  0021               	movlb	1	; select bank1
  6170     0F63  0848               	movf	(efgtoa@n+1)^(0+128),w
  6171     0F64  3A80               	xorlw	128
  6172     0F65  0020               	movlb	0	; select bank0
  6173     0F66  00E7               	movwf	??_efgtoa
  6174     0F67  3080               	movlw	128
  6175     0F68  0267               	subwf	??_efgtoa,w
  6176     0F69  1D03               	skipz
  6177     0F6A  2F6E               	goto	u5445
  6178     0F6B  304B               	movlw	75
  6179     0F6C  0021               	movlb	1	; select bank1
  6180     0F6D  0247               	subwf	efgtoa@n^(0+128),w
  6181     0F6E                     u5445:
  6182     0F6E  1C03               	skipc
  6183     0F6F  2E1B               	goto	l4365
  6184     0F70                     l4411:
  6185                           
  6186                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 816:  i = sizeof(
      +                          dbuf) - 1;
  6187     0F70  304F               	movlw	79
  6188     0F71  0021               	movlb	1	; select bank1
  6189     0F72  00C0               	movwf	efgtoa@i^(0+128)
  6190     0F73  3000               	movlw	0
  6191     0F74  00C1               	movwf	(efgtoa@i^(0+128)+1)
  6192                           
  6193                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 817:     dbuf[i] 
      +                          = '\0';
  6194     0F75  0840               	movf	efgtoa@i^(0+128),w
  6195     0F76  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6196     0F77  0086               	movwf	6
  6197     0F78  3002               	movlw	2	; select bank4/5
  6198     0F79  0087               	movwf	7
  6199     0F7A  0181               	clrf	1
  6200                           
  6201                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 848:  memcpy(&dbu
      +                          f[i-n], &dbuf[0], (size_t)n);
  6202     0F7B  3020               	movlw	(low (_dbuf| (0+512)))& (0+255)
  6203     0F7C  0020               	movlb	0	; select bank0
  6204     0F7D  00A0               	movwf	memcpy@s1
  6205     0F7E  0021               	movlb	1	; select bank1
  6206     0F7F  0848               	movf	(efgtoa@n+1)^(0+128),w
  6207     0F80  0020               	movlb	0	; select bank0
  6208     0F81  00A2               	movwf	memcpy@n+1
  6209     0F82  0021               	movlb	1	; select bank1
  6210     0F83  0847               	movf	efgtoa@n^(0+128),w
  6211     0F84  0020               	movlb	0	; select bank0
  6212     0F85  00A1               	movwf	memcpy@n
  6213     0F86  3020               	movlw	(low (_dbuf| (0+512)))& (0+255)
  6214     0F87  00E7               	movwf	??_efgtoa
  6215     0F88  0021               	movlb	1	; select bank1
  6216     0F89  0847               	movf	efgtoa@n^(0+128),w
  6217     0F8A  0020               	movlb	0	; select bank0
  6218     0F8B  0267               	subwf	??_efgtoa,w
  6219     0F8C  0021               	movlb	1	; select bank1
  6220     0F8D  0740               	addwf	efgtoa@i^(0+128),w
  6221     0F8E  319E  2604  3189   	fcall	_memcpy
  6222                           
  6223                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 849:  n = i-n;
  6224     0F91  0021               	movlb	1	; select bank1
  6225     0F92  0847               	movf	efgtoa@n^(0+128),w
  6226     0F93  0240               	subwf	efgtoa@i^(0+128),w
  6227     0F94  00C7               	movwf	efgtoa@n^(0+128)
  6228     0F95  0848               	movf	(efgtoa@n+1)^(0+128),w
  6229     0F96  3B41               	subwfb	(efgtoa@i+1)^(0+128),w
  6230     0F97  00C8               	movwf	(efgtoa@n+1)^(0+128)
  6231                           
  6232                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 850:  i = sign ==
      +                           0 ? 0 : 1;
  6233     0F98  0842               	movf	efgtoa@sign^(0+128),w
  6234     0F99  1903               	btfsc	3,2
  6235     0F9A  2F9D               	goto	u5450
  6236     0F9B  3001               	movlw	1
  6237     0F9C  2F9E               	goto	u5460
  6238     0F9D                     u5450:
  6239     0F9D  3000               	movlw	0
  6240     0F9E                     u5460:
  6241     0F9E  0020               	movlb	0	; select bank0
  6242     0F9F  00E7               	movwf	??_efgtoa
  6243     0FA0  01E8               	clrf	??_efgtoa+1
  6244     0FA1  0867               	movf	??_efgtoa,w
  6245     0FA2  0021               	movlb	1	; select bank1
  6246     0FA3  00C0               	movwf	efgtoa@i^(0+128)
  6247     0FA4  0020               	movlb	0	; select bank0
  6248     0FA5  0868               	movf	??_efgtoa+1,w
  6249     0FA6  0021               	movlb	1	; select bank1
  6250     0FA7  00C1               	movwf	(efgtoa@i+1)^(0+128)
  6251                           
  6252                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 853:  if (flags &
      +                           (1 << 1)) {
  6253     0FA8  18FC               	btfsc	_flags,1
  6254     0FA9  2FCC               	goto	l4429
  6255     0FAA  2FDC               	goto	l4433
  6256     0FAB                     l4431:
  6257     0FAB  0021               	movlb	1	; select bank1
  6258     0FAC  0841               	movf	(efgtoa@i+1)^(0+128),w
  6259     0FAD  3A80               	xorlw	128
  6260     0FAE  0020               	movlb	0	; select bank0
  6261     0FAF  00E7               	movwf	??_efgtoa
  6262     0FB0  0021               	movlb	1	; select bank1
  6263     0FB1  0848               	movf	(efgtoa@n+1)^(0+128),w
  6264     0FB2  3A80               	xorlw	128
  6265     0FB3  0020               	movlb	0	; select bank0
  6266     0FB4  0267               	subwf	??_efgtoa,w
  6267     0FB5  1D03               	skipz
  6268     0FB6  2FBA               	goto	u5495
  6269     0FB7  0021               	movlb	1	; select bank1
  6270     0FB8  0847               	movf	efgtoa@n^(0+128),w
  6271     0FB9  0240               	subwf	efgtoa@i^(0+128),w
  6272     0FBA                     u5495:
  6273     0FBA  1803               	btfsc	3,0
  6274     0FBB  2FDC               	goto	l4433
  6275                           
  6276                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 855:    dbuf[--n]
      +                           = '0';
  6277     0FBC  30FF               	movlw	255
  6278     0FBD  0021               	movlb	1	; select bank1
  6279     0FBE  07C7               	addwf	efgtoa@n^(0+128),f
  6280     0FBF  30FF               	movlw	255
  6281     0FC0  3DC8               	addwfc	(efgtoa@n+1)^(0+128),f
  6282     0FC1  0847               	movf	efgtoa@n^(0+128),w
  6283     0FC2  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6284     0FC3  0086               	movwf	6
  6285     0FC4  3002               	movlw	2	; select bank4/5
  6286     0FC5  0087               	movwf	7
  6287     0FC6  3030               	movlw	48
  6288     0FC7  0081               	movwf	1
  6289                           
  6290                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 856:    w--;
  6291     0FC8  30FF               	movlw	255
  6292     0FC9  07B2               	addwf	efgtoa@w^(0+128),f
  6293     0FCA  30FF               	movlw	255
  6294     0FCB  3DB3               	addwfc	(efgtoa@w+1)^(0+128),f
  6295     0FCC                     l4429:
  6296                           
  6297                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 854:   while (w >
      +                           i && n > i) {
  6298     0FCC  0841               	movf	(efgtoa@i+1)^(0+128),w
  6299     0FCD  3A80               	xorlw	128
  6300     0FCE  0020               	movlb	0	; select bank0
  6301     0FCF  00E7               	movwf	??_efgtoa
  6302     0FD0  0021               	movlb	1	; select bank1
  6303     0FD1  0833               	movf	(efgtoa@w+1)^(0+128),w
  6304     0FD2  3A80               	xorlw	128
  6305     0FD3  0020               	movlb	0	; select bank0
  6306     0FD4  0267               	subwf	??_efgtoa,w
  6307     0FD5  1D03               	skipz
  6308     0FD6  2FDA               	goto	u5485
  6309     0FD7  0021               	movlb	1	; select bank1
  6310     0FD8  0832               	movf	efgtoa@w^(0+128),w
  6311     0FD9  0240               	subwf	efgtoa@i^(0+128),w
  6312     0FDA                     u5485:
  6313     0FDA  1C03               	btfss	3,0
  6314     0FDB  2FAB               	goto	l4431
  6315     0FDC                     l4433:
  6316                           
  6317                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 861:  if (sign) {
  6318     0FDC  0021               	movlb	1	; select bank1
  6319     0FDD  0842               	movf	efgtoa@sign^(0+128),w
  6320     0FDE  1903               	btfsc	3,2
  6321     0FDF  2FEB               	goto	l4437
  6322                           
  6323                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 862:   dbuf[--n] 
      +                          = sign;
  6324     0FE0  30FF               	movlw	255
  6325     0FE1  07C7               	addwf	efgtoa@n^(0+128),f
  6326     0FE2  30FF               	movlw	255
  6327     0FE3  3DC8               	addwfc	(efgtoa@n+1)^(0+128),f
  6328     0FE4  0847               	movf	efgtoa@n^(0+128),w
  6329     0FE5  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6330     0FE6  0086               	movwf	6
  6331     0FE7  3002               	movlw	2	; select bank4/5
  6332     0FE8  0087               	movwf	7
  6333     0FE9  0842               	movf	efgtoa@sign^(0+128),w
  6334     0FEA  0081               	movwf	1
  6335     0FEB                     l4437:
  6336                           
  6337                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 864:  w -= i;
  6338     0FEB  0840               	movf	efgtoa@i^(0+128),w
  6339     0FEC  02B2               	subwf	efgtoa@w^(0+128),f
  6340     0FED  0841               	movf	(efgtoa@i+1)^(0+128),w
  6341     0FEE  3BB3               	subwfb	(efgtoa@w+1)^(0+128),f
  6342                           
  6343                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 867:     return (
      +                          void) pad(fp, &dbuf[n], w);
  6344     0FEF  0847               	movf	efgtoa@n^(0+128),w
  6345     0FF0  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6346     0FF1  0020               	movlb	0	; select bank0
  6347     0FF2  00AF               	movwf	pad@buf
  6348     0FF3  0021               	movlb	1	; select bank1
  6349     0FF4  0833               	movf	(efgtoa@w+1)^(0+128),w
  6350     0FF5  0020               	movlb	0	; select bank0
  6351     0FF6  00B1               	movwf	pad@p+1
  6352     0FF7  0021               	movlb	1	; select bank1
  6353     0FF8  0832               	movf	efgtoa@w^(0+128),w
  6354     0FF9  0020               	movlb	0	; select bank0
  6355     0FFA  00B0               	movwf	pad@p
  6356     0FFB  0021               	movlb	1	; select bank1
  6357     0FFC  082F               	movf	efgtoa@fp^(0+128),w
  6358     0FFD  319E  2676         	fcall	_pad
  6359     0FFF  0008               	return
  6360     1000                     __end_of_efgtoa:
  6361                           
  6362                           	psect	text7
  6363     1000                     __ptext7:	
  6364 ;; *************** function _strcpy *****************
  6365 ;; Defined at:
  6366 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\strcpy.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;  dest            1    wreg     PTR unsigned char 
  6369 ;;		 -> dbuf(80), 
  6370 ;;  src             2    0[BANK0 ] PTR const unsigned char 
  6371 ;;		 -> STR_21(4), STR_18(4), 
  6372 ;; Auto vars:     Size  Location     Type
  6373 ;;  dest            1    5[BANK0 ] PTR unsigned char 
  6374 ;;		 -> dbuf(80), 
  6375 ;;  d               1    4[BANK0 ] PTR unsigned char 
  6376 ;;		 -> dbuf(80), 
  6377 ;; Return value:  Size  Location     Type
  6378 ;;                  1    wreg      PTR unsigned char 
  6379 ;; Registers used:
  6380 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6381 ;; Tracked objects:
  6382 ;;		On entry : 1F/1
  6383 ;;		On exit  : 1F/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6386 ;;      Params:         0       2       0       0       0       0       0       0
  6387 ;;      Locals:         0       2       0       0       0       0       0       0
  6388 ;;      Temps:          0       2       0       0       0       0       0       0
  6389 ;;      Totals:         0       6       0       0       0       0       0       0
  6390 ;;Total ram usage:        6 bytes
  6391 ;; Hardware stack levels used: 1
  6392 ;; Hardware stack levels required when called: 4
  6393 ;; This function calls:
  6394 ;;		Nothing
  6395 ;; This function is called by:
  6396 ;;		_efgtoa
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400     1000                     _strcpy:	
  6401                           ;psect for function _strcpy
  6402                           
  6403                           
  6404                           ;incstack = 0
  6405                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  6406                           ;strcpy@dest stored from wreg
  6407     1000  0020               	movlb	0	; select bank0
  6408     1001  00A5               	movwf	strcpy@dest
  6409     1002  0825               	movf	strcpy@dest,w
  6410     1003  00A4               	movwf	strcpy@d
  6411     1004                     l4111:
  6412     1004  0824               	movf	strcpy@d,w
  6413     1005  0086               	movwf	6
  6414     1006  3002               	movlw	2	; select bank4/5
  6415     1007  0087               	movwf	7
  6416     1008  0AA4               	incf	strcpy@d,f
  6417     1009  0821               	movf	strcpy@src+1,w
  6418     100A  00A3               	movwf	??_strcpy+1
  6419     100B  0820               	movf	strcpy@src,w
  6420     100C  00A2               	movwf	??_strcpy
  6421     100D  0AA0               	incf	strcpy@src,f
  6422     100E  1903               	skipnz
  6423     100F  0AA1               	incf	strcpy@src+1,f
  6424     1010  0822               	movf	??_strcpy,w
  6425     1011  0084               	movwf	4
  6426     1012  0823               	movf	??_strcpy+1,w
  6427     1013  0085               	movwf	5
  6428     1014  0800               	movf	0,w	;code access
  6429     1015  3FC0               	movwi [0]fsr1
  6430     1016  0889               	movf	9,f
  6431     1017  1903               	btfsc	3,2
  6432     1018  0008               	return
  6433     1019  2804               	goto	l4111
  6434     101A                     __end_of_strcpy:
  6435                           
  6436                           	psect	text8
  6437     1E04                     __ptext8:	
  6438 ;; *************** function _memcpy *****************
  6439 ;; Defined at:
  6440 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\memcpy.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;  d1              1    wreg     PTR void 
  6443 ;;		 -> dbuf(80), 
  6444 ;;  s1              1    0[BANK0 ] PTR const void 
  6445 ;;		 -> dbuf(80), 
  6446 ;;  n               2    1[BANK0 ] unsigned int 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  d1              1    5[BANK0 ] PTR void 
  6449 ;;		 -> dbuf(80), 
  6450 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  6451 ;;		 -> dbuf(80), 
  6452 ;;  d               1    6[BANK0 ] PTR unsigned char 
  6453 ;;		 -> dbuf(80), 
  6454 ;;  tmp             1    4[BANK0 ] unsigned char 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;                  1    wreg      PTR void 
  6457 ;; Registers used:
  6458 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6459 ;; Tracked objects:
  6460 ;;		On entry : 1F/1
  6461 ;;		On exit  : 1F/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6464 ;;      Params:         0       3       0       0       0       0       0       0
  6465 ;;      Locals:         0       4       0       0       0       0       0       0
  6466 ;;      Temps:          0       1       0       0       0       0       0       0
  6467 ;;      Totals:         0       8       0       0       0       0       0       0
  6468 ;;Total ram usage:        8 bytes
  6469 ;; Hardware stack levels used: 1
  6470 ;; Hardware stack levels required when called: 4
  6471 ;; This function calls:
  6472 ;;		Nothing
  6473 ;; This function is called by:
  6474 ;;		_efgtoa
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478     1E04                     _memcpy:	
  6479                           ;psect for function _memcpy
  6480                           
  6481                           
  6482                           ;incstack = 0
  6483                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  6484                           ;memcpy@d1 stored from wreg
  6485     1E04  0020               	movlb	0	; select bank0
  6486     1E05  00A5               	movwf	memcpy@d1
  6487     1E06  0820               	movf	memcpy@s1,w
  6488     1E07  00A7               	movwf	memcpy@s
  6489     1E08  0825               	movf	memcpy@d1,w
  6490     1E09  00A6               	movwf	memcpy@d
  6491     1E0A                     l1227:
  6492     1E0A  3001               	movlw	1
  6493     1E0B  02A1               	subwf	memcpy@n,f
  6494     1E0C  3000               	movlw	0
  6495     1E0D  3BA2               	subwfb	memcpy@n+1,f
  6496     1E0E  0A21               	incf	memcpy@n,w
  6497     1E0F  1903               	btfsc	3,2
  6498     1E10  0A22               	incf	memcpy@n+1,w
  6499     1E11  1903               	btfsc	3,2
  6500     1E12  0008               	return
  6501     1E13  0827               	movf	memcpy@s,w
  6502     1E14  0086               	movwf	6
  6503     1E15  3002               	movlw	2	; select bank4/5
  6504     1E16  0087               	movwf	7
  6505     1E17  0801               	movf	1,w
  6506     1E18  00A4               	movwf	memcpy@tmp
  6507     1E19  3001               	movlw	1
  6508     1E1A  00A3               	movwf	??_memcpy
  6509     1E1B  0823               	movf	??_memcpy,w
  6510     1E1C  07A7               	addwf	memcpy@s,f
  6511     1E1D  0826               	movf	memcpy@d,w
  6512     1E1E  0086               	movwf	6
  6513     1E1F  3002               	movlw	2	; select bank4/5
  6514     1E20  0087               	movwf	7
  6515     1E21  0824               	movf	memcpy@tmp,w
  6516     1E22  0081               	movwf	1
  6517     1E23  3001               	movlw	1
  6518     1E24  00A3               	movwf	??_memcpy
  6519     1E25  0823               	movf	??_memcpy,w
  6520     1E26  07A6               	addwf	memcpy@d,f
  6521     1E27  2E0A               	goto	l1227
  6522     1E28                     __end_of_memcpy:
  6523                           
  6524                           	psect	text9
  6525     1CB4                     __ptext9:	
  6526 ;; *************** function _labs *****************
  6527 ;; Defined at:
  6528 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\labs.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;  a               4    0[BANK0 ] long 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;		None
  6533 ;; Return value:  Size  Location     Type
  6534 ;;                  4    0[BANK0 ] long 
  6535 ;; Registers used:
  6536 ;;		wreg, status,2, status,0
  6537 ;; Tracked objects:
  6538 ;;		On entry : 1F/0
  6539 ;;		On exit  : 1F/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6542 ;;      Params:         0       4       0       0       0       0       0       0
  6543 ;;      Locals:         0       0       0       0       0       0       0       0
  6544 ;;      Temps:          0       0       0       0       0       0       0       0
  6545 ;;      Totals:         0       4       0       0       0       0       0       0
  6546 ;;Total ram usage:        4 bytes
  6547 ;; Hardware stack levels used: 1
  6548 ;; Hardware stack levels required when called: 4
  6549 ;; This function calls:
  6550 ;;		Nothing
  6551 ;; This function is called by:
  6552 ;;		_efgtoa
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556     1CB4                     _labs:	
  6557                           ;psect for function _labs
  6558                           
  6559                           
  6560                           ;incstack = 0
  6561                           ; Regs used in _labs: [wreg+status,2+status,0]
  6562     1CB4  1FA3               	btfss	labs@a+3,7
  6563     1CB5  0008               	return
  6564     1CB6  0920               	comf	labs@a,w
  6565     1CB7  00A0               	movwf	?_labs
  6566     1CB8  0921               	comf	labs@a+1,w
  6567     1CB9  00A1               	movwf	?_labs+1
  6568     1CBA  0922               	comf	labs@a+2,w
  6569     1CBB  00A2               	movwf	?_labs+2
  6570     1CBC  0923               	comf	labs@a+3,w
  6571     1CBD  00A3               	movwf	?_labs+3
  6572     1CBE  0AA0               	incf	?_labs,f
  6573     1CBF  1903               	skipnz
  6574     1CC0  0AA1               	incf	?_labs+1,f
  6575     1CC1  1903               	skipnz
  6576     1CC2  0AA2               	incf	?_labs+2,f
  6577     1CC3  1903               	skipnz
  6578     1CC4  0AA3               	incf	?_labs+3,f
  6579     1CC5  0008               	return
  6580     1CC6                     __end_of_labs:
  6581                           
  6582                           	psect	text10
  6583     13EA                     __ptext10:	
  6584 ;; *************** function _floorf *****************
  6585 ;; Defined at:
  6586 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\floorf.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;  x               4   46[BANK0 ] float 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  u               4   62[BANK0 ] struct .
  6591 ;;  m               4   56[BANK0 ] unsigned long 
  6592 ;;  e               2   60[BANK0 ] int 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  4   46[BANK0 ] float 
  6595 ;; Registers used:
  6596 ;;		wreg, status,2, status,0
  6597 ;; Tracked objects:
  6598 ;;		On entry : 1F/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6602 ;;      Params:         0       4       0       0       0       0       0       0
  6603 ;;      Locals:         0      10       0       0       0       0       0       0
  6604 ;;      Temps:          0       6       0       0       0       0       0       0
  6605 ;;      Totals:         0      20       0       0       0       0       0       0
  6606 ;;Total ram usage:       20 bytes
  6607 ;; Hardware stack levels used: 1
  6608 ;; Hardware stack levels required when called: 4
  6609 ;; This function calls:
  6610 ;;		Nothing
  6611 ;; This function is called by:
  6612 ;;		_efgtoa
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616     13EA                     _floorf:	
  6617                           ;psect for function _floorf
  6618                           
  6619                           
  6620                           ;incstack = 0
  6621                           ; Regs used in _floorf: [wreg+status,2+status,0]
  6622     13EA  0022               	movlb	2	; select bank2
  6623     13EB  0823               	movf	(floorf@F521+3)^(0+256),w
  6624     13EC  0020               	movlb	0	; select bank0
  6625     13ED  00E1               	movwf	floorf@u+3
  6626     13EE  0022               	movlb	2	; select bank2
  6627     13EF  0822               	movf	(floorf@F521+2)^(0+256),w
  6628     13F0  0020               	movlb	0	; select bank0
  6629     13F1  00E0               	movwf	floorf@u+2
  6630     13F2  0022               	movlb	2	; select bank2
  6631     13F3  0821               	movf	(floorf@F521+1)^(0+256),w
  6632     13F4  0020               	movlb	0	; select bank0
  6633     13F5  00DF               	movwf	floorf@u+1
  6634     13F6  0022               	movlb	2	; select bank2
  6635     13F7  0820               	movf	floorf@F521^(0+256),w
  6636     13F8  0020               	movlb	0	; select bank0
  6637     13F9  00DE               	movwf	floorf@u
  6638     13FA  0851               	movf	floorf@x+3,w
  6639     13FB  00E1               	movwf	floorf@u+3
  6640     13FC  0850               	movf	floorf@x+2,w
  6641     13FD  00E0               	movwf	floorf@u+2
  6642     13FE  084F               	movf	floorf@x+1,w
  6643     13FF  00DF               	movwf	floorf@u+1
  6644     1400  084E               	movf	floorf@x,w
  6645     1401  00DE               	movwf	floorf@u
  6646     1402  085E               	movf	floorf@u,w
  6647     1403  00D2               	movwf	??_floorf
  6648     1404  085F               	movf	floorf@u+1,w
  6649     1405  00D3               	movwf	??_floorf+1
  6650     1406  0860               	movf	floorf@u+2,w
  6651     1407  00D4               	movwf	??_floorf+2
  6652     1408  0861               	movf	floorf@u+3,w
  6653     1409  00D5               	movwf	??_floorf+3
  6654     140A  3017               	movlw	23
  6655     140B                     u4885:
  6656     140B  36D5               	lsrf	??_floorf+3,f
  6657     140C  0CD4               	rrf	??_floorf+2,f
  6658     140D  0CD3               	rrf	??_floorf+1,f
  6659     140E  0CD2               	rrf	??_floorf,f
  6660     140F  0B89               	decfsz	9,f
  6661     1410  2C0B               	goto	u4885
  6662     1411  30FF               	movlw	255
  6663     1412  0552               	andwf	??_floorf,w
  6664     1413  00D6               	movwf	??_floorf+4
  6665     1414  3000               	movlw	0
  6666     1415  0553               	andwf	??_floorf+1,w
  6667     1416  00D7               	movwf	??_floorf+5
  6668     1417  0856               	movf	??_floorf+4,w
  6669     1418  3E81               	addlw	129
  6670     1419  00DC               	movwf	floorf@e
  6671     141A  30FF               	movlw	255
  6672     141B  3D57               	addwfc	??_floorf+5,w
  6673     141C  00DD               	movwf	floorf@e+1
  6674     141D  085D               	movf	floorf@e+1,w
  6675     141E  3A80               	xorlw	128
  6676     141F  00D2               	movwf	??_floorf
  6677     1420  3080               	movlw	128
  6678     1421  0252               	subwf	??_floorf,w
  6679     1422  1D03               	skipz
  6680     1423  2C26               	goto	u4895
  6681     1424  3017               	movlw	23
  6682     1425  025C               	subwf	floorf@e,w
  6683     1426                     u4895:
  6684     1426  1803               	btfsc	3,0
  6685     1427  0008               	return
  6686     1428  0020               	movlb	0	; select bank0
  6687     1429  1BDD               	btfsc	floorf@e+1,7
  6688     142A  2C80               	goto	l4141
  6689     142B  30FF               	movlw	255
  6690     142C  00D2               	movwf	??_floorf
  6691     142D  30FF               	movlw	255
  6692     142E  00D3               	movwf	??_floorf+1
  6693     142F  307F               	movlw	127
  6694     1430  00D4               	movwf	??_floorf+2
  6695     1431  3000               	movlw	0
  6696     1432  00D5               	movwf	??_floorf+3
  6697     1433  0A5C               	incf	floorf@e,w
  6698     1434  2C39               	goto	u4910
  6699     1435                     u4915:
  6700     1435  37D5               	asrf	??_floorf+3,f
  6701     1436  0CD4               	rrf	??_floorf+2,f
  6702     1437  0CD3               	rrf	??_floorf+1,f
  6703     1438  0CD2               	rrf	??_floorf,f
  6704     1439                     u4910:
  6705     1439  0B89               	decfsz	9,f
  6706     143A  2C35               	goto	u4915
  6707     143B  0855               	movf	??_floorf+3,w
  6708     143C  00DB               	movwf	floorf@m+3
  6709     143D  0854               	movf	??_floorf+2,w
  6710     143E  00DA               	movwf	floorf@m+2
  6711     143F  0853               	movf	??_floorf+1,w
  6712     1440  00D9               	movwf	floorf@m+1
  6713     1441  0852               	movf	??_floorf,w
  6714     1442  00D8               	movwf	floorf@m
  6715     1443  085E               	movf	floorf@u,w
  6716     1444  0558               	andwf	floorf@m,w
  6717     1445  00D2               	movwf	??_floorf
  6718     1446  085F               	movf	floorf@u+1,w
  6719     1447  0559               	andwf	floorf@m+1,w
  6720     1448  00D3               	movwf	??_floorf+1
  6721     1449  0860               	movf	floorf@u+2,w
  6722     144A  055A               	andwf	floorf@m+2,w
  6723     144B  00D4               	movwf	??_floorf+2
  6724     144C  0861               	movf	floorf@u+3,w
  6725     144D  055B               	andwf	floorf@m+3,w
  6726     144E  00D5               	movwf	??_floorf+3
  6727     144F  0855               	movf	??_floorf+3,w
  6728     1450  0454               	iorwf	??_floorf+2,w
  6729     1451  0453               	iorwf	??_floorf+1,w
  6730     1452  0452               	iorwf	??_floorf,w
  6731     1453  1903               	btfsc	3,2
  6732     1454  0008               	return
  6733     1455  085E               	movf	floorf@u,w
  6734     1456  00D2               	movwf	??_floorf
  6735     1457  085F               	movf	floorf@u+1,w
  6736     1458  00D3               	movwf	??_floorf+1
  6737     1459  0860               	movf	floorf@u+2,w
  6738     145A  00D4               	movwf	??_floorf+2
  6739     145B  0861               	movf	floorf@u+3,w
  6740     145C  00D5               	movwf	??_floorf+3
  6741     145D  301F               	movlw	31
  6742     145E                     u4935:
  6743     145E  36D5               	lsrf	??_floorf+3,f
  6744     145F  0CD4               	rrf	??_floorf+2,f
  6745     1460  0CD3               	rrf	??_floorf+1,f
  6746     1461  0CD2               	rrf	??_floorf,f
  6747     1462  0B89               	decfsz	9,f
  6748     1463  2C5E               	goto	u4935
  6749     1464  0852               	movf	??_floorf,w
  6750     1465  1903               	btfsc	3,2
  6751     1466  2C6F               	goto	l4139
  6752     1467  0858               	movf	floorf@m,w
  6753     1468  07DE               	addwf	floorf@u,f
  6754     1469  0859               	movf	floorf@m+1,w
  6755     146A  3DDF               	addwfc	floorf@u+1,f
  6756     146B  085A               	movf	floorf@m+2,w
  6757     146C  3DE0               	addwfc	floorf@u+2,f
  6758     146D  085B               	movf	floorf@m+3,w
  6759     146E  3DE1               	addwfc	floorf@u+3,f
  6760     146F                     l4139:
  6761     146F  0958               	comf	floorf@m,w
  6762     1470  00D2               	movwf	??_floorf
  6763     1471  0959               	comf	floorf@m+1,w
  6764     1472  00D3               	movwf	??_floorf+1
  6765     1473  095A               	comf	floorf@m+2,w
  6766     1474  00D4               	movwf	??_floorf+2
  6767     1475  095B               	comf	floorf@m+3,w
  6768     1476  00D5               	movwf	??_floorf+3
  6769     1477  0852               	movf	??_floorf,w
  6770     1478  05DE               	andwf	floorf@u,f
  6771     1479  0853               	movf	??_floorf+1,w
  6772     147A  05DF               	andwf	floorf@u+1,f
  6773     147B  0854               	movf	??_floorf+2,w
  6774     147C  05E0               	andwf	floorf@u+2,f
  6775     147D  0855               	movf	??_floorf+3,w
  6776     147E  05E1               	andwf	floorf@u+3,f
  6777     147F  2CB3               	goto	l1214
  6778     1480                     l4141:
  6779     1480  085E               	movf	floorf@u,w
  6780     1481  00D2               	movwf	??_floorf
  6781     1482  085F               	movf	floorf@u+1,w
  6782     1483  00D3               	movwf	??_floorf+1
  6783     1484  0860               	movf	floorf@u+2,w
  6784     1485  00D4               	movwf	??_floorf+2
  6785     1486  0861               	movf	floorf@u+3,w
  6786     1487  00D5               	movwf	??_floorf+3
  6787     1488  301F               	movlw	31
  6788     1489                     u4955:
  6789     1489  36D5               	lsrf	??_floorf+3,f
  6790     148A  0CD4               	rrf	??_floorf+2,f
  6791     148B  0CD3               	rrf	??_floorf+1,f
  6792     148C  0CD2               	rrf	??_floorf,f
  6793     148D  0B89               	decfsz	9,f
  6794     148E  2C89               	goto	u4955
  6795     148F  0852               	movf	??_floorf,w
  6796     1490  1D03               	btfss	3,2
  6797     1491  2C96               	goto	l4145
  6798     1492  3000               	movlw	0
  6799     1493  00E1               	movwf	floorf@u+3
  6800     1494  3000               	movlw	0
  6801     1495  2CAE               	goto	L5
  6802     1496                     l4145:
  6803     1496  085E               	movf	floorf@u,w
  6804     1497  00D2               	movwf	??_floorf
  6805     1498  085F               	movf	floorf@u+1,w
  6806     1499  00D3               	movwf	??_floorf+1
  6807     149A  0860               	movf	floorf@u+2,w
  6808     149B  00D4               	movwf	??_floorf+2
  6809     149C  0861               	movf	floorf@u+3,w
  6810     149D  00D5               	movwf	??_floorf+3
  6811     149E  3001               	movlw	1
  6812     149F                     u4975:
  6813     149F  35D2               	lslf	??_floorf,f
  6814     14A0  0DD3               	rlf	??_floorf+1,f
  6815     14A1  0DD4               	rlf	??_floorf+2,f
  6816     14A2  0DD5               	rlf	??_floorf+3,f
  6817     14A3  0B89               	decfsz	9,f
  6818     14A4  2C9F               	goto	u4975
  6819     14A5  0855               	movf	??_floorf+3,w
  6820     14A6  0454               	iorwf	??_floorf+2,w
  6821     14A7  0453               	iorwf	??_floorf+1,w
  6822     14A8  0452               	iorwf	??_floorf,w
  6823     14A9  1903               	skipnz
  6824     14AA  2CB3               	goto	l1214
  6825     14AB  30BF               	movlw	191
  6826     14AC  00E1               	movwf	floorf@u+3
  6827     14AD  3080               	movlw	128
  6828     14AE                     L5:
  6829     14AE  00E0               	movwf	floorf@u+2
  6830     14AF  3000               	movlw	0
  6831     14B0  00DF               	movwf	floorf@u+1
  6832     14B1  3000               	movlw	0
  6833     14B2  00DE               	movwf	floorf@u
  6834     14B3                     l1214:
  6835     14B3  0861               	movf	floorf@u+3,w
  6836     14B4  00D1               	movwf	?_floorf+3
  6837     14B5  0860               	movf	floorf@u+2,w
  6838     14B6  00D0               	movwf	?_floorf+2
  6839     14B7  085F               	movf	floorf@u+1,w
  6840     14B8  00CF               	movwf	?_floorf+1
  6841     14B9  085E               	movf	floorf@u,w
  6842     14BA  00CE               	movwf	?_floorf
  6843     14BB  0008               	return
  6844     14BC                     __end_of_floorf:
  6845                           
  6846                           	psect	text11
  6847     11AA                     __ptext11:	
  6848 ;; *************** function ___fpclassifyf *****************
  6849 ;; Defined at:
  6850 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__fpclassifyf.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;  x               4    0[BANK0 ] float 
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;  u               4   12[BANK0 ] struct .
  6855 ;;  e               2   10[BANK0 ] int 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  2    0[BANK0 ] int 
  6858 ;; Registers used:
  6859 ;;		wreg, status,2, status,0
  6860 ;; Tracked objects:
  6861 ;;		On entry : 1F/0
  6862 ;;		On exit  : 1F/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6865 ;;      Params:         0       4       0       0       0       0       0       0
  6866 ;;      Locals:         0       6       0       0       0       0       0       0
  6867 ;;      Temps:          0       6       0       0       0       0       0       0
  6868 ;;      Totals:         0      16       0       0       0       0       0       0
  6869 ;;Total ram usage:       16 bytes
  6870 ;; Hardware stack levels used: 1
  6871 ;; Hardware stack levels required when called: 4
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		_efgtoa
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879     11AA                     ___fpclassifyf:	
  6880                           ;psect for function ___fpclassifyf
  6881                           
  6882                           
  6883                           ;incstack = 0
  6884                           ; Regs used in ___fpclassifyf: [wreg+status,2+status,0]
  6885     11AA  0022               	movlb	2	; select bank2
  6886     11AB  0827               	movf	(___fpclassifyf@F465+3)^(0+256),w
  6887     11AC  0020               	movlb	0	; select bank0
  6888     11AD  00AF               	movwf	___fpclassifyf@u+3
  6889     11AE  0022               	movlb	2	; select bank2
  6890     11AF  0826               	movf	(___fpclassifyf@F465+2)^(0+256),w
  6891     11B0  0020               	movlb	0	; select bank0
  6892     11B1  00AE               	movwf	___fpclassifyf@u+2
  6893     11B2  0022               	movlb	2	; select bank2
  6894     11B3  0825               	movf	(___fpclassifyf@F465+1)^(0+256),w
  6895     11B4  0020               	movlb	0	; select bank0
  6896     11B5  00AD               	movwf	___fpclassifyf@u+1
  6897     11B6  0022               	movlb	2	; select bank2
  6898     11B7  0824               	movf	___fpclassifyf@F465^(0+256),w
  6899     11B8  0020               	movlb	0	; select bank0
  6900     11B9  00AC               	movwf	___fpclassifyf@u
  6901     11BA  0823               	movf	___fpclassifyf@x+3,w
  6902     11BB  00AF               	movwf	___fpclassifyf@u+3
  6903     11BC  0822               	movf	___fpclassifyf@x+2,w
  6904     11BD  00AE               	movwf	___fpclassifyf@u+2
  6905     11BE  0821               	movf	___fpclassifyf@x+1,w
  6906     11BF  00AD               	movwf	___fpclassifyf@u+1
  6907     11C0  0820               	movf	___fpclassifyf@x,w
  6908     11C1  00AC               	movwf	___fpclassifyf@u
  6909     11C2  082C               	movf	___fpclassifyf@u,w
  6910     11C3  00A4               	movwf	??___fpclassifyf
  6911     11C4  082D               	movf	___fpclassifyf@u+1,w
  6912     11C5  00A5               	movwf	??___fpclassifyf+1
  6913     11C6  082E               	movf	___fpclassifyf@u+2,w
  6914     11C7  00A6               	movwf	??___fpclassifyf+2
  6915     11C8  082F               	movf	___fpclassifyf@u+3,w
  6916     11C9  00A7               	movwf	??___fpclassifyf+3
  6917     11CA  3017               	movlw	23
  6918     11CB                     u4785:
  6919     11CB  36A7               	lsrf	??___fpclassifyf+3,f
  6920     11CC  0CA6               	rrf	??___fpclassifyf+2,f
  6921     11CD  0CA5               	rrf	??___fpclassifyf+1,f
  6922     11CE  0CA4               	rrf	??___fpclassifyf,f
  6923     11CF  0B89               	decfsz	9,f
  6924     11D0  29CB               	goto	u4785
  6925     11D1  30FF               	movlw	255
  6926     11D2  0524               	andwf	??___fpclassifyf,w
  6927     11D3  00AA               	movwf	___fpclassifyf@e
  6928     11D4  3000               	movlw	0
  6929     11D5  0525               	andwf	??___fpclassifyf+1,w
  6930     11D6  00AB               	movwf	___fpclassifyf@e+1
  6931     11D7  082A               	movf	___fpclassifyf@e,w
  6932     11D8  042B               	iorwf	___fpclassifyf@e+1,w
  6933     11D9  1D03               	btfss	3,2
  6934     11DA  29FA               	goto	l4099
  6935     11DB  082C               	movf	___fpclassifyf@u,w
  6936     11DC  00A4               	movwf	??___fpclassifyf
  6937     11DD  082D               	movf	___fpclassifyf@u+1,w
  6938     11DE  00A5               	movwf	??___fpclassifyf+1
  6939     11DF  082E               	movf	___fpclassifyf@u+2,w
  6940     11E0  00A6               	movwf	??___fpclassifyf+2
  6941     11E1  082F               	movf	___fpclassifyf@u+3,w
  6942     11E2  00A7               	movwf	??___fpclassifyf+3
  6943     11E3  3001               	movlw	1
  6944     11E4                     u4805:
  6945     11E4  35A4               	lslf	??___fpclassifyf,f
  6946     11E5  0DA5               	rlf	??___fpclassifyf+1,f
  6947     11E6  0DA6               	rlf	??___fpclassifyf+2,f
  6948     11E7  0DA7               	rlf	??___fpclassifyf+3,f
  6949     11E8  0B89               	decfsz	9,f
  6950     11E9  29E4               	goto	u4805
  6951     11EA  0827               	movf	??___fpclassifyf+3,w
  6952     11EB  0426               	iorwf	??___fpclassifyf+2,w
  6953     11EC  0425               	iorwf	??___fpclassifyf+1,w
  6954     11ED  0424               	iorwf	??___fpclassifyf,w
  6955     11EE  1D03               	skipz
  6956     11EF  29F5               	goto	l4095
  6957     11F0  3002               	movlw	2
  6958     11F1  00A0               	movwf	?___fpclassifyf
  6959     11F2  3000               	movlw	0
  6960     11F3  00A1               	movwf	?___fpclassifyf+1
  6961     11F4  0008               	return
  6962     11F5                     l4095:
  6963     11F5  3003               	movlw	3
  6964     11F6  00A0               	movwf	?___fpclassifyf
  6965     11F7  3000               	movlw	0
  6966     11F8  00A1               	movwf	?___fpclassifyf+1
  6967     11F9  0008               	return
  6968     11FA                     l4099:
  6969     11FA  0A2A               	incf	___fpclassifyf@e,w
  6970     11FB  042B               	iorwf	___fpclassifyf@e+1,w
  6971     11FC  1D03               	btfss	3,2
  6972     11FD  2A1D               	goto	l4105
  6973     11FE  082C               	movf	___fpclassifyf@u,w
  6974     11FF  00A4               	movwf	??___fpclassifyf
  6975     1200  082D               	movf	___fpclassifyf@u+1,w
  6976     1201  00A5               	movwf	??___fpclassifyf+1
  6977     1202  082E               	movf	___fpclassifyf@u+2,w
  6978     1203  00A6               	movwf	??___fpclassifyf+2
  6979     1204  082F               	movf	___fpclassifyf@u+3,w
  6980     1205  00A7               	movwf	??___fpclassifyf+3
  6981     1206  3009               	movlw	9
  6982     1207                     u4835:
  6983     1207  35A4               	lslf	??___fpclassifyf,f
  6984     1208  0DA5               	rlf	??___fpclassifyf+1,f
  6985     1209  0DA6               	rlf	??___fpclassifyf+2,f
  6986     120A  0DA7               	rlf	??___fpclassifyf+3,f
  6987     120B  0B89               	decfsz	9,f
  6988     120C  2A07               	goto	u4835
  6989     120D  0827               	movf	??___fpclassifyf+3,w
  6990     120E  0426               	iorwf	??___fpclassifyf+2,w
  6991     120F  0425               	iorwf	??___fpclassifyf+1,w
  6992     1210  0424               	iorwf	??___fpclassifyf,w
  6993     1211  1D03               	btfss	3,2
  6994     1212  2A15               	goto	u4840
  6995     1213  3001               	movlw	1
  6996     1214  2A16               	goto	u4850
  6997     1215                     u4840:
  6998     1215  3000               	movlw	0
  6999     1216                     u4850:
  7000     1216  00A8               	movwf	??___fpclassifyf+4
  7001     1217  01A9               	clrf	??___fpclassifyf+5
  7002     1218  0828               	movf	??___fpclassifyf+4,w
  7003     1219  00A0               	movwf	?___fpclassifyf
  7004     121A  0829               	movf	??___fpclassifyf+5,w
  7005     121B  00A1               	movwf	?___fpclassifyf+1
  7006     121C  0008               	return
  7007     121D                     l4105:
  7008     121D  3004               	movlw	4
  7009     121E  00A0               	movwf	?___fpclassifyf
  7010     121F  3000               	movlw	0
  7011     1220  00A1               	movwf	?___fpclassifyf+1
  7012     1221  0008               	return
  7013     1222                     __end_of___fpclassifyf:
  7014                           
  7015                           	psect	text12
  7016     1075                     __ptext12:	
  7017 ;; *************** function ___fltol *****************
  7018 ;; Defined at:
  7019 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  f1              4    0[BANK0 ] int 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  exp1            1    9[BANK0 ] unsigned char 
  7024 ;;  sign1           1    8[BANK0 ] unsigned char 
  7025 ;; Return value:  Size  Location     Type
  7026 ;;                  4    0[BANK0 ] long 
  7027 ;; Registers used:
  7028 ;;		wreg, status,2, status,0
  7029 ;; Tracked objects:
  7030 ;;		On entry : 1F/0
  7031 ;;		On exit  : 1F/0
  7032 ;;		Unchanged: 0/0
  7033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7034 ;;      Params:         0       4       0       0       0       0       0       0
  7035 ;;      Locals:         0       2       0       0       0       0       0       0
  7036 ;;      Temps:          0       4       0       0       0       0       0       0
  7037 ;;      Totals:         0      10       0       0       0       0       0       0
  7038 ;;Total ram usage:       10 bytes
  7039 ;; Hardware stack levels used: 1
  7040 ;; Hardware stack levels required when called: 4
  7041 ;; This function calls:
  7042 ;;		Nothing
  7043 ;; This function is called by:
  7044 ;;		_efgtoa
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048     1075                     ___fltol:	
  7049                           ;psect for function ___fltol
  7050                           
  7051                           
  7052                           ;incstack = 0
  7053                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  7054     1075  1003               	clrc
  7055     1076  0D22               	rlf	___fltol@f1+2,w
  7056     1077  0D23               	rlf	___fltol@f1+3,w
  7057     1078  00A9               	movwf	___fltol@exp1
  7058     1079  0829               	movf	___fltol@exp1,w
  7059     107A  1D03               	btfss	3,2
  7060     107B  2885               	goto	l3749
  7061     107C                     l3745:
  7062     107C  3000               	movlw	0
  7063     107D  00A3               	movwf	?___fltol+3
  7064     107E  3000               	movlw	0
  7065     107F  00A2               	movwf	?___fltol+2
  7066     1080  3000               	movlw	0
  7067     1081  00A1               	movwf	?___fltol+1
  7068     1082  3000               	movlw	0
  7069     1083  00A0               	movwf	?___fltol
  7070     1084  0008               	return
  7071     1085                     l3749:
  7072     1085  0820               	movf	___fltol@f1,w
  7073     1086  00A4               	movwf	??___fltol
  7074     1087  0821               	movf	___fltol@f1+1,w
  7075     1088  00A5               	movwf	??___fltol+1
  7076     1089  0822               	movf	___fltol@f1+2,w
  7077     108A  00A6               	movwf	??___fltol+2
  7078     108B  0823               	movf	___fltol@f1+3,w
  7079     108C  00A7               	movwf	??___fltol+3
  7080     108D  301F               	movlw	31
  7081     108E                     u4125:
  7082     108E  36A7               	lsrf	??___fltol+3,f
  7083     108F  0CA6               	rrf	??___fltol+2,f
  7084     1090  0CA5               	rrf	??___fltol+1,f
  7085     1091  0CA4               	rrf	??___fltol,f
  7086     1092  0B89               	decfsz	9,f
  7087     1093  288E               	goto	u4125
  7088     1094  0824               	movf	??___fltol,w
  7089     1095  00A8               	movwf	___fltol@sign1
  7090     1096  17A2               	bsf	___fltol@f1+2,7
  7091     1097  30FF               	movlw	255
  7092     1098  05A0               	andwf	___fltol@f1,f
  7093     1099  30FF               	movlw	255
  7094     109A  05A1               	andwf	___fltol@f1+1,f
  7095     109B  30FF               	movlw	255
  7096     109C  05A2               	andwf	___fltol@f1+2,f
  7097     109D  3000               	movlw	0
  7098     109E  05A3               	andwf	___fltol@f1+3,f
  7099     109F  3096               	movlw	150
  7100     10A0  02A9               	subwf	___fltol@exp1,f
  7101     10A1  1FA9               	btfss	___fltol@exp1,7
  7102     10A2  28B6               	goto	l3767
  7103     10A3  0829               	movf	___fltol@exp1,w
  7104     10A4  3A80               	xorlw	128
  7105     10A5  3E97               	addlw	151
  7106     10A6  1C03               	btfss	3,0
  7107     10A7  287C               	goto	l3745
  7108     10A8                     l3765:
  7109     10A8  3001               	movlw	1
  7110     10A9                     u4155:
  7111     10A9  36A3               	lsrf	___fltol@f1+3,f
  7112     10AA  0CA2               	rrf	___fltol@f1+2,f
  7113     10AB  0CA1               	rrf	___fltol@f1+1,f
  7114     10AC  0CA0               	rrf	___fltol@f1,f
  7115     10AD  0B89               	decfsz	9,f
  7116     10AE  28A9               	goto	u4155
  7117     10AF  3001               	movlw	1
  7118     10B0  00A4               	movwf	??___fltol
  7119     10B1  0824               	movf	??___fltol,w
  7120     10B2  07A9               	addwf	___fltol@exp1,f
  7121     10B3  1903               	btfsc	3,2
  7122     10B4  28C7               	goto	l3775
  7123     10B5  28A8               	goto	l3765
  7124     10B6                     l3767:
  7125     10B6  3020               	movlw	32
  7126     10B7  0229               	subwf	___fltol@exp1,w
  7127     10B8  1803               	btfsc	3,0
  7128     10B9  287C               	goto	l3745
  7129     10BA                     l767:
  7130     10BA  0829               	movf	___fltol@exp1,w
  7131     10BB  1903               	btfsc	3,2
  7132     10BC  28C7               	goto	l3775
  7133     10BD  3001               	movlw	1
  7134     10BE                     u4185:
  7135     10BE  35A0               	lslf	___fltol@f1,f
  7136     10BF  0DA1               	rlf	___fltol@f1+1,f
  7137     10C0  0DA2               	rlf	___fltol@f1+2,f
  7138     10C1  0DA3               	rlf	___fltol@f1+3,f
  7139     10C2  0B89               	decfsz	9,f
  7140     10C3  28BE               	goto	u4185
  7141     10C4  3001               	movlw	1
  7142     10C5  02A9               	subwf	___fltol@exp1,f
  7143     10C6  28BA               	goto	l767
  7144     10C7                     l3775:
  7145     10C7  0828               	movf	___fltol@sign1,w
  7146     10C8  1903               	btfsc	3,2
  7147     10C9  0008               	return
  7148     10CA  09A0               	comf	___fltol@f1,f
  7149     10CB  09A1               	comf	___fltol@f1+1,f
  7150     10CC  09A2               	comf	___fltol@f1+2,f
  7151     10CD  09A3               	comf	___fltol@f1+3,f
  7152     10CE  0AA0               	incf	___fltol@f1,f
  7153     10CF  1903               	skipnz
  7154     10D0  0AA1               	incf	___fltol@f1+1,f
  7155     10D1  1903               	skipnz
  7156     10D2  0AA2               	incf	___fltol@f1+2,f
  7157     10D3  1903               	skipnz
  7158     10D4  0AA3               	incf	___fltol@f1+3,f
  7159     10D5  0008               	return
  7160     10D6                     __end_of___fltol:
  7161                           
  7162                           	psect	text13
  7163     1D42                     __ptext13:	
  7164 ;; *************** function ___flsub *****************
  7165 ;; Defined at:
  7166 ;;		line 242 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;  a               4   35[BANK0 ] long 
  7169 ;;  b               4   39[BANK0 ] long 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;		None
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  4   35[BANK0 ] long 
  7174 ;; Registers used:
  7175 ;;		wreg, status,2, status,0, pclath, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 1F/0
  7178 ;;		On exit  : 1F/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7181 ;;      Params:         0       8       0       0       0       0       0       0
  7182 ;;      Locals:         0       0       0       0       0       0       0       0
  7183 ;;      Temps:          0       0       0       0       0       0       0       0
  7184 ;;      Totals:         0       8       0       0       0       0       0       0
  7185 ;;Total ram usage:        8 bytes
  7186 ;; Hardware stack levels used: 1
  7187 ;; Hardware stack levels required when called: 5
  7188 ;; This function calls:
  7189 ;;		___fladd
  7190 ;; This function is called by:
  7191 ;;		_efgtoa
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195     1D42                     ___flsub:	
  7196                           ;psect for function ___flsub
  7197                           
  7198                           
  7199                           ;incstack = 0
  7200                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
  7201     1D42  3080               	movlw	128
  7202     1D43  06C6               	xorwf	___flsub@a+3,f
  7203     1D44  084A               	movf	___flsub@b+3,w
  7204     1D45  00A3               	movwf	___fladd@b+3
  7205     1D46  0849               	movf	___flsub@b+2,w
  7206     1D47  00A2               	movwf	___fladd@b+2
  7207     1D48  0848               	movf	___flsub@b+1,w
  7208     1D49  00A1               	movwf	___fladd@b+1
  7209     1D4A  0847               	movf	___flsub@b,w
  7210     1D4B  00A0               	movwf	___fladd@b
  7211     1D4C  0846               	movf	___flsub@a+3,w
  7212     1D4D  00A7               	movwf	___fladd@a+3
  7213     1D4E  0845               	movf	___flsub@a+2,w
  7214     1D4F  00A6               	movwf	___fladd@a+2
  7215     1D50  0844               	movf	___flsub@a+1,w
  7216     1D51  00A5               	movwf	___fladd@a+1
  7217     1D52  0843               	movf	___flsub@a,w
  7218     1D53  00A4               	movwf	___fladd@a
  7219     1D54  3196  264F         	fcall	___fladd
  7220     1D56  0823               	movf	?___fladd+3,w
  7221     1D57  00C6               	movwf	?___flsub+3
  7222     1D58  0822               	movf	?___fladd+2,w
  7223     1D59  00C5               	movwf	?___flsub+2
  7224     1D5A  0821               	movf	?___fladd+1,w
  7225     1D5B  00C4               	movwf	?___flsub+1
  7226     1D5C  0820               	movf	?___fladd,w
  7227     1D5D  00C3               	movwf	?___flsub
  7228     1D5E  0008               	return
  7229     1D5F                     __end_of___flsub:
  7230                           
  7231                           	psect	text14
  7232     164F                     __ptext14:	
  7233 ;; *************** function ___fladd *****************
  7234 ;; Defined at:
  7235 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;  b               4    0[BANK0 ] long 
  7238 ;;  a               4    4[BANK0 ] long 
  7239 ;; Auto vars:     Size  Location     Type
  7240 ;;  grs             1   19[BANK0 ] unsigned char 
  7241 ;;  bexp            1   18[BANK0 ] unsigned char 
  7242 ;;  aexp            1   17[BANK0 ] unsigned char 
  7243 ;;  signs           1   16[BANK0 ] unsigned char 
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  4    0[BANK0 ] unsigned char 
  7246 ;; Registers used:
  7247 ;;		wreg, status,2, status,0
  7248 ;; Tracked objects:
  7249 ;;		On entry : 1F/0
  7250 ;;		On exit  : 1F/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7253 ;;      Params:         0       8       0       0       0       0       0       0
  7254 ;;      Locals:         0       4       0       0       0       0       0       0
  7255 ;;      Temps:          0       8       0       0       0       0       0       0
  7256 ;;      Totals:         0      20       0       0       0       0       0       0
  7257 ;;Total ram usage:       20 bytes
  7258 ;; Hardware stack levels used: 1
  7259 ;; Hardware stack levels required when called: 4
  7260 ;; This function calls:
  7261 ;;		Nothing
  7262 ;; This function is called by:
  7263 ;;		___flsub
  7264 ;;		_efgtoa
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268     164F                     ___fladd:	
  7269                           ;psect for function ___fladd
  7270                           
  7271                           
  7272                           ;incstack = 0
  7273                           ; Regs used in ___fladd: [wreg+status,2+status,0]
  7274     164F  0823               	movf	___fladd@b+3,w
  7275     1650  3980               	andlw	128
  7276     1651  00B0               	movwf	___fladd@signs
  7277     1652  3523               	lslf	___fladd@b+3,w
  7278     1653  00B2               	movwf	___fladd@bexp
  7279     1654  1BA2               	btfsc	___fladd@b+2,7
  7280     1655  1432               	bsf	___fladd@bexp,0
  7281     1656  0832               	movf	___fladd@bexp,w
  7282     1657  1903               	btfsc	3,2
  7283     1658  2E67               	goto	l3409
  7284     1659  0A32               	incf	___fladd@bexp,w
  7285     165A  1D03               	btfss	3,2
  7286     165B  2E64               	goto	l3405
  7287     165C  3000               	movlw	0
  7288     165D  00A3               	movwf	___fladd@b+3
  7289     165E  3000               	movlw	0
  7290     165F  00A2               	movwf	___fladd@b+2
  7291     1660  3000               	movlw	0
  7292     1661  00A1               	movwf	___fladd@b+1
  7293     1662  3000               	movlw	0
  7294     1663  00A0               	movwf	___fladd@b
  7295     1664                     l3405:
  7296     1664  17A2               	bsf	___fladd@b+2,7
  7297     1665  01A3               	clrf	___fladd@b+3
  7298     1666  2E6F               	goto	l3411
  7299     1667                     l3409:
  7300     1667  3000               	movlw	0
  7301     1668  00A3               	movwf	___fladd@b+3
  7302     1669  3000               	movlw	0
  7303     166A  00A2               	movwf	___fladd@b+2
  7304     166B  3000               	movlw	0
  7305     166C  00A1               	movwf	___fladd@b+1
  7306     166D  3000               	movlw	0
  7307     166E  00A0               	movwf	___fladd@b
  7308     166F                     l3411:
  7309     166F  0827               	movf	___fladd@a+3,w
  7310     1670  3980               	andlw	128
  7311     1671  00B1               	movwf	___fladd@aexp
  7312     1672  0831               	movf	___fladd@aexp,w
  7313     1673  0630               	xorwf	___fladd@signs,w
  7314     1674  1D03               	btfss	3,2
  7315     1675  1730               	bsf	___fladd@signs,6
  7316     1676  3527               	lslf	___fladd@a+3,w
  7317     1677  00B1               	movwf	___fladd@aexp
  7318     1678  1BA6               	btfsc	___fladd@a+2,7
  7319     1679  1431               	bsf	___fladd@aexp,0
  7320     167A  0831               	movf	___fladd@aexp,w
  7321     167B  1903               	btfsc	3,2
  7322     167C  2E8B               	goto	l3433
  7323     167D  0A31               	incf	___fladd@aexp,w
  7324     167E  1D03               	btfss	3,2
  7325     167F  2E88               	goto	l3429
  7326     1680  3000               	movlw	0
  7327     1681  00A7               	movwf	___fladd@a+3
  7328     1682  3000               	movlw	0
  7329     1683  00A6               	movwf	___fladd@a+2
  7330     1684  3000               	movlw	0
  7331     1685  00A5               	movwf	___fladd@a+1
  7332     1686  3000               	movlw	0
  7333     1687  00A4               	movwf	___fladd@a
  7334     1688                     l3429:
  7335     1688  17A6               	bsf	___fladd@a+2,7
  7336     1689  01A7               	clrf	___fladd@a+3
  7337     168A  2E93               	goto	l867
  7338     168B                     l3433:
  7339     168B  3000               	movlw	0
  7340     168C  00A7               	movwf	___fladd@a+3
  7341     168D  3000               	movlw	0
  7342     168E  00A6               	movwf	___fladd@a+2
  7343     168F  3000               	movlw	0
  7344     1690  00A5               	movwf	___fladd@a+1
  7345     1691  3000               	movlw	0
  7346     1692  00A4               	movwf	___fladd@a
  7347     1693                     l867:
  7348     1693  0832               	movf	___fladd@bexp,w
  7349     1694  0231               	subwf	___fladd@aexp,w
  7350     1695  1803               	skipnc
  7351     1696  2EBB               	goto	l3469
  7352     1697  1F30               	btfss	___fladd@signs,6
  7353     1698  2E9D               	goto	l3439
  7354     1699  3080               	movlw	128
  7355     169A  00A8               	movwf	??___fladd
  7356     169B  0828               	movf	??___fladd,w
  7357     169C  06B0               	xorwf	___fladd@signs,f
  7358     169D                     l3439:
  7359     169D  0832               	movf	___fladd@bexp,w
  7360     169E  00B3               	movwf	___fladd@grs
  7361     169F  0831               	movf	___fladd@aexp,w
  7362     16A0  00B2               	movwf	___fladd@bexp
  7363     16A1  0833               	movf	___fladd@grs,w
  7364     16A2  00B1               	movwf	___fladd@aexp
  7365     16A3  0820               	movf	___fladd@b,w
  7366     16A4  00B3               	movwf	___fladd@grs
  7367     16A5  0824               	movf	___fladd@a,w
  7368     16A6  00A0               	movwf	___fladd@b
  7369     16A7  0833               	movf	___fladd@grs,w
  7370     16A8  00A4               	movwf	___fladd@a
  7371     16A9  0821               	movf	___fladd@b+1,w
  7372     16AA  00B3               	movwf	___fladd@grs
  7373     16AB  0825               	movf	___fladd@a+1,w
  7374     16AC  00A1               	movwf	___fladd@b+1
  7375     16AD  0833               	movf	___fladd@grs,w
  7376     16AE  00A5               	movwf	___fladd@a+1
  7377     16AF  0822               	movf	___fladd@b+2,w
  7378     16B0  00B3               	movwf	___fladd@grs
  7379     16B1  0826               	movf	___fladd@a+2,w
  7380     16B2  00A2               	movwf	___fladd@b+2
  7381     16B3  0833               	movf	___fladd@grs,w
  7382     16B4  00A6               	movwf	___fladd@a+2
  7383     16B5  0823               	movf	___fladd@b+3,w
  7384     16B6  00B3               	movwf	___fladd@grs
  7385     16B7  0827               	movf	___fladd@a+3,w
  7386     16B8  00A3               	movwf	___fladd@b+3
  7387     16B9  0833               	movf	___fladd@grs,w
  7388     16BA  00A7               	movwf	___fladd@a+3
  7389     16BB                     l3469:
  7390     16BB  01B3               	clrf	___fladd@grs
  7391     16BC  0831               	movf	___fladd@aexp,w
  7392     16BD  00A8               	movwf	??___fladd
  7393     16BE  01A9               	clrf	??___fladd+1
  7394     16BF  0829               	movf	??___fladd+1,w
  7395     16C0  00AB               	movwf	??___fladd+3
  7396     16C1  0832               	movf	___fladd@bexp,w
  7397     16C2  0228               	subwf	??___fladd,w
  7398     16C3  00AA               	movwf	??___fladd+2
  7399     16C4  1C03               	skipc
  7400     16C5  03AB               	decf	??___fladd+3,f
  7401     16C6  082B               	movf	??___fladd+3,w
  7402     16C7  3A80               	xorlw	128
  7403     16C8  00AC               	movwf	??___fladd+4
  7404     16C9  3080               	movlw	128
  7405     16CA  022C               	subwf	??___fladd+4,w
  7406     16CB  1D03               	skipz
  7407     16CC  2ECF               	goto	u3415
  7408     16CD  301A               	movlw	26
  7409     16CE  022A               	subwf	??___fladd+2,w
  7410     16CF                     u3415:
  7411     16CF  1C03               	skipc
  7412     16D0  2EFD               	goto	l3487
  7413     16D1  0020               	movlb	0	; select bank0
  7414     16D2  0823               	movf	___fladd@b+3,w
  7415     16D3  0422               	iorwf	___fladd@b+2,w
  7416     16D4  0421               	iorwf	___fladd@b+1,w
  7417     16D5  0420               	iorwf	___fladd@b,w
  7418     16D6  1903               	btfsc	3,2
  7419     16D7  2EDA               	goto	u3420
  7420     16D8  3001               	movlw	1
  7421     16D9  2EDB               	goto	u3430
  7422     16DA                     u3420:
  7423     16DA  3000               	movlw	0
  7424     16DB                     u3430:
  7425     16DB  00B3               	movwf	___fladd@grs
  7426     16DC  3000               	movlw	0
  7427     16DD  00A3               	movwf	___fladd@b+3
  7428     16DE  3000               	movlw	0
  7429     16DF  00A2               	movwf	___fladd@b+2
  7430     16E0  3000               	movlw	0
  7431     16E1  00A1               	movwf	___fladd@b+1
  7432     16E2  3000               	movlw	0
  7433     16E3  00A0               	movwf	___fladd@b
  7434     16E4  0831               	movf	___fladd@aexp,w
  7435     16E5  00B2               	movwf	___fladd@bexp
  7436     16E6  2F02               	goto	l871
  7437     16E7                     l873:
  7438     16E7  1C33               	btfss	___fladd@grs,0
  7439     16E8  2EED               	goto	l3477
  7440     16E9  3633               	lsrf	___fladd@grs,w
  7441     16EA  3801               	iorlw	1
  7442     16EB  00B3               	movwf	___fladd@grs
  7443     16EC  2EEF               	goto	l3479
  7444     16ED                     l3477:
  7445     16ED  1003               	clrc
  7446     16EE  0CB3               	rrf	___fladd@grs,f
  7447     16EF                     l3479:
  7448     16EF  1820               	btfsc	___fladd@b,0
  7449     16F0  17B3               	bsf	___fladd@grs,7
  7450     16F1  3001               	movlw	1
  7451     16F2  00A8               	movwf	??___fladd
  7452     16F3                     u3465:
  7453     16F3  37A3               	asrf	___fladd@b+3,f
  7454     16F4  0CA2               	rrf	___fladd@b+2,f
  7455     16F5  0CA1               	rrf	___fladd@b+1,f
  7456     16F6  0CA0               	rrf	___fladd@b,f
  7457     16F7  0BA8               	decfsz	??___fladd& (0+127),f
  7458     16F8  2EF3               	goto	u3465
  7459     16F9  3001               	movlw	1
  7460     16FA  00A8               	movwf	??___fladd
  7461     16FB  0828               	movf	??___fladd,w
  7462     16FC  07B2               	addwf	___fladd@bexp,f
  7463     16FD                     l3487:
  7464     16FD  0020               	movlb	0	; select bank0
  7465     16FE  0831               	movf	___fladd@aexp,w
  7466     16FF  0232               	subwf	___fladd@bexp,w
  7467     1700  1C03               	skipc
  7468     1701  2EE7               	goto	l873
  7469     1702                     l871:
  7470     1702  1B30               	btfsc	___fladd@signs,6
  7471     1703  2F31               	goto	l3513
  7472     1704  0832               	movf	___fladd@bexp,w
  7473     1705  1D03               	btfss	3,2
  7474     1706  2F10               	goto	l3495
  7475     1707  3000               	movlw	0
  7476     1708  00A3               	movwf	?___fladd+3
  7477     1709  3000               	movlw	0
  7478     170A  00A2               	movwf	?___fladd+2
  7479     170B  3000               	movlw	0
  7480     170C  00A1               	movwf	?___fladd+1
  7481     170D  3000               	movlw	0
  7482     170E  00A0               	movwf	?___fladd
  7483     170F  0008               	return
  7484     1710                     l3495:
  7485     1710  0824               	movf	___fladd@a,w
  7486     1711  07A0               	addwf	___fladd@b,f
  7487     1712  0825               	movf	___fladd@a+1,w
  7488     1713  3DA1               	addwfc	___fladd@b+1,f
  7489     1714  0826               	movf	___fladd@a+2,w
  7490     1715  3DA2               	addwfc	___fladd@b+2,f
  7491     1716  0827               	movf	___fladd@a+3,w
  7492     1717  3DA3               	addwfc	___fladd@b+3,f
  7493     1718  1C23               	btfss	___fladd@b+3,0
  7494     1719  2FAB               	goto	l3547
  7495     171A  1C33               	btfss	___fladd@grs,0
  7496     171B  2F20               	goto	l3503
  7497     171C  3633               	lsrf	___fladd@grs,w
  7498     171D  3801               	iorlw	1
  7499     171E  00B3               	movwf	___fladd@grs
  7500     171F  2F22               	goto	l3505
  7501     1720                     l3503:
  7502     1720  1003               	clrc
  7503     1721  0CB3               	rrf	___fladd@grs,f
  7504     1722                     l3505:
  7505     1722  1820               	btfsc	___fladd@b,0
  7506     1723  17B3               	bsf	___fladd@grs,7
  7507     1724  3001               	movlw	1
  7508     1725  00A8               	movwf	??___fladd
  7509     1726                     u3535:
  7510     1726  37A3               	asrf	___fladd@b+3,f
  7511     1727  0CA2               	rrf	___fladd@b+2,f
  7512     1728  0CA1               	rrf	___fladd@b+1,f
  7513     1729  0CA0               	rrf	___fladd@b,f
  7514     172A  0BA8               	decfsz	??___fladd& (0+127),f
  7515     172B  2F26               	goto	u3535
  7516     172C  3001               	movlw	1
  7517     172D  00A8               	movwf	??___fladd
  7518     172E  0828               	movf	??___fladd,w
  7519     172F  07B2               	addwf	___fladd@bexp,f
  7520     1730  2FAB               	goto	l3547
  7521     1731                     l3513:
  7522     1731  0823               	movf	___fladd@b+3,w
  7523     1732  3A80               	xorlw	128
  7524     1733  00A8               	movwf	??___fladd
  7525     1734  0827               	movf	___fladd@a+3,w
  7526     1735  3A80               	xorlw	128
  7527     1736  0228               	subwf	??___fladd,w
  7528     1737  1D03               	skipz
  7529     1738  2F43               	goto	u3543
  7530     1739  0826               	movf	___fladd@a+2,w
  7531     173A  0222               	subwf	___fladd@b+2,w
  7532     173B  1D03               	skipz
  7533     173C  2F43               	goto	u3543
  7534     173D  0825               	movf	___fladd@a+1,w
  7535     173E  0221               	subwf	___fladd@b+1,w
  7536     173F  1D03               	skipz
  7537     1740  2F43               	goto	u3543
  7538     1741  0824               	movf	___fladd@a,w
  7539     1742  0220               	subwf	___fladd@b,w
  7540     1743                     u3543:
  7541     1743  1803               	skipnc
  7542     1744  2F7B               	goto	l3523
  7543     1745  30FF               	movlw	255
  7544     1746  00A8               	movwf	??___fladd
  7545     1747  30FF               	movlw	255
  7546     1748  00A9               	movwf	??___fladd+1
  7547     1749  30FF               	movlw	255
  7548     174A  00AA               	movwf	??___fladd+2
  7549     174B  30FF               	movlw	255
  7550     174C  00AB               	movwf	??___fladd+3
  7551     174D  0820               	movf	___fladd@b,w
  7552     174E  0224               	subwf	___fladd@a,w
  7553     174F  00AC               	movwf	??___fladd+4
  7554     1750  0821               	movf	___fladd@b+1,w
  7555     1751  3B25               	subwfb	___fladd@a+1,w
  7556     1752  00AD               	movwf	??___fladd+5
  7557     1753  0822               	movf	___fladd@b+2,w
  7558     1754  3B26               	subwfb	___fladd@a+2,w
  7559     1755  00AE               	movwf	??___fladd+6
  7560     1756  0823               	movf	___fladd@b+3,w
  7561     1757  3B27               	subwfb	___fladd@a+3,w
  7562     1758  00AF               	movwf	??___fladd+7
  7563     1759  082C               	movf	??___fladd+4,w
  7564     175A  07A8               	addwf	??___fladd,f
  7565     175B  082D               	movf	??___fladd+5,w
  7566     175C  3DA9               	addwfc	??___fladd+1,f
  7567     175D  082E               	movf	??___fladd+6,w
  7568     175E  3DAA               	addwfc	??___fladd+2,f
  7569     175F  082F               	movf	??___fladd+7,w
  7570     1760  3DAB               	addwfc	??___fladd+3,f
  7571     1761  082B               	movf	??___fladd+3,w
  7572     1762  00A3               	movwf	___fladd@b+3
  7573     1763  082A               	movf	??___fladd+2,w
  7574     1764  00A2               	movwf	___fladd@b+2
  7575     1765  0829               	movf	??___fladd+1,w
  7576     1766  00A1               	movwf	___fladd@b+1
  7577     1767  0828               	movf	??___fladd,w
  7578     1768  00A0               	movwf	___fladd@b
  7579     1769  3080               	movlw	128
  7580     176A  00A8               	movwf	??___fladd
  7581     176B  0828               	movf	??___fladd,w
  7582     176C  06B0               	xorwf	___fladd@signs,f
  7583     176D  09B3               	comf	___fladd@grs,f
  7584     176E  0AB3               	incf	___fladd@grs,f
  7585     176F  0833               	movf	___fladd@grs,w
  7586     1770  1D03               	btfss	3,2
  7587     1771  2F83               	goto	l888
  7588     1772  3001               	movlw	1
  7589     1773  07A0               	addwf	___fladd@b,f
  7590     1774  3000               	movlw	0
  7591     1775  3DA1               	addwfc	___fladd@b+1,f
  7592     1776  3000               	movlw	0
  7593     1777  3DA2               	addwfc	___fladd@b+2,f
  7594     1778  3000               	movlw	0
  7595     1779  3DA3               	addwfc	___fladd@b+3,f
  7596     177A  2F83               	goto	l888
  7597     177B                     l3523:
  7598     177B  0824               	movf	___fladd@a,w
  7599     177C  02A0               	subwf	___fladd@b,f
  7600     177D  0825               	movf	___fladd@a+1,w
  7601     177E  3BA1               	subwfb	___fladd@b+1,f
  7602     177F  0826               	movf	___fladd@a+2,w
  7603     1780  3BA2               	subwfb	___fladd@b+2,f
  7604     1781  0827               	movf	___fladd@a+3,w
  7605     1782  3BA3               	subwfb	___fladd@b+3,f
  7606     1783                     l888:
  7607     1783  0823               	movf	___fladd@b+3,w
  7608     1784  0422               	iorwf	___fladd@b+2,w
  7609     1785  0421               	iorwf	___fladd@b+1,w
  7610     1786  0420               	iorwf	___fladd@b,w
  7611     1787  1D03               	skipz
  7612     1788  2FA9               	goto	l3545
  7613     1789  0833               	movf	___fladd@grs,w
  7614     178A  1D03               	btfss	3,2
  7615     178B  2FA9               	goto	l3545
  7616     178C  3000               	movlw	0
  7617     178D  00A3               	movwf	?___fladd+3
  7618     178E  3000               	movlw	0
  7619     178F  00A2               	movwf	?___fladd+2
  7620     1790  3000               	movlw	0
  7621     1791  00A1               	movwf	?___fladd+1
  7622     1792  3000               	movlw	0
  7623     1793  00A0               	movwf	?___fladd
  7624     1794  0008               	return
  7625     1795                     l3531:
  7626     1795  3001               	movlw	1
  7627     1796                     u3585:
  7628     1796  35A0               	lslf	___fladd@b,f
  7629     1797  0DA1               	rlf	___fladd@b+1,f
  7630     1798  0DA2               	rlf	___fladd@b+2,f
  7631     1799  0DA3               	rlf	___fladd@b+3,f
  7632     179A  0B89               	decfsz	9,f
  7633     179B  2F96               	goto	u3585
  7634     179C  1BB3               	btfsc	___fladd@grs,7
  7635     179D  1420               	bsf	___fladd@b,0
  7636     179E  1C33               	btfss	___fladd@grs,0
  7637     179F  2FA2               	goto	l3539
  7638     17A0  1403               	setc
  7639     17A1  2FA3               	goto	L6
  7640     17A2                     l3539:
  7641     17A2  1003               	clrc
  7642     17A3                     L6:
  7643     17A3  0DB3               	rlf	___fladd@grs,f
  7644     17A4  0832               	movf	___fladd@bexp,w
  7645     17A5  1903               	btfsc	3,2
  7646     17A6  2FA9               	goto	l3545
  7647     17A7  3001               	movlw	1
  7648     17A8  02B2               	subwf	___fladd@bexp,f
  7649     17A9                     l3545:
  7650     17A9  1FA2               	btfss	___fladd@b+2,7
  7651     17AA  2F95               	goto	l3531
  7652     17AB                     l3547:
  7653     17AB  01B1               	clrf	___fladd@aexp
  7654     17AC  1FB3               	btfss	___fladd@grs,7
  7655     17AD  2FB6               	goto	l3557
  7656     17AE  0833               	movf	___fladd@grs,w
  7657     17AF  397F               	andlw	127
  7658     17B0  1903               	btfsc	3,2
  7659     17B1  1820               	btfsc	___fladd@b,0
  7660     17B2  2FB4               	goto	l3553
  7661     17B3  2FB6               	goto	l3557
  7662     17B4                     l3553:
  7663     17B4  01B1               	clrf	___fladd@aexp
  7664     17B5  0AB1               	incf	___fladd@aexp,f
  7665     17B6                     l3557:
  7666     17B6  0831               	movf	___fladd@aexp,w
  7667     17B7  1903               	btfsc	3,2
  7668     17B8  2FE2               	goto	l901
  7669     17B9  3001               	movlw	1
  7670     17BA  07A0               	addwf	___fladd@b,f
  7671     17BB  3000               	movlw	0
  7672     17BC  3DA1               	addwfc	___fladd@b+1,f
  7673     17BD  3000               	movlw	0
  7674     17BE  3DA2               	addwfc	___fladd@b+2,f
  7675     17BF  3000               	movlw	0
  7676     17C0  3DA3               	addwfc	___fladd@b+3,f
  7677     17C1  1C23               	btfss	___fladd@b+3,0
  7678     17C2  2FE2               	goto	l901
  7679     17C3  0820               	movf	___fladd@b,w
  7680     17C4  00A8               	movwf	??___fladd
  7681     17C5  0821               	movf	___fladd@b+1,w
  7682     17C6  00A9               	movwf	??___fladd+1
  7683     17C7  0822               	movf	___fladd@b+2,w
  7684     17C8  00AA               	movwf	??___fladd+2
  7685     17C9  0823               	movf	___fladd@b+3,w
  7686     17CA  00AB               	movwf	??___fladd+3
  7687     17CB  3001               	movlw	1
  7688     17CC  00AC               	movwf	??___fladd+4
  7689     17CD                     u3685:
  7690     17CD  37AB               	asrf	??___fladd+3,f
  7691     17CE  0CAA               	rrf	??___fladd+2,f
  7692     17CF  0CA9               	rrf	??___fladd+1,f
  7693     17D0  0CA8               	rrf	??___fladd,f
  7694     17D1  0BAC               	decfsz	??___fladd+4,f
  7695     17D2  2FCD               	goto	u3685
  7696     17D3  082B               	movf	??___fladd+3,w
  7697     17D4  00A3               	movwf	___fladd@b+3
  7698     17D5  082A               	movf	??___fladd+2,w
  7699     17D6  00A2               	movwf	___fladd@b+2
  7700     17D7  0829               	movf	??___fladd+1,w
  7701     17D8  00A1               	movwf	___fladd@b+1
  7702     17D9  0828               	movf	??___fladd,w
  7703     17DA  00A0               	movwf	___fladd@b
  7704     17DB  0A32               	incf	___fladd@bexp,w
  7705     17DC  1903               	btfsc	3,2
  7706     17DD  2FE2               	goto	l901
  7707     17DE  3001               	movlw	1
  7708     17DF  00A8               	movwf	??___fladd
  7709     17E0  0828               	movf	??___fladd,w
  7710     17E1  07B2               	addwf	___fladd@bexp,f
  7711     17E2                     l901:
  7712     17E2  0A32               	incf	___fladd@bexp,w
  7713     17E3  1D03               	btfss	3,2
  7714     17E4  0832               	movf	___fladd@bexp,w
  7715     17E5  1D03               	btfss	3,2
  7716     17E6  2FF2               	goto	l3575
  7717     17E7  3000               	movlw	0
  7718     17E8  00A3               	movwf	___fladd@b+3
  7719     17E9  3000               	movlw	0
  7720     17EA  00A2               	movwf	___fladd@b+2
  7721     17EB  3000               	movlw	0
  7722     17EC  00A1               	movwf	___fladd@b+1
  7723     17ED  3000               	movlw	0
  7724     17EE  00A0               	movwf	___fladd@b
  7725     17EF  0832               	movf	___fladd@bexp,w
  7726     17F0  1903               	btfsc	3,2
  7727     17F1  01B0               	clrf	___fladd@signs
  7728     17F2                     l3575:
  7729     17F2  1C32               	btfss	___fladd@bexp,0
  7730     17F3  2FF6               	goto	l3579
  7731     17F4  17A2               	bsf	___fladd@b+2,7
  7732     17F5  2FFA               	goto	l909
  7733     17F6                     l3579:
  7734     17F6  307F               	movlw	127
  7735     17F7  00A8               	movwf	??___fladd
  7736     17F8  0828               	movf	??___fladd,w
  7737     17F9  05A2               	andwf	___fladd@b+2,f
  7738     17FA                     l909:
  7739     17FA  3632               	lsrf	___fladd@bexp,w
  7740     17FB  00A3               	movwf	___fladd@b+3
  7741     17FC  1FB0               	btfss	___fladd@signs,7
  7742     17FD  0008               	return
  7743     17FE  17A3               	bsf	___fladd@b+3,7
  7744     17FF  0008               	return
  7745     1800                     __end_of___fladd:
  7746                           
  7747                           	psect	text15
  7748     1C9D                     __ptext15:	
  7749 ;; *************** function ___flneg *****************
  7750 ;; Defined at:
  7751 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flneg.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  f1              4    0[BANK0 ] unsigned char 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;		None
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  4    0[BANK0 ] unsigned char 
  7758 ;; Registers used:
  7759 ;;		wreg
  7760 ;; Tracked objects:
  7761 ;;		On entry : 1F/0
  7762 ;;		On exit  : 1F/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7765 ;;      Params:         0       4       0       0       0       0       0       0
  7766 ;;      Locals:         0       0       0       0       0       0       0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0       0
  7768 ;;      Totals:         0       4       0       0       0       0       0       0
  7769 ;;Total ram usage:        4 bytes
  7770 ;; Hardware stack levels used: 1
  7771 ;; Hardware stack levels required when called: 4
  7772 ;; This function calls:
  7773 ;;		Nothing
  7774 ;; This function is called by:
  7775 ;;		_efgtoa
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779     1C9D                     ___flneg:	
  7780                           ;psect for function ___flneg
  7781                           
  7782                           
  7783                           ;incstack = 0
  7784                           ; Regs used in ___flneg: [wreg]
  7785     1C9D  0823               	movf	___flneg@f1+3,w
  7786     1C9E  0422               	iorwf	___flneg@f1+2,w
  7787     1C9F  0421               	iorwf	___flneg@f1+1,w
  7788     1CA0  0420               	iorwf	___flneg@f1,w
  7789     1CA1  1903               	skipnz
  7790     1CA2  0008               	return
  7791     1CA3  3080               	movlw	128
  7792     1CA4  06A3               	xorwf	___flneg@f1+3,f
  7793     1CA5  0008               	return
  7794     1CA6                     __end_of___flneg:
  7795                           
  7796                           	psect	text16
  7797     04A3                     __ptext16:	
  7798 ;; *************** function ___flmul *****************
  7799 ;; Defined at:
  7800 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  7801 ;; Parameters:    Size  Location     Type
  7802 ;;  b               4    9[BANK0 ] unsigned char 
  7803 ;;  a               4   13[BANK0 ] unsigned char 
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;  prod            4   29[BANK0 ] struct .
  7806 ;;  grs             4   24[BANK0 ] unsigned long 
  7807 ;;  temp            2   33[BANK0 ] struct .
  7808 ;;  bexp            1   28[BANK0 ] unsigned char 
  7809 ;;  aexp            1   23[BANK0 ] unsigned char 
  7810 ;;  sign            1   22[BANK0 ] unsigned char 
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  4    9[BANK0 ] unsigned char 
  7813 ;; Registers used:
  7814 ;;		wreg, status,2, status,0, pclath, cstack
  7815 ;; Tracked objects:
  7816 ;;		On entry : 1F/0
  7817 ;;		On exit  : 1F/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7820 ;;      Params:         0       8       0       0       0       0       0       0
  7821 ;;      Locals:         0      13       0       0       0       0       0       0
  7822 ;;      Temps:          0       5       0       0       0       0       0       0
  7823 ;;      Totals:         0      26       0       0       0       0       0       0
  7824 ;;Total ram usage:       26 bytes
  7825 ;; Hardware stack levels used: 1
  7826 ;; Hardware stack levels required when called: 5
  7827 ;; This function calls:
  7828 ;;		__Umul8_16
  7829 ;; This function is called by:
  7830 ;;		_efgtoa
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834     04A3                     ___flmul:	
  7835                           ;psect for function ___flmul
  7836                           
  7837                           
  7838                           ;incstack = 0
  7839                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  7840     04A3  082C               	movf	___flmul@b+3,w
  7841     04A4  3980               	andlw	128
  7842     04A5  00B6               	movwf	___flmul@sign
  7843     04A6  352C               	lslf	___flmul@b+3,w
  7844     04A7  00BC               	movwf	___flmul@bexp
  7845     04A8  1BAB               	btfsc	___flmul@b+2,7
  7846     04A9  143C               	bsf	___flmul@bexp,0
  7847     04AA  083C               	movf	___flmul@bexp,w
  7848     04AB  1903               	btfsc	3,2
  7849     04AC  2CBA               	goto	l3941
  7850     04AD  0A3C               	incf	___flmul@bexp,w
  7851     04AE  1D03               	btfss	3,2
  7852     04AF  2CB8               	goto	l3939
  7853     04B0  3000               	movlw	0
  7854     04B1  00AC               	movwf	___flmul@b+3
  7855     04B2  3000               	movlw	0
  7856     04B3  00AB               	movwf	___flmul@b+2
  7857     04B4  3000               	movlw	0
  7858     04B5  00AA               	movwf	___flmul@b+1
  7859     04B6  3000               	movlw	0
  7860     04B7  00A9               	movwf	___flmul@b
  7861     04B8                     l3939:
  7862     04B8  17AB               	bsf	___flmul@b+2,7
  7863     04B9  2CC2               	goto	l3943
  7864     04BA                     l3941:
  7865     04BA  3000               	movlw	0
  7866     04BB  00AC               	movwf	___flmul@b+3
  7867     04BC  3000               	movlw	0
  7868     04BD  00AB               	movwf	___flmul@b+2
  7869     04BE  3000               	movlw	0
  7870     04BF  00AA               	movwf	___flmul@b+1
  7871     04C0  3000               	movlw	0
  7872     04C1  00A9               	movwf	___flmul@b
  7873     04C2                     l3943:
  7874     04C2  0830               	movf	___flmul@a+3,w
  7875     04C3  3980               	andlw	128
  7876     04C4  00B1               	movwf	??___flmul
  7877     04C5  0831               	movf	??___flmul,w
  7878     04C6  06B6               	xorwf	___flmul@sign,f
  7879     04C7  3530               	lslf	___flmul@a+3,w
  7880     04C8  00B7               	movwf	___flmul@aexp
  7881     04C9  1BAF               	btfsc	___flmul@a+2,7
  7882     04CA  1437               	bsf	___flmul@aexp,0
  7883     04CB  0837               	movf	___flmul@aexp,w
  7884     04CC  1903               	btfsc	3,2
  7885     04CD  2CDB               	goto	l3959
  7886     04CE  0A37               	incf	___flmul@aexp,w
  7887     04CF  1D03               	btfss	3,2
  7888     04D0  2CD9               	goto	l3957
  7889     04D1  3000               	movlw	0
  7890     04D2  00B0               	movwf	___flmul@a+3
  7891     04D3  3000               	movlw	0
  7892     04D4  00AF               	movwf	___flmul@a+2
  7893     04D5  3000               	movlw	0
  7894     04D6  00AE               	movwf	___flmul@a+1
  7895     04D7  3000               	movlw	0
  7896     04D8  00AD               	movwf	___flmul@a
  7897     04D9                     l3957:
  7898     04D9  17AF               	bsf	___flmul@a+2,7
  7899     04DA  2CE3               	goto	l3961
  7900     04DB                     l3959:
  7901     04DB  3000               	movlw	0
  7902     04DC  00B0               	movwf	___flmul@a+3
  7903     04DD  3000               	movlw	0
  7904     04DE  00AF               	movwf	___flmul@a+2
  7905     04DF  3000               	movlw	0
  7906     04E0  00AE               	movwf	___flmul@a+1
  7907     04E1  3000               	movlw	0
  7908     04E2  00AD               	movwf	___flmul@a
  7909     04E3                     l3961:
  7910     04E3  0837               	movf	___flmul@aexp,w
  7911     04E4  1D03               	btfss	3,2
  7912     04E5  083C               	movf	___flmul@bexp,w
  7913     04E6  1D03               	btfss	3,2
  7914     04E7  2CF1               	goto	l3969
  7915     04E8  3000               	movlw	0
  7916     04E9  00AC               	movwf	?___flmul+3
  7917     04EA  3000               	movlw	0
  7918     04EB  00AB               	movwf	?___flmul+2
  7919     04EC  3000               	movlw	0
  7920     04ED  00AA               	movwf	?___flmul+1
  7921     04EE  3000               	movlw	0
  7922     04EF  00A9               	movwf	?___flmul
  7923     04F0  0008               	return
  7924     04F1                     l3969:
  7925     04F1  0829               	movf	___flmul@b,w
  7926     04F2  00A0               	movwf	__Umul8_16@multiplicand
  7927     04F3  082F               	movf	___flmul@a+2,w
  7928     04F4  319D  255F  3184   	fcall	__Umul8_16
  7929     04F7  0821               	movf	?__Umul8_16+1,w
  7930     04F8  00C2               	movwf	___flmul@temp+1
  7931     04F9  0820               	movf	?__Umul8_16,w
  7932     04FA  00C1               	movwf	___flmul@temp
  7933     04FB  0841               	movf	___flmul@temp,w
  7934     04FC  00B1               	movwf	??___flmul
  7935     04FD  01B2               	clrf	??___flmul+1
  7936     04FE  01B3               	clrf	??___flmul+2
  7937     04FF  01B4               	clrf	??___flmul+3
  7938     0500  0834               	movf	??___flmul+3,w
  7939     0501  00BB               	movwf	___flmul@grs+3
  7940     0502  0833               	movf	??___flmul+2,w
  7941     0503  00BA               	movwf	___flmul@grs+2
  7942     0504  0832               	movf	??___flmul+1,w
  7943     0505  00B9               	movwf	___flmul@grs+1
  7944     0506  0831               	movf	??___flmul,w
  7945     0507  00B8               	movwf	___flmul@grs
  7946     0508  0842               	movf	___flmul@temp+1,w
  7947     0509  00B1               	movwf	??___flmul
  7948     050A  01B2               	clrf	??___flmul+1
  7949     050B  01B3               	clrf	??___flmul+2
  7950     050C  01B4               	clrf	??___flmul+3
  7951     050D  0834               	movf	??___flmul+3,w
  7952     050E  00C0               	movwf	___flmul@prod+3
  7953     050F  0833               	movf	??___flmul+2,w
  7954     0510  00BF               	movwf	___flmul@prod+2
  7955     0511  0832               	movf	??___flmul+1,w
  7956     0512  00BE               	movwf	___flmul@prod+1
  7957     0513  0831               	movf	??___flmul,w
  7958     0514  00BD               	movwf	___flmul@prod
  7959     0515  082A               	movf	___flmul@b+1,w
  7960     0516  00A0               	movwf	__Umul8_16@multiplicand
  7961     0517  082E               	movf	___flmul@a+1,w
  7962     0518  319D  255F  3184   	fcall	__Umul8_16
  7963     051B  0821               	movf	?__Umul8_16+1,w
  7964     051C  00C2               	movwf	___flmul@temp+1
  7965     051D  0820               	movf	?__Umul8_16,w
  7966     051E  00C1               	movwf	___flmul@temp
  7967     051F  0841               	movf	___flmul@temp,w
  7968     0520  00B1               	movwf	??___flmul
  7969     0521  01B2               	clrf	??___flmul+1
  7970     0522  01B3               	clrf	??___flmul+2
  7971     0523  01B4               	clrf	??___flmul+3
  7972     0524  0831               	movf	??___flmul,w
  7973     0525  07B8               	addwf	___flmul@grs,f
  7974     0526  0832               	movf	??___flmul+1,w
  7975     0527  3DB9               	addwfc	___flmul@grs+1,f
  7976     0528  0833               	movf	??___flmul+2,w
  7977     0529  3DBA               	addwfc	___flmul@grs+2,f
  7978     052A  0834               	movf	??___flmul+3,w
  7979     052B  3DBB               	addwfc	___flmul@grs+3,f
  7980     052C  0842               	movf	___flmul@temp+1,w
  7981     052D  00B1               	movwf	??___flmul
  7982     052E  01B2               	clrf	??___flmul+1
  7983     052F  01B3               	clrf	??___flmul+2
  7984     0530  01B4               	clrf	??___flmul+3
  7985     0531  0831               	movf	??___flmul,w
  7986     0532  07BD               	addwf	___flmul@prod,f
  7987     0533  0832               	movf	??___flmul+1,w
  7988     0534  3DBE               	addwfc	___flmul@prod+1,f
  7989     0535  0833               	movf	??___flmul+2,w
  7990     0536  3DBF               	addwfc	___flmul@prod+2,f
  7991     0537  0834               	movf	??___flmul+3,w
  7992     0538  3DC0               	addwfc	___flmul@prod+3,f
  7993     0539  082B               	movf	___flmul@b+2,w
  7994     053A  00A0               	movwf	__Umul8_16@multiplicand
  7995     053B  082D               	movf	___flmul@a,w
  7996     053C  319D  255F  3184   	fcall	__Umul8_16
  7997     053F  0821               	movf	?__Umul8_16+1,w
  7998     0540  00C2               	movwf	___flmul@temp+1
  7999     0541  0820               	movf	?__Umul8_16,w
  8000     0542  00C1               	movwf	___flmul@temp
  8001     0543  0841               	movf	___flmul@temp,w
  8002     0544  00B1               	movwf	??___flmul
  8003     0545  01B2               	clrf	??___flmul+1
  8004     0546  01B3               	clrf	??___flmul+2
  8005     0547  01B4               	clrf	??___flmul+3
  8006     0548  0831               	movf	??___flmul,w
  8007     0549  07B8               	addwf	___flmul@grs,f
  8008     054A  0832               	movf	??___flmul+1,w
  8009     054B  3DB9               	addwfc	___flmul@grs+1,f
  8010     054C  0833               	movf	??___flmul+2,w
  8011     054D  3DBA               	addwfc	___flmul@grs+2,f
  8012     054E  0834               	movf	??___flmul+3,w
  8013     054F  3DBB               	addwfc	___flmul@grs+3,f
  8014     0550  0842               	movf	___flmul@temp+1,w
  8015     0551  00B1               	movwf	??___flmul
  8016     0552  01B2               	clrf	??___flmul+1
  8017     0553  01B3               	clrf	??___flmul+2
  8018     0554  01B4               	clrf	??___flmul+3
  8019     0555  0831               	movf	??___flmul,w
  8020     0556  07BD               	addwf	___flmul@prod,f
  8021     0557  0832               	movf	??___flmul+1,w
  8022     0558  3DBE               	addwfc	___flmul@prod+1,f
  8023     0559  0833               	movf	??___flmul+2,w
  8024     055A  3DBF               	addwfc	___flmul@prod+2,f
  8025     055B  0834               	movf	??___flmul+3,w
  8026     055C  3DC0               	addwfc	___flmul@prod+3,f
  8027     055D  3008               	movlw	8
  8028     055E                     u4585:
  8029     055E  35B8               	lslf	___flmul@grs,f
  8030     055F  0DB9               	rlf	___flmul@grs+1,f
  8031     0560  0DBA               	rlf	___flmul@grs+2,f
  8032     0561  0DBB               	rlf	___flmul@grs+3,f
  8033     0562  0B89               	decfsz	9,f
  8034     0563  2D5E               	goto	u4585
  8035     0564  082A               	movf	___flmul@b+1,w
  8036     0565  00A0               	movwf	__Umul8_16@multiplicand
  8037     0566  082D               	movf	___flmul@a,w
  8038     0567  319D  255F  3184   	fcall	__Umul8_16
  8039     056A  0821               	movf	?__Umul8_16+1,w
  8040     056B  00C2               	movwf	___flmul@temp+1
  8041     056C  0820               	movf	?__Umul8_16,w
  8042     056D  00C1               	movwf	___flmul@temp
  8043     056E  0841               	movf	___flmul@temp,w
  8044     056F  07B8               	addwf	___flmul@grs,f
  8045     0570  0842               	movf	___flmul@temp+1,w
  8046     0571  3DB9               	addwfc	___flmul@grs+1,f
  8047     0572  3000               	movlw	0
  8048     0573  3DBA               	addwfc	___flmul@grs+2,f
  8049     0574  3DBB               	addwfc	___flmul@grs+3,f
  8050     0575  0829               	movf	___flmul@b,w
  8051     0576  00A0               	movwf	__Umul8_16@multiplicand
  8052     0577  082E               	movf	___flmul@a+1,w
  8053     0578  319D  255F  3184   	fcall	__Umul8_16
  8054     057B  0821               	movf	?__Umul8_16+1,w
  8055     057C  00C2               	movwf	___flmul@temp+1
  8056     057D  0820               	movf	?__Umul8_16,w
  8057     057E  00C1               	movwf	___flmul@temp
  8058     057F  0841               	movf	___flmul@temp,w
  8059     0580  07B8               	addwf	___flmul@grs,f
  8060     0581  0842               	movf	___flmul@temp+1,w
  8061     0582  3DB9               	addwfc	___flmul@grs+1,f
  8062     0583  3000               	movlw	0
  8063     0584  3DBA               	addwfc	___flmul@grs+2,f
  8064     0585  3DBB               	addwfc	___flmul@grs+3,f
  8065     0586  3008               	movlw	8
  8066     0587                     u4595:
  8067     0587  35B8               	lslf	___flmul@grs,f
  8068     0588  0DB9               	rlf	___flmul@grs+1,f
  8069     0589  0DBA               	rlf	___flmul@grs+2,f
  8070     058A  0DBB               	rlf	___flmul@grs+3,f
  8071     058B  0B89               	decfsz	9,f
  8072     058C  2D87               	goto	u4595
  8073     058D  0829               	movf	___flmul@b,w
  8074     058E  00A0               	movwf	__Umul8_16@multiplicand
  8075     058F  082D               	movf	___flmul@a,w
  8076     0590  319D  255F  3184   	fcall	__Umul8_16
  8077     0593  0821               	movf	?__Umul8_16+1,w
  8078     0594  00C2               	movwf	___flmul@temp+1
  8079     0595  0820               	movf	?__Umul8_16,w
  8080     0596  00C1               	movwf	___flmul@temp
  8081     0597  0841               	movf	___flmul@temp,w
  8082     0598  07B8               	addwf	___flmul@grs,f
  8083     0599  0842               	movf	___flmul@temp+1,w
  8084     059A  3DB9               	addwfc	___flmul@grs+1,f
  8085     059B  3000               	movlw	0
  8086     059C  3DBA               	addwfc	___flmul@grs+2,f
  8087     059D  3DBB               	addwfc	___flmul@grs+3,f
  8088     059E  082A               	movf	___flmul@b+1,w
  8089     059F  00A0               	movwf	__Umul8_16@multiplicand
  8090     05A0  082F               	movf	___flmul@a+2,w
  8091     05A1  319D  255F  3184   	fcall	__Umul8_16
  8092     05A4  0821               	movf	?__Umul8_16+1,w
  8093     05A5  00C2               	movwf	___flmul@temp+1
  8094     05A6  0820               	movf	?__Umul8_16,w
  8095     05A7  00C1               	movwf	___flmul@temp
  8096     05A8  0841               	movf	___flmul@temp,w
  8097     05A9  07BD               	addwf	___flmul@prod,f
  8098     05AA  0842               	movf	___flmul@temp+1,w
  8099     05AB  3DBE               	addwfc	___flmul@prod+1,f
  8100     05AC  3000               	movlw	0
  8101     05AD  3DBF               	addwfc	___flmul@prod+2,f
  8102     05AE  3DC0               	addwfc	___flmul@prod+3,f
  8103     05AF  082B               	movf	___flmul@b+2,w
  8104     05B0  00A0               	movwf	__Umul8_16@multiplicand
  8105     05B1  082E               	movf	___flmul@a+1,w
  8106     05B2  319D  255F  3184   	fcall	__Umul8_16
  8107     05B5  0821               	movf	?__Umul8_16+1,w
  8108     05B6  00C2               	movwf	___flmul@temp+1
  8109     05B7  0820               	movf	?__Umul8_16,w
  8110     05B8  00C1               	movwf	___flmul@temp
  8111     05B9  0841               	movf	___flmul@temp,w
  8112     05BA  07BD               	addwf	___flmul@prod,f
  8113     05BB  0842               	movf	___flmul@temp+1,w
  8114     05BC  3DBE               	addwfc	___flmul@prod+1,f
  8115     05BD  3000               	movlw	0
  8116     05BE  3DBF               	addwfc	___flmul@prod+2,f
  8117     05BF  3DC0               	addwfc	___flmul@prod+3,f
  8118     05C0  082B               	movf	___flmul@b+2,w
  8119     05C1  00A0               	movwf	__Umul8_16@multiplicand
  8120     05C2  082F               	movf	___flmul@a+2,w
  8121     05C3  319D  255F  3184   	fcall	__Umul8_16
  8122     05C6  0821               	movf	?__Umul8_16+1,w
  8123     05C7  00C2               	movwf	___flmul@temp+1
  8124     05C8  0820               	movf	?__Umul8_16,w
  8125     05C9  00C1               	movwf	___flmul@temp
  8126     05CA  0841               	movf	___flmul@temp,w
  8127     05CB  00B1               	movwf	??___flmul
  8128     05CC  0842               	movf	___flmul@temp+1,w
  8129     05CD  00B2               	movwf	??___flmul+1
  8130     05CE  01B3               	clrf	??___flmul+2
  8131     05CF  01B4               	clrf	??___flmul+3
  8132     05D0  3008               	movlw	8
  8133     05D1                     u4605:
  8134     05D1  35B1               	lslf	??___flmul,f
  8135     05D2  0DB2               	rlf	??___flmul+1,f
  8136     05D3  0DB3               	rlf	??___flmul+2,f
  8137     05D4  0DB4               	rlf	??___flmul+3,f
  8138     05D5  0B89               	decfsz	9,f
  8139     05D6  2DD1               	goto	u4605
  8140     05D7  0831               	movf	??___flmul,w
  8141     05D8  07BD               	addwf	___flmul@prod,f
  8142     05D9  0832               	movf	??___flmul+1,w
  8143     05DA  3DBE               	addwfc	___flmul@prod+1,f
  8144     05DB  0833               	movf	??___flmul+2,w
  8145     05DC  3DBF               	addwfc	___flmul@prod+2,f
  8146     05DD  0834               	movf	??___flmul+3,w
  8147     05DE  3DC0               	addwfc	___flmul@prod+3,f
  8148     05DF  083B               	movf	___flmul@grs+3,w
  8149     05E0  00B1               	movwf	??___flmul
  8150     05E1  01B2               	clrf	??___flmul+1
  8151     05E2  01B3               	clrf	??___flmul+2
  8152     05E3  01B4               	clrf	??___flmul+3
  8153     05E4  0831               	movf	??___flmul,w
  8154     05E5  07BD               	addwf	___flmul@prod,f
  8155     05E6  0832               	movf	??___flmul+1,w
  8156     05E7  3DBE               	addwfc	___flmul@prod+1,f
  8157     05E8  0833               	movf	??___flmul+2,w
  8158     05E9  3DBF               	addwfc	___flmul@prod+2,f
  8159     05EA  0834               	movf	??___flmul+3,w
  8160     05EB  3DC0               	addwfc	___flmul@prod+3,f
  8161     05EC  3008               	movlw	8
  8162     05ED                     u4615:
  8163     05ED  35B8               	lslf	___flmul@grs,f
  8164     05EE  0DB9               	rlf	___flmul@grs+1,f
  8165     05EF  0DBA               	rlf	___flmul@grs+2,f
  8166     05F0  0DBB               	rlf	___flmul@grs+3,f
  8167     05F1  0B89               	decfsz	9,f
  8168     05F2  2DED               	goto	u4615
  8169     05F3  083C               	movf	___flmul@bexp,w
  8170     05F4  0737               	addwf	___flmul@aexp,w
  8171     05F5  00B1               	movwf	??___flmul
  8172     05F6  01B2               	clrf	??___flmul+1
  8173     05F7  0DB2               	rlf	??___flmul+1,f
  8174     05F8  0831               	movf	??___flmul,w
  8175     05F9  3E82               	addlw	130
  8176     05FA  00C1               	movwf	___flmul@temp
  8177     05FB  30FF               	movlw	255
  8178     05FC  3D32               	addwfc	??___flmul+1,w
  8179     05FD  00C2               	movwf	___flmul@temp+1
  8180     05FE                     l4021:
  8181     05FE  1BBF               	btfsc	___flmul@prod+2,7
  8182     05FF  2E15               	goto	l4023
  8183     0600  3001               	movlw	1
  8184     0601                     u4625:
  8185     0601  35BD               	lslf	___flmul@prod,f
  8186     0602  0DBE               	rlf	___flmul@prod+1,f
  8187     0603  0DBF               	rlf	___flmul@prod+2,f
  8188     0604  0DC0               	rlf	___flmul@prod+3,f
  8189     0605  0B89               	decfsz	9,f
  8190     0606  2E01               	goto	u4625
  8191     0607  1BBB               	btfsc	___flmul@grs+3,7
  8192     0608  143D               	bsf	___flmul@prod,0
  8193     0609  3001               	movlw	1
  8194     060A                     u4645:
  8195     060A  35B8               	lslf	___flmul@grs,f
  8196     060B  0DB9               	rlf	___flmul@grs+1,f
  8197     060C  0DBA               	rlf	___flmul@grs+2,f
  8198     060D  0DBB               	rlf	___flmul@grs+3,f
  8199     060E  0B89               	decfsz	9,f
  8200     060F  2E0A               	goto	u4645
  8201     0610  30FF               	movlw	255
  8202     0611  07C1               	addwf	___flmul@temp,f
  8203     0612  30FF               	movlw	255
  8204     0613  3DC2               	addwfc	___flmul@temp+1,f
  8205     0614  2DFE               	goto	l4021
  8206     0615                     l4023:
  8207     0615  01B7               	clrf	___flmul@aexp
  8208     0616  1FBB               	btfss	___flmul@grs+3,7
  8209     0617  2E2E               	goto	l4033
  8210     0618  30FF               	movlw	255
  8211     0619  0538               	andwf	___flmul@grs,w
  8212     061A  00B1               	movwf	??___flmul
  8213     061B  30FF               	movlw	255
  8214     061C  0539               	andwf	___flmul@grs+1,w
  8215     061D  00B2               	movwf	??___flmul+1
  8216     061E  30FF               	movlw	255
  8217     061F  053A               	andwf	___flmul@grs+2,w
  8218     0620  00B3               	movwf	??___flmul+2
  8219     0621  307F               	movlw	127
  8220     0622  053B               	andwf	___flmul@grs+3,w
  8221     0623  00B4               	movwf	??___flmul+3
  8222     0624  0834               	movf	??___flmul+3,w
  8223     0625  0433               	iorwf	??___flmul+2,w
  8224     0626  0432               	iorwf	??___flmul+1,w
  8225     0627  0431               	iorwf	??___flmul,w
  8226     0628  1903               	skipnz
  8227     0629  183D               	btfsc	___flmul@prod,0
  8228     062A  2E2C               	goto	l4029
  8229     062B  2E2E               	goto	l4033
  8230     062C                     l4029:
  8231     062C  01B7               	clrf	___flmul@aexp
  8232     062D  0AB7               	incf	___flmul@aexp,f
  8233     062E                     l4033:
  8234     062E  0837               	movf	___flmul@aexp,w
  8235     062F  1903               	btfsc	3,2
  8236     0630  2E57               	goto	l4043
  8237     0631  3001               	movlw	1
  8238     0632  07BD               	addwf	___flmul@prod,f
  8239     0633  3000               	movlw	0
  8240     0634  3DBE               	addwfc	___flmul@prod+1,f
  8241     0635  3000               	movlw	0
  8242     0636  3DBF               	addwfc	___flmul@prod+2,f
  8243     0637  3000               	movlw	0
  8244     0638  3DC0               	addwfc	___flmul@prod+3,f
  8245     0639  1C40               	btfss	___flmul@prod+3,0
  8246     063A  2E57               	goto	l4043
  8247     063B  083D               	movf	___flmul@prod,w
  8248     063C  00B1               	movwf	??___flmul
  8249     063D  083E               	movf	___flmul@prod+1,w
  8250     063E  00B2               	movwf	??___flmul+1
  8251     063F  083F               	movf	___flmul@prod+2,w
  8252     0640  00B3               	movwf	??___flmul+2
  8253     0641  0840               	movf	___flmul@prod+3,w
  8254     0642  00B4               	movwf	??___flmul+3
  8255     0643  3001               	movlw	1
  8256     0644  00B5               	movwf	??___flmul+4
  8257     0645                     u4715:
  8258     0645  37B4               	asrf	??___flmul+3,f
  8259     0646  0CB3               	rrf	??___flmul+2,f
  8260     0647  0CB2               	rrf	??___flmul+1,f
  8261     0648  0CB1               	rrf	??___flmul,f
  8262     0649  0BB5               	decfsz	??___flmul+4,f
  8263     064A  2E45               	goto	u4715
  8264     064B  0834               	movf	??___flmul+3,w
  8265     064C  00C0               	movwf	___flmul@prod+3
  8266     064D  0833               	movf	??___flmul+2,w
  8267     064E  00BF               	movwf	___flmul@prod+2
  8268     064F  0832               	movf	??___flmul+1,w
  8269     0650  00BE               	movwf	___flmul@prod+1
  8270     0651  0831               	movf	??___flmul,w
  8271     0652  00BD               	movwf	___flmul@prod
  8272     0653  3001               	movlw	1
  8273     0654  07C1               	addwf	___flmul@temp,f
  8274     0655  3000               	movlw	0
  8275     0656  3DC2               	addwfc	___flmul@temp+1,f
  8276     0657                     l4043:
  8277     0657  0842               	movf	___flmul@temp+1,w
  8278     0658  3A80               	xorlw	128
  8279     0659  00B1               	movwf	??___flmul
  8280     065A  3080               	movlw	128
  8281     065B  0231               	subwf	??___flmul,w
  8282     065C  1D03               	skipz
  8283     065D  2E60               	goto	u4725
  8284     065E  30FF               	movlw	255
  8285     065F  0241               	subwf	___flmul@temp,w
  8286     0660                     u4725:
  8287     0660  1C03               	skipc
  8288     0661  2E6C               	goto	l4047
  8289     0662  307F               	movlw	127
  8290     0663  0020               	movlb	0	; select bank0
  8291     0664  00C0               	movwf	___flmul@prod+3
  8292     0665  3080               	movlw	128
  8293     0666  00BF               	movwf	___flmul@prod+2
  8294     0667  3000               	movlw	0
  8295     0668  00BE               	movwf	___flmul@prod+1
  8296     0669  3000               	movlw	0
  8297     066A  00BD               	movwf	___flmul@prod
  8298     066B  2E92               	goto	l975
  8299     066C                     l4047:
  8300     066C  0020               	movlb	0	; select bank0
  8301     066D  0842               	movf	___flmul@temp+1,w
  8302     066E  3A80               	xorlw	128
  8303     066F  00B1               	movwf	??___flmul
  8304     0670  3080               	movlw	128
  8305     0671  0231               	subwf	??___flmul,w
  8306     0672  1D03               	skipz
  8307     0673  2E76               	goto	u4735
  8308     0674  3001               	movlw	1
  8309     0675  0241               	subwf	___flmul@temp,w
  8310     0676                     u4735:
  8311     0676  1803               	skipnc
  8312     0677  2E83               	goto	l4053
  8313     0678  3000               	movlw	0
  8314     0679  0020               	movlb	0	; select bank0
  8315     067A  00C0               	movwf	___flmul@prod+3
  8316     067B  3000               	movlw	0
  8317     067C  00BF               	movwf	___flmul@prod+2
  8318     067D  3000               	movlw	0
  8319     067E  00BE               	movwf	___flmul@prod+1
  8320     067F  3000               	movlw	0
  8321     0680  00BD               	movwf	___flmul@prod
  8322     0681  01B6               	clrf	___flmul@sign
  8323     0682  2E92               	goto	l975
  8324     0683                     l4053:
  8325     0683  0020               	movlb	0	; select bank0
  8326     0684  0841               	movf	___flmul@temp,w
  8327     0685  00BC               	movwf	___flmul@bexp
  8328     0686  30FF               	movlw	255
  8329     0687  05BD               	andwf	___flmul@prod,f
  8330     0688  30FF               	movlw	255
  8331     0689  05BE               	andwf	___flmul@prod+1,f
  8332     068A  307F               	movlw	127
  8333     068B  05BF               	andwf	___flmul@prod+2,f
  8334     068C  3000               	movlw	0
  8335     068D  05C0               	andwf	___flmul@prod+3,f
  8336     068E  183C               	btfsc	___flmul@bexp,0
  8337     068F  17BF               	bsf	___flmul@prod+2,7
  8338     0690  363C               	lsrf	___flmul@bexp,w
  8339     0691  00C0               	movwf	___flmul@prod+3
  8340     0692                     l975:
  8341     0692  0836               	movf	___flmul@sign,w
  8342     0693  00B1               	movwf	??___flmul
  8343     0694  0831               	movf	??___flmul,w
  8344     0695  04C0               	iorwf	___flmul@prod+3,f
  8345     0696  0840               	movf	___flmul@prod+3,w
  8346     0697  00AC               	movwf	?___flmul+3
  8347     0698  083F               	movf	___flmul@prod+2,w
  8348     0699  00AB               	movwf	?___flmul+2
  8349     069A  083E               	movf	___flmul@prod+1,w
  8350     069B  00AA               	movwf	?___flmul+1
  8351     069C  083D               	movf	___flmul@prod,w
  8352     069D  00A9               	movwf	?___flmul
  8353     069E  0008               	return
  8354     069F                     __end_of___flmul:
  8355                           
  8356                           	psect	text17
  8357     1D5F                     __ptext17:	
  8358 ;; *************** function __Umul8_16 *****************
  8359 ;; Defined at:
  8360 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul8_16.c"
  8361 ;; Parameters:    Size  Location     Type
  8362 ;;  multiplier      1    wreg     unsigned char 
  8363 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8364 ;; Auto vars:     Size  Location     Type
  8365 ;;  multiplier      1    8[BANK0 ] unsigned char 
  8366 ;;  word_mpld       2    6[BANK0 ] unsigned short 
  8367 ;;  product         2    4[BANK0 ] unsigned short 
  8368 ;; Return value:  Size  Location     Type
  8369 ;;                  2    0[BANK0 ] unsigned int 
  8370 ;; Registers used:
  8371 ;;		wreg, status,2, status,0
  8372 ;; Tracked objects:
  8373 ;;		On entry : 1F/0
  8374 ;;		On exit  : 1F/0
  8375 ;;		Unchanged: 0/0
  8376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8377 ;;      Params:         0       2       0       0       0       0       0       0
  8378 ;;      Locals:         0       5       0       0       0       0       0       0
  8379 ;;      Temps:          0       2       0       0       0       0       0       0
  8380 ;;      Totals:         0       9       0       0       0       0       0       0
  8381 ;;Total ram usage:        9 bytes
  8382 ;; Hardware stack levels used: 1
  8383 ;; Hardware stack levels required when called: 4
  8384 ;; This function calls:
  8385 ;;		Nothing
  8386 ;; This function is called by:
  8387 ;;		___flmul
  8388 ;; This function uses a non-reentrant model
  8389 ;;
  8390                           
  8391     1D5F                     __Umul8_16:	
  8392                           ;psect for function __Umul8_16
  8393                           
  8394                           
  8395                           ;incstack = 0
  8396                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  8397                           ;__Umul8_16@multiplier stored from wreg
  8398     1D5F  00A8               	movwf	__Umul8_16@multiplier
  8399     1D60  01A4               	clrf	__Umul8_16@product
  8400     1D61  01A5               	clrf	__Umul8_16@product+1
  8401     1D62  0820               	movf	__Umul8_16@multiplicand,w
  8402     1D63  00A2               	movwf	??__Umul8_16
  8403     1D64  01A3               	clrf	??__Umul8_16+1
  8404     1D65  0822               	movf	??__Umul8_16,w
  8405     1D66  00A6               	movwf	__Umul8_16@word_mpld
  8406     1D67  0823               	movf	??__Umul8_16+1,w
  8407     1D68  00A7               	movwf	__Umul8_16@word_mpld+1
  8408     1D69                     l3589:
  8409     1D69  1C28               	btfss	__Umul8_16@multiplier,0
  8410     1D6A  2D6F               	goto	l982
  8411     1D6B  0826               	movf	__Umul8_16@word_mpld,w
  8412     1D6C  07A4               	addwf	__Umul8_16@product,f
  8413     1D6D  0827               	movf	__Umul8_16@word_mpld+1,w
  8414     1D6E  3DA5               	addwfc	__Umul8_16@product+1,f
  8415     1D6F                     l982:
  8416     1D6F  3001               	movlw	1
  8417     1D70                     u3765:
  8418     1D70  35A6               	lslf	__Umul8_16@word_mpld,f
  8419     1D71  0DA7               	rlf	__Umul8_16@word_mpld+1,f
  8420     1D72  0B89               	decfsz	9,f
  8421     1D73  2D70               	goto	u3765
  8422     1D74  1003               	clrc
  8423     1D75  0CA8               	rrf	__Umul8_16@multiplier,f
  8424     1D76  0828               	movf	__Umul8_16@multiplier,w
  8425     1D77  1D03               	btfss	3,2
  8426     1D78  2D69               	goto	l3589
  8427     1D79  0825               	movf	__Umul8_16@product+1,w
  8428     1D7A  00A1               	movwf	?__Umul8_16+1
  8429     1D7B  0824               	movf	__Umul8_16@product,w
  8430     1D7C  00A0               	movwf	?__Umul8_16
  8431     1D7D  0008               	return
  8432     1D7E                     __end_of__Umul8_16:
  8433                           
  8434                           	psect	text18
  8435     1222                     __ptext18:	
  8436 ;; *************** function ___flge *****************
  8437 ;; Defined at:
  8438 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;  ff1             4   35[BANK0 ] unsigned int 
  8441 ;;  ff2             4   39[BANK0 ] unsigned int 
  8442 ;; Auto vars:     Size  Location     Type
  8443 ;;		None
  8444 ;; Return value:  Size  Location     Type
  8445 ;;		None               void
  8446 ;; Registers used:
  8447 ;;		wreg, status,2, status,0
  8448 ;; Tracked objects:
  8449 ;;		On entry : 1F/0
  8450 ;;		On exit  : 1F/0
  8451 ;;		Unchanged: 0/0
  8452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8453 ;;      Params:         0       8       0       0       0       0       0       0
  8454 ;;      Locals:         0       0       0       0       0       0       0       0
  8455 ;;      Temps:          0       4       0       0       0       0       0       0
  8456 ;;      Totals:         0      12       0       0       0       0       0       0
  8457 ;;Total ram usage:       12 bytes
  8458 ;; Hardware stack levels used: 1
  8459 ;; Hardware stack levels required when called: 4
  8460 ;; This function calls:
  8461 ;;		Nothing
  8462 ;; This function is called by:
  8463 ;;		_efgtoa
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467     1222                     ___flge:	
  8468                           ;psect for function ___flge
  8469                           
  8470                           
  8471                           ;incstack = 0
  8472                           ; Regs used in ___flge: [wreg+status,2+status,0]
  8473     1222  3000               	movlw	0
  8474     1223  0543               	andwf	___flge@ff1,w
  8475     1224  00CB               	movwf	??___flge
  8476     1225  3000               	movlw	0
  8477     1226  0544               	andwf	___flge@ff1+1,w
  8478     1227  00CC               	movwf	??___flge+1
  8479     1228  3080               	movlw	128
  8480     1229  0545               	andwf	___flge@ff1+2,w
  8481     122A  00CD               	movwf	??___flge+2
  8482     122B  307F               	movlw	127
  8483     122C  0546               	andwf	___flge@ff1+3,w
  8484     122D  00CE               	movwf	??___flge+3
  8485     122E  084E               	movf	??___flge+3,w
  8486     122F  044D               	iorwf	??___flge+2,w
  8487     1230  044C               	iorwf	??___flge+1,w
  8488     1231  044B               	iorwf	??___flge,w
  8489     1232  1D03               	skipz
  8490     1233  2A3C               	goto	l744
  8491     1234  3000               	movlw	0
  8492     1235  00C6               	movwf	___flge@ff1+3
  8493     1236  3000               	movlw	0
  8494     1237  00C5               	movwf	___flge@ff1+2
  8495     1238  3000               	movlw	0
  8496     1239  00C4               	movwf	___flge@ff1+1
  8497     123A  3000               	movlw	0
  8498     123B  00C3               	movwf	___flge@ff1
  8499     123C                     l744:
  8500     123C  3000               	movlw	0
  8501     123D  0547               	andwf	___flge@ff2,w
  8502     123E  00CB               	movwf	??___flge
  8503     123F  3000               	movlw	0
  8504     1240  0548               	andwf	___flge@ff2+1,w
  8505     1241  00CC               	movwf	??___flge+1
  8506     1242  3080               	movlw	128
  8507     1243  0549               	andwf	___flge@ff2+2,w
  8508     1244  00CD               	movwf	??___flge+2
  8509     1245  307F               	movlw	127
  8510     1246  054A               	andwf	___flge@ff2+3,w
  8511     1247  00CE               	movwf	??___flge+3
  8512     1248  084E               	movf	??___flge+3,w
  8513     1249  044D               	iorwf	??___flge+2,w
  8514     124A  044C               	iorwf	??___flge+1,w
  8515     124B  044B               	iorwf	??___flge,w
  8516     124C  1D03               	skipz
  8517     124D  2A56               	goto	l3721
  8518     124E  3000               	movlw	0
  8519     124F  00CA               	movwf	___flge@ff2+3
  8520     1250  3000               	movlw	0
  8521     1251  00C9               	movwf	___flge@ff2+2
  8522     1252  3000               	movlw	0
  8523     1253  00C8               	movwf	___flge@ff2+1
  8524     1254  3000               	movlw	0
  8525     1255  00C7               	movwf	___flge@ff2
  8526     1256                     l3721:
  8527     1256  1FC6               	btfss	___flge@ff1+3,7
  8528     1257  2A70               	goto	l3725
  8529     1258  3000               	movlw	0
  8530     1259  00CB               	movwf	??___flge
  8531     125A  3000               	movlw	0
  8532     125B  00CC               	movwf	??___flge+1
  8533     125C  3000               	movlw	0
  8534     125D  00CD               	movwf	??___flge+2
  8535     125E  3080               	movlw	128
  8536     125F  00CE               	movwf	??___flge+3
  8537     1260  0843               	movf	___flge@ff1,w
  8538     1261  02CB               	subwf	??___flge,f
  8539     1262  0844               	movf	___flge@ff1+1,w
  8540     1263  3BCC               	subwfb	??___flge+1,f
  8541     1264  0845               	movf	___flge@ff1+2,w
  8542     1265  3BCD               	subwfb	??___flge+2,f
  8543     1266  0846               	movf	___flge@ff1+3,w
  8544     1267  3BCE               	subwfb	??___flge+3,f
  8545     1268  084E               	movf	??___flge+3,w
  8546     1269  00C6               	movwf	___flge@ff1+3
  8547     126A  084D               	movf	??___flge+2,w
  8548     126B  00C5               	movwf	___flge@ff1+2
  8549     126C  084C               	movf	??___flge+1,w
  8550     126D  00C4               	movwf	___flge@ff1+1
  8551     126E  084B               	movf	??___flge,w
  8552     126F  00C3               	movwf	___flge@ff1
  8553     1270                     l3725:
  8554     1270  1FCA               	btfss	___flge@ff2+3,7
  8555     1271  2A8A               	goto	l747
  8556     1272  3000               	movlw	0
  8557     1273  00CB               	movwf	??___flge
  8558     1274  3000               	movlw	0
  8559     1275  00CC               	movwf	??___flge+1
  8560     1276  3000               	movlw	0
  8561     1277  00CD               	movwf	??___flge+2
  8562     1278  3080               	movlw	128
  8563     1279  00CE               	movwf	??___flge+3
  8564     127A  0847               	movf	___flge@ff2,w
  8565     127B  02CB               	subwf	??___flge,f
  8566     127C  0848               	movf	___flge@ff2+1,w
  8567     127D  3BCC               	subwfb	??___flge+1,f
  8568     127E  0849               	movf	___flge@ff2+2,w
  8569     127F  3BCD               	subwfb	??___flge+2,f
  8570     1280  084A               	movf	___flge@ff2+3,w
  8571     1281  3BCE               	subwfb	??___flge+3,f
  8572     1282  084E               	movf	??___flge+3,w
  8573     1283  00CA               	movwf	___flge@ff2+3
  8574     1284  084D               	movf	??___flge+2,w
  8575     1285  00C9               	movwf	___flge@ff2+2
  8576     1286  084C               	movf	??___flge+1,w
  8577     1287  00C8               	movwf	___flge@ff2+1
  8578     1288  084B               	movf	??___flge,w
  8579     1289  00C7               	movwf	___flge@ff2
  8580     128A                     l747:
  8581     128A  3080               	movlw	128
  8582     128B  06C6               	xorwf	___flge@ff1+3,f
  8583     128C  3080               	movlw	128
  8584     128D  06CA               	xorwf	___flge@ff2+3,f
  8585     128E  084A               	movf	___flge@ff2+3,w
  8586     128F  0246               	subwf	___flge@ff1+3,w
  8587     1290  1D03               	skipz
  8588     1291  0008               	return
  8589     1292  0849               	movf	___flge@ff2+2,w
  8590     1293  0245               	subwf	___flge@ff1+2,w
  8591     1294  1D03               	skipz
  8592     1295  0008               	return
  8593     1296  0848               	movf	___flge@ff2+1,w
  8594     1297  0244               	subwf	___flge@ff1+1,w
  8595     1298  1D03               	skipz
  8596     1299  0008               	return
  8597     129A  0847               	movf	___flge@ff2,w
  8598     129B  0243               	subwf	___flge@ff1,w
  8599     129C  0008               	return
  8600     129D                     __end_of___flge:
  8601                           
  8602                           	psect	text19
  8603     07B3                     __ptext19:	
  8604 ;; *************** function ___fleq *****************
  8605 ;; Defined at:
  8606 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;  ff1             4    0[BANK0 ] unsigned int 
  8609 ;;  ff2             4    4[BANK0 ] unsigned int 
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;		None
  8612 ;; Return value:  Size  Location     Type
  8613 ;;		None               void
  8614 ;; Registers used:
  8615 ;;		wreg, status,2, status,0
  8616 ;; Tracked objects:
  8617 ;;		On entry : 1F/0
  8618 ;;		On exit  : 1F/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8621 ;;      Params:         0       8       0       0       0       0       0       0
  8622 ;;      Locals:         0       0       0       0       0       0       0       0
  8623 ;;      Temps:          0       4       0       0       0       0       0       0
  8624 ;;      Totals:         0      12       0       0       0       0       0       0
  8625 ;;Total ram usage:       12 bytes
  8626 ;; Hardware stack levels used: 1
  8627 ;; Hardware stack levels required when called: 4
  8628 ;; This function calls:
  8629 ;;		Nothing
  8630 ;; This function is called by:
  8631 ;;		_efgtoa
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635     07B3                     ___fleq:	
  8636                           ;psect for function ___fleq
  8637                           
  8638                           
  8639                           ;incstack = 0
  8640                           ; Regs used in ___fleq: [wreg+status,2+status,0]
  8641     07B3  3000               	movlw	0
  8642     07B4  0520               	andwf	___fleq@ff1,w
  8643     07B5  00A8               	movwf	??___fleq
  8644     07B6  3000               	movlw	0
  8645     07B7  0521               	andwf	___fleq@ff1+1,w
  8646     07B8  00A9               	movwf	??___fleq+1
  8647     07B9  3080               	movlw	128
  8648     07BA  0522               	andwf	___fleq@ff1+2,w
  8649     07BB  00AA               	movwf	??___fleq+2
  8650     07BC  307F               	movlw	127
  8651     07BD  0523               	andwf	___fleq@ff1+3,w
  8652     07BE  00AB               	movwf	??___fleq+3
  8653     07BF  082B               	movf	??___fleq+3,w
  8654     07C0  042A               	iorwf	??___fleq+2,w
  8655     07C1  0429               	iorwf	??___fleq+1,w
  8656     07C2  0428               	iorwf	??___fleq,w
  8657     07C3  1D03               	skipz
  8658     07C4  2FCD               	goto	l735
  8659     07C5  3000               	movlw	0
  8660     07C6  00A3               	movwf	___fleq@ff1+3
  8661     07C7  3000               	movlw	0
  8662     07C8  00A2               	movwf	___fleq@ff1+2
  8663     07C9  3000               	movlw	0
  8664     07CA  00A1               	movwf	___fleq@ff1+1
  8665     07CB  3000               	movlw	0
  8666     07CC  00A0               	movwf	___fleq@ff1
  8667     07CD                     l735:
  8668     07CD  3000               	movlw	0
  8669     07CE  0524               	andwf	___fleq@ff2,w
  8670     07CF  00A8               	movwf	??___fleq
  8671     07D0  3000               	movlw	0
  8672     07D1  0525               	andwf	___fleq@ff2+1,w
  8673     07D2  00A9               	movwf	??___fleq+1
  8674     07D3  3080               	movlw	128
  8675     07D4  0526               	andwf	___fleq@ff2+2,w
  8676     07D5  00AA               	movwf	??___fleq+2
  8677     07D6  307F               	movlw	127
  8678     07D7  0527               	andwf	___fleq@ff2+3,w
  8679     07D8  00AB               	movwf	??___fleq+3
  8680     07D9  082B               	movf	??___fleq+3,w
  8681     07DA  042A               	iorwf	??___fleq+2,w
  8682     07DB  0429               	iorwf	??___fleq+1,w
  8683     07DC  0428               	iorwf	??___fleq,w
  8684     07DD  1D03               	skipz
  8685     07DE  2FE7               	goto	l736
  8686     07DF  3000               	movlw	0
  8687     07E0  00A7               	movwf	___fleq@ff2+3
  8688     07E1  3000               	movlw	0
  8689     07E2  00A6               	movwf	___fleq@ff2+2
  8690     07E3  3000               	movlw	0
  8691     07E4  00A5               	movwf	___fleq@ff2+1
  8692     07E5  3000               	movlw	0
  8693     07E6  00A4               	movwf	___fleq@ff2
  8694     07E7                     l736:
  8695     07E7  0827               	movf	___fleq@ff2+3,w
  8696     07E8  0623               	xorwf	___fleq@ff1+3,w
  8697     07E9  1D03               	skipz
  8698     07EA  2FF5               	goto	u4045
  8699     07EB  0826               	movf	___fleq@ff2+2,w
  8700     07EC  0622               	xorwf	___fleq@ff1+2,w
  8701     07ED  1D03               	skipz
  8702     07EE  2FF5               	goto	u4045
  8703     07EF  0825               	movf	___fleq@ff2+1,w
  8704     07F0  0621               	xorwf	___fleq@ff1+1,w
  8705     07F1  1D03               	skipz
  8706     07F2  2FF5               	goto	u4045
  8707     07F3  0824               	movf	___fleq@ff2,w
  8708     07F4  0620               	xorwf	___fleq@ff1,w
  8709     07F5                     u4045:
  8710     07F5  1903               	skipnz
  8711     07F6  2FF9               	goto	l3711
  8712     07F7  1003               	clrc
  8713     07F8  0008               	return
  8714     07F9                     l3711:
  8715     07F9  1403               	setc
  8716     07FA  0008               	return
  8717     07FB                     __end_of___fleq:
  8718                           
  8719                           	psect	text20
  8720     0815                     __ptext20:	
  8721 ;; *************** function ___fldiv *****************
  8722 ;; Defined at:
  8723 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;  a               4   20[BANK0 ] unsigned int 
  8726 ;;  b               4   24[BANK0 ] unsigned int 
  8727 ;; Auto vars:     Size  Location     Type
  8728 ;;  grs             4   40[BANK0 ] unsigned long 
  8729 ;;  rem             4   33[BANK0 ] unsigned long 
  8730 ;;  new_exp         2   38[BANK0 ] short 
  8731 ;;  aexp            1   45[BANK0 ] unsigned char 
  8732 ;;  bexp            1   44[BANK0 ] unsigned char 
  8733 ;;  sign            1   37[BANK0 ] unsigned char 
  8734 ;; Return value:  Size  Location     Type
  8735 ;;                  4   20[BANK0 ] unsigned char 
  8736 ;; Registers used:
  8737 ;;		wreg, status,2, status,0
  8738 ;; Tracked objects:
  8739 ;;		On entry : 1F/0
  8740 ;;		On exit  : 1F/0
  8741 ;;		Unchanged: 0/0
  8742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8743 ;;      Params:         0       8       0       0       0       0       0       0
  8744 ;;      Locals:         0      13       0       0       0       0       0       0
  8745 ;;      Temps:          0       5       0       0       0       0       0       0
  8746 ;;      Totals:         0      26       0       0       0       0       0       0
  8747 ;;Total ram usage:       26 bytes
  8748 ;; Hardware stack levels used: 1
  8749 ;; Hardware stack levels required when called: 4
  8750 ;; This function calls:
  8751 ;;		Nothing
  8752 ;; This function is called by:
  8753 ;;		_main
  8754 ;;		_efgtoa
  8755 ;; This function uses a non-reentrant model
  8756 ;;
  8757                           
  8758     0815                     ___fldiv:	
  8759                           ;psect for function ___fldiv
  8760                           
  8761                           
  8762                           ;incstack = 0
  8763                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
  8764     0815  083B               	movf	___fldiv@b+3,w
  8765     0816  3980               	andlw	128
  8766     0817  00C5               	movwf	___fldiv@sign
  8767     0818  353B               	lslf	___fldiv@b+3,w
  8768     0819  00CC               	movwf	___fldiv@bexp
  8769     081A  1BBA               	btfsc	___fldiv@b+2,7
  8770     081B  144C               	bsf	___fldiv@bexp,0
  8771     081C  084C               	movf	___fldiv@bexp,w
  8772     081D  1903               	btfsc	3,2
  8773     081E  282D               	goto	l3803
  8774     081F  0A4C               	incf	___fldiv@bexp,w
  8775     0820  1D03               	btfss	3,2
  8776     0821  282A               	goto	l3799
  8777     0822  3000               	movlw	0
  8778     0823  00BB               	movwf	___fldiv@b+3
  8779     0824  3000               	movlw	0
  8780     0825  00BA               	movwf	___fldiv@b+2
  8781     0826  3000               	movlw	0
  8782     0827  00B9               	movwf	___fldiv@b+1
  8783     0828  3000               	movlw	0
  8784     0829  00B8               	movwf	___fldiv@b
  8785     082A                     l3799:
  8786     082A  17BA               	bsf	___fldiv@b+2,7
  8787     082B  01BB               	clrf	___fldiv@b+3
  8788     082C  2835               	goto	l3805
  8789     082D                     l3803:
  8790     082D  3000               	movlw	0
  8791     082E  00BB               	movwf	___fldiv@b+3
  8792     082F  3000               	movlw	0
  8793     0830  00BA               	movwf	___fldiv@b+2
  8794     0831  3000               	movlw	0
  8795     0832  00B9               	movwf	___fldiv@b+1
  8796     0833  3000               	movlw	0
  8797     0834  00B8               	movwf	___fldiv@b
  8798     0835                     l3805:
  8799     0835  0837               	movf	___fldiv@a+3,w
  8800     0836  3980               	andlw	128
  8801     0837  00BC               	movwf	??___fldiv
  8802     0838  083C               	movf	??___fldiv,w
  8803     0839  06C5               	xorwf	___fldiv@sign,f
  8804     083A  3537               	lslf	___fldiv@a+3,w
  8805     083B  00CD               	movwf	___fldiv@aexp
  8806     083C  1BB6               	btfsc	___fldiv@a+2,7
  8807     083D  144D               	bsf	___fldiv@aexp,0
  8808     083E  084D               	movf	___fldiv@aexp,w
  8809     083F  1903               	btfsc	3,2
  8810     0840  284F               	goto	l3823
  8811     0841  0A4D               	incf	___fldiv@aexp,w
  8812     0842  1D03               	btfss	3,2
  8813     0843  284C               	goto	l3819
  8814     0844  3000               	movlw	0
  8815     0845  00B7               	movwf	___fldiv@a+3
  8816     0846  3000               	movlw	0
  8817     0847  00B6               	movwf	___fldiv@a+2
  8818     0848  3000               	movlw	0
  8819     0849  00B5               	movwf	___fldiv@a+1
  8820     084A  3000               	movlw	0
  8821     084B  00B4               	movwf	___fldiv@a
  8822     084C                     l3819:
  8823     084C  17B6               	bsf	___fldiv@a+2,7
  8824     084D  01B7               	clrf	___fldiv@a+3
  8825     084E  2857               	goto	l923
  8826     084F                     l3823:
  8827     084F  3000               	movlw	0
  8828     0850  00B7               	movwf	___fldiv@a+3
  8829     0851  3000               	movlw	0
  8830     0852  00B6               	movwf	___fldiv@a+2
  8831     0853  3000               	movlw	0
  8832     0854  00B5               	movwf	___fldiv@a+1
  8833     0855  3000               	movlw	0
  8834     0856  00B4               	movwf	___fldiv@a
  8835     0857                     l923:
  8836     0857  0837               	movf	___fldiv@a+3,w
  8837     0858  0436               	iorwf	___fldiv@a+2,w
  8838     0859  0435               	iorwf	___fldiv@a+1,w
  8839     085A  0434               	iorwf	___fldiv@a,w
  8840     085B  1D03               	skipz
  8841     085C  2876               	goto	l3833
  8842     085D  3000               	movlw	0
  8843     085E  00BB               	movwf	___fldiv@b+3
  8844     085F  3000               	movlw	0
  8845     0860  00BA               	movwf	___fldiv@b+2
  8846     0861  3000               	movlw	0
  8847     0862  00B9               	movwf	___fldiv@b+1
  8848     0863  3000               	movlw	0
  8849     0864  00B8               	movwf	___fldiv@b
  8850     0865  3080               	movlw	128
  8851     0866  04BA               	iorwf	___fldiv@b+2,f
  8852     0867  307F               	movlw	127
  8853     0868  04BB               	iorwf	___fldiv@b+3,f
  8854     0869                     L8:
  8855     0869  0845               	movf	___fldiv@sign,w
  8856     086A  00BC               	movwf	??___fldiv
  8857     086B  083C               	movf	??___fldiv,w
  8858     086C  04BB               	iorwf	___fldiv@b+3,f
  8859     086D  083B               	movf	___fldiv@b+3,w
  8860     086E  00B7               	movwf	?___fldiv+3
  8861     086F  083A               	movf	___fldiv@b+2,w
  8862     0870  00B6               	movwf	?___fldiv+2
  8863     0871  0839               	movf	___fldiv@b+1,w
  8864     0872  00B5               	movwf	?___fldiv+1
  8865     0873  0838               	movf	___fldiv@b,w
  8866     0874  00B4               	movwf	?___fldiv
  8867     0875  0008               	return
  8868     0876                     l3833:
  8869     0876  084C               	movf	___fldiv@bexp,w
  8870     0877  1D03               	btfss	3,2
  8871     0878  2882               	goto	l3839
  8872     0879  3000               	movlw	0
  8873     087A  00B7               	movwf	?___fldiv+3
  8874     087B  3000               	movlw	0
  8875     087C  00B6               	movwf	?___fldiv+2
  8876     087D  3000               	movlw	0
  8877     087E  00B5               	movwf	?___fldiv+1
  8878     087F  3000               	movlw	0
  8879     0880  00B4               	movwf	?___fldiv
  8880     0881  0008               	return
  8881     0882                     l3839:
  8882     0882  084C               	movf	___fldiv@bexp,w
  8883     0883  00BC               	movwf	??___fldiv
  8884     0884  01BD               	clrf	??___fldiv+1
  8885     0885  083D               	movf	??___fldiv+1,w
  8886     0886  00BF               	movwf	??___fldiv+3
  8887     0887  084D               	movf	___fldiv@aexp,w
  8888     0888  023C               	subwf	??___fldiv,w
  8889     0889  00BE               	movwf	??___fldiv+2
  8890     088A  1C03               	skipc
  8891     088B  03BF               	decf	??___fldiv+3,f
  8892     088C  083E               	movf	??___fldiv+2,w
  8893     088D  3E7F               	addlw	127
  8894     088E  00C6               	movwf	___fldiv@new_exp
  8895     088F  3000               	movlw	0
  8896     0890  3D3F               	addwfc	??___fldiv+3,w
  8897     0891  00C7               	movwf	___fldiv@new_exp+1
  8898     0892  083B               	movf	___fldiv@b+3,w
  8899     0893  00C4               	movwf	___fldiv@rem+3
  8900     0894  083A               	movf	___fldiv@b+2,w
  8901     0895  00C3               	movwf	___fldiv@rem+2
  8902     0896  0839               	movf	___fldiv@b+1,w
  8903     0897  00C2               	movwf	___fldiv@rem+1
  8904     0898  0838               	movf	___fldiv@b,w
  8905     0899  00C1               	movwf	___fldiv@rem
  8906     089A  3000               	movlw	0
  8907     089B  00BB               	movwf	___fldiv@b+3
  8908     089C  3000               	movlw	0
  8909     089D  00BA               	movwf	___fldiv@b+2
  8910     089E  3000               	movlw	0
  8911     089F  00B9               	movwf	___fldiv@b+1
  8912     08A0  3000               	movlw	0
  8913     08A1  00B8               	movwf	___fldiv@b
  8914     08A2  3000               	movlw	0
  8915     08A3  00CB               	movwf	___fldiv@grs+3
  8916     08A4  3000               	movlw	0
  8917     08A5  00CA               	movwf	___fldiv@grs+2
  8918     08A6  3000               	movlw	0
  8919     08A7  00C9               	movwf	___fldiv@grs+1
  8920     08A8  3000               	movlw	0
  8921     08A9  00C8               	movwf	___fldiv@grs
  8922     08AA  01CD               	clrf	___fldiv@aexp
  8923     08AB                     l3867:
  8924     08AB  301A               	movlw	26
  8925     08AC  024D               	subwf	___fldiv@aexp,w
  8926     08AD  1803               	btfsc	3,0
  8927     08AE  28E7               	goto	l3869
  8928     08AF  084D               	movf	___fldiv@aexp,w
  8929     08B0  1903               	btfsc	3,2
  8930     08B1  28C9               	goto	l3859
  8931     08B2  3001               	movlw	1
  8932     08B3                     u4305:
  8933     08B3  35C1               	lslf	___fldiv@rem,f
  8934     08B4  0DC2               	rlf	___fldiv@rem+1,f
  8935     08B5  0DC3               	rlf	___fldiv@rem+2,f
  8936     08B6  0DC4               	rlf	___fldiv@rem+3,f
  8937     08B7  0B89               	decfsz	9,f
  8938     08B8  28B3               	goto	u4305
  8939     08B9  3001               	movlw	1
  8940     08BA                     u4315:
  8941     08BA  35B8               	lslf	___fldiv@b,f
  8942     08BB  0DB9               	rlf	___fldiv@b+1,f
  8943     08BC  0DBA               	rlf	___fldiv@b+2,f
  8944     08BD  0DBB               	rlf	___fldiv@b+3,f
  8945     08BE  0B89               	decfsz	9,f
  8946     08BF  28BA               	goto	u4315
  8947     08C0  1BCB               	btfsc	___fldiv@grs+3,7
  8948     08C1  1438               	bsf	___fldiv@b,0
  8949     08C2  3001               	movlw	1
  8950     08C3                     u4335:
  8951     08C3  35C8               	lslf	___fldiv@grs,f
  8952     08C4  0DC9               	rlf	___fldiv@grs+1,f
  8953     08C5  0DCA               	rlf	___fldiv@grs+2,f
  8954     08C6  0DCB               	rlf	___fldiv@grs+3,f
  8955     08C7  0B89               	decfsz	9,f
  8956     08C8  28C3               	goto	u4335
  8957     08C9                     l3859:
  8958     08C9  0837               	movf	___fldiv@a+3,w
  8959     08CA  0244               	subwf	___fldiv@rem+3,w
  8960     08CB  1D03               	skipz
  8961     08CC  28D7               	goto	u4345
  8962     08CD  0836               	movf	___fldiv@a+2,w
  8963     08CE  0243               	subwf	___fldiv@rem+2,w
  8964     08CF  1D03               	skipz
  8965     08D0  28D7               	goto	u4345
  8966     08D1  0835               	movf	___fldiv@a+1,w
  8967     08D2  0242               	subwf	___fldiv@rem+1,w
  8968     08D3  1D03               	skipz
  8969     08D4  28D7               	goto	u4345
  8970     08D5  0834               	movf	___fldiv@a,w
  8971     08D6  0241               	subwf	___fldiv@rem,w
  8972     08D7                     u4345:
  8973     08D7  1C03               	skipc
  8974     08D8  28E2               	goto	l3865
  8975     08D9  174B               	bsf	___fldiv@grs+3,6
  8976     08DA  0834               	movf	___fldiv@a,w
  8977     08DB  02C1               	subwf	___fldiv@rem,f
  8978     08DC  0835               	movf	___fldiv@a+1,w
  8979     08DD  3BC2               	subwfb	___fldiv@rem+1,f
  8980     08DE  0836               	movf	___fldiv@a+2,w
  8981     08DF  3BC3               	subwfb	___fldiv@rem+2,f
  8982     08E0  0837               	movf	___fldiv@a+3,w
  8983     08E1  3BC4               	subwfb	___fldiv@rem+3,f
  8984     08E2                     l3865:
  8985     08E2  3001               	movlw	1
  8986     08E3  00BC               	movwf	??___fldiv
  8987     08E4  083C               	movf	??___fldiv,w
  8988     08E5  07CD               	addwf	___fldiv@aexp,f
  8989     08E6  28AB               	goto	l3867
  8990     08E7                     l3869:
  8991     08E7  0844               	movf	___fldiv@rem+3,w
  8992     08E8  0443               	iorwf	___fldiv@rem+2,w
  8993     08E9  0442               	iorwf	___fldiv@rem+1,w
  8994     08EA  0441               	iorwf	___fldiv@rem,w
  8995     08EB  1D03               	btfss	3,2
  8996     08EC  1448               	bsf	___fldiv@grs,0
  8997     08ED                     l3883:
  8998     08ED  1BBA               	btfsc	___fldiv@b+2,7
  8999     08EE  2904               	goto	l3885
  9000     08EF  3001               	movlw	1
  9001     08F0                     u4375:
  9002     08F0  35B8               	lslf	___fldiv@b,f
  9003     08F1  0DB9               	rlf	___fldiv@b+1,f
  9004     08F2  0DBA               	rlf	___fldiv@b+2,f
  9005     08F3  0DBB               	rlf	___fldiv@b+3,f
  9006     08F4  0B89               	decfsz	9,f
  9007     08F5  28F0               	goto	u4375
  9008     08F6  1BCB               	btfsc	___fldiv@grs+3,7
  9009     08F7  1438               	bsf	___fldiv@b,0
  9010     08F8  3001               	movlw	1
  9011     08F9                     u4395:
  9012     08F9  35C8               	lslf	___fldiv@grs,f
  9013     08FA  0DC9               	rlf	___fldiv@grs+1,f
  9014     08FB  0DCA               	rlf	___fldiv@grs+2,f
  9015     08FC  0DCB               	rlf	___fldiv@grs+3,f
  9016     08FD  0B89               	decfsz	9,f
  9017     08FE  28F9               	goto	u4395
  9018     08FF  30FF               	movlw	255
  9019     0900  07C6               	addwf	___fldiv@new_exp,f
  9020     0901  30FF               	movlw	255
  9021     0902  3DC7               	addwfc	___fldiv@new_exp+1,f
  9022     0903  28ED               	goto	l3883
  9023     0904                     l3885:
  9024     0904  01CD               	clrf	___fldiv@aexp
  9025     0905  1FCB               	btfss	___fldiv@grs+3,7
  9026     0906  291D               	goto	l3895
  9027     0907  30FF               	movlw	255
  9028     0908  0548               	andwf	___fldiv@grs,w
  9029     0909  00BC               	movwf	??___fldiv
  9030     090A  30FF               	movlw	255
  9031     090B  0549               	andwf	___fldiv@grs+1,w
  9032     090C  00BD               	movwf	??___fldiv+1
  9033     090D  30FF               	movlw	255
  9034     090E  054A               	andwf	___fldiv@grs+2,w
  9035     090F  00BE               	movwf	??___fldiv+2
  9036     0910  307F               	movlw	127
  9037     0911  054B               	andwf	___fldiv@grs+3,w
  9038     0912  00BF               	movwf	??___fldiv+3
  9039     0913  083F               	movf	??___fldiv+3,w
  9040     0914  043E               	iorwf	??___fldiv+2,w
  9041     0915  043D               	iorwf	??___fldiv+1,w
  9042     0916  043C               	iorwf	??___fldiv,w
  9043     0917  1903               	skipnz
  9044     0918  1838               	btfsc	___fldiv@b,0
  9045     0919  291B               	goto	l3891
  9046     091A  291D               	goto	l3895
  9047     091B                     l3891:
  9048     091B  01CD               	clrf	___fldiv@aexp
  9049     091C  0ACD               	incf	___fldiv@aexp,f
  9050     091D                     l3895:
  9051     091D  084D               	movf	___fldiv@aexp,w
  9052     091E  1903               	btfsc	3,2
  9053     091F  2946               	goto	l3905
  9054     0920  3001               	movlw	1
  9055     0921  07B8               	addwf	___fldiv@b,f
  9056     0922  3000               	movlw	0
  9057     0923  3DB9               	addwfc	___fldiv@b+1,f
  9058     0924  3000               	movlw	0
  9059     0925  3DBA               	addwfc	___fldiv@b+2,f
  9060     0926  3000               	movlw	0
  9061     0927  3DBB               	addwfc	___fldiv@b+3,f
  9062     0928  1C3B               	btfss	___fldiv@b+3,0
  9063     0929  2946               	goto	l3905
  9064     092A  0838               	movf	___fldiv@b,w
  9065     092B  00BC               	movwf	??___fldiv
  9066     092C  0839               	movf	___fldiv@b+1,w
  9067     092D  00BD               	movwf	??___fldiv+1
  9068     092E  083A               	movf	___fldiv@b+2,w
  9069     092F  00BE               	movwf	??___fldiv+2
  9070     0930  083B               	movf	___fldiv@b+3,w
  9071     0931  00BF               	movwf	??___fldiv+3
  9072     0932  3001               	movlw	1
  9073     0933  00C0               	movwf	??___fldiv+4
  9074     0934                     u4465:
  9075     0934  37BF               	asrf	??___fldiv+3,f
  9076     0935  0CBE               	rrf	??___fldiv+2,f
  9077     0936  0CBD               	rrf	??___fldiv+1,f
  9078     0937  0CBC               	rrf	??___fldiv,f
  9079     0938  0BC0               	decfsz	??___fldiv+4,f
  9080     0939  2934               	goto	u4465
  9081     093A  083F               	movf	??___fldiv+3,w
  9082     093B  00BB               	movwf	___fldiv@b+3
  9083     093C  083E               	movf	??___fldiv+2,w
  9084     093D  00BA               	movwf	___fldiv@b+2
  9085     093E  083D               	movf	??___fldiv+1,w
  9086     093F  00B9               	movwf	___fldiv@b+1
  9087     0940  083C               	movf	??___fldiv,w
  9088     0941  00B8               	movwf	___fldiv@b
  9089     0942  3001               	movlw	1
  9090     0943  07C6               	addwf	___fldiv@new_exp,f
  9091     0944  3000               	movlw	0
  9092     0945  3DC7               	addwfc	___fldiv@new_exp+1,f
  9093     0946                     l3905:
  9094     0946  0847               	movf	___fldiv@new_exp+1,w
  9095     0947  3A80               	xorlw	128
  9096     0948  00BC               	movwf	??___fldiv
  9097     0949  3080               	movlw	128
  9098     094A  023C               	subwf	??___fldiv,w
  9099     094B  1D03               	skipz
  9100     094C  294F               	goto	u4475
  9101     094D  30FF               	movlw	255
  9102     094E  0246               	subwf	___fldiv@new_exp,w
  9103     094F                     u4475:
  9104     094F  1C03               	skipc
  9105     0950  295E               	goto	l944
  9106     0951  30FF               	movlw	255
  9107     0952  0020               	movlb	0	; select bank0
  9108     0953  00C6               	movwf	___fldiv@new_exp
  9109     0954  3000               	movlw	0
  9110     0955  00C7               	movwf	___fldiv@new_exp+1
  9111     0956  3000               	movlw	0
  9112     0957  00BB               	movwf	___fldiv@b+3
  9113     0958  3000               	movlw	0
  9114     0959  00BA               	movwf	___fldiv@b+2
  9115     095A  3000               	movlw	0
  9116     095B  00B9               	movwf	___fldiv@b+1
  9117     095C  3000               	movlw	0
  9118     095D  00B8               	movwf	___fldiv@b
  9119     095E                     l944:
  9120     095E  0020               	movlb	0	; select bank0
  9121     095F  0847               	movf	___fldiv@new_exp+1,w
  9122     0960  3A80               	xorlw	128
  9123     0961  00BC               	movwf	??___fldiv
  9124     0962  3080               	movlw	128
  9125     0963  023C               	subwf	??___fldiv,w
  9126     0964  1D03               	skipz
  9127     0965  2968               	goto	u4485
  9128     0966  3001               	movlw	1
  9129     0967  0246               	subwf	___fldiv@new_exp,w
  9130     0968                     u4485:
  9131     0968  1803               	skipnc
  9132     0969  2976               	goto	l945
  9133     096A  0020               	movlb	0	; select bank0
  9134     096B  01C6               	clrf	___fldiv@new_exp
  9135     096C  01C7               	clrf	___fldiv@new_exp+1
  9136     096D  3000               	movlw	0
  9137     096E  00BB               	movwf	___fldiv@b+3
  9138     096F  3000               	movlw	0
  9139     0970  00BA               	movwf	___fldiv@b+2
  9140     0971  3000               	movlw	0
  9141     0972  00B9               	movwf	___fldiv@b+1
  9142     0973  3000               	movlw	0
  9143     0974  00B8               	movwf	___fldiv@b
  9144     0975  01C5               	clrf	___fldiv@sign
  9145     0976                     l945:
  9146     0976  0020               	movlb	0	; select bank0
  9147     0977  0846               	movf	___fldiv@new_exp,w
  9148     0978  00CC               	movwf	___fldiv@bexp
  9149     0979  1C4C               	btfss	___fldiv@bexp,0
  9150     097A  297D               	goto	l3919
  9151     097B  17BA               	bsf	___fldiv@b+2,7
  9152     097C  2981               	goto	l947
  9153     097D                     l3919:
  9154     097D  307F               	movlw	127
  9155     097E  00BC               	movwf	??___fldiv
  9156     097F  083C               	movf	??___fldiv,w
  9157     0980  05BA               	andwf	___fldiv@b+2,f
  9158     0981                     l947:
  9159     0981  364C               	lsrf	___fldiv@bexp,w
  9160     0982  00BB               	movwf	___fldiv@b+3
  9161     0983  2869               	goto	L8
  9162     0984                     __end_of___fldiv:
  9163                           
  9164                           	psect	text21
  9165     1330                     __ptext21:	
  9166 ;; *************** function _dtoa *****************
  9167 ;; Defined at:
  9168 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9169 ;; Parameters:    Size  Location     Type
  9170 ;;  fp              1    wreg     PTR struct _IO_FILE
  9171 ;;		 -> sprintf@f(11), 
  9172 ;;  d               2   22[BANK0 ] int 
  9173 ;; Auto vars:     Size  Location     Type
  9174 ;;  fp              1   27[BANK0 ] PTR struct _IO_FILE
  9175 ;;		 -> sprintf@f(11), 
  9176 ;;  i               2   33[BANK0 ] int 
  9177 ;;  w               2   30[BANK0 ] int 
  9178 ;;  p               2   28[BANK0 ] int 
  9179 ;;  s               1   32[BANK0 ] unsigned char 
  9180 ;; Return value:  Size  Location     Type
  9181 ;;                  1    wreg      void 
  9182 ;; Registers used:
  9183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9184 ;; Tracked objects:
  9185 ;;		On entry : 1F/1
  9186 ;;		On exit  : 1F/0
  9187 ;;		Unchanged: 0/0
  9188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9189 ;;      Params:         0       2       0       0       0       0       0       0
  9190 ;;      Locals:         0      10       0       0       0       0       0       0
  9191 ;;      Temps:          0       1       0       0       0       0       0       0
  9192 ;;      Totals:         0      13       0       0       0       0       0       0
  9193 ;;Total ram usage:       13 bytes
  9194 ;; Hardware stack levels used: 1
  9195 ;; Hardware stack levels required when called: 8
  9196 ;; This function calls:
  9197 ;;		___awdiv
  9198 ;;		___awmod
  9199 ;;		_abs
  9200 ;;		_pad
  9201 ;; This function is called by:
  9202 ;;		_vfpfcnvrt
  9203 ;; This function uses a non-reentrant model
  9204 ;;
  9205                           
  9206     1330                     _dtoa:	
  9207                           ;psect for function _dtoa
  9208                           
  9209                           
  9210                           ;incstack = 0
  9211                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9212                           ;dtoa@fp stored from wreg
  9213     1330  0020               	movlb	0	; select bank0
  9214     1331  00BB               	movwf	dtoa@fp
  9215                           
  9216                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 51
      +                          8:  int p;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:   
      +                            s = d < 0 ? 1 : 0;
  9217     1332  1FB7               	btfss	dtoa@d+1,7
  9218     1333  2B36               	goto	u5040
  9219     1334  3001               	movlw	1
  9220     1335  2B37               	goto	u5050
  9221     1336                     u5040:
  9222     1336  3000               	movlw	0
  9223     1337                     u5050:
  9224     1337  00C0               	movwf	dtoa@s
  9225                           
  9226                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 529:     if (!(pr
      +                          ec < 0)) {
  9227     1338  0022               	movlb	2	; select bank2
  9228     1339  1BAF               	btfsc	(_prec+1)^(0+256),7
  9229     133A  2B40               	goto	l4181
  9230                           
  9231                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 530:         flag
      +                          s &= ~(1 << 1);
  9232     133B  30FD               	movlw	253
  9233     133C  0020               	movlb	0	; select bank0
  9234     133D  00B8               	movwf	??_dtoa
  9235     133E  0838               	movf	??_dtoa,w
  9236     133F  05FC               	andwf	_flags,f
  9237     1340                     l4181:
  9238                           
  9239                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 533:     p = (0 <
      +                          = prec) ? prec : 1;
  9240     1340  0022               	movlb	2	; select bank2
  9241     1341  1FAF               	btfss	(_prec+1)^(0+256),7
  9242     1342  2B49               	goto	l4185
  9243     1343  3001               	movlw	1
  9244     1344  0020               	movlb	0	; select bank0
  9245     1345  00BC               	movwf	dtoa@p
  9246     1346  3000               	movlw	0
  9247     1347  00BD               	movwf	dtoa@p+1
  9248     1348  2B50               	goto	l1069
  9249     1349                     l4185:
  9250     1349  082F               	movf	(_prec+1)^(0+256),w
  9251     134A  0020               	movlb	0	; select bank0
  9252     134B  00BD               	movwf	dtoa@p+1
  9253     134C  0022               	movlb	2	; select bank2
  9254     134D  082E               	movf	_prec^(0+256),w
  9255     134E  0020               	movlb	0	; select bank0
  9256     134F  00BC               	movwf	dtoa@p
  9257     1350                     l1069:
  9258                           
  9259                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  9260     1350  0022               	movlb	2	; select bank2
  9261     1351  082D               	movf	(_width+1)^(0+256),w
  9262     1352  0020               	movlb	0	; select bank0
  9263     1353  00BF               	movwf	dtoa@w+1
  9264     1354  0022               	movlb	2	; select bank2
  9265     1355  082C               	movf	_width^(0+256),w
  9266     1356  0020               	movlb	0	; select bank0
  9267     1357  00BE               	movwf	dtoa@w
  9268                           
  9269                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  9270     1358  0840               	movf	dtoa@s,w
  9271     1359  1903               	btfsc	3,2
  9272     135A  2B6A               	goto	l1070
  9273                           
  9274                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  9275     135B  30FF               	movlw	255
  9276     135C  07BE               	addwf	dtoa@w,f
  9277     135D  30FF               	movlw	255
  9278     135E  3DBF               	addwfc	dtoa@w+1,f
  9279                           
  9280                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  9281     135F  0840               	movf	dtoa@s,w
  9282     1360  1D03               	btfss	3,2
  9283     1361  2B64               	goto	l4195
  9284     1362  302B               	movlw	43
  9285     1363  2B65               	goto	L9
  9286     1364                     l4195:
  9287     1364  302D               	movlw	45
  9288     1365                     L9:
  9289     1365  00B9               	movwf	_dtoa$1339
  9290     1366  3000               	movlw	0
  9291     1367  00BA               	movwf	_dtoa$1339+1
  9292     1368  0839               	movf	_dtoa$1339,w
  9293     1369  00C0               	movwf	dtoa@s
  9294     136A                     l1070:	
  9295                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 543:     }
  9296                           
  9297                           
  9298                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  9299     136A  304F               	movlw	79
  9300     136B  00C1               	movwf	dtoa@i
  9301     136C  3000               	movlw	0
  9302     136D  00C2               	movwf	dtoa@i+1
  9303                           
  9304                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  9305     136E  0024               	movlb	4	; select bank4
  9306     136F  01EF               	clrf	(_dbuf^(0+512)+79)
  9307                           
  9308                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9309     1370  2BC4               	goto	l4209
  9310     1371                     l4211:
  9311     1371  0020               	movlb	0	; select bank0
  9312     1372  0836               	movf	dtoa@d,w
  9313     1373  0437               	iorwf	dtoa@d+1,w
  9314     1374  1D03               	btfss	3,2
  9315     1375  2B8E               	goto	l4199
  9316     1376  083D               	movf	dtoa@p+1,w
  9317     1377  3A80               	xorlw	128
  9318     1378  00B8               	movwf	??_dtoa
  9319     1379  3080               	movlw	128
  9320     137A  0238               	subwf	??_dtoa,w
  9321     137B  1D03               	skipz
  9322     137C  2B7F               	goto	u5125
  9323     137D  3001               	movlw	1
  9324     137E  023C               	subwf	dtoa@p,w
  9325     137F                     u5125:
  9326     137F  1803               	skipnc
  9327     1380  2B8E               	goto	l4199
  9328     1381  0020               	movlb	0	; select bank0
  9329     1382  083F               	movf	dtoa@w+1,w
  9330     1383  3A80               	xorlw	128
  9331     1384  00B8               	movwf	??_dtoa
  9332     1385  3080               	movlw	128
  9333     1386  0238               	subwf	??_dtoa,w
  9334     1387  1D03               	skipz
  9335     1388  2B8B               	goto	u5135
  9336     1389  3001               	movlw	1
  9337     138A  023E               	subwf	dtoa@w,w
  9338     138B                     u5135:
  9339     138B  1803               	btfsc	3,0
  9340     138C  1CFC               	btfss	_flags,1
  9341     138D  2BD0               	goto	l4219
  9342     138E                     l4199:
  9343                           
  9344                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  9345     138E  30FF               	movlw	255
  9346     138F  0020               	movlb	0	; select bank0
  9347     1390  07C1               	addwf	dtoa@i,f
  9348     1391  30FF               	movlw	255
  9349     1392  3DC2               	addwfc	dtoa@i+1,f
  9350                           
  9351                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  9352     1393  0841               	movf	dtoa@i,w
  9353     1394  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  9354     1395  0086               	movwf	6
  9355     1396  3002               	movlw	2	; select bank4/5
  9356     1397  0087               	movwf	7
  9357     1398  300A               	movlw	10
  9358     1399  00A0               	movwf	___awmod@divisor
  9359     139A  3000               	movlw	0
  9360     139B  00A1               	movwf	___awmod@divisor+1
  9361     139C  0837               	movf	dtoa@d+1,w
  9362     139D  00A3               	movwf	___awmod@dividend+1
  9363     139E  0836               	movf	dtoa@d,w
  9364     139F  00A2               	movwf	___awmod@dividend
  9365     13A0  319E  26CD  3193   	fcall	___awmod
  9366     13A3  0821               	movf	?___awmod+1,w
  9367     13A4  00A8               	movwf	abs@a+1
  9368     13A5  0820               	movf	?___awmod,w
  9369     13A6  00A7               	movwf	abs@a
  9370     13A7  319C  24A6  3193   	fcall	_abs
  9371     13AA  0827               	movf	?_abs,w
  9372     13AB  3E30               	addlw	48
  9373     13AC  0081               	movwf	1
  9374                           
  9375                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 567:         --p;
  9376     13AD  30FF               	movlw	255
  9377     13AE  07BC               	addwf	dtoa@p,f
  9378     13AF  30FF               	movlw	255
  9379     13B0  3DBD               	addwfc	dtoa@p+1,f
  9380                           
  9381                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  9382     13B1  30FF               	movlw	255
  9383     13B2  07BE               	addwf	dtoa@w,f
  9384     13B3  30FF               	movlw	255
  9385     13B4  3DBF               	addwfc	dtoa@w+1,f
  9386                           
  9387                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  9388     13B5  300A               	movlw	10
  9389     13B6  00A0               	movwf	___awdiv@divisor
  9390     13B7  3000               	movlw	0
  9391     13B8  00A1               	movwf	___awdiv@divisor+1
  9392     13B9  0837               	movf	dtoa@d+1,w
  9393     13BA  00A3               	movwf	___awdiv@dividend+1
  9394     13BB  0836               	movf	dtoa@d,w
  9395     13BC  00A2               	movwf	___awdiv@dividend
  9396     13BD  319F  27AF  3193   	fcall	___awdiv
  9397     13C0  0821               	movf	?___awdiv+1,w
  9398     13C1  00B7               	movwf	dtoa@d+1
  9399     13C2  0820               	movf	?___awdiv,w
  9400     13C3  00B6               	movwf	dtoa@d
  9401     13C4                     l4209:
  9402                           
  9403                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9404     13C4  0020               	movlb	0	; select bank0
  9405     13C5  0842               	movf	dtoa@i+1,w
  9406     13C6  3A80               	xorlw	128
  9407     13C7  00B8               	movwf	??_dtoa
  9408     13C8  3080               	movlw	128
  9409     13C9  0238               	subwf	??_dtoa,w
  9410     13CA  1D03               	skipz
  9411     13CB  2BCE               	goto	u5105
  9412     13CC  3001               	movlw	1
  9413     13CD  0241               	subwf	dtoa@i,w
  9414     13CE                     u5105:
  9415     13CE  1803               	btfsc	3,0
  9416     13CF  2B71               	goto	l4211
  9417     13D0                     l4219:
  9418                           
  9419                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  9420     13D0  0020               	movlb	0	; select bank0
  9421     13D1  0840               	movf	dtoa@s,w
  9422     13D2  1903               	btfsc	3,2
  9423     13D3  2BDF               	goto	l4225
  9424                           
  9425                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  9426     13D4  30FF               	movlw	255
  9427     13D5  07C1               	addwf	dtoa@i,f
  9428     13D6  30FF               	movlw	255
  9429     13D7  3DC2               	addwfc	dtoa@i+1,f
  9430                           
  9431                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  9432     13D8  0841               	movf	dtoa@i,w
  9433     13D9  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  9434     13DA  0086               	movwf	6
  9435     13DB  3002               	movlw	2	; select bank4/5
  9436     13DC  0087               	movwf	7
  9437     13DD  0840               	movf	dtoa@s,w
  9438     13DE  0081               	movwf	1
  9439     13DF                     l4225:
  9440                           
  9441                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  9442     13DF  0841               	movf	dtoa@i,w
  9443     13E0  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
  9444     13E1  00AF               	movwf	pad@buf
  9445     13E2  083F               	movf	dtoa@w+1,w
  9446     13E3  00B1               	movwf	pad@p+1
  9447     13E4  083E               	movf	dtoa@w,w
  9448     13E5  00B0               	movwf	pad@p
  9449     13E6  083B               	movf	dtoa@fp,w
  9450     13E7  319E  2676         	fcall	_pad
  9451     13E9  0008               	return
  9452     13EA                     __end_of_dtoa:
  9453                           
  9454                           	psect	text22
  9455     1E76                     __ptext22:	
  9456 ;; *************** function _pad *****************
  9457 ;; Defined at:
  9458 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;  fp              1    wreg     PTR struct _IO_FILE
  9461 ;;		 -> sprintf@f(11), 
  9462 ;;  buf             1   15[BANK0 ] PTR unsigned char 
  9463 ;;		 -> dbuf(80), 
  9464 ;;  p               2   16[BANK0 ] int 
  9465 ;; Auto vars:     Size  Location     Type
  9466 ;;  fp              1   21[BANK0 ] PTR struct _IO_FILE
  9467 ;;		 -> sprintf@f(11), 
  9468 ;;  i               2   19[BANK0 ] int 
  9469 ;; Return value:  Size  Location     Type
  9470 ;;                  1    wreg      void 
  9471 ;; Registers used:
  9472 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9473 ;; Tracked objects:
  9474 ;;		On entry : 1E/1
  9475 ;;		On exit  : 1F/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9478 ;;      Params:         0       3       0       0       0       0       0       0
  9479 ;;      Locals:         0       3       0       0       0       0       0       0
  9480 ;;      Temps:          0       1       0       0       0       0       0       0
  9481 ;;      Totals:         0       7       0       0       0       0       0       0
  9482 ;;Total ram usage:        7 bytes
  9483 ;; Hardware stack levels used: 1
  9484 ;; Hardware stack levels required when called: 7
  9485 ;; This function calls:
  9486 ;;		_fputc
  9487 ;;		_fputs
  9488 ;; This function is called by:
  9489 ;;		_dtoa
  9490 ;;		_efgtoa
  9491 ;; This function uses a non-reentrant model
  9492 ;;
  9493                           
  9494     1E76                     _pad:	
  9495                           ;psect for function _pad
  9496                           
  9497                           
  9498                           ;incstack = 0
  9499                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9500                           ;pad@fp stored from wreg
  9501     1E76  0020               	movlb	0	; select bank0
  9502     1E77  00B5               	movwf	pad@fp
  9503                           
  9504                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           205:  if (p < 0) {
  9505     1E78  1FB1               	btfss	pad@p+1,7
  9506     1E79  2E7C               	goto	l1058
  9507                           
  9508                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  9509     1E7A  01B0               	clrf	pad@p
  9510     1E7B  01B1               	clrf	pad@p+1
  9511     1E7C                     l1058:	
  9512                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 207:  }
  9513                           
  9514                           
  9515                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  9516     1E7C  01B3               	clrf	pad@i
  9517     1E7D  01B4               	clrf	pad@i+1
  9518     1E7E                     l4073:	
  9519                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9520                           
  9521                           
  9522                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9523     1E7E  0834               	movf	pad@i+1,w
  9524     1E7F  3A80               	xorlw	128
  9525     1E80  00B2               	movwf	??_pad
  9526     1E81  0831               	movf	pad@p+1,w
  9527     1E82  3A80               	xorlw	128
  9528     1E83  0232               	subwf	??_pad,w
  9529     1E84  1D03               	skipz
  9530     1E85  2E88               	goto	u4765
  9531     1E86  0830               	movf	pad@p,w
  9532     1E87  0233               	subwf	pad@i,w
  9533     1E88                     u4765:
  9534     1E88  1803               	btfsc	3,0
  9535     1E89  2E9A               	goto	l4075
  9536                           
  9537                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  9538     1E8A  3020               	movlw	32
  9539     1E8B  0020               	movlb	0	; select bank0
  9540     1E8C  00A0               	movwf	fputc@c
  9541     1E8D  3000               	movlw	0
  9542     1E8E  00A1               	movwf	fputc@c+1
  9543     1E8F  0835               	movf	pad@fp,w
  9544     1E90  00A2               	movwf	fputc@fp
  9545     1E91  319F  2712  319E   	fcall	_fputc
  9546                           
  9547                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  9548     1E94  3001               	movlw	1
  9549     1E95  0020               	movlb	0	; select bank0
  9550     1E96  07B3               	addwf	pad@i,f
  9551     1E97  3000               	movlw	0
  9552     1E98  3DB4               	addwfc	pad@i+1,f
  9553     1E99  2E7E               	goto	l4073
  9554     1E9A                     l4075:
  9555                           
  9556                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  9557     1E9A  0020               	movlb	0	; select bank0
  9558     1E9B  0835               	movf	pad@fp,w
  9559     1E9C  00A8               	movwf	fputs@fp
  9560     1E9D  082F               	movf	pad@buf,w
  9561     1E9E  319D  257E         	fcall	_fputs
  9562     1EA0  0008               	return
  9563     1EA1                     __end_of_pad:
  9564                           
  9565                           	psect	text23
  9566     1D7E                     __ptext23:	
  9567 ;; *************** function _fputs *****************
  9568 ;; Defined at:
  9569 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;  s               1    wreg     PTR const unsigned char 
  9572 ;;		 -> dbuf(80), 
  9573 ;;  fp              1    8[BANK0 ] PTR struct _IO_FILE
  9574 ;;		 -> sprintf@f(11), 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;  s               1   14[BANK0 ] PTR const unsigned char 
  9577 ;;		 -> dbuf(80), 
  9578 ;;  i               2   12[BANK0 ] int 
  9579 ;;  c               1   11[BANK0 ] unsigned char 
  9580 ;; Return value:  Size  Location     Type
  9581 ;;                  2    8[BANK0 ] int 
  9582 ;; Registers used:
  9583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9584 ;; Tracked objects:
  9585 ;;		On entry : 1F/0
  9586 ;;		On exit  : 1F/0
  9587 ;;		Unchanged: 0/0
  9588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9589 ;;      Params:         0       1       0       0       0       0       0       0
  9590 ;;      Locals:         0       4       0       0       0       0       0       0
  9591 ;;      Temps:          0       2       0       0       0       0       0       0
  9592 ;;      Totals:         0       7       0       0       0       0       0       0
  9593 ;;Total ram usage:        7 bytes
  9594 ;; Hardware stack levels used: 1
  9595 ;; Hardware stack levels required when called: 6
  9596 ;; This function calls:
  9597 ;;		_fputc
  9598 ;; This function is called by:
  9599 ;;		_pad
  9600 ;; This function uses a non-reentrant model
  9601 ;;
  9602                           
  9603     1D7E                     _fputs:	
  9604                           ;psect for function _fputs
  9605                           
  9606                           
  9607                           ;incstack = 0
  9608                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9609                           ;fputs@s stored from wreg
  9610     1D7E  00AE               	movwf	fputs@s
  9611     1D7F  01AC               	clrf	fputs@i
  9612     1D80  01AD               	clrf	fputs@i+1
  9613     1D81                     l3605:
  9614     1D81  082C               	movf	fputs@i,w
  9615     1D82  072E               	addwf	fputs@s,w
  9616     1D83  00A9               	movwf	??_fputs
  9617     1D84  0829               	movf	??_fputs,w
  9618     1D85  0086               	movwf	6
  9619     1D86  3002               	movlw	2	; select bank4/5
  9620     1D87  0087               	movwf	7
  9621     1D88  0801               	movf	1,w
  9622     1D89  00AB               	movwf	fputs@c
  9623     1D8A  082B               	movf	fputs@c,w
  9624     1D8B  1903               	btfsc	3,2
  9625     1D8C  0008               	return
  9626     1D8D  082B               	movf	fputs@c,w
  9627     1D8E  00A9               	movwf	??_fputs
  9628     1D8F  01AA               	clrf	??_fputs+1
  9629     1D90  0829               	movf	??_fputs,w
  9630     1D91  00A0               	movwf	fputc@c
  9631     1D92  082A               	movf	??_fputs+1,w
  9632     1D93  00A1               	movwf	fputc@c+1
  9633     1D94  0828               	movf	fputs@fp,w
  9634     1D95  00A2               	movwf	fputc@fp
  9635     1D96  319F  2712  319D   	fcall	_fputc
  9636     1D99  3001               	movlw	1
  9637     1D9A  0020               	movlb	0	; select bank0
  9638     1D9B  07AC               	addwf	fputs@i,f
  9639     1D9C  3000               	movlw	0
  9640     1D9D  3DAD               	addwfc	fputs@i+1,f
  9641     1D9E  2D81               	goto	l3605
  9642     1D9F                     __end_of_fputs:
  9643                           
  9644                           	psect	text24
  9645     1F12                     __ptext24:	
  9646 ;; *************** function _fputc *****************
  9647 ;; Defined at:
  9648 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;  c               2    0[BANK0 ] int 
  9651 ;;  fp              1    2[BANK0 ] PTR struct _IO_FILE
  9652 ;;		 -> sprintf@f(11), 
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;		None
  9655 ;; Return value:  Size  Location     Type
  9656 ;;                  2    0[BANK0 ] int 
  9657 ;; Registers used:
  9658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9659 ;; Tracked objects:
  9660 ;;		On entry : 1F/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9664 ;;      Params:         0       3       0       0       0       0       0       0
  9665 ;;      Locals:         0       0       0       0       0       0       0       0
  9666 ;;      Temps:          0       5       0       0       0       0       0       0
  9667 ;;      Totals:         0       8       0       0       0       0       0       0
  9668 ;;Total ram usage:        8 bytes
  9669 ;; Hardware stack levels used: 1
  9670 ;; Hardware stack levels required when called: 5
  9671 ;; This function calls:
  9672 ;;		_putch
  9673 ;; This function is called by:
  9674 ;;		_pad
  9675 ;;		_vfpfcnvrt
  9676 ;;		_fputs
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680     1F12                     _fputc:	
  9681                           ;psect for function _fputc
  9682                           
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9686     1F12  0822               	movf	fputc@fp,w
  9687     1F13  1D03               	btfss	3,2
  9688     1F14  0822               	movf	fputc@fp,w
  9689     1F15  1D03               	btfss	3,2
  9690     1F16  2F1B               	goto	l3381
  9691     1F17  0820               	movf	fputc@c,w
  9692     1F18  3180  2003         	fcall	_putch
  9693     1F1A  0008               	return
  9694     1F1B                     l3381:
  9695     1F1B  0822               	movf	fputc@fp,w
  9696     1F1C  3E09               	addlw	9
  9697     1F1D  0086               	movwf	6
  9698     1F1E  3001               	movlw	1	; select bank2/3
  9699     1F1F  0087               	movwf	7
  9700     1F20  0016               	moviw fsr1++
  9701     1F21  0401               	iorwf	1,w
  9702     1F22  1903               	btfsc	3,2
  9703     1F23  2F42               	goto	l3385
  9704     1F24  0822               	movf	fputc@fp,w
  9705     1F25  3E09               	addlw	9
  9706     1F26  0086               	movwf	6
  9707     1F27  3001               	movlw	1	; select bank2/3
  9708     1F28  0087               	movwf	7
  9709     1F29  3F40               	moviw [0]fsr1
  9710     1F2A  00A3               	movwf	??_fputc
  9711     1F2B  3F41               	moviw [1]fsr1
  9712     1F2C  00A4               	movwf	??_fputc+1
  9713     1F2D  0822               	movf	fputc@fp,w
  9714     1F2E  3E02               	addlw	2
  9715     1F2F  0086               	movwf	6
  9716     1F30  3001               	movlw	1	; select bank2/3
  9717     1F31  0087               	movwf	7
  9718     1F32  3F40               	moviw [0]fsr1
  9719     1F33  00A5               	movwf	??_fputc+2
  9720     1F34  3F41               	moviw [1]fsr1
  9721     1F35  00A6               	movwf	??_fputc+3
  9722     1F36  0826               	movf	??_fputc+3,w
  9723     1F37  3A80               	xorlw	128
  9724     1F38  00A7               	movwf	??_fputc+4
  9725     1F39  0824               	movf	??_fputc+1,w
  9726     1F3A  3A80               	xorlw	128
  9727     1F3B  0227               	subwf	??_fputc+4,w
  9728     1F3C  1D03               	skipz
  9729     1F3D  2F40               	goto	u3315
  9730     1F3E  0823               	movf	??_fputc,w
  9731     1F3F  0225               	subwf	??_fputc+2,w
  9732     1F40                     u3315:
  9733     1F40  1803               	skipnc
  9734     1F41  0008               	return
  9735     1F42                     l3385:
  9736     1F42  0020               	movlb	0	; select bank0
  9737     1F43  0822               	movf	fputc@fp,w
  9738     1F44  0086               	movwf	6
  9739     1F45  3001               	movlw	1	; select bank2/3
  9740     1F46  0087               	movwf	7
  9741     1F47  0822               	movf	fputc@fp,w
  9742     1F48  3E02               	addlw	2
  9743     1F49  0084               	movwf	4
  9744     1F4A  3001               	movlw	1	; select bank2/3
  9745     1F4B  0085               	movwf	5
  9746     1F4C  0800               	movf	0,w
  9747     1F4D  0701               	addwf	1,w
  9748     1F4E  00A3               	movwf	??_fputc
  9749     1F4F  0823               	movf	??_fputc,w
  9750     1F50  0086               	movwf	6
  9751     1F51  3001               	movlw	1	; select bank2/3
  9752     1F52  0087               	movwf	7
  9753     1F53  0820               	movf	fputc@c,w
  9754     1F54  0081               	movwf	1
  9755     1F55  0822               	movf	fputc@fp,w
  9756     1F56  3E02               	addlw	2
  9757     1F57  0086               	movwf	6
  9758     1F58  3001               	movlw	1	; select bank2/3
  9759     1F59  0087               	movwf	7
  9760     1F5A  3001               	movlw	1
  9761     1F5B  0781               	addwf	1,f
  9762     1F5C  3141               	addfsr 1,1
  9763     1F5D  1803               	skipnc
  9764     1F5E  0A81               	incf	1,f
  9765     1F5F  0008               	return
  9766     1F60                     __end_of_fputc:
  9767                           
  9768                           	psect	text25
  9769     0003                     __ptext25:	
  9770 ;; *************** function _putch *****************
  9771 ;; Defined at:
  9772 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  9773 ;; Parameters:    Size  Location     Type
  9774 ;;  c               1    wreg     unsigned char 
  9775 ;; Auto vars:     Size  Location     Type
  9776 ;;  c               1    0[COMMON] unsigned char 
  9777 ;; Return value:  Size  Location     Type
  9778 ;;                  1    wreg      void 
  9779 ;; Registers used:
  9780 ;;		wreg
  9781 ;; Tracked objects:
  9782 ;;		On entry : 1F/0
  9783 ;;		On exit  : 1F/0
  9784 ;;		Unchanged: 1F/0
  9785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9786 ;;      Params:         0       0       0       0       0       0       0       0
  9787 ;;      Locals:         0       0       0       0       0       0       0       0
  9788 ;;      Temps:          0       0       0       0       0       0       0       0
  9789 ;;      Totals:         0       0       0       0       0       0       0       0
  9790 ;;Total ram usage:        0 bytes
  9791 ;; Hardware stack levels used: 1
  9792 ;; Hardware stack levels required when called: 4
  9793 ;; This function calls:
  9794 ;;		Nothing
  9795 ;; This function is called by:
  9796 ;;		_fputc
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800     0003                     _putch:	
  9801                           ;psect for function _putch
  9802                           
  9803                           
  9804                           ;incstack = 0
  9805                           ; Regs used in _putch: [wreg]
  9806     0003  0008               	return
  9807     0004                     __end_of_putch:
  9808                           
  9809                           	psect	text26
  9810     1CA6                     __ptext26:	
  9811 ;; *************** function _abs *****************
  9812 ;; Defined at:
  9813 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;  a               2    7[BANK0 ] int 
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;		None
  9818 ;; Return value:  Size  Location     Type
  9819 ;;                  2    7[BANK0 ] int 
  9820 ;; Registers used:
  9821 ;;		wreg, status,2, status,0
  9822 ;; Tracked objects:
  9823 ;;		On entry : 1F/0
  9824 ;;		On exit  : 1F/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9827 ;;      Params:         0       2       0       0       0       0       0       0
  9828 ;;      Locals:         0       0       0       0       0       0       0       0
  9829 ;;      Temps:          0       2       0       0       0       0       0       0
  9830 ;;      Totals:         0       4       0       0       0       0       0       0
  9831 ;;Total ram usage:        4 bytes
  9832 ;; Hardware stack levels used: 1
  9833 ;; Hardware stack levels required when called: 4
  9834 ;; This function calls:
  9835 ;;		Nothing
  9836 ;; This function is called by:
  9837 ;;		_dtoa
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841     1CA6                     _abs:	
  9842                           ;psect for function _abs
  9843                           
  9844                           
  9845                           ;incstack = 0
  9846                           ; Regs used in _abs: [wreg+status,2+status,0]
  9847     1CA6  1FA8               	btfss	abs@a+1,7
  9848     1CA7  0008               	return
  9849     1CA8  0927               	comf	abs@a,w
  9850     1CA9  00A9               	movwf	??_abs
  9851     1CAA  0928               	comf	abs@a+1,w
  9852     1CAB  00AA               	movwf	??_abs+1
  9853     1CAC  0AA9               	incf	??_abs,f
  9854     1CAD  1903               	skipnz
  9855     1CAE  0AAA               	incf	??_abs+1,f
  9856     1CAF  0829               	movf	??_abs,w
  9857     1CB0  00A7               	movwf	?_abs
  9858     1CB1  082A               	movf	??_abs+1,w
  9859     1CB2  00A8               	movwf	?_abs+1
  9860     1CB3  0008               	return
  9861     1CB4                     __end_of_abs:
  9862                           
  9863                           	psect	text27
  9864     1ECD                     __ptext27:	
  9865 ;; *************** function ___awmod *****************
  9866 ;; Defined at:
  9867 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;  divisor         2    0[BANK0 ] int 
  9870 ;;  dividend        2    2[BANK0 ] int 
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;  sign            1    6[BANK0 ] unsigned char 
  9873 ;;  counter         1    5[BANK0 ] unsigned char 
  9874 ;; Return value:  Size  Location     Type
  9875 ;;                  2    0[BANK0 ] int 
  9876 ;; Registers used:
  9877 ;;		wreg, status,2, status,0
  9878 ;; Tracked objects:
  9879 ;;		On entry : 1F/0
  9880 ;;		On exit  : 1F/0
  9881 ;;		Unchanged: 0/0
  9882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9883 ;;      Params:         0       4       0       0       0       0       0       0
  9884 ;;      Locals:         0       2       0       0       0       0       0       0
  9885 ;;      Temps:          0       1       0       0       0       0       0       0
  9886 ;;      Totals:         0       7       0       0       0       0       0       0
  9887 ;;Total ram usage:        7 bytes
  9888 ;; Hardware stack levels used: 1
  9889 ;; Hardware stack levels required when called: 4
  9890 ;; This function calls:
  9891 ;;		Nothing
  9892 ;; This function is called by:
  9893 ;;		_dtoa
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897     1ECD                     ___awmod:	
  9898                           ;psect for function ___awmod
  9899                           
  9900                           
  9901                           ;incstack = 0
  9902                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  9903     1ECD  01A6               	clrf	___awmod@sign
  9904     1ECE  1FA3               	btfss	___awmod@dividend+1,7
  9905     1ECF  2ED7               	goto	l3673
  9906     1ED0  09A2               	comf	___awmod@dividend,f
  9907     1ED1  09A3               	comf	___awmod@dividend+1,f
  9908     1ED2  0AA2               	incf	___awmod@dividend,f
  9909     1ED3  1903               	skipnz
  9910     1ED4  0AA3               	incf	___awmod@dividend+1,f
  9911     1ED5  01A6               	clrf	___awmod@sign
  9912     1ED6  0AA6               	incf	___awmod@sign,f
  9913     1ED7                     l3673:
  9914     1ED7  1FA1               	btfss	___awmod@divisor+1,7
  9915     1ED8  2EDE               	goto	l3677
  9916     1ED9  09A0               	comf	___awmod@divisor,f
  9917     1EDA  09A1               	comf	___awmod@divisor+1,f
  9918     1EDB  0AA0               	incf	___awmod@divisor,f
  9919     1EDC  1903               	skipnz
  9920     1EDD  0AA1               	incf	___awmod@divisor+1,f
  9921     1EDE                     l3677:
  9922     1EDE  0820               	movf	___awmod@divisor,w
  9923     1EDF  0421               	iorwf	___awmod@divisor+1,w
  9924     1EE0  1903               	btfsc	3,2
  9925     1EE1  2F05               	goto	l3695
  9926     1EE2  01A5               	clrf	___awmod@counter
  9927     1EE3  0AA5               	incf	___awmod@counter,f
  9928     1EE4                     l3685:
  9929     1EE4  1BA1               	btfsc	___awmod@divisor+1,7
  9930     1EE5  2EF0               	goto	l3687
  9931     1EE6  3001               	movlw	1
  9932     1EE7                     u3965:
  9933     1EE7  35A0               	lslf	___awmod@divisor,f
  9934     1EE8  0DA1               	rlf	___awmod@divisor+1,f
  9935     1EE9  0B89               	decfsz	9,f
  9936     1EEA  2EE7               	goto	u3965
  9937     1EEB  3001               	movlw	1
  9938     1EEC  00A4               	movwf	??___awmod
  9939     1EED  0824               	movf	??___awmod,w
  9940     1EEE  07A5               	addwf	___awmod@counter,f
  9941     1EEF  2EE4               	goto	l3685
  9942     1EF0                     l3687:
  9943     1EF0  0821               	movf	___awmod@divisor+1,w
  9944     1EF1  0223               	subwf	___awmod@dividend+1,w
  9945     1EF2  1D03               	skipz
  9946     1EF3  2EF6               	goto	u3985
  9947     1EF4  0820               	movf	___awmod@divisor,w
  9948     1EF5  0222               	subwf	___awmod@dividend,w
  9949     1EF6                     u3985:
  9950     1EF6  1C03               	skipc
  9951     1EF7  2EFC               	goto	l3691
  9952     1EF8  0820               	movf	___awmod@divisor,w
  9953     1EF9  02A2               	subwf	___awmod@dividend,f
  9954     1EFA  0821               	movf	___awmod@divisor+1,w
  9955     1EFB  3BA3               	subwfb	___awmod@dividend+1,f
  9956     1EFC                     l3691:
  9957     1EFC  3001               	movlw	1
  9958     1EFD                     u3995:
  9959     1EFD  36A1               	lsrf	___awmod@divisor+1,f
  9960     1EFE  0CA0               	rrf	___awmod@divisor,f
  9961     1EFF  0B89               	decfsz	9,f
  9962     1F00  2EFD               	goto	u3995
  9963     1F01  3001               	movlw	1
  9964     1F02  02A5               	subwf	___awmod@counter,f
  9965     1F03  1D03               	btfss	3,2
  9966     1F04  2EF0               	goto	l3687
  9967     1F05                     l3695:
  9968     1F05  0826               	movf	___awmod@sign,w
  9969     1F06  1903               	btfsc	3,2
  9970     1F07  2F0D               	goto	l3699
  9971     1F08  09A2               	comf	___awmod@dividend,f
  9972     1F09  09A3               	comf	___awmod@dividend+1,f
  9973     1F0A  0AA2               	incf	___awmod@dividend,f
  9974     1F0B  1903               	skipnz
  9975     1F0C  0AA3               	incf	___awmod@dividend+1,f
  9976     1F0D                     l3699:
  9977     1F0D  0823               	movf	___awmod@dividend+1,w
  9978     1F0E  00A1               	movwf	?___awmod+1
  9979     1F0F  0822               	movf	___awmod@dividend,w
  9980     1F10  00A0               	movwf	?___awmod
  9981     1F11  0008               	return
  9982     1F12                     __end_of___awmod:
  9983                           
  9984                           	psect	text28
  9985     1FAF                     __ptext28:	
  9986 ;; *************** function ___awdiv *****************
  9987 ;; Defined at:
  9988 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  9989 ;; Parameters:    Size  Location     Type
  9990 ;;  divisor         2    0[BANK0 ] int 
  9991 ;;  dividend        2    2[BANK0 ] int 
  9992 ;; Auto vars:     Size  Location     Type
  9993 ;;  quotient        2    7[BANK0 ] int 
  9994 ;;  sign            1    6[BANK0 ] unsigned char 
  9995 ;;  counter         1    5[BANK0 ] unsigned char 
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  2    0[BANK0 ] int 
  9998 ;; Registers used:
  9999 ;;		wreg, status,2, status,0
 10000 ;; Tracked objects:
 10001 ;;		On entry : 1F/0
 10002 ;;		On exit  : 1F/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10005 ;;      Params:         0       4       0       0       0       0       0       0
 10006 ;;      Locals:         0       4       0       0       0       0       0       0
 10007 ;;      Temps:          0       1       0       0       0       0       0       0
 10008 ;;      Totals:         0       9       0       0       0       0       0       0
 10009 ;;Total ram usage:        9 bytes
 10010 ;; Hardware stack levels used: 1
 10011 ;; Hardware stack levels required when called: 4
 10012 ;; This function calls:
 10013 ;;		Nothing
 10014 ;; This function is called by:
 10015 ;;		_dtoa
 10016 ;; This function uses a non-reentrant model
 10017 ;;
 10018                           
 10019     1FAF                     ___awdiv:	
 10020                           ;psect for function ___awdiv
 10021                           
 10022                           
 10023                           ;incstack = 0
 10024                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10025     1FAF  01A6               	clrf	___awdiv@sign
 10026     1FB0  1FA1               	btfss	___awdiv@divisor+1,7
 10027     1FB1  2FB9               	goto	l3629
 10028     1FB2  09A0               	comf	___awdiv@divisor,f
 10029     1FB3  09A1               	comf	___awdiv@divisor+1,f
 10030     1FB4  0AA0               	incf	___awdiv@divisor,f
 10031     1FB5  1903               	skipnz
 10032     1FB6  0AA1               	incf	___awdiv@divisor+1,f
 10033     1FB7  01A6               	clrf	___awdiv@sign
 10034     1FB8  0AA6               	incf	___awdiv@sign,f
 10035     1FB9                     l3629:
 10036     1FB9  1FA3               	btfss	___awdiv@dividend+1,7
 10037     1FBA  2FC4               	goto	l3635
 10038     1FBB  09A2               	comf	___awdiv@dividend,f
 10039     1FBC  09A3               	comf	___awdiv@dividend+1,f
 10040     1FBD  0AA2               	incf	___awdiv@dividend,f
 10041     1FBE  1903               	skipnz
 10042     1FBF  0AA3               	incf	___awdiv@dividend+1,f
 10043     1FC0  3001               	movlw	1
 10044     1FC1  00A4               	movwf	??___awdiv
 10045     1FC2  0824               	movf	??___awdiv,w
 10046     1FC3  06A6               	xorwf	___awdiv@sign,f
 10047     1FC4                     l3635:
 10048     1FC4  01A7               	clrf	___awdiv@quotient
 10049     1FC5  01A8               	clrf	___awdiv@quotient+1
 10050     1FC6  0820               	movf	___awdiv@divisor,w
 10051     1FC7  0421               	iorwf	___awdiv@divisor+1,w
 10052     1FC8  1903               	btfsc	3,2
 10053     1FC9  2FF3               	goto	l3657
 10054     1FCA  01A5               	clrf	___awdiv@counter
 10055     1FCB  0AA5               	incf	___awdiv@counter,f
 10056     1FCC                     l3645:
 10057     1FCC  1BA1               	btfsc	___awdiv@divisor+1,7
 10058     1FCD  2FD8               	goto	l3647
 10059     1FCE  3001               	movlw	1
 10060     1FCF                     u3865:
 10061     1FCF  35A0               	lslf	___awdiv@divisor,f
 10062     1FD0  0DA1               	rlf	___awdiv@divisor+1,f
 10063     1FD1  0B89               	decfsz	9,f
 10064     1FD2  2FCF               	goto	u3865
 10065     1FD3  3001               	movlw	1
 10066     1FD4  00A4               	movwf	??___awdiv
 10067     1FD5  0824               	movf	??___awdiv,w
 10068     1FD6  07A5               	addwf	___awdiv@counter,f
 10069     1FD7  2FCC               	goto	l3645
 10070     1FD8                     l3647:
 10071     1FD8  3001               	movlw	1
 10072     1FD9                     u3885:
 10073     1FD9  35A7               	lslf	___awdiv@quotient,f
 10074     1FDA  0DA8               	rlf	___awdiv@quotient+1,f
 10075     1FDB  0B89               	decfsz	9,f
 10076     1FDC  2FD9               	goto	u3885
 10077     1FDD  0821               	movf	___awdiv@divisor+1,w
 10078     1FDE  0223               	subwf	___awdiv@dividend+1,w
 10079     1FDF  1D03               	skipz
 10080     1FE0  2FE3               	goto	u3895
 10081     1FE1  0820               	movf	___awdiv@divisor,w
 10082     1FE2  0222               	subwf	___awdiv@dividend,w
 10083     1FE3                     u3895:
 10084     1FE3  1C03               	skipc
 10085     1FE4  2FEA               	goto	l3653
 10086     1FE5  0820               	movf	___awdiv@divisor,w
 10087     1FE6  02A2               	subwf	___awdiv@dividend,f
 10088     1FE7  0821               	movf	___awdiv@divisor+1,w
 10089     1FE8  3BA3               	subwfb	___awdiv@dividend+1,f
 10090     1FE9  1427               	bsf	___awdiv@quotient,0
 10091     1FEA                     l3653:
 10092     1FEA  3001               	movlw	1
 10093     1FEB                     u3905:
 10094     1FEB  36A1               	lsrf	___awdiv@divisor+1,f
 10095     1FEC  0CA0               	rrf	___awdiv@divisor,f
 10096     1FED  0B89               	decfsz	9,f
 10097     1FEE  2FEB               	goto	u3905
 10098     1FEF  3001               	movlw	1
 10099     1FF0  02A5               	subwf	___awdiv@counter,f
 10100     1FF1  1D03               	btfss	3,2
 10101     1FF2  2FD8               	goto	l3647
 10102     1FF3                     l3657:
 10103     1FF3  0826               	movf	___awdiv@sign,w
 10104     1FF4  1903               	btfsc	3,2
 10105     1FF5  2FFB               	goto	l3661
 10106     1FF6  09A7               	comf	___awdiv@quotient,f
 10107     1FF7  09A8               	comf	___awdiv@quotient+1,f
 10108     1FF8  0AA7               	incf	___awdiv@quotient,f
 10109     1FF9  1903               	skipnz
 10110     1FFA  0AA8               	incf	___awdiv@quotient+1,f
 10111     1FFB                     l3661:
 10112     1FFB  0828               	movf	___awdiv@quotient+1,w
 10113     1FFC  00A1               	movwf	?___awdiv+1
 10114     1FFD  0827               	movf	___awdiv@quotient,w
 10115     1FFE  00A0               	movwf	?___awdiv
 10116     1FFF  0008               	return
 10117     2000                     __end_of___awdiv:
 10118                           
 10119                           	psect	text29
 10120     129D                     __ptext29:	
 10121 ;; *************** function ___xxtofl *****************
 10122 ;; Defined at:
 10123 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
 10124 ;; Parameters:    Size  Location     Type
 10125 ;;  sign            1    wreg     unsigned char 
 10126 ;;  val             4    6[BANK0 ] long 
 10127 ;; Auto vars:     Size  Location     Type
 10128 ;;  sign            1   14[BANK0 ] unsigned char 
 10129 ;;  arg             4   16[BANK0 ] unsigned long 
 10130 ;;  exp             1   15[BANK0 ] unsigned char 
 10131 ;; Return value:  Size  Location     Type
 10132 ;;                  4    6[BANK0 ] unsigned char 
 10133 ;; Registers used:
 10134 ;;		wreg, status,2, status,0
 10135 ;; Tracked objects:
 10136 ;;		On entry : 1F/0
 10137 ;;		On exit  : 1F/0
 10138 ;;		Unchanged: 0/0
 10139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10140 ;;      Params:         0       4       0       0       0       0       0       0
 10141 ;;      Locals:         0       6       0       0       0       0       0       0
 10142 ;;      Temps:          0       4       0       0       0       0       0       0
 10143 ;;      Totals:         0      14       0       0       0       0       0       0
 10144 ;;Total ram usage:       14 bytes
 10145 ;; Hardware stack levels used: 1
 10146 ;; Hardware stack levels required when called: 4
 10147 ;; This function calls:
 10148 ;;		Nothing
 10149 ;; This function is called by:
 10150 ;;		_main
 10151 ;; This function uses a non-reentrant model
 10152 ;;
 10153                           
 10154     129D                     ___xxtofl:	
 10155                           ;psect for function ___xxtofl
 10156                           
 10157                           
 10158                           ;incstack = 0
 10159                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 10160                           ;___xxtofl@sign stored from wreg
 10161     129D  00AE               	movwf	___xxtofl@sign
 10162     129E  082E               	movf	___xxtofl@sign,w
 10163     129F  1D03               	btfss	3,2
 10164     12A0  1FA9               	btfss	___xxtofl@val+3,7
 10165     12A1  2AB2               	goto	l4835
 10166     12A2  0926               	comf	___xxtofl@val,w
 10167     12A3  00B0               	movwf	___xxtofl@arg
 10168     12A4  0927               	comf	___xxtofl@val+1,w
 10169     12A5  00B1               	movwf	___xxtofl@arg+1
 10170     12A6  0928               	comf	___xxtofl@val+2,w
 10171     12A7  00B2               	movwf	___xxtofl@arg+2
 10172     12A8  0929               	comf	___xxtofl@val+3,w
 10173     12A9  00B3               	movwf	___xxtofl@arg+3
 10174     12AA  0AB0               	incf	___xxtofl@arg,f
 10175     12AB  1903               	skipnz
 10176     12AC  0AB1               	incf	___xxtofl@arg+1,f
 10177     12AD  1903               	skipnz
 10178     12AE  0AB2               	incf	___xxtofl@arg+2,f
 10179     12AF  1903               	skipnz
 10180     12B0  0AB3               	incf	___xxtofl@arg+3,f
 10181     12B1  2ABA               	goto	l1007
 10182     12B2                     l4835:
 10183     12B2  0829               	movf	___xxtofl@val+3,w
 10184     12B3  00B3               	movwf	___xxtofl@arg+3
 10185     12B4  0828               	movf	___xxtofl@val+2,w
 10186     12B5  00B2               	movwf	___xxtofl@arg+2
 10187     12B6  0827               	movf	___xxtofl@val+1,w
 10188     12B7  00B1               	movwf	___xxtofl@arg+1
 10189     12B8  0826               	movf	___xxtofl@val,w
 10190     12B9  00B0               	movwf	___xxtofl@arg
 10191     12BA                     l1007:
 10192     12BA  0829               	movf	___xxtofl@val+3,w
 10193     12BB  0428               	iorwf	___xxtofl@val+2,w
 10194     12BC  0427               	iorwf	___xxtofl@val+1,w
 10195     12BD  0426               	iorwf	___xxtofl@val,w
 10196     12BE  1D03               	skipz
 10197     12BF  2AC9               	goto	l4841
 10198     12C0  3000               	movlw	0
 10199     12C1  00A9               	movwf	?___xxtofl+3
 10200     12C2  3000               	movlw	0
 10201     12C3  00A8               	movwf	?___xxtofl+2
 10202     12C4  3000               	movlw	0
 10203     12C5  00A7               	movwf	?___xxtofl+1
 10204     12C6  3000               	movlw	0
 10205     12C7  00A6               	movwf	?___xxtofl
 10206     12C8  0008               	return
 10207     12C9                     l4841:
 10208     12C9  3096               	movlw	150
 10209     12CA  00AF               	movwf	___xxtofl@exp
 10210     12CB                     l4845:
 10211     12CB  30FE               	movlw	254
 10212     12CC  0533               	andwf	___xxtofl@arg+3,w
 10213     12CD  1903               	btfsc	3,2
 10214     12CE  2AEE               	goto	l1013
 10215     12CF  3001               	movlw	1
 10216     12D0  00AA               	movwf	??___xxtofl
 10217     12D1  082A               	movf	??___xxtofl,w
 10218     12D2  07AF               	addwf	___xxtofl@exp,f
 10219     12D3  3001               	movlw	1
 10220     12D4                     u6045:
 10221     12D4  36B3               	lsrf	___xxtofl@arg+3,f
 10222     12D5  0CB2               	rrf	___xxtofl@arg+2,f
 10223     12D6  0CB1               	rrf	___xxtofl@arg+1,f
 10224     12D7  0CB0               	rrf	___xxtofl@arg,f
 10225     12D8  0B89               	decfsz	9,f
 10226     12D9  2AD4               	goto	u6045
 10227     12DA  2ACB               	goto	l4845
 10228     12DB                     l4847:
 10229     12DB  3001               	movlw	1
 10230     12DC  00AA               	movwf	??___xxtofl
 10231     12DD  082A               	movf	??___xxtofl,w
 10232     12DE  07AF               	addwf	___xxtofl@exp,f
 10233     12DF  3001               	movlw	1
 10234     12E0  07B0               	addwf	___xxtofl@arg,f
 10235     12E1  3000               	movlw	0
 10236     12E2  3DB1               	addwfc	___xxtofl@arg+1,f
 10237     12E3  3000               	movlw	0
 10238     12E4  3DB2               	addwfc	___xxtofl@arg+2,f
 10239     12E5  3000               	movlw	0
 10240     12E6  3DB3               	addwfc	___xxtofl@arg+3,f
 10241     12E7  3001               	movlw	1
 10242     12E8                     u6065:
 10243     12E8  36B3               	lsrf	___xxtofl@arg+3,f
 10244     12E9  0CB2               	rrf	___xxtofl@arg+2,f
 10245     12EA  0CB1               	rrf	___xxtofl@arg+1,f
 10246     12EB  0CB0               	rrf	___xxtofl@arg,f
 10247     12EC  0B89               	decfsz	9,f
 10248     12ED  2AE8               	goto	u6065
 10249     12EE                     l1013:
 10250     12EE  30FF               	movlw	255
 10251     12EF  0533               	andwf	___xxtofl@arg+3,w
 10252     12F0  1903               	btfsc	3,2
 10253     12F1  2B00               	goto	l4855
 10254     12F2  2ADB               	goto	l4847
 10255     12F3                     l4857:
 10256     12F3  3002               	movlw	2
 10257     12F4  022F               	subwf	___xxtofl@exp,w
 10258     12F5  1C03               	btfss	3,0
 10259     12F6  2B02               	goto	l1020
 10260     12F7  3001               	movlw	1
 10261     12F8  02AF               	subwf	___xxtofl@exp,f
 10262     12F9  3001               	movlw	1
 10263     12FA                     u6085:
 10264     12FA  35B0               	lslf	___xxtofl@arg,f
 10265     12FB  0DB1               	rlf	___xxtofl@arg+1,f
 10266     12FC  0DB2               	rlf	___xxtofl@arg+2,f
 10267     12FD  0DB3               	rlf	___xxtofl@arg+3,f
 10268     12FE  0B89               	decfsz	9,f
 10269     12FF  2AFA               	goto	u6085
 10270     1300                     l4855:
 10271     1300  1FB2               	btfss	___xxtofl@arg+2,7
 10272     1301  2AF3               	goto	l4857
 10273     1302                     l1020:
 10274     1302  182F               	btfsc	___xxtofl@exp,0
 10275     1303  2B0C               	goto	l1021
 10276     1304  30FF               	movlw	255
 10277     1305  05B0               	andwf	___xxtofl@arg,f
 10278     1306  30FF               	movlw	255
 10279     1307  05B1               	andwf	___xxtofl@arg+1,f
 10280     1308  307F               	movlw	127
 10281     1309  05B2               	andwf	___xxtofl@arg+2,f
 10282     130A  30FF               	movlw	255
 10283     130B  05B3               	andwf	___xxtofl@arg+3,f
 10284     130C                     l1021:
 10285     130C  1003               	clrc
 10286     130D  0CAF               	rrf	___xxtofl@exp,f
 10287     130E  082F               	movf	___xxtofl@exp,w
 10288     130F  00AA               	movwf	??___xxtofl
 10289     1310  01AB               	clrf	??___xxtofl+1
 10290     1311  01AC               	clrf	??___xxtofl+2
 10291     1312  01AD               	clrf	??___xxtofl+3
 10292     1313  3018               	movlw	24
 10293     1314                     u6125:
 10294     1314  35AA               	lslf	??___xxtofl,f
 10295     1315  0DAB               	rlf	??___xxtofl+1,f
 10296     1316  0DAC               	rlf	??___xxtofl+2,f
 10297     1317  0DAD               	rlf	??___xxtofl+3,f
 10298     1318  0B89               	decfsz	9,f
 10299     1319  2B14               	goto	u6125
 10300     131A  082A               	movf	??___xxtofl,w
 10301     131B  04B0               	iorwf	___xxtofl@arg,f
 10302     131C  082B               	movf	??___xxtofl+1,w
 10303     131D  04B1               	iorwf	___xxtofl@arg+1,f
 10304     131E  082C               	movf	??___xxtofl+2,w
 10305     131F  04B2               	iorwf	___xxtofl@arg+2,f
 10306     1320  082D               	movf	??___xxtofl+3,w
 10307     1321  04B3               	iorwf	___xxtofl@arg+3,f
 10308     1322  082E               	movf	___xxtofl@sign,w
 10309     1323  1D03               	btfss	3,2
 10310     1324  1FA9               	btfss	___xxtofl@val+3,7
 10311     1325  2B27               	goto	l4869
 10312     1326  17B3               	bsf	___xxtofl@arg+3,7
 10313     1327                     l4869:
 10314     1327  0833               	movf	___xxtofl@arg+3,w
 10315     1328  00A9               	movwf	?___xxtofl+3
 10316     1329  0832               	movf	___xxtofl@arg+2,w
 10317     132A  00A8               	movwf	?___xxtofl+2
 10318     132B  0831               	movf	___xxtofl@arg+1,w
 10319     132C  00A7               	movwf	?___xxtofl+1
 10320     132D  0830               	movf	___xxtofl@arg,w
 10321     132E  00A6               	movwf	?___xxtofl
 10322     132F  0008               	return
 10323     1330                     __end_of___xxtofl:
 10324                           
 10325                           	psect	text30
 10326     1D0C                     __ptext30:	
 10327 ;; *************** function _Lcd_Write_String *****************
 10328 ;; Defined at:
 10329 ;;		line 104 in file "lcd.c"
 10330 ;; Parameters:    Size  Location     Type
 10331 ;;  a               2    5[BANK0 ] PTR const unsigned char 
 10332 ;;		 -> STR_17(17), STR_16(15), STR_15(14), STR_14(15), 
 10333 ;;		 -> STR_13(9), STR_12(7), STR_11(9), STR_10(7), 
 10334 ;;		 -> STR_9(15), STR_8(16), STR_7(17), STR_6(2), 
 10335 ;;		 -> STR_4(2), buffer(20), STR_1(15), 
 10336 ;; Auto vars:     Size  Location     Type
 10337 ;;  i               2    8[BANK0 ] int 
 10338 ;; Return value:  Size  Location     Type
 10339 ;;                  1    wreg      void 
 10340 ;; Registers used:
 10341 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10342 ;; Tracked objects:
 10343 ;;		On entry : 1F/0
 10344 ;;		On exit  : 1F/0
 10345 ;;		Unchanged: 0/0
 10346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10347 ;;      Params:         0       2       0       0       0       0       0       0
 10348 ;;      Locals:         0       2       0       0       0       0       0       0
 10349 ;;      Temps:          0       1       0       0       0       0       0       0
 10350 ;;      Totals:         0       5       0       0       0       0       0       0
 10351 ;;Total ram usage:        5 bytes
 10352 ;; Hardware stack levels used: 1
 10353 ;; Hardware stack levels required when called: 6
 10354 ;; This function calls:
 10355 ;;		_Lcd_Write_Char
 10356 ;; This function is called by:
 10357 ;;		_main
 10358 ;; This function uses a non-reentrant model
 10359 ;;
 10360                           
 10361     1D0C                     _Lcd_Write_String:	
 10362                           ;psect for function _Lcd_Write_String
 10363                           
 10364                           
 10365                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
 10366                           
 10367                           ;incstack = 0
 10368                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10369     1D0C  01A8               	clrf	Lcd_Write_String@i
 10370     1D0D  01A9               	clrf	Lcd_Write_String@i+1
 10371     1D0E                     l4721:
 10372     1D0E  0825               	movf	Lcd_Write_String@a,w
 10373     1D0F  0728               	addwf	Lcd_Write_String@i,w
 10374     1D10  0084               	movwf	4
 10375     1D11  0826               	movf	Lcd_Write_String@a+1,w
 10376     1D12  3D29               	addwfc	Lcd_Write_String@i+1,w
 10377     1D13  0085               	movwf	5
 10378     1D14  0012               	moviw fsr0++
 10379     1D15  1903               	btfsc	3,2
 10380     1D16  0008               	return
 10381                           
 10382                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
 10383     1D17  0825               	movf	Lcd_Write_String@a,w
 10384     1D18  0728               	addwf	Lcd_Write_String@i,w
 10385     1D19  0084               	movwf	4
 10386     1D1A  0826               	movf	Lcd_Write_String@a+1,w
 10387     1D1B  3D29               	addwfc	Lcd_Write_String@i+1,w
 10388     1D1C  0085               	movwf	5
 10389     1D1D  0800               	movf	0,w	;code access
 10390     1D1E  319E  264E  319D   	fcall	_Lcd_Write_Char
 10391     1D21  3001               	movlw	1
 10392     1D22  0020               	movlb	0	; select bank0
 10393     1D23  07A8               	addwf	Lcd_Write_String@i,f
 10394     1D24  3000               	movlw	0
 10395     1D25  3DA9               	addwfc	Lcd_Write_String@i+1,f
 10396     1D26  2D0E               	goto	l4721
 10397     1D27                     __end_of_Lcd_Write_String:
 10398                           
 10399                           	psect	text31
 10400     1E4E                     __ptext31:	
 10401 ;; *************** function _Lcd_Write_Char *****************
 10402 ;; Defined at:
 10403 ;;		line 88 in file "lcd.c"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;  a               1    wreg     unsigned char 
 10406 ;; Auto vars:     Size  Location     Type
 10407 ;;  a               1    4[BANK0 ] unsigned char 
 10408 ;;  y               1    3[BANK0 ] unsigned char 
 10409 ;;  temp            1    2[BANK0 ] unsigned char 
 10410 ;; Return value:  Size  Location     Type
 10411 ;;                  1    wreg      void 
 10412 ;; Registers used:
 10413 ;;		wreg, status,2, status,0, pclath, cstack
 10414 ;; Tracked objects:
 10415 ;;		On entry : 1F/0
 10416 ;;		On exit  : 1F/2
 10417 ;;		Unchanged: 0/0
 10418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10419 ;;      Params:         0       0       0       0       0       0       0       0
 10420 ;;      Locals:         0       3       0       0       0       0       0       0
 10421 ;;      Temps:          0       1       0       0       0       0       0       0
 10422 ;;      Totals:         0       4       0       0       0       0       0       0
 10423 ;;Total ram usage:        4 bytes
 10424 ;; Hardware stack levels used: 1
 10425 ;; Hardware stack levels required when called: 5
 10426 ;; This function calls:
 10427 ;;		_Lcd_Port
 10428 ;; This function is called by:
 10429 ;;		_Lcd_Write_String
 10430 ;; This function uses a non-reentrant model
 10431 ;;
 10432                           
 10433     1E4E                     _Lcd_Write_Char:	
 10434                           ;psect for function _Lcd_Write_Char
 10435                           
 10436                           
 10437                           ;incstack = 0
 10438                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
 10439                           ;Lcd_Write_Char@a stored from wreg
 10440     1E4E  00A4               	movwf	Lcd_Write_Char@a
 10441                           
 10442                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
 10443     1E4F  0824               	movf	Lcd_Write_Char@a,w
 10444     1E50  390F               	andlw	15
 10445     1E51  00A2               	movwf	Lcd_Write_Char@temp
 10446                           
 10447                           ;lcd.c: 92:     y = a&0xF0;
 10448     1E52  0824               	movf	Lcd_Write_Char@a,w
 10449     1E53  39F0               	andlw	240
 10450     1E54  00A3               	movwf	Lcd_Write_Char@y
 10451                           
 10452                           ;lcd.c: 93:     LATCbits.LATC1 = 1;
 10453     1E55  0022               	movlb	2	; select bank2
 10454     1E56  148E               	bsf	14,1	;volatile
 10455                           
 10456                           ;lcd.c: 94:     Lcd_Port(y>>4);
 10457     1E57  0020               	movlb	0	; select bank0
 10458     1E58  0823               	movf	Lcd_Write_Char@y,w
 10459     1E59  00A1               	movwf	??_Lcd_Write_Char
 10460     1E5A  3004               	movlw	4
 10461     1E5B                     u5635:
 10462     1E5B  36A1               	lsrf	??_Lcd_Write_Char,f
 10463     1E5C  0B89               	decfsz	9,f
 10464     1E5D  2E5B               	goto	u5635
 10465     1E5E  0821               	movf	??_Lcd_Write_Char,w
 10466     1E5F  319D  25C0  319E   	fcall	_Lcd_Port
 10467                           
 10468                           ;lcd.c: 95:     LATCbits.LATC0 = 1;
 10469     1E62  140E               	bsf	14,0	;volatile
 10470                           
 10471                           ;lcd.c: 96:     _delay((unsigned long)((40)*(4000000/4000000.0)));
 10472     1E63  300D               	movlw	13
 10473     1E64                     u6577:
 10474     1E64  0B89               	decfsz	9,f
 10475     1E65  2E64               	goto	u6577
 10476     1E66  0000               	nop
 10477                           
 10478                           ;lcd.c: 97:     LATCbits.LATC0 = 0;
 10479     1E67  0022               	movlb	2	; select bank2
 10480     1E68  100E               	bcf	14,0	;volatile
 10481                           
 10482                           ;lcd.c: 98:     Lcd_Port(temp);
 10483     1E69  0020               	movlb	0	; select bank0
 10484     1E6A  0822               	movf	Lcd_Write_Char@temp,w
 10485     1E6B  319D  25C0  319E   	fcall	_Lcd_Port
 10486                           
 10487                           ;lcd.c: 99:     LATCbits.LATC0 = 1;
 10488     1E6E  140E               	bsf	14,0	;volatile
 10489                           
 10490                           ;lcd.c: 100:     _delay((unsigned long)((40)*(4000000/4000000.0)));
 10491     1E6F  300D               	movlw	13
 10492     1E70                     u6587:
 10493     1E70  0B89               	decfsz	9,f
 10494     1E71  2E70               	goto	u6587
 10495     1E72  0000               	nop
 10496                           
 10497                           ;lcd.c: 101:     LATCbits.LATC0 = 0;
 10498     1E73  0022               	movlb	2	; select bank2
 10499     1E74  100E               	bcf	14,0	;volatile
 10500     1E75  0008               	return
 10501     1E76                     __end_of_Lcd_Write_Char:
 10502                           
 10503                           	psect	text32
 10504     113E                     __ptext32:	
 10505 ;; *************** function _Lcd_Set_Cursor *****************
 10506 ;; Defined at:
 10507 ;;		line 26 in file "lcd.c"
 10508 ;; Parameters:    Size  Location     Type
 10509 ;;  a               1    wreg     unsigned char 
 10510 ;;  b               1    3[BANK0 ] unsigned char 
 10511 ;; Auto vars:     Size  Location     Type
 10512 ;;  a               1    5[BANK0 ] unsigned char 
 10513 ;;  temp            1    8[BANK0 ] unsigned char 
 10514 ;;  y               1    7[BANK0 ] unsigned char 
 10515 ;;  z               1    6[BANK0 ] unsigned char 
 10516 ;; Return value:  Size  Location     Type
 10517 ;;                  1    wreg      void 
 10518 ;; Registers used:
 10519 ;;		wreg, status,2, status,0, pclath, cstack
 10520 ;; Tracked objects:
 10521 ;;		On entry : 1F/0
 10522 ;;		On exit  : 1D/0
 10523 ;;		Unchanged: 0/0
 10524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10525 ;;      Params:         0       1       0       0       0       0       0       0
 10526 ;;      Locals:         0       4       0       0       0       0       0       0
 10527 ;;      Temps:          0       1       0       0       0       0       0       0
 10528 ;;      Totals:         0       6       0       0       0       0       0       0
 10529 ;;Total ram usage:        6 bytes
 10530 ;; Hardware stack levels used: 1
 10531 ;; Hardware stack levels required when called: 6
 10532 ;; This function calls:
 10533 ;;		_Lcd_Cmd
 10534 ;; This function is called by:
 10535 ;;		_main
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539     113E                     _Lcd_Set_Cursor:	
 10540                           ;psect for function _Lcd_Set_Cursor
 10541                           
 10542                           
 10543                           ;incstack = 0
 10544                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
 10545                           ;Lcd_Set_Cursor@a stored from wreg
 10546     113E  00A5               	movwf	Lcd_Set_Cursor@a
 10547                           
 10548                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
 10549     113F  0325               	decf	Lcd_Set_Cursor@a,w
 10550     1140  1D03               	btfss	3,2
 10551     1141  2959               	goto	l4685
 10552                           
 10553                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
 10554     1142  0823               	movf	Lcd_Set_Cursor@b,w
 10555     1143  3E7F               	addlw	127
 10556     1144  00A8               	movwf	Lcd_Set_Cursor@temp
 10557                           
 10558                           ;lcd.c: 32:         z = temp>>4;
 10559     1145  0828               	movf	Lcd_Set_Cursor@temp,w
 10560     1146  00A4               	movwf	??_Lcd_Set_Cursor
 10561     1147  3004               	movlw	4
 10562     1148                     u5675:
 10563     1148  36A4               	lsrf	??_Lcd_Set_Cursor,f
 10564     1149  0B89               	decfsz	9,f
 10565     114A  2948               	goto	u5675
 10566     114B  0824               	movf	??_Lcd_Set_Cursor,w
 10567     114C  00A6               	movwf	Lcd_Set_Cursor@z
 10568                           
 10569                           ;lcd.c: 33:         y = temp & 0x0F;
 10570     114D  0828               	movf	Lcd_Set_Cursor@temp,w
 10571     114E  390F               	andlw	15
 10572     114F  00A7               	movwf	Lcd_Set_Cursor@y
 10573                           
 10574                           ;lcd.c: 34:         Lcd_Cmd(z);
 10575     1150  0826               	movf	Lcd_Set_Cursor@z,w
 10576     1151  319C  24DC  3191   	fcall	_Lcd_Cmd
 10577                           
 10578                           ;lcd.c: 35:         Lcd_Cmd(y);
 10579     1154  0020               	movlb	0	; select bank0
 10580     1155  0827               	movf	Lcd_Set_Cursor@y,w
 10581     1156  319C  24DC         	fcall	_Lcd_Cmd
 10582                           
 10583                           ;lcd.c: 36:     }
 10584     1158  0008               	return
 10585     1159                     l4685:
 10586     1159  3002               	movlw	2
 10587     115A  0625               	xorwf	Lcd_Set_Cursor@a,w
 10588     115B  1D03               	btfss	3,2
 10589     115C  2974               	goto	l4695
 10590                           
 10591                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
 10592     115D  0823               	movf	Lcd_Set_Cursor@b,w
 10593     115E  3EBF               	addlw	191
 10594     115F  00A8               	movwf	Lcd_Set_Cursor@temp
 10595                           
 10596                           ;lcd.c: 40:         z = temp>>4;
 10597     1160  0828               	movf	Lcd_Set_Cursor@temp,w
 10598     1161  00A4               	movwf	??_Lcd_Set_Cursor
 10599     1162  3004               	movlw	4
 10600     1163                     u5695:
 10601     1163  36A4               	lsrf	??_Lcd_Set_Cursor,f
 10602     1164  0B89               	decfsz	9,f
 10603     1165  2963               	goto	u5695
 10604     1166  0824               	movf	??_Lcd_Set_Cursor,w
 10605     1167  00A6               	movwf	Lcd_Set_Cursor@z
 10606                           
 10607                           ;lcd.c: 41:         y = temp & 0x0F;
 10608     1168  0828               	movf	Lcd_Set_Cursor@temp,w
 10609     1169  390F               	andlw	15
 10610     116A  00A7               	movwf	Lcd_Set_Cursor@y
 10611                           
 10612                           ;lcd.c: 42:         Lcd_Cmd(z);
 10613     116B  0826               	movf	Lcd_Set_Cursor@z,w
 10614     116C  319C  24DC  3191   	fcall	_Lcd_Cmd
 10615                           
 10616                           ;lcd.c: 43:         Lcd_Cmd(y);
 10617     116F  0020               	movlb	0	; select bank0
 10618     1170  0827               	movf	Lcd_Set_Cursor@y,w
 10619     1171  319C  24DC         	fcall	_Lcd_Cmd
 10620                           
 10621                           ;lcd.c: 44:     }
 10622     1173  0008               	return
 10623     1174                     l4695:
 10624     1174  3003               	movlw	3
 10625     1175  0625               	xorwf	Lcd_Set_Cursor@a,w
 10626     1176  1D03               	btfss	3,2
 10627     1177  298F               	goto	l4705
 10628                           
 10629                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x94 + b - 1;
 10630     1178  0823               	movf	Lcd_Set_Cursor@b,w
 10631     1179  3E93               	addlw	147
 10632     117A  00A8               	movwf	Lcd_Set_Cursor@temp
 10633                           
 10634                           ;lcd.c: 48:         z = temp>>4;
 10635     117B  0828               	movf	Lcd_Set_Cursor@temp,w
 10636     117C  00A4               	movwf	??_Lcd_Set_Cursor
 10637     117D  3004               	movlw	4
 10638     117E                     u5715:
 10639     117E  36A4               	lsrf	??_Lcd_Set_Cursor,f
 10640     117F  0B89               	decfsz	9,f
 10641     1180  297E               	goto	u5715
 10642     1181  0824               	movf	??_Lcd_Set_Cursor,w
 10643     1182  00A6               	movwf	Lcd_Set_Cursor@z
 10644                           
 10645                           ;lcd.c: 49:         y = temp & 0x0F;
 10646     1183  0828               	movf	Lcd_Set_Cursor@temp,w
 10647     1184  390F               	andlw	15
 10648     1185  00A7               	movwf	Lcd_Set_Cursor@y
 10649                           
 10650                           ;lcd.c: 50:         Lcd_Cmd(z);
 10651     1186  0826               	movf	Lcd_Set_Cursor@z,w
 10652     1187  319C  24DC  3191   	fcall	_Lcd_Cmd
 10653                           
 10654                           ;lcd.c: 51:         Lcd_Cmd(y);
 10655     118A  0020               	movlb	0	; select bank0
 10656     118B  0827               	movf	Lcd_Set_Cursor@y,w
 10657     118C  319C  24DC         	fcall	_Lcd_Cmd
 10658                           
 10659                           ;lcd.c: 52:     }
 10660     118E  0008               	return
 10661     118F                     l4705:
 10662     118F  3004               	movlw	4
 10663     1190  0625               	xorwf	Lcd_Set_Cursor@a,w
 10664     1191  1D03               	btfss	3,2
 10665     1192  0008               	return
 10666                           
 10667                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD4 + b - 1;
 10668     1193  0823               	movf	Lcd_Set_Cursor@b,w
 10669     1194  3ED3               	addlw	211
 10670     1195  00A8               	movwf	Lcd_Set_Cursor@temp
 10671                           
 10672                           ;lcd.c: 56:         z = temp>>4;
 10673     1196  0828               	movf	Lcd_Set_Cursor@temp,w
 10674     1197  00A4               	movwf	??_Lcd_Set_Cursor
 10675     1198  3004               	movlw	4
 10676     1199                     u5735:
 10677     1199  36A4               	lsrf	??_Lcd_Set_Cursor,f
 10678     119A  0B89               	decfsz	9,f
 10679     119B  2999               	goto	u5735
 10680     119C  0824               	movf	??_Lcd_Set_Cursor,w
 10681     119D  00A6               	movwf	Lcd_Set_Cursor@z
 10682                           
 10683                           ;lcd.c: 57:         y = temp & 0x0F;
 10684     119E  0828               	movf	Lcd_Set_Cursor@temp,w
 10685     119F  390F               	andlw	15
 10686     11A0  00A7               	movwf	Lcd_Set_Cursor@y
 10687                           
 10688                           ;lcd.c: 58:         Lcd_Cmd(z);
 10689     11A1  0826               	movf	Lcd_Set_Cursor@z,w
 10690     11A2  319C  24DC  3191   	fcall	_Lcd_Cmd
 10691                           
 10692                           ;lcd.c: 59:         Lcd_Cmd(y);
 10693     11A5  0020               	movlb	0	; select bank0
 10694     11A6  0827               	movf	Lcd_Set_Cursor@y,w
 10695     11A7  319C  24DC         	fcall	_Lcd_Cmd
 10696     11A9  0008               	return
 10697     11AA                     __end_of_Lcd_Set_Cursor:
 10698                           
 10699                           	psect	text33
 10700     1F60                     __ptext33:	
 10701 ;; *************** function _Lcd_Init *****************
 10702 ;; Defined at:
 10703 ;;		line 63 in file "lcd.c"
 10704 ;; Parameters:    Size  Location     Type
 10705 ;;		None
 10706 ;; Auto vars:     Size  Location     Type
 10707 ;;		None
 10708 ;; Return value:  Size  Location     Type
 10709 ;;                  1    wreg      void 
 10710 ;; Registers used:
 10711 ;;		wreg, status,2, status,0, pclath, cstack
 10712 ;; Tracked objects:
 10713 ;;		On entry : B1F/1
 10714 ;;		On exit  : 1F/2
 10715 ;;		Unchanged: 0/0
 10716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10717 ;;      Params:         0       0       0       0       0       0       0       0
 10718 ;;      Locals:         0       0       0       0       0       0       0       0
 10719 ;;      Temps:          0       1       0       0       0       0       0       0
 10720 ;;      Totals:         0       1       0       0       0       0       0       0
 10721 ;;Total ram usage:        1 bytes
 10722 ;; Hardware stack levels used: 1
 10723 ;; Hardware stack levels required when called: 7
 10724 ;; This function calls:
 10725 ;;		_Lcd_Clear
 10726 ;;		_Lcd_Cmd
 10727 ;;		_Lcd_Port
 10728 ;; This function is called by:
 10729 ;;		_main
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733     1F60                     _Lcd_Init:	
 10734                           ;psect for function _Lcd_Init
 10735                           
 10736                           
 10737                           ;lcd.c: 65:  TRISCbits.TRISC1 = 0;
 10738                           
 10739                           ;incstack = 0
 10740                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
 10741     1F60  108E               	bcf	14,1	;volatile
 10742                           
 10743                           ;lcd.c: 66:  TRISCbits.TRISC0 = 0;
 10744     1F61  100E               	bcf	14,0	;volatile
 10745                           
 10746                           ;lcd.c: 67:  TRISDbits.TRISD4 = 0;
 10747     1F62  120F               	bcf	15,4	;volatile
 10748                           
 10749                           ;lcd.c: 68:  TRISDbits.TRISD5 = 0;
 10750     1F63  128F               	bcf	15,5	;volatile
 10751                           
 10752                           ;lcd.c: 69:  TRISDbits.TRISD6 = 0;
 10753     1F64  130F               	bcf	15,6	;volatile
 10754                           
 10755                           ;lcd.c: 70:  TRISDbits.TRISD7 = 0;
 10756     1F65  138F               	bcf	15,7	;volatile
 10757                           
 10758                           ;lcd.c: 71:     Lcd_Port(0x00);
 10759     1F66  3000               	movlw	0
 10760     1F67  319D  25C0  319F   	fcall	_Lcd_Port
 10761                           
 10762                           ;lcd.c: 72:     _delay((unsigned long)((20)*(4000000/4000.0)));
 10763     1F6A  301A               	movlw	26
 10764     1F6B  0020               	movlb	0	; select bank0
 10765     1F6C  00A3               	movwf	??_Lcd_Init
 10766     1F6D  30F8               	movlw	248
 10767     1F6E                     u6597:
 10768     1F6E  0B89               	decfsz	9,f
 10769     1F6F  2F6E               	goto	u6597
 10770     1F70  0BA3               	decfsz	??_Lcd_Init,f
 10771     1F71  2F6E               	goto	u6597
 10772     1F72  0000               	nop
 10773                           
 10774                           ;lcd.c: 73:     Lcd_Cmd(0x03);
 10775     1F73  3003               	movlw	3
 10776     1F74  319C  24DC  319F   	fcall	_Lcd_Cmd
 10777                           
 10778                           ;lcd.c: 74:     _delay((unsigned long)((5)*(4000000/4000.0)));
 10779     1F77  3007               	movlw	7
 10780     1F78  0020               	movlb	0	; select bank0
 10781     1F79  00A3               	movwf	??_Lcd_Init
 10782     1F7A  307D               	movlw	125
 10783     1F7B                     u6607:
 10784     1F7B  0B89               	decfsz	9,f
 10785     1F7C  2F7B               	goto	u6607
 10786     1F7D  0BA3               	decfsz	??_Lcd_Init,f
 10787     1F7E  2F7B               	goto	u6607
 10788                           
 10789                           ;lcd.c: 75:     Lcd_Cmd(0x03);
 10790     1F7F  3003               	movlw	3
 10791     1F80  319C  24DC  319F   	fcall	_Lcd_Cmd
 10792                           
 10793                           ;lcd.c: 76:     _delay((unsigned long)((11)*(4000000/4000.0)));
 10794     1F83  300F               	movlw	15
 10795     1F84  0020               	movlb	0	; select bank0
 10796     1F85  00A3               	movwf	??_Lcd_Init
 10797     1F86  3047               	movlw	71
 10798     1F87                     u6617:
 10799     1F87  0B89               	decfsz	9,f
 10800     1F88  2F87               	goto	u6617
 10801     1F89  0BA3               	decfsz	??_Lcd_Init,f
 10802     1F8A  2F87               	goto	u6617
 10803     1F8B  3200               	nop2
 10804                           
 10805                           ;lcd.c: 77:     Lcd_Cmd(0x03);
 10806     1F8C  3003               	movlw	3
 10807     1F8D  319C  24DC  319F   	fcall	_Lcd_Cmd
 10808                           
 10809                           ;lcd.c: 78:     Lcd_Cmd(0x02);
 10810     1F90  3002               	movlw	2
 10811     1F91  319C  24DC  319F   	fcall	_Lcd_Cmd
 10812                           
 10813                           ;lcd.c: 79:     Lcd_Cmd(0x02);
 10814     1F94  3002               	movlw	2
 10815     1F95  319C  24DC  319F   	fcall	_Lcd_Cmd
 10816                           
 10817                           ;lcd.c: 80:     Lcd_Cmd(0x08);
 10818     1F98  3008               	movlw	8
 10819     1F99  319C  24DC  319F   	fcall	_Lcd_Cmd
 10820                           
 10821                           ;lcd.c: 81:     Lcd_Cmd(0x00);
 10822     1F9C  3000               	movlw	0
 10823     1F9D  319C  24DC  319F   	fcall	_Lcd_Cmd
 10824                           
 10825                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
 10826     1FA0  300C               	movlw	12
 10827     1FA1  319C  24DC  319F   	fcall	_Lcd_Cmd
 10828                           
 10829                           ;lcd.c: 83:     Lcd_Cmd(0x00);
 10830     1FA4  3000               	movlw	0
 10831     1FA5  319C  24DC  319F   	fcall	_Lcd_Cmd
 10832                           
 10833                           ;lcd.c: 84:     Lcd_Cmd(0x06);
 10834     1FA8  3006               	movlw	6
 10835     1FA9  319C  24DC  319F   	fcall	_Lcd_Cmd
 10836                           
 10837                           ;lcd.c: 85:     Lcd_Clear();
 10838     1FAC  319C  248C         	fcall	_Lcd_Clear
 10839     1FAE  0008               	return
 10840     1FAF                     __end_of_Lcd_Init:
 10841                           
 10842                           	psect	text34
 10843     1C8C                     __ptext34:	
 10844 ;; *************** function _Lcd_Clear *****************
 10845 ;; Defined at:
 10846 ;;		line 20 in file "lcd.c"
 10847 ;; Parameters:    Size  Location     Type
 10848 ;;		None
 10849 ;; Auto vars:     Size  Location     Type
 10850 ;;		None
 10851 ;; Return value:  Size  Location     Type
 10852 ;;                  1    wreg      void 
 10853 ;; Registers used:
 10854 ;;		wreg, status,2, status,0, pclath, cstack
 10855 ;; Tracked objects:
 10856 ;;		On entry : 1F/2
 10857 ;;		On exit  : 1F/2
 10858 ;;		Unchanged: 0/0
 10859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10860 ;;      Params:         0       0       0       0       0       0       0       0
 10861 ;;      Locals:         0       0       0       0       0       0       0       0
 10862 ;;      Temps:          0       0       0       0       0       0       0       0
 10863 ;;      Totals:         0       0       0       0       0       0       0       0
 10864 ;;Total ram usage:        0 bytes
 10865 ;; Hardware stack levels used: 1
 10866 ;; Hardware stack levels required when called: 6
 10867 ;; This function calls:
 10868 ;;		_Lcd_Cmd
 10869 ;; This function is called by:
 10870 ;;		_main
 10871 ;;		_Lcd_Init
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875     1C8C                     _Lcd_Clear:	
 10876                           ;psect for function _Lcd_Clear
 10877                           
 10878                           
 10879                           ;lcd.c: 22:     Lcd_Cmd(0);
 10880                           
 10881                           ;incstack = 0
 10882                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
 10883     1C8C  3000               	movlw	0
 10884     1C8D  319C  24DC  319C   	fcall	_Lcd_Cmd
 10885                           
 10886                           ;lcd.c: 23:     Lcd_Cmd(1);
 10887     1C90  3001               	movlw	1
 10888     1C91  319C  24DC         	fcall	_Lcd_Cmd
 10889     1C93  0008               	return
 10890     1C94                     __end_of_Lcd_Clear:
 10891                           
 10892                           	psect	text35
 10893     1CDC                     __ptext35:	
 10894 ;; *************** function _Lcd_Cmd *****************
 10895 ;; Defined at:
 10896 ;;		line 11 in file "lcd.c"
 10897 ;; Parameters:    Size  Location     Type
 10898 ;;  a               1    wreg     unsigned char 
 10899 ;; Auto vars:     Size  Location     Type
 10900 ;;  a               1    2[BANK0 ] unsigned char 
 10901 ;; Return value:  Size  Location     Type
 10902 ;;                  1    wreg      void 
 10903 ;; Registers used:
 10904 ;;		wreg, status,2, status,0, pclath, cstack
 10905 ;; Tracked objects:
 10906 ;;		On entry : 0/0
 10907 ;;		On exit  : 1F/2
 10908 ;;		Unchanged: 0/0
 10909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10910 ;;      Params:         0       0       0       0       0       0       0       0
 10911 ;;      Locals:         0       1       0       0       0       0       0       0
 10912 ;;      Temps:          0       1       0       0       0       0       0       0
 10913 ;;      Totals:         0       2       0       0       0       0       0       0
 10914 ;;Total ram usage:        2 bytes
 10915 ;; Hardware stack levels used: 1
 10916 ;; Hardware stack levels required when called: 5
 10917 ;; This function calls:
 10918 ;;		_Lcd_Port
 10919 ;; This function is called by:
 10920 ;;		_Lcd_Clear
 10921 ;;		_Lcd_Set_Cursor
 10922 ;;		_Lcd_Init
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926     1CDC                     _Lcd_Cmd:	
 10927                           ;psect for function _Lcd_Cmd
 10928                           
 10929                           
 10930                           ;incstack = 0
 10931                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
 10932                           ;Lcd_Cmd@a stored from wreg
 10933     1CDC  0020               	movlb	0	; select bank0
 10934     1CDD  00A2               	movwf	Lcd_Cmd@a
 10935                           
 10936                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATCbits.LATC1 = 0;
 10937     1CDE  0022               	movlb	2	; select bank2
 10938     1CDF  108E               	bcf	14,1	;volatile
 10939                           
 10940                           ;lcd.c: 14:     Lcd_Port(a);
 10941     1CE0  0020               	movlb	0	; select bank0
 10942     1CE1  0822               	movf	Lcd_Cmd@a,w
 10943     1CE2  319D  25C0  319C   	fcall	_Lcd_Port
 10944                           
 10945                           ;lcd.c: 15:     LATCbits.LATC0 = 1;
 10946     1CE5  140E               	bsf	14,0	;volatile
 10947                           
 10948                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
 10949     1CE6  3006               	movlw	6
 10950     1CE7  0020               	movlb	0	; select bank0
 10951     1CE8  00A1               	movwf	??_Lcd_Cmd
 10952     1CE9  3030               	movlw	48
 10953     1CEA                     u6627:
 10954     1CEA  0B89               	decfsz	9,f
 10955     1CEB  2CEA               	goto	u6627
 10956     1CEC  0BA1               	decfsz	??_Lcd_Cmd,f
 10957     1CED  2CEA               	goto	u6627
 10958     1CEE  0000               	nop
 10959                           
 10960                           ;lcd.c: 17:     LATCbits.LATC0 = 0;
 10961     1CEF  0022               	movlb	2	; select bank2
 10962     1CF0  100E               	bcf	14,0	;volatile
 10963     1CF1  0008               	return
 10964     1CF2                     __end_of_Lcd_Cmd:
 10965                           
 10966                           	psect	text36
 10967     1DC0                     __ptext36:	
 10968 ;; *************** function _Lcd_Port *****************
 10969 ;; Defined at:
 10970 ;;		line 3 in file "lcd.c"
 10971 ;; Parameters:    Size  Location     Type
 10972 ;;  a               1    wreg     unsigned char 
 10973 ;; Auto vars:     Size  Location     Type
 10974 ;;  a               1    0[BANK0 ] unsigned char 
 10975 ;; Return value:  Size  Location     Type
 10976 ;;                  1    wreg      void 
 10977 ;; Registers used:
 10978 ;;		wreg
 10979 ;; Tracked objects:
 10980 ;;		On entry : 1E/0
 10981 ;;		On exit  : 1F/2
 10982 ;;		Unchanged: 0/0
 10983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10984 ;;      Params:         0       0       0       0       0       0       0       0
 10985 ;;      Locals:         0       1       0       0       0       0       0       0
 10986 ;;      Temps:          0       0       0       0       0       0       0       0
 10987 ;;      Totals:         0       1       0       0       0       0       0       0
 10988 ;;Total ram usage:        1 bytes
 10989 ;; Hardware stack levels used: 1
 10990 ;; Hardware stack levels required when called: 4
 10991 ;; This function calls:
 10992 ;;		Nothing
 10993 ;; This function is called by:
 10994 ;;		_Lcd_Cmd
 10995 ;;		_Lcd_Init
 10996 ;;		_Lcd_Write_Char
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000     1DC0                     _Lcd_Port:	
 11001                           ;psect for function _Lcd_Port
 11002                           
 11003                           
 11004                           ;incstack = 0
 11005                           ; Regs used in _Lcd_Port: [wreg]
 11006                           ;Lcd_Port@a stored from wreg
 11007     1DC0  0020               	movlb	0	; select bank0
 11008     1DC1  00A0               	movwf	Lcd_Port@a
 11009                           
 11010                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LATD4 = 1
      +                          ) : (LATDbits.LATD4 = 0);
 11011     1DC2  1C20               	btfss	Lcd_Port@a,0
 11012     1DC3  2DC7               	goto	l361
 11013     1DC4  0022               	movlb	2	; select bank2
 11014     1DC5  160F               	bsf	15,4	;volatile
 11015     1DC6  2DC9               	goto	l4163
 11016     1DC7                     l361:
 11017     1DC7  0022               	movlb	2	; select bank2
 11018     1DC8  120F               	bcf	15,4	;volatile
 11019     1DC9                     l4163:
 11020                           
 11021                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LATD5 = 1) : (LATDbits.LATD5 = 0);
 11022     1DC9  0020               	movlb	0	; select bank0
 11023     1DCA  1CA0               	btfss	Lcd_Port@a,1
 11024     1DCB  2DCF               	goto	l365
 11025     1DCC  0022               	movlb	2	; select bank2
 11026     1DCD  168F               	bsf	15,5	;volatile
 11027     1DCE  2DD1               	goto	l4167
 11028     1DCF                     l365:
 11029     1DCF  0022               	movlb	2	; select bank2
 11030     1DD0  128F               	bcf	15,5	;volatile
 11031     1DD1                     l4167:
 11032                           
 11033                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LATD6 = 1) : (LATDbits.LATD6 = 0);
 11034     1DD1  0020               	movlb	0	; select bank0
 11035     1DD2  1D20               	btfss	Lcd_Port@a,2
 11036     1DD3  2DD7               	goto	l369
 11037     1DD4  0022               	movlb	2	; select bank2
 11038     1DD5  170F               	bsf	15,6	;volatile
 11039     1DD6  2DD9               	goto	l4171
 11040     1DD7                     l369:
 11041     1DD7  0022               	movlb	2	; select bank2
 11042     1DD8  130F               	bcf	15,6	;volatile
 11043     1DD9                     l4171:
 11044                           
 11045                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LATD7 = 1) : (LATDbits.LATD7 = 0);
 11046     1DD9  0020               	movlb	0	; select bank0
 11047     1DDA  1DA0               	btfss	Lcd_Port@a,3
 11048     1DDB  2DDF               	goto	l373
 11049     1DDC  0022               	movlb	2	; select bank2
 11050     1DDD  178F               	bsf	15,7	;volatile
 11051     1DDE  0008               	return
 11052     1DDF                     l373:
 11053     1DDF  0022               	movlb	2	; select bank2
 11054     1DE0  138F               	bcf	15,7	;volatile
 11055     1DE1  0008               	return
 11056     1DE2                     __end_of_Lcd_Port:
 11057                           
 11058                           	psect	text37
 11059     1C64                     __ptext37:	
 11060 ;; *************** function _ADC_StartConversion *****************
 11061 ;; Defined at:
 11062 ;;		line 93 in file "mcc_generated_files/adc.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;		None
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;		None
 11067 ;; Return value:  Size  Location     Type
 11068 ;;                  1    wreg      void 
 11069 ;; Registers used:
 11070 ;;		None
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/2
 11073 ;;		On exit  : 1F/1
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11076 ;;      Params:         0       0       0       0       0       0       0       0
 11077 ;;      Locals:         0       0       0       0       0       0       0       0
 11078 ;;      Temps:          0       0       0       0       0       0       0       0
 11079 ;;      Totals:         0       0       0       0       0       0       0       0
 11080 ;;Total ram usage:        0 bytes
 11081 ;; Hardware stack levels used: 1
 11082 ;; Hardware stack levels required when called: 4
 11083 ;; This function calls:
 11084 ;;		Nothing
 11085 ;; This function is called by:
 11086 ;;		_main
 11087 ;; This function uses a non-reentrant model
 11088 ;;
 11089                           
 11090     1C64                     _ADC_StartConversion:	
 11091                           ;psect for function _ADC_StartConversion
 11092                           
 11093                           
 11094                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
 11095                           
 11096                           ;incstack = 0
 11097                           ; Regs used in _ADC_StartConversion: []
 11098     1C64  0021               	movlb	1	; select bank1
 11099     1C65  149D               	bsf	29,1	;volatile
 11100     1C66  0008               	return
 11101     1C67                     __end_of_ADC_StartConversion:
 11102                           
 11103                           	psect	text38
 11104     1C6D                     __ptext38:	
 11105 ;; *************** function _ADC_IsConversionDone *****************
 11106 ;; Defined at:
 11107 ;;		line 100 in file "mcc_generated_files/adc.c"
 11108 ;; Parameters:    Size  Location     Type
 11109 ;;		None
 11110 ;; Auto vars:     Size  Location     Type
 11111 ;;		None
 11112 ;; Return value:  Size  Location     Type
 11113 ;;                  1    wreg      _Bool 
 11114 ;; Registers used:
 11115 ;;		wreg, status,0
 11116 ;; Tracked objects:
 11117 ;;		On entry : 1E/1
 11118 ;;		On exit  : 1F/1
 11119 ;;		Unchanged: 0/0
 11120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11121 ;;      Params:         0       0       0       0       0       0       0       0
 11122 ;;      Locals:         0       0       0       0       0       0       0       0
 11123 ;;      Temps:          0       0       0       0       0       0       0       0
 11124 ;;      Totals:         0       0       0       0       0       0       0       0
 11125 ;;Total ram usage:        0 bytes
 11126 ;; Hardware stack levels used: 1
 11127 ;; Hardware stack levels required when called: 4
 11128 ;; This function calls:
 11129 ;;		Nothing
 11130 ;; This function is called by:
 11131 ;;		_main
 11132 ;; This function uses a non-reentrant model
 11133 ;;
 11134                           
 11135     1C6D                     _ADC_IsConversionDone:	
 11136                           ;psect for function _ADC_IsConversionDone
 11137                           
 11138                           
 11139                           ;mcc_generated_files/adc.c: 103:    return ((_Bool)(!ADCON0bits.GO_nDONE));
 11140                           
 11141                           ;incstack = 0
 11142                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
 11143     1C6D  1003               	clrc
 11144     1C6E  0021               	movlb	1	; select bank1
 11145     1C6F  1C9D               	btfss	29,1	;volatile
 11146     1C70  1403               	setc
 11147     1C71  3000               	movlw	0
 11148     1C72  3D09               	addwfc	9,w
 11149     1C73  0008               	return
 11150     1C74                     __end_of_ADC_IsConversionDone:
 11151                           
 11152                           	psect	text39
 11153     1C84                     __ptext39:	
 11154 ;; *************** function _ADC_Initialize *****************
 11155 ;; Defined at:
 11156 ;;		line 67 in file "mcc_generated_files/adc.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;		None
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  1    wreg      void 
 11163 ;; Registers used:
 11164 ;;		wreg, status,2
 11165 ;; Tracked objects:
 11166 ;;		On entry : B1F/4
 11167 ;;		On exit  : B1F/1
 11168 ;;		Unchanged: B00/0
 11169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11170 ;;      Params:         0       0       0       0       0       0       0       0
 11171 ;;      Locals:         0       0       0       0       0       0       0       0
 11172 ;;      Temps:          0       0       0       0       0       0       0       0
 11173 ;;      Totals:         0       0       0       0       0       0       0       0
 11174 ;;Total ram usage:        0 bytes
 11175 ;; Hardware stack levels used: 1
 11176 ;; Hardware stack levels required when called: 4
 11177 ;; This function calls:
 11178 ;;		Nothing
 11179 ;; This function is called by:
 11180 ;;		_main
 11181 ;; This function uses a non-reentrant model
 11182 ;;
 11183                           
 11184     1C84                     _ADC_Initialize:	
 11185                           ;psect for function _ADC_Initialize
 11186                           
 11187                           
 11188                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0xC0;
 11189                           
 11190                           ;incstack = 0
 11191                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 11192     1C84  30C0               	movlw	192
 11193     1C85  0021               	movlb	1	; select bank1
 11194     1C86  009E               	movwf	30	;volatile
 11195                           
 11196                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
 11197     1C87  019B               	clrf	27	;volatile
 11198                           
 11199                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
 11200     1C88  019C               	clrf	28	;volatile
 11201                           
 11202                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x01;
 11203     1C89  3001               	movlw	1
 11204     1C8A  009D               	movwf	29	;volatile
 11205     1C8B  0008               	return
 11206     1C8C                     __end_of_ADC_Initialize:
 11207                           
 11208                           	psect	text40
 11209     1C7C                     __ptext40:	
 11210 ;; *************** function _ADC_GetConversionResult *****************
 11211 ;; Defined at:
 11212 ;;		line 106 in file "mcc_generated_files/adc.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;		None
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;		None
 11217 ;; Return value:  Size  Location     Type
 11218 ;;                  2    0[BANK0 ] unsigned short 
 11219 ;; Registers used:
 11220 ;;		wreg
 11221 ;; Tracked objects:
 11222 ;;		On entry : 1F/1
 11223 ;;		On exit  : 1F/0
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11226 ;;      Params:         0       2       0       0       0       0       0       0
 11227 ;;      Locals:         0       0       0       0       0       0       0       0
 11228 ;;      Temps:          0       0       0       0       0       0       0       0
 11229 ;;      Totals:         0       2       0       0       0       0       0       0
 11230 ;;Total ram usage:        2 bytes
 11231 ;; Hardware stack levels used: 1
 11232 ;; Hardware stack levels required when called: 4
 11233 ;; This function calls:
 11234 ;;		Nothing
 11235 ;; This function is called by:
 11236 ;;		_main
 11237 ;; This function uses a non-reentrant model
 11238 ;;
 11239                           
 11240     1C7C                     _ADC_GetConversionResult:	
 11241                           ;psect for function _ADC_GetConversionResult
 11242                           
 11243                           
 11244                           ;mcc_generated_files/adc.c: 109:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 11245                           
 11246                           ;incstack = 0
 11247                           ; Regs used in _ADC_GetConversionResult: [wreg]
 11248     1C7C  081C               	movf	28,w	;volatile
 11249     1C7D  0020               	movlb	0	; select bank0
 11250     1C7E  00A1               	movwf	?_ADC_GetConversionResult+1
 11251     1C7F  0021               	movlb	1	; select bank1
 11252     1C80  081B               	movf	27,w	;volatile
 11253     1C81  0020               	movlb	0	; select bank0
 11254     1C82  00A0               	movwf	?_ADC_GetConversionResult
 11255     1C83  0008               	return
 11256     1C84                     __end_of_ADC_GetConversionResult:
 11257                           
 11258                           	psect	intentry
 11259     0004                     __pintentry:	
 11260 ;; *************** function _IOC *****************
 11261 ;; Defined at:
 11262 ;;		line 171 in file "main.c"
 11263 ;; Parameters:    Size  Location     Type
 11264 ;;		None
 11265 ;; Auto vars:     Size  Location     Type
 11266 ;;		None
 11267 ;; Return value:  Size  Location     Type
 11268 ;;                  1    wreg      void 
 11269 ;; Registers used:
 11270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11271 ;; Tracked objects:
 11272 ;;		On entry : 0/0
 11273 ;;		On exit  : 1F/2
 11274 ;;		Unchanged: 0/0
 11275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11276 ;;      Params:         0       0       0       0       0       0       0       0
 11277 ;;      Locals:         0       0       0       0       0       0       0       0
 11278 ;;      Temps:          2       0       0       0       0       0       0       0
 11279 ;;      Totals:         2       0       0       0       0       0       0       0
 11280 ;;Total ram usage:        2 bytes
 11281 ;; Hardware stack levels used: 1
 11282 ;; Hardware stack levels required when called: 3
 11283 ;; This function calls:
 11284 ;;		_Keypad_Get_Char
 11285 ;;		_Keypad_Init
 11286 ;;		_strcmp
 11287 ;;		i1_Lcd_Clear
 11288 ;;		i1_Lcd_Set_Cursor
 11289 ;;		i1_Lcd_Write_Char
 11290 ;;		i1_Lcd_Write_String
 11291 ;; This function is called by:
 11292 ;;		Interrupt level 1
 11293 ;; This function uses a non-reentrant model
 11294 ;;
 11295                           
 11296     0004                     _IOC:
 11297                           
 11298                           ;incstack = 0
 11299     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11300                           
 11301                           ; Regs used in _IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11302     0005  3180               	pagesel	$
 11303                           
 11304                           ;main.c: 172:     Keypad_Init();
 11305     0006  319C  2494  3180   	fcall	_Keypad_Init
 11306                           
 11307                           ;main.c: 173:     Lcd_Clear();
 11308     0009  319C  2474  3180   	fcall	i1_Lcd_Clear
 11309                           
 11310                           ;main.c: 174:     LATAbits.LATA3 = 0;
 11311     000C  118C               	bcf	12,3	;volatile
 11312                           
 11313                           ;main.c: 175:     _delay((unsigned long)((500)*(4000000/4000.0)));
 11314     000D  3003               	movlw	3
 11315     000E  00FB               	movwf	??_IOC+1
 11316     000F  308A               	movlw	138
 11317     0010  00FA               	movwf	??_IOC
 11318     0011  3056               	movlw	86
 11319     0012                     u663_27:
 11320     0012  0B89               	decfsz	9,f
 11321     0013  2812               	goto	u663_27
 11322     0014  0BFA               	decfsz	??_IOC,f
 11323     0015  2812               	goto	u663_27
 11324     0016  0BFB               	decfsz	??_IOC+1,f
 11325     0017  2812               	goto	u663_27
 11326                           
 11327                           ;main.c: 177:     while(IOCBF != 0) {
 11328     0018  2A0D               	goto	i1l5279
 11329     0019                     i1l5079:
 11330                           
 11331                           ;main.c: 180:                 Lcd_Set_Cursor(1,1);
 11332     0019  01F3               	clrf	i1Lcd_Set_Cursor@b
 11333     001A  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11334     001B  3001               	movlw	1
 11335     001C  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11336                           
 11337                           ;main.c: 181:                 Lcd_Write_String("1:INGRESAR CLAVE");
 11338     001F  3011               	movlw	low (STR_7| (0+32768))
 11339     0020  00F5               	movwf	i1Lcd_Write_String@a
 11340     0021  3098               	movlw	high (STR_7| (0+32768))
 11341     0022  00F6               	movwf	i1Lcd_Write_String@a+1
 11342     0023  319C  24F2  3180   	fcall	i1_Lcd_Write_String
 11343                           
 11344                           ;main.c: 182:                 Lcd_Set_Cursor(2,1);
 11345     0026  01F3               	clrf	i1Lcd_Set_Cursor@b
 11346     0027  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11347     0028  3002               	movlw	2
 11348     0029  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11349                           
 11350                           ;main.c: 183:                 Lcd_Write_String("2:CAMBIAR CLAVE");
 11351     002C  3022               	movlw	low (STR_8| (0+32768))
 11352     002D  00F5               	movwf	i1Lcd_Write_String@a
 11353     002E  3098               	movlw	high (STR_8| (0+32768))
 11354     002F  00F6               	movwf	i1Lcd_Write_String@a+1
 11355     0030  319C  24F2  3180   	fcall	i1_Lcd_Write_String
 11356                           
 11357                           ;main.c: 185:                 tecla = Keypad_Get_Char();
 11358     0033  3186  269F  3180   	fcall	_Keypad_Get_Char
 11359     0036  00FD               	movwf	_tecla
 11360                           
 11361                           ;main.c: 186:                 if(tecla != 0) {
 11362     0037  087D               	movf	_tecla,w
 11363     0038  1D03               	btfss	3,2
 11364     0039  2847               	goto	i1l5099
 11365     003A  2A0D               	goto	i1l5279
 11366     003B                     i1l5091:
 11367                           
 11368                           ;main.c: 189:                             estado = 1;
 11369     003B  3001               	movlw	1
 11370     003C  283E               	goto	L10
 11371     003D                     i1l5093:	
 11372                           ;main.c: 190:                             break;
 11373                           
 11374                           
 11375                           ;main.c: 192:                             estado = 2;
 11376     003D  3002               	movlw	2
 11377     003E                     L10:
 11378     003E  0022               	movlb	2	; select bank2
 11379     003F  00B0               	movwf	_estado^(0+256)
 11380     0040  3000               	movlw	0
 11381     0041  00B1               	movwf	(_estado^(0+256)+1)
 11382                           
 11383                           ;main.c: 193:                             break;
 11384     0042  2857               	goto	i1l5101
 11385     0043                     i1l5095:
 11386                           
 11387                           ;main.c: 195:                             estado = 0;
 11388     0043  0022               	movlb	2	; select bank2
 11389     0044  01B0               	clrf	_estado^(0+256)
 11390     0045  01B1               	clrf	(_estado+1)^(0+256)
 11391                           
 11392                           ;main.c: 196:                             break;
 11393     0046  2857               	goto	i1l5101
 11394     0047                     i1l5099:
 11395     0047  087D               	movf	_tecla,w
 11396     0048  00FA               	movwf	??_IOC
 11397     0049  01FB               	clrf	??_IOC+1
 11398                           
 11399                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11400                           ; Switch size 1, requested type "simple"
 11401                           ; Number of cases is 1, Range of values is 0 to 0
 11402                           ; switch strategies available:
 11403                           ; Name         Instructions Cycles
 11404                           ; simple_byte            4     3 (average)
 11405                           ; direct_byte            8     6 (fixed)
 11406                           ; jumptable            260     6 (fixed)
 11407                           ;	Chosen strategy is simple_byte
 11408     004A  087B               	movf	??_IOC+1,w
 11409     004B  3A00               	xorlw	0	; case 0
 11410     004C  1903               	skipnz
 11411     004D  284F               	goto	i1l5465
 11412     004E  2843               	goto	i1l5095
 11413     004F                     i1l5465:
 11414                           
 11415                           ; Switch size 1, requested type "simple"
 11416                           ; Number of cases is 2, Range of values is 49 to 50
 11417                           ; switch strategies available:
 11418                           ; Name         Instructions Cycles
 11419                           ; simple_byte            7     4 (average)
 11420                           ; direct_byte           13     9 (fixed)
 11421                           ; jumptable            263     9 (fixed)
 11422                           ;	Chosen strategy is simple_byte
 11423     004F  087A               	movf	??_IOC,w
 11424     0050  3A31               	xorlw	49	; case 49
 11425     0051  1903               	skipnz
 11426     0052  283B               	goto	i1l5091
 11427     0053  3A03               	xorlw	3	; case 50
 11428     0054  1903               	skipnz
 11429     0055  283D               	goto	i1l5093
 11430     0056  2843               	goto	i1l5095
 11431     0057                     i1l5101:
 11432                           
 11433                           ;main.c: 198:                     Lcd_Clear();
 11434     0057  319C  2474  3180   	fcall	i1_Lcd_Clear
 11435     005A  2A0D               	goto	i1l5279
 11436     005B                     i1l5103:
 11437                           
 11438                           ;main.c: 202:                 Lcd_Set_Cursor(1,1);
 11439     005B  01F3               	clrf	i1Lcd_Set_Cursor@b
 11440     005C  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11441     005D  3001               	movlw	1
 11442     005E  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11443                           
 11444                           ;main.c: 203:                 Lcd_Write_String("INGRESAR CLAVE");
 11445     0061  3013               	movlw	low ((STR_7+2)| (0+32768))
 11446     0062  00F5               	movwf	i1Lcd_Write_String@a
 11447     0063  3098               	movlw	high ((STR_7+2)| (0+32768))
 11448     0064  00F6               	movwf	i1Lcd_Write_String@a+1
 11449     0065  319C  24F2  3180   	fcall	i1_Lcd_Write_String
 11450     0068                     i1l5119:	
 11451                           ;main.c: 205:                 while(cont_key < 4)
 11452                           
 11453                           
 11454                           ;main.c: 205:                 while(cont_key < 4)
 11455     0068  0022               	movlb	2	; select bank2
 11456     0069  0833               	movf	(_cont_key+1)^(0+256),w
 11457     006A  3A80               	xorlw	128
 11458     006B  00FA               	movwf	??_IOC
 11459     006C  3080               	movlw	128
 11460     006D  027A               	subwf	??_IOC,w
 11461     006E  1D03               	skipz
 11462     006F  2872               	goto	u647_25
 11463     0070  3004               	movlw	4
 11464     0071  0232               	subwf	_cont_key^(0+256),w
 11465     0072                     u647_25:
 11466     0072  1803               	btfsc	3,0
 11467     0073  2893               	goto	i1l5121
 11468                           
 11469                           ;main.c: 206:                 {;main.c: 207:                     tecla = Keypad_Get_Char
      +                          ();
 11470     0074  3186  269F  3180   	fcall	_Keypad_Get_Char
 11471     0077  00FD               	movwf	_tecla
 11472                           
 11473                           ;main.c: 208:                     if(tecla != 0)
 11474     0078  087D               	movf	_tecla,w
 11475     0079  1903               	btfsc	3,2
 11476     007A  2868               	goto	i1l5119
 11477                           
 11478                           ;main.c: 209:                     {;main.c: 210:                         clave[cont_key]
      +                           = tecla;
 11479     007B  0022               	movlb	2	; select bank2
 11480     007C  0832               	movf	_cont_key^(0+256),w
 11481     007D  3E38               	addlw	(low (_clave| (0+256)))& (0+255)
 11482     007E  0086               	movwf	6
 11483     007F  3001               	movlw	1	; select bank2/3
 11484     0080  0087               	movwf	7
 11485     0081  087D               	movf	_tecla,w
 11486     0082  0081               	movwf	1
 11487                           
 11488                           ;main.c: 211:                         Lcd_Set_Cursor(2,7+cont_key);
 11489     0083  0832               	movf	_cont_key^(0+256),w
 11490     0084  3E07               	addlw	7
 11491     0085  00F3               	movwf	i1Lcd_Set_Cursor@b
 11492     0086  3002               	movlw	2
 11493     0087  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11494                           
 11495                           ;main.c: 212:                         Lcd_Write_Char('*');
 11496     008A  302A               	movlw	42
 11497     008B  319E  2628  3180   	fcall	i1_Lcd_Write_Char
 11498                           
 11499                           ;main.c: 213:                         cont_key++;
 11500     008E  3001               	movlw	1
 11501     008F  07B2               	addwf	_cont_key^(0+256),f
 11502     0090  3000               	movlw	0
 11503     0091  3DB3               	addwfc	(_cont_key+1)^(0+256),f
 11504     0092  2868               	goto	i1l5119
 11505     0093                     i1l5121:
 11506                           
 11507                           ;main.c: 219:                 _delay((unsigned long)((200)*(4000000/4000.0)));
 11508     0093  3002               	movlw	2
 11509     0094  00FB               	movwf	??_IOC+1
 11510     0095  3004               	movlw	4
 11511     0096  00FA               	movwf	??_IOC
 11512     0097  30BA               	movlw	186
 11513     0098                     u664_27:
 11514     0098  0B89               	decfsz	9,f
 11515     0099  2898               	goto	u664_27
 11516     009A  0BFA               	decfsz	??_IOC,f
 11517     009B  2898               	goto	u664_27
 11518     009C  0BFB               	decfsz	??_IOC+1,f
 11519     009D  2898               	goto	u664_27
 11520     009E  3200               	nop2
 11521                           
 11522                           ;main.c: 220:                 WPUB = 0b11111110;
 11523     009F  30FE               	movlw	254
 11524     00A0  0024               	movlb	4	; select bank4
 11525     00A1  008D               	movwf	13	;volatile
 11526                           
 11527                           ;main.c: 221:                 Lcd_Clear();
 11528     00A2  319C  2474  3180   	fcall	i1_Lcd_Clear
 11529                           
 11530                           ;main.c: 222:                 LATAbits.LATA3 = 1;
 11531     00A5  158C               	bsf	12,3	;volatile
 11532                           
 11533                           ;main.c: 224:                 if(!strcmp(clave, clave_enter))
 11534     00A6  305E               	movlw	(low (_clave_enter| (0+256)))& (0+255)
 11535     00A7  00F0               	movwf	strcmp@r
 11536     00A8  3038               	movlw	(low (_clave| (0+256)))& (0+255)
 11537     00A9  319E  26A1  3180   	fcall	_strcmp
 11538     00AC  0870               	movf	?_strcmp,w
 11539     00AD  0471               	iorwf	?_strcmp+1,w
 11540     00AE  1D03               	btfss	3,2
 11541     00AF  28D9               	goto	i1l5141
 11542                           
 11543                           ;main.c: 225:                 {;main.c: 226:                     Lcd_Set_Cursor(1,6);
 11544     00B0  3006               	movlw	6
 11545     00B1  00F3               	movwf	i1Lcd_Set_Cursor@b
 11546     00B2  3001               	movlw	1
 11547     00B3  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11548                           
 11549                           ;main.c: 227:                     Lcd_Write_String("ACCESO");
 11550     00B6  3078               	movlw	low (STR_10| (0+32768))
 11551     00B7  00F5               	movwf	i1Lcd_Write_String@a
 11552     00B8  3098               	movlw	high (STR_10| (0+32768))
 11553     00B9  00F6               	movwf	i1Lcd_Write_String@a+1
 11554     00BA  319C  24F2  3180   	fcall	i1_Lcd_Write_String
 11555                           
 11556                           ;main.c: 228:                     Lcd_Set_Cursor(2,5);
 11557     00BD  3005               	movlw	5
 11558     00BE  00F3               	movwf	i1Lcd_Set_Cursor@b
 11559     00BF  3002               	movlw	2
 11560     00C0  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11561                           
 11562                           ;main.c: 229:                     Lcd_Write_String("APROBADO");
 11563     00C3  305F               	movlw	low (STR_11| (0+32768))
 11564     00C4  00F5               	movwf	i1Lcd_Write_String@a
 11565     00C5  3098               	movlw	high (STR_11| (0+32768))
 11566     00C6  00F6               	movwf	i1Lcd_Write_String@a+1
 11567     00C7  319C  24F2  3180   	fcall	i1_Lcd_Write_String
 11568                           
 11569                           ;main.c: 230:                     LATAbits.LATA2 = 0;
 11570     00CA  0022               	movlb	2	; select bank2
 11571     00CB  110C               	bcf	12,2	;volatile
 11572                           
 11573                           ;main.c: 231:                     LATCbits.LATC5 = 0;
 11574     00CC  128E               	bcf	14,5	;volatile
 11575                           
 11576                           ;main.c: 232:                     _delay((unsigned long)((15000)*(4000000/4000.0)));
 11577     00CD  304D               	movlw	77
 11578     00CE  00FB               	movwf	??_IOC+1
 11579     00CF  3019               	movlw	25
 11580     00D0  00FA               	movwf	??_IOC
 11581     00D1  3050               	movlw	80
 11582     00D2                     u665_27:
 11583     00D2  0B89               	decfsz	9,f
 11584     00D3  28D2               	goto	u665_27
 11585     00D4  0BFA               	decfsz	??_IOC,f
 11586     00D5  28D2               	goto	u665_27
 11587     00D6  0BFB               	decfsz	??_IOC+1,f
 11588     00D7  28D2               	goto	u665_27
 11589                           
 11590                           ;main.c: 233:                 }
 11591     00D8  2903               	goto	i1l5155
 11592     00D9                     i1l5141:
 11593                           
 11594                           ;main.c: 235:                 {;main.c: 236:                     Lcd_Set_Cursor(1,6);
 11595     00D9  3006               	movlw	6
 11596     00DA  00F3               	movwf	i1Lcd_Set_Cursor@b
 11597     00DB  3001               	movlw	1
 11598     00DC  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11599                           
 11600                           ;main.c: 237:                     Lcd_Write_String("ACCESO");
 11601     00DF  3078               	movlw	low (STR_10| (0+32768))
 11602     00E0  00F5               	movwf	i1Lcd_Write_String@a
 11603     00E1  3098               	movlw	high (STR_10| (0+32768))
 11604     00E2  00F6               	movwf	i1Lcd_Write_String@a+1
 11605     00E3  319C  24F2  3180   	fcall	i1_Lcd_Write_String
 11606                           
 11607                           ;main.c: 238:                     Lcd_Set_Cursor(2,5);
 11608     00E6  3005               	movlw	5
 11609     00E7  00F3               	movwf	i1Lcd_Set_Cursor@b
 11610     00E8  3002               	movlw	2
 11611     00E9  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11612                           
 11613                           ;main.c: 239:                     Lcd_Write_String("DENEGADO");
 11614     00EC  3068               	movlw	low (STR_13| (0+32768))
 11615     00ED  00F5               	movwf	i1Lcd_Write_String@a
 11616     00EE  3098               	movlw	high (STR_13| (0+32768))
 11617     00EF  00F6               	movwf	i1Lcd_Write_String@a+1
 11618     00F0  319C  24F2  3180   	fcall	i1_Lcd_Write_String
 11619                           
 11620                           ;main.c: 240:                     LATAbits.LATA1 = 0;
 11621     00F3  0022               	movlb	2	; select bank2
 11622     00F4  108C               	bcf	12,1	;volatile
 11623                           
 11624                           ;main.c: 241:                     LATCbits.LATC2 = 1;
 11625     00F5  150E               	bsf	14,2	;volatile
 11626                           
 11627                           ;main.c: 242:                     LATCbits.LATC5 = 1;
 11628     00F6  168E               	bsf	14,5	;volatile
 11629                           
 11630                           ;main.c: 243:                     _delay((unsigned long)((5000)*(4000000/4000.0)));
 11631     00F7  301A               	movlw	26
 11632     00F8  00FB               	movwf	??_IOC+1
 11633     00F9  305E               	movlw	94
 11634     00FA  00FA               	movwf	??_IOC
 11635     00FB  306E               	movlw	110
 11636     00FC                     u666_27:
 11637     00FC  0B89               	decfsz	9,f
 11638     00FD  28FC               	goto	u666_27
 11639     00FE  0BFA               	decfsz	??_IOC,f
 11640     00FF  28FC               	goto	u666_27
 11641     0100  0BFB               	decfsz	??_IOC+1,f
 11642     0101  28FC               	goto	u666_27
 11643     0102  3200               	nop2
 11644     0103                     i1l5155:
 11645                           
 11646                           ;main.c: 245:                 cont_key = 0;
 11647     0103  0022               	movlb	2	; select bank2
 11648     0104  01B2               	clrf	_cont_key^(0+256)
 11649     0105  01B3               	clrf	(_cont_key+1)^(0+256)
 11650                           
 11651                           ;main.c: 246:                 estado = 0;
 11652     0106  01B0               	clrf	_estado^(0+256)
 11653     0107  01B1               	clrf	(_estado+1)^(0+256)
 11654                           
 11655                           ;main.c: 247:                 Lcd_Clear();
 11656     0108  319C  2474  3180   	fcall	i1_Lcd_Clear
 11657                           
 11658                           ;main.c: 248:                 LATAbits.LATA2 = 1;
 11659     010B  150C               	bsf	12,2	;volatile
 11660                           
 11661                           ;main.c: 249:                 LATAbits.LATA1 = 1;
 11662     010C  148C               	bsf	12,1	;volatile
 11663                           
 11664                           ;main.c: 250:                 LATCbits.LATC2 = 0;
 11665     010D  110E               	bcf	14,2	;volatile
 11666                           
 11667                           ;main.c: 251:                 LATCbits.LATC5 = 1;
 11668     010E  168E               	bsf	14,5	;volatile
 11669                           
 11670                           ;main.c: 254:                 LATBbits.LATB1 = 0;
 11671     010F  108D               	bcf	13,1	;volatile
 11672                           
 11673                           ;main.c: 255:                 LATBbits.LATB2 = 0;
 11674     0110  110D               	bcf	13,2	;volatile
 11675                           
 11676                           ;main.c: 256:                 LATBbits.LATB3 = 0;
 11677     0111  118D               	bcf	13,3	;volatile
 11678                           
 11679                           ;main.c: 259:                 WPUB = 0b00001110;
 11680     0112  300E               	movlw	14
 11681     0113  0024               	movlb	4	; select bank4
 11682     0114  008D               	movwf	13	;volatile
 11683     0115                     i1l5177:
 11684                           
 11685                           ;main.c: 261:                 IOCBF = 0;
 11686     0115  0027               	movlb	7	; select bank7
 11687     0116  0196               	clrf	22	;volatile
 11688                           
 11689                           ;main.c: 262:                 break;
 11690     0117  2A0D               	goto	i1l5279
 11691     0118                     i1l5179:
 11692                           
 11693                           ;main.c: 264:                 Lcd_Set_Cursor(1,1);
 11694     0118  01F3               	clrf	i1Lcd_Set_Cursor@b
 11695     0119  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11696     011A  3001               	movlw	1
 11697     011B  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11698                           
 11699                           ;main.c: 265:                 Lcd_Write_String("INGRESAR CLAVE");
 11700     011E  3013               	movlw	low ((STR_7+2)| (0+32768))
 11701     011F  00F5               	movwf	i1Lcd_Write_String@a
 11702     0120  3098               	movlw	high ((STR_7+2)| (0+32768))
 11703     0121  00F6               	movwf	i1Lcd_Write_String@a+1
 11704     0122  319C  24F2  3180   	fcall	i1_Lcd_Write_String
 11705     0125                     i1l5195:	
 11706                           ;main.c: 267:                 while(cont_key < 4)
 11707                           
 11708                           
 11709                           ;main.c: 267:                 while(cont_key < 4)
 11710     0125  0022               	movlb	2	; select bank2
 11711     0126  0833               	movf	(_cont_key+1)^(0+256),w
 11712     0127  3A80               	xorlw	128
 11713     0128  00FA               	movwf	??_IOC
 11714     0129  3080               	movlw	128
 11715     012A  027A               	subwf	??_IOC,w
 11716     012B  1D03               	skipz
 11717     012C  292F               	goto	u650_25
 11718     012D  3004               	movlw	4
 11719     012E  0232               	subwf	_cont_key^(0+256),w
 11720     012F                     u650_25:
 11721     012F  1803               	btfsc	3,0
 11722     0130  2950               	goto	i1l5197
 11723                           
 11724                           ;main.c: 268:                 {;main.c: 269:                     tecla = Keypad_Get_Char
      +                          ();
 11725     0131  3186  269F  3180   	fcall	_Keypad_Get_Char
 11726     0134  00FD               	movwf	_tecla
 11727                           
 11728                           ;main.c: 270:                     if(tecla != 0)
 11729     0135  087D               	movf	_tecla,w
 11730     0136  1903               	btfsc	3,2
 11731     0137  2925               	goto	i1l5195
 11732                           
 11733                           ;main.c: 271:                     {;main.c: 272:                         clave[cont_key]
      +                           = tecla;
 11734     0138  0022               	movlb	2	; select bank2
 11735     0139  0832               	movf	_cont_key^(0+256),w
 11736     013A  3E38               	addlw	(low (_clave| (0+256)))& (0+255)
 11737     013B  0086               	movwf	6
 11738     013C  3001               	movlw	1	; select bank2/3
 11739     013D  0087               	movwf	7
 11740     013E  087D               	movf	_tecla,w
 11741     013F  0081               	movwf	1
 11742                           
 11743                           ;main.c: 273:                         Lcd_Set_Cursor(2,7+cont_key);
 11744     0140  0832               	movf	_cont_key^(0+256),w
 11745     0141  3E07               	addlw	7
 11746     0142  00F3               	movwf	i1Lcd_Set_Cursor@b
 11747     0143  3002               	movlw	2
 11748     0144  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11749                           
 11750                           ;main.c: 274:                         Lcd_Write_Char('*');
 11751     0147  302A               	movlw	42
 11752     0148  319E  2628  3180   	fcall	i1_Lcd_Write_Char
 11753                           
 11754                           ;main.c: 275:                         cont_key++;
 11755     014B  3001               	movlw	1
 11756     014C  07B2               	addwf	_cont_key^(0+256),f
 11757     014D  3000               	movlw	0
 11758     014E  3DB3               	addwfc	(_cont_key+1)^(0+256),f
 11759     014F  2925               	goto	i1l5195
 11760     0150                     i1l5197:
 11761                           
 11762                           ;main.c: 278:                 _delay((unsigned long)((200)*(4000000/4000.0)));
 11763     0150  3002               	movlw	2
 11764     0151  00FB               	movwf	??_IOC+1
 11765     0152  3004               	movlw	4
 11766     0153  00FA               	movwf	??_IOC
 11767     0154  30BA               	movlw	186
 11768     0155                     u667_27:
 11769     0155  0B89               	decfsz	9,f
 11770     0156  2955               	goto	u667_27
 11771     0157  0BFA               	decfsz	??_IOC,f
 11772     0158  2955               	goto	u667_27
 11773     0159  0BFB               	decfsz	??_IOC+1,f
 11774     015A  2955               	goto	u667_27
 11775     015B  3200               	nop2
 11776                           
 11777                           ;main.c: 279:                 WPUB = 0b11111110;
 11778     015C  30FE               	movlw	254
 11779     015D  0024               	movlb	4	; select bank4
 11780     015E  008D               	movwf	13	;volatile
 11781                           
 11782                           ;main.c: 280:                 Lcd_Clear();
 11783     015F  319C  2474  3180   	fcall	i1_Lcd_Clear
 11784                           
 11785                           ;main.c: 282:                 if(!strcmp(clave, clave_enter))
 11786     0162  305E               	movlw	(low (_clave_enter| (0+256)))& (0+255)
 11787     0163  00F0               	movwf	strcmp@r
 11788     0164  3038               	movlw	(low (_clave| (0+256)))& (0+255)
 11789     0165  319E  26A1  3180   	fcall	_strcmp
 11790     0168  0870               	movf	?_strcmp,w
 11791     0169  0471               	iorwf	?_strcmp+1,w
 11792     016A  1D03               	btfss	3,2
 11793     016B  29CC               	goto	i1l5239
 11794                           
 11795                           ;main.c: 283:                 {;main.c: 284:                     Lcd_Set_Cursor(1,1);
 11796     016C  01F3               	clrf	i1Lcd_Set_Cursor@b
 11797     016D  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11798     016E  3001               	movlw	1
 11799     016F  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11800                           
 11801                           ;main.c: 285:                     Lcd_Write_String("CAMBIAR CLAVE");
 11802     0172  3024               	movlw	low ((STR_8+2)| (0+32768))
 11803     0173  00F5               	movwf	i1Lcd_Write_String@a
 11804     0174  3098               	movlw	high ((STR_8+2)| (0+32768))
 11805     0175  00F6               	movwf	i1Lcd_Write_String@a+1
 11806     0176  319C  24F2  3180   	fcall	i1_Lcd_Write_String
 11807                           
 11808                           ;main.c: 286:                     cont_key = 0;
 11809     0179  0022               	movlb	2	; select bank2
 11810     017A  01B2               	clrf	_cont_key^(0+256)
 11811     017B  01B3               	clrf	(_cont_key+1)^(0+256)
 11812                           
 11813                           ;main.c: 288:                     WPUB = 0b00001110;
 11814     017C  300E               	movlw	14
 11815     017D  0024               	movlb	4	; select bank4
 11816     017E  008D               	movwf	13	;volatile
 11817     017F                     i1l5223:	
 11818                           ;main.c: 290:                     while(cont_key < 4) {
 11819                           
 11820                           
 11821                           ;main.c: 290:                     while(cont_key < 4) {
 11822     017F  0022               	movlb	2	; select bank2
 11823     0180  0833               	movf	(_cont_key+1)^(0+256),w
 11824     0181  3A80               	xorlw	128
 11825     0182  00FA               	movwf	??_IOC
 11826     0183  3080               	movlw	128
 11827     0184  027A               	subwf	??_IOC,w
 11828     0185  1D03               	skipz
 11829     0186  2989               	goto	u653_25
 11830     0187  3004               	movlw	4
 11831     0188  0232               	subwf	_cont_key^(0+256),w
 11832     0189                     u653_25:
 11833     0189  1803               	btfsc	3,0
 11834     018A  29AA               	goto	i1l5225
 11835                           
 11836                           ;main.c: 291:                         tecla = Keypad_Get_Char();
 11837     018B  3186  269F  3180   	fcall	_Keypad_Get_Char
 11838     018E  00FD               	movwf	_tecla
 11839                           
 11840                           ;main.c: 292:                         if (tecla != 0) {
 11841     018F  087D               	movf	_tecla,w
 11842     0190  1903               	btfsc	3,2
 11843     0191  297F               	goto	i1l5223
 11844                           
 11845                           ;main.c: 293:                             clave_enter[cont_key] = tecla;
 11846     0192  0022               	movlb	2	; select bank2
 11847     0193  0832               	movf	_cont_key^(0+256),w
 11848     0194  3E5E               	addlw	(low (_clave_enter| (0+256)))& (0+255)
 11849     0195  0086               	movwf	6
 11850     0196  3001               	movlw	1	; select bank2/3
 11851     0197  0087               	movwf	7
 11852     0198  087D               	movf	_tecla,w
 11853     0199  0081               	movwf	1
 11854                           
 11855                           ;main.c: 294:                             Lcd_Set_Cursor(2,7+cont_key);
 11856     019A  0832               	movf	_cont_key^(0+256),w
 11857     019B  3E07               	addlw	7
 11858     019C  00F3               	movwf	i1Lcd_Set_Cursor@b
 11859     019D  3002               	movlw	2
 11860     019E  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11861                           
 11862                           ;main.c: 295:                             Lcd_Write_Char('*');
 11863     01A1  302A               	movlw	42
 11864     01A2  319E  2628  3180   	fcall	i1_Lcd_Write_Char
 11865                           
 11866                           ;main.c: 296:                             cont_key++;
 11867     01A5  3001               	movlw	1
 11868     01A6  07B2               	addwf	_cont_key^(0+256),f
 11869     01A7  3000               	movlw	0
 11870     01A8  3DB3               	addwfc	(_cont_key+1)^(0+256),f
 11871     01A9  297F               	goto	i1l5223
 11872     01AA                     i1l5225:
 11873                           
 11874                           ;main.c: 299:                     _delay((unsigned long)((200)*(4000000/4000.0)));
 11875     01AA  3002               	movlw	2
 11876     01AB  00FB               	movwf	??_IOC+1
 11877     01AC  3004               	movlw	4
 11878     01AD  00FA               	movwf	??_IOC
 11879     01AE  30BA               	movlw	186
 11880     01AF                     u668_27:
 11881     01AF  0B89               	decfsz	9,f
 11882     01B0  29AF               	goto	u668_27
 11883     01B1  0BFA               	decfsz	??_IOC,f
 11884     01B2  29AF               	goto	u668_27
 11885     01B3  0BFB               	decfsz	??_IOC+1,f
 11886     01B4  29AF               	goto	u668_27
 11887     01B5  3200               	nop2
 11888                           
 11889                           ;main.c: 300:                     WPUB = 0b11111110;
 11890     01B6  30FE               	movlw	254
 11891     01B7  0024               	movlb	4	; select bank4
 11892     01B8  008D               	movwf	13	;volatile
 11893                           
 11894                           ;main.c: 301:                     Lcd_Clear();
 11895     01B9  319C  2474  3180   	fcall	i1_Lcd_Clear
 11896                           
 11897                           ;main.c: 303:                     Lcd_Set_Cursor(1,1);
 11898     01BC  01F3               	clrf	i1Lcd_Set_Cursor@b
 11899     01BD  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11900     01BE  3001               	movlw	1
 11901     01BF  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11902                           
 11903                           ;main.c: 304:                     Lcd_Write_String("CLAVE CAMBIADA");
 11904     01C2  3041               	movlw	low (STR_16| (0+32768))
 11905     01C3  00F5               	movwf	i1Lcd_Write_String@a
 11906     01C4  3098               	movlw	high (STR_16| (0+32768))
 11907     01C5  00F6               	movwf	i1Lcd_Write_String@a+1
 11908     01C6  319C  24F2  3180   	fcall	i1_Lcd_Write_String
 11909                           
 11910                           ;main.c: 305:                     LATAbits.LATA2 = 0;
 11911     01C9  0022               	movlb	2	; select bank2
 11912     01CA  110C               	bcf	12,2	;volatile
 11913     01CB  29DC               	goto	L11
 11914     01CC                     i1l5239:	
 11915                           ;main.c: 308:                 } else {
 11916                           
 11917                           ;main.c: 306:                     LATAbits.LATA3 = 1;
 11918                           
 11919                           
 11920                           ;main.c: 309:                     Lcd_Set_Cursor(1,1);
 11921     01CC  01F3               	clrf	i1Lcd_Set_Cursor@b
 11922     01CD  0AF3               	incf	i1Lcd_Set_Cursor@b,f
 11923     01CE  3001               	movlw	1
 11924     01CF  3190  20D6  3180   	fcall	i1_Lcd_Set_Cursor
 11925                           
 11926                           ;main.c: 310:                     Lcd_Write_String("CLAVE INCORRECTA");
 11927     01D2  3000               	movlw	low (STR_17| (0+32768))
 11928     01D3  00F5               	movwf	i1Lcd_Write_String@a
 11929     01D4  3098               	movlw	high (STR_17| (0+32768))
 11930     01D5  00F6               	movwf	i1Lcd_Write_String@a+1
 11931     01D6  319C  24F2  3180   	fcall	i1_Lcd_Write_String
 11932                           
 11933                           ;main.c: 311:                     LATCbits.LATC2 = 1;
 11934     01D9  0022               	movlb	2	; select bank2
 11935     01DA  150E               	bsf	14,2	;volatile
 11936                           
 11937                           ;main.c: 312:                     LATAbits.LATA1 = 0;
 11938     01DB  108C               	bcf	12,1	;volatile
 11939     01DC                     L11:
 11940                           
 11941                           ;main.c: 313:                     LATAbits.LATA3 = 1;
 11942     01DC  158C               	bsf	12,3	;volatile
 11943                           
 11944                           ;main.c: 307:                     _delay((unsigned long)((3000)*(4000000/4000.0)));
 11945     01DD  3010               	movlw	16
 11946     01DE  00FB               	movwf	??_IOC+1
 11947     01DF  3039               	movlw	57
 11948     01E0  00FA               	movwf	??_IOC
 11949     01E1  300E               	movlw	14
 11950     01E2                     u669_27:
 11951     01E2  0B89               	decfsz	9,f
 11952     01E3  29E2               	goto	u669_27
 11953     01E4  0BFA               	decfsz	??_IOC,f
 11954     01E5  29E2               	goto	u669_27
 11955     01E6  0BFB               	decfsz	??_IOC+1,f
 11956     01E7  29E2               	goto	u669_27
 11957                           
 11958                           ;main.c: 316:                 cont_key = 0;
 11959     01E8  0022               	movlb	2	; select bank2
 11960     01E9  01B2               	clrf	_cont_key^(0+256)
 11961     01EA  01B3               	clrf	(_cont_key+1)^(0+256)
 11962                           
 11963                           ;main.c: 317:                 estado = 0;
 11964     01EB  01B0               	clrf	_estado^(0+256)
 11965     01EC  01B1               	clrf	(_estado+1)^(0+256)
 11966                           
 11967                           ;main.c: 318:                 Lcd_Clear();
 11968     01ED  319C  2474  3180   	fcall	i1_Lcd_Clear
 11969                           
 11970                           ;main.c: 320:                 LATBbits.LATB1 = 0;
 11971     01F0  108D               	bcf	13,1	;volatile
 11972                           
 11973                           ;main.c: 321:                 LATBbits.LATB2 = 0;
 11974     01F1  110D               	bcf	13,2	;volatile
 11975                           
 11976                           ;main.c: 322:                 LATBbits.LATB3 = 0;
 11977     01F2  118D               	bcf	13,3	;volatile
 11978                           
 11979                           ;main.c: 324:                 WPUB = 0b00001110;
 11980     01F3  300E               	movlw	14
 11981     01F4  0024               	movlb	4	; select bank4
 11982     01F5  008D               	movwf	13	;volatile
 11983                           
 11984                           ;main.c: 325:                 LATAbits.LATA3 = 1;
 11985     01F6  0022               	movlb	2	; select bank2
 11986     01F7  158C               	bsf	12,3	;volatile
 11987                           
 11988                           ;main.c: 326:                 LATAbits.LATA1 = 1;
 11989     01F8  148C               	bsf	12,1	;volatile
 11990                           
 11991                           ;main.c: 327:                 LATAbits.LATA2 = 1;
 11992     01F9  150C               	bsf	12,2	;volatile
 11993                           
 11994                           ;main.c: 328:                 LATCbits.LATC2 = 0;
 11995     01FA  110E               	bcf	14,2	;volatile
 11996     01FB  2915               	goto	i1l5177
 11997     01FC                     i1l5277:
 11998                           
 11999                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12000                           ; Switch size 1, requested type "simple"
 12001                           ; Number of cases is 1, Range of values is 0 to 0
 12002                           ; switch strategies available:
 12003                           ; Name         Instructions Cycles
 12004                           ; simple_byte            4     3 (average)
 12005                           ; direct_byte            8     6 (fixed)
 12006                           ; jumptable            260     6 (fixed)
 12007                           ;	Chosen strategy is simple_byte
 12008     01FC  0022               	movlb	2	; select bank2
 12009     01FD  0831               	movf	(_estado+1)^(0+256),w
 12010     01FE  3A00               	xorlw	0	; case 0
 12011     01FF  1903               	skipnz
 12012     0200  2A02               	goto	i1l5467
 12013     0201  2A0D               	goto	i1l5279
 12014     0202                     i1l5467:
 12015                           
 12016                           ; Switch size 1, requested type "simple"
 12017                           ; Number of cases is 3, Range of values is 0 to 2
 12018                           ; switch strategies available:
 12019                           ; Name         Instructions Cycles
 12020                           ; simple_byte           10     6 (average)
 12021                           ; direct_byte           12     6 (fixed)
 12022                           ; jumptable            260     6 (fixed)
 12023                           ;	Chosen strategy is simple_byte
 12024     0202  0830               	movf	_estado^(0+256),w
 12025     0203  3A00               	xorlw	0	; case 0
 12026     0204  1903               	skipnz
 12027     0205  2819               	goto	i1l5079
 12028     0206  3A01               	xorlw	1	; case 1
 12029     0207  1903               	skipnz
 12030     0208  285B               	goto	i1l5103
 12031     0209  3A03               	xorlw	3	; case 2
 12032     020A  1903               	skipnz
 12033     020B  2918               	goto	i1l5179
 12034     020C  2A0D               	goto	i1l5279
 12035     020D                     i1l5279:
 12036                           
 12037                           ;main.c: 177:     while(IOCBF != 0) {
 12038     020D  0027               	movlb	7	; select bank7
 12039     020E  0816               	movf	22,w	;volatile
 12040     020F  1D03               	btfss	3,2
 12041     0210  29FC               	goto	i1l5277
 12042                           
 12043                           ;main.c: 334:     LATAbits.LATA3 = 1;
 12044     0211  0022               	movlb	2	; select bank2
 12045     0212  158C               	bsf	12,3	;volatile
 12046                           
 12047                           ;main.c: 335:     INTCONbits.IOCIF = 0;
 12048     0213  100B               	bcf	11,0	;volatile
 12049     0214  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12050     0215  0009               	retfie
 12051     0216                     __end_of_IOC:
 12052                           
 12053                           	psect	text42
 12054     1CF2                     __ptext42:	
 12055 ;; *************** function i1_Lcd_Write_String *****************
 12056 ;; Defined at:
 12057 ;;		line 104 in file "lcd.c"
 12058 ;; Parameters:    Size  Location     Type
 12059 ;;  a               2    5[COMMON] PTR const unsigned char 
 12060 ;;		 -> STR_17(17), STR_16(15), STR_15(14), STR_14(15), 
 12061 ;;		 -> STR_13(9), STR_12(7), STR_11(9), STR_10(7), 
 12062 ;;		 -> STR_9(15), STR_8(16), STR_7(17), STR_6(2), 
 12063 ;;		 -> STR_4(2), buffer(20), STR_1(15), 
 12064 ;; Auto vars:     Size  Location     Type
 12065 ;;  i               2    8[COMMON] int 
 12066 ;; Return value:  Size  Location     Type
 12067 ;;                  1    wreg      void 
 12068 ;; Registers used:
 12069 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12070 ;; Tracked objects:
 12071 ;;		On entry : 0/2
 12072 ;;		On exit  : 0/0
 12073 ;;		Unchanged: 0/0
 12074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12075 ;;      Params:         2       0       0       0       0       0       0       0
 12076 ;;      Locals:         2       0       0       0       0       0       0       0
 12077 ;;      Temps:          1       0       0       0       0       0       0       0
 12078 ;;      Totals:         5       0       0       0       0       0       0       0
 12079 ;;Total ram usage:        5 bytes
 12080 ;; Hardware stack levels used: 1
 12081 ;; Hardware stack levels required when called: 2
 12082 ;; This function calls:
 12083 ;;		i1_Lcd_Write_Char
 12084 ;; This function is called by:
 12085 ;;		_IOC
 12086 ;; This function uses a non-reentrant model
 12087 ;;
 12088                           
 12089     1CF2                     i1_Lcd_Write_String:	
 12090                           ;psect for function i1_Lcd_Write_String
 12091                           
 12092                           
 12093                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
 12094                           
 12095                           ;incstack = 0
 12096                           ; Regs used in i1_Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12097     1CF2  01F8               	clrf	i1Lcd_Write_String@i
 12098     1CF3  01F9               	clrf	i1Lcd_Write_String@i+1
 12099     1CF4                     i1l4921:
 12100     1CF4  0875               	movf	i1Lcd_Write_String@a,w
 12101     1CF5  0778               	addwf	i1Lcd_Write_String@i,w
 12102     1CF6  0084               	movwf	4
 12103     1CF7  0876               	movf	i1Lcd_Write_String@a+1,w
 12104     1CF8  3D79               	addwfc	i1Lcd_Write_String@i+1,w
 12105     1CF9  0085               	movwf	5
 12106     1CFA  0012               	moviw fsr0++
 12107     1CFB  1903               	btfsc	3,2
 12108     1CFC  0008               	return
 12109                           
 12110                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
 12111     1CFD  0875               	movf	i1Lcd_Write_String@a,w
 12112     1CFE  0778               	addwf	i1Lcd_Write_String@i,w
 12113     1CFF  0084               	movwf	4
 12114     1D00  0876               	movf	i1Lcd_Write_String@a+1,w
 12115     1D01  3D79               	addwfc	i1Lcd_Write_String@i+1,w
 12116     1D02  0085               	movwf	5
 12117     1D03  0800               	movf	0,w	;code access
 12118     1D04  319E  2628  319C   	fcall	i1_Lcd_Write_Char
 12119     1D07  3001               	movlw	1
 12120     1D08  07F8               	addwf	i1Lcd_Write_String@i,f
 12121     1D09  3000               	movlw	0
 12122     1D0A  3DF9               	addwfc	i1Lcd_Write_String@i+1,f
 12123     1D0B  2CF4               	goto	i1l4921
 12124     1D0C                     __end_ofi1_Lcd_Write_String:
 12125                           
 12126                           	psect	text43
 12127     1E28                     __ptext43:	
 12128 ;; *************** function i1_Lcd_Write_Char *****************
 12129 ;; Defined at:
 12130 ;;		line 88 in file "lcd.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;  a               1    wreg     unsigned char 
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;  a               1    4[COMMON] unsigned char 
 12135 ;;  y               1    3[COMMON] unsigned char 
 12136 ;;  temp            1    2[COMMON] unsigned char 
 12137 ;; Return value:  Size  Location     Type
 12138 ;;                  1    wreg      void 
 12139 ;; Registers used:
 12140 ;;		wreg, status,2, status,0, pclath, cstack
 12141 ;; Tracked objects:
 12142 ;;		On entry : 0/2
 12143 ;;		On exit  : 1F/2
 12144 ;;		Unchanged: 0/0
 12145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12146 ;;      Params:         0       0       0       0       0       0       0       0
 12147 ;;      Locals:         3       0       0       0       0       0       0       0
 12148 ;;      Temps:          1       0       0       0       0       0       0       0
 12149 ;;      Totals:         4       0       0       0       0       0       0       0
 12150 ;;Total ram usage:        4 bytes
 12151 ;; Hardware stack levels used: 1
 12152 ;; Hardware stack levels required when called: 1
 12153 ;; This function calls:
 12154 ;;		i1_Lcd_Port
 12155 ;; This function is called by:
 12156 ;;		_IOC
 12157 ;;		i1_Lcd_Write_String
 12158 ;; This function uses a non-reentrant model
 12159 ;;
 12160                           
 12161     1E28                     i1_Lcd_Write_Char:	
 12162                           ;psect for function i1_Lcd_Write_Char
 12163                           
 12164                           
 12165                           ;incstack = 0
 12166                           ; Regs used in i1_Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
 12167                           ;i1Lcd_Write_Char@a stored from wreg
 12168     1E28  00F4               	movwf	i1Lcd_Write_Char@a
 12169                           
 12170                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
 12171     1E29  0874               	movf	i1Lcd_Write_Char@a,w
 12172     1E2A  390F               	andlw	15
 12173     1E2B  00F2               	movwf	i1Lcd_Write_Char@temp
 12174                           
 12175                           ;lcd.c: 92:     y = a&0xF0;
 12176     1E2C  0874               	movf	i1Lcd_Write_Char@a,w
 12177     1E2D  39F0               	andlw	240
 12178     1E2E  00F3               	movwf	i1Lcd_Write_Char@y
 12179                           
 12180                           ;lcd.c: 93:     LATCbits.LATC1 = 1;
 12181     1E2F  0022               	movlb	2	; select bank2
 12182     1E30  148E               	bsf	14,1	;volatile
 12183                           
 12184                           ;lcd.c: 94:     Lcd_Port(y>>4);
 12185     1E31  0873               	movf	i1Lcd_Write_Char@y,w
 12186     1E32  00F1               	movwf	??i1_Lcd_Write_Char
 12187     1E33  3004               	movlw	4
 12188     1E34                     u565_25:
 12189     1E34  36F1               	lsrf	??i1_Lcd_Write_Char,f
 12190     1E35  0B89               	decfsz	9,f
 12191     1E36  2E34               	goto	u565_25
 12192     1E37  0871               	movf	??i1_Lcd_Write_Char,w
 12193     1E38  319C  24C6  319E   	fcall	i1_Lcd_Port
 12194                           
 12195                           ;lcd.c: 95:     LATCbits.LATC0 = 1;
 12196     1E3B  140E               	bsf	14,0	;volatile
 12197                           
 12198                           ;lcd.c: 96:     _delay((unsigned long)((40)*(4000000/4000000.0)));
 12199     1E3C  300D               	movlw	13
 12200     1E3D                     u670_27:
 12201     1E3D  0B89               	decfsz	9,f
 12202     1E3E  2E3D               	goto	u670_27
 12203     1E3F  0000               	nop
 12204                           
 12205                           ;lcd.c: 97:     LATCbits.LATC0 = 0;
 12206     1E40  0022               	movlb	2	; select bank2
 12207     1E41  100E               	bcf	14,0	;volatile
 12208                           
 12209                           ;lcd.c: 98:     Lcd_Port(temp);
 12210     1E42  0872               	movf	i1Lcd_Write_Char@temp,w
 12211     1E43  319C  24C6  319E   	fcall	i1_Lcd_Port
 12212                           
 12213                           ;lcd.c: 99:     LATCbits.LATC0 = 1;
 12214     1E46  140E               	bsf	14,0	;volatile
 12215                           
 12216                           ;lcd.c: 100:     _delay((unsigned long)((40)*(4000000/4000000.0)));
 12217     1E47  300D               	movlw	13
 12218     1E48                     u671_27:
 12219     1E48  0B89               	decfsz	9,f
 12220     1E49  2E48               	goto	u671_27
 12221     1E4A  0000               	nop
 12222                           
 12223                           ;lcd.c: 101:     LATCbits.LATC0 = 0;
 12224     1E4B  0022               	movlb	2	; select bank2
 12225     1E4C  100E               	bcf	14,0	;volatile
 12226     1E4D  0008               	return
 12227     1E4E                     __end_ofi1_Lcd_Write_Char:
 12228                           
 12229                           	psect	text44
 12230     10D6                     __ptext44:	
 12231 ;; *************** function i1_Lcd_Set_Cursor *****************
 12232 ;; Defined at:
 12233 ;;		line 26 in file "lcd.c"
 12234 ;; Parameters:    Size  Location     Type
 12235 ;;  a               1    wreg     unsigned char 
 12236 ;;  b               1    3[COMMON] unsigned char 
 12237 ;; Auto vars:     Size  Location     Type
 12238 ;;  a               1    5[COMMON] unsigned char 
 12239 ;;  temp            1    8[COMMON] unsigned char 
 12240 ;;  y               1    7[COMMON] unsigned char 
 12241 ;;  z               1    6[COMMON] unsigned char 
 12242 ;; Return value:  Size  Location     Type
 12243 ;;                  1    wreg      void 
 12244 ;; Registers used:
 12245 ;;		wreg, status,2, status,0, pclath, cstack
 12246 ;; Tracked objects:
 12247 ;;		On entry : 0/2
 12248 ;;		On exit  : 0/0
 12249 ;;		Unchanged: 0/0
 12250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12251 ;;      Params:         1       0       0       0       0       0       0       0
 12252 ;;      Locals:         4       0       0       0       0       0       0       0
 12253 ;;      Temps:          1       0       0       0       0       0       0       0
 12254 ;;      Totals:         6       0       0       0       0       0       0       0
 12255 ;;Total ram usage:        6 bytes
 12256 ;; Hardware stack levels used: 1
 12257 ;; Hardware stack levels required when called: 2
 12258 ;; This function calls:
 12259 ;;		i1_Lcd_Cmd
 12260 ;; This function is called by:
 12261 ;;		_IOC
 12262 ;; This function uses a non-reentrant model
 12263 ;;
 12264                           
 12265     10D6                     i1_Lcd_Set_Cursor:	
 12266                           ;psect for function i1_Lcd_Set_Cursor
 12267                           
 12268                           
 12269                           ;incstack = 0
 12270                           ; Regs used in i1_Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
 12271                           ;i1Lcd_Set_Cursor@a stored from wreg
 12272     10D6  00F5               	movwf	i1Lcd_Set_Cursor@a
 12273                           
 12274                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
 12275     10D7  0375               	decf	i1Lcd_Set_Cursor@a,w
 12276     10D8  1D03               	btfss	3,2
 12277     10D9  28F0               	goto	i1l4885
 12278                           
 12279                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
 12280     10DA  0873               	movf	i1Lcd_Set_Cursor@b,w
 12281     10DB  3E7F               	addlw	127
 12282     10DC  00F8               	movwf	i1Lcd_Set_Cursor@temp
 12283                           
 12284                           ;lcd.c: 32:         z = temp>>4;
 12285     10DD  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12286     10DE  00F4               	movwf	??i1_Lcd_Set_Cursor
 12287     10DF  3004               	movlw	4
 12288     10E0                     u616_25:
 12289     10E0  36F4               	lsrf	??i1_Lcd_Set_Cursor,f
 12290     10E1  0B89               	decfsz	9,f
 12291     10E2  28E0               	goto	u616_25
 12292     10E3  0874               	movf	??i1_Lcd_Set_Cursor,w
 12293     10E4  00F6               	movwf	i1Lcd_Set_Cursor@z
 12294                           
 12295                           ;lcd.c: 33:         y = temp & 0x0F;
 12296     10E5  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12297     10E6  390F               	andlw	15
 12298     10E7  00F7               	movwf	i1Lcd_Set_Cursor@y
 12299                           
 12300                           ;lcd.c: 34:         Lcd_Cmd(z);
 12301     10E8  0876               	movf	i1Lcd_Set_Cursor@z,w
 12302     10E9  3188  2002  3190   	fcall	i1_Lcd_Cmd
 12303                           
 12304                           ;lcd.c: 35:         Lcd_Cmd(y);
 12305     10EC  0877               	movf	i1Lcd_Set_Cursor@y,w
 12306     10ED  3188  2002         	fcall	i1_Lcd_Cmd
 12307                           
 12308                           ;lcd.c: 36:     }
 12309     10EF  0008               	return
 12310     10F0                     i1l4885:
 12311     10F0  3002               	movlw	2
 12312     10F1  0675               	xorwf	i1Lcd_Set_Cursor@a,w
 12313     10F2  1D03               	btfss	3,2
 12314     10F3  290A               	goto	i1l4895
 12315                           
 12316                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
 12317     10F4  0873               	movf	i1Lcd_Set_Cursor@b,w
 12318     10F5  3EBF               	addlw	191
 12319     10F6  00F8               	movwf	i1Lcd_Set_Cursor@temp
 12320                           
 12321                           ;lcd.c: 40:         z = temp>>4;
 12322     10F7  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12323     10F8  00F4               	movwf	??i1_Lcd_Set_Cursor
 12324     10F9  3004               	movlw	4
 12325     10FA                     u618_25:
 12326     10FA  36F4               	lsrf	??i1_Lcd_Set_Cursor,f
 12327     10FB  0B89               	decfsz	9,f
 12328     10FC  28FA               	goto	u618_25
 12329     10FD  0874               	movf	??i1_Lcd_Set_Cursor,w
 12330     10FE  00F6               	movwf	i1Lcd_Set_Cursor@z
 12331                           
 12332                           ;lcd.c: 41:         y = temp & 0x0F;
 12333     10FF  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12334     1100  390F               	andlw	15
 12335     1101  00F7               	movwf	i1Lcd_Set_Cursor@y
 12336                           
 12337                           ;lcd.c: 42:         Lcd_Cmd(z);
 12338     1102  0876               	movf	i1Lcd_Set_Cursor@z,w
 12339     1103  3188  2002  3190   	fcall	i1_Lcd_Cmd
 12340                           
 12341                           ;lcd.c: 43:         Lcd_Cmd(y);
 12342     1106  0877               	movf	i1Lcd_Set_Cursor@y,w
 12343     1107  3188  2002         	fcall	i1_Lcd_Cmd
 12344                           
 12345                           ;lcd.c: 44:     }
 12346     1109  0008               	return
 12347     110A                     i1l4895:
 12348     110A  3003               	movlw	3
 12349     110B  0675               	xorwf	i1Lcd_Set_Cursor@a,w
 12350     110C  1D03               	btfss	3,2
 12351     110D  2924               	goto	i1l4905
 12352                           
 12353                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x94 + b - 1;
 12354     110E  0873               	movf	i1Lcd_Set_Cursor@b,w
 12355     110F  3E93               	addlw	147
 12356     1110  00F8               	movwf	i1Lcd_Set_Cursor@temp
 12357                           
 12358                           ;lcd.c: 48:         z = temp>>4;
 12359     1111  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12360     1112  00F4               	movwf	??i1_Lcd_Set_Cursor
 12361     1113  3004               	movlw	4
 12362     1114                     u620_25:
 12363     1114  36F4               	lsrf	??i1_Lcd_Set_Cursor,f
 12364     1115  0B89               	decfsz	9,f
 12365     1116  2914               	goto	u620_25
 12366     1117  0874               	movf	??i1_Lcd_Set_Cursor,w
 12367     1118  00F6               	movwf	i1Lcd_Set_Cursor@z
 12368                           
 12369                           ;lcd.c: 49:         y = temp & 0x0F;
 12370     1119  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12371     111A  390F               	andlw	15
 12372     111B  00F7               	movwf	i1Lcd_Set_Cursor@y
 12373                           
 12374                           ;lcd.c: 50:         Lcd_Cmd(z);
 12375     111C  0876               	movf	i1Lcd_Set_Cursor@z,w
 12376     111D  3188  2002  3190   	fcall	i1_Lcd_Cmd
 12377                           
 12378                           ;lcd.c: 51:         Lcd_Cmd(y);
 12379     1120  0877               	movf	i1Lcd_Set_Cursor@y,w
 12380     1121  3188  2002         	fcall	i1_Lcd_Cmd
 12381                           
 12382                           ;lcd.c: 52:     }
 12383     1123  0008               	return
 12384     1124                     i1l4905:
 12385     1124  3004               	movlw	4
 12386     1125  0675               	xorwf	i1Lcd_Set_Cursor@a,w
 12387     1126  1D03               	btfss	3,2
 12388     1127  0008               	return
 12389                           
 12390                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD4 + b - 1;
 12391     1128  0873               	movf	i1Lcd_Set_Cursor@b,w
 12392     1129  3ED3               	addlw	211
 12393     112A  00F8               	movwf	i1Lcd_Set_Cursor@temp
 12394                           
 12395                           ;lcd.c: 56:         z = temp>>4;
 12396     112B  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12397     112C  00F4               	movwf	??i1_Lcd_Set_Cursor
 12398     112D  3004               	movlw	4
 12399     112E                     u622_25:
 12400     112E  36F4               	lsrf	??i1_Lcd_Set_Cursor,f
 12401     112F  0B89               	decfsz	9,f
 12402     1130  292E               	goto	u622_25
 12403     1131  0874               	movf	??i1_Lcd_Set_Cursor,w
 12404     1132  00F6               	movwf	i1Lcd_Set_Cursor@z
 12405                           
 12406                           ;lcd.c: 57:         y = temp & 0x0F;
 12407     1133  0878               	movf	i1Lcd_Set_Cursor@temp,w
 12408     1134  390F               	andlw	15
 12409     1135  00F7               	movwf	i1Lcd_Set_Cursor@y
 12410                           
 12411                           ;lcd.c: 58:         Lcd_Cmd(z);
 12412     1136  0876               	movf	i1Lcd_Set_Cursor@z,w
 12413     1137  3188  2002  3190   	fcall	i1_Lcd_Cmd
 12414                           
 12415                           ;lcd.c: 59:         Lcd_Cmd(y);
 12416     113A  0877               	movf	i1Lcd_Set_Cursor@y,w
 12417     113B  3188  2002         	fcall	i1_Lcd_Cmd
 12418     113D  0008               	return
 12419     113E                     __end_ofi1_Lcd_Set_Cursor:
 12420                           
 12421                           	psect	text45
 12422     1C74                     __ptext45:	
 12423 ;; *************** function i1_Lcd_Clear *****************
 12424 ;; Defined at:
 12425 ;;		line 20 in file "lcd.c"
 12426 ;; Parameters:    Size  Location     Type
 12427 ;;		None
 12428 ;; Auto vars:     Size  Location     Type
 12429 ;;		None
 12430 ;; Return value:  Size  Location     Type
 12431 ;;                  1    wreg      void 
 12432 ;; Registers used:
 12433 ;;		wreg, status,2, status,0, pclath, cstack
 12434 ;; Tracked objects:
 12435 ;;		On entry : 18/1
 12436 ;;		On exit  : 1F/2
 12437 ;;		Unchanged: 0/0
 12438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12439 ;;      Params:         0       0       0       0       0       0       0       0
 12440 ;;      Locals:         0       0       0       0       0       0       0       0
 12441 ;;      Temps:          0       0       0       0       0       0       0       0
 12442 ;;      Totals:         0       0       0       0       0       0       0       0
 12443 ;;Total ram usage:        0 bytes
 12444 ;; Hardware stack levels used: 1
 12445 ;; Hardware stack levels required when called: 2
 12446 ;; This function calls:
 12447 ;;		i1_Lcd_Cmd
 12448 ;; This function is called by:
 12449 ;;		_IOC
 12450 ;; This function uses a non-reentrant model
 12451 ;;
 12452                           
 12453     1C74                     i1_Lcd_Clear:	
 12454                           ;psect for function i1_Lcd_Clear
 12455                           
 12456                           
 12457                           ;lcd.c: 22:     Lcd_Cmd(0);
 12458                           
 12459                           ;incstack = 0
 12460                           ; Regs used in i1_Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
 12461     1C74  3000               	movlw	0
 12462     1C75  3188  2002  319C   	fcall	i1_Lcd_Cmd
 12463                           
 12464                           ;lcd.c: 23:     Lcd_Cmd(1);
 12465     1C78  3001               	movlw	1
 12466     1C79  3188  2002         	fcall	i1_Lcd_Cmd
 12467     1C7B  0008               	return
 12468     1C7C                     __end_ofi1_Lcd_Clear:
 12469                           
 12470                           	psect	text46
 12471     0802                     __ptext46:	
 12472 ;; *************** function i1_Lcd_Cmd *****************
 12473 ;; Defined at:
 12474 ;;		line 11 in file "lcd.c"
 12475 ;; Parameters:    Size  Location     Type
 12476 ;;  a               1    wreg     unsigned char 
 12477 ;; Auto vars:     Size  Location     Type
 12478 ;;  a               1    2[COMMON] unsigned char 
 12479 ;; Return value:  Size  Location     Type
 12480 ;;                  1    wreg      void 
 12481 ;; Registers used:
 12482 ;;		wreg, status,2, status,0, pclath, cstack
 12483 ;; Tracked objects:
 12484 ;;		On entry : 0/2
 12485 ;;		On exit  : 1F/2
 12486 ;;		Unchanged: 0/0
 12487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12488 ;;      Params:         0       0       0       0       0       0       0       0
 12489 ;;      Locals:         1       0       0       0       0       0       0       0
 12490 ;;      Temps:          1       0       0       0       0       0       0       0
 12491 ;;      Totals:         2       0       0       0       0       0       0       0
 12492 ;;Total ram usage:        2 bytes
 12493 ;; Hardware stack levels used: 1
 12494 ;; Hardware stack levels required when called: 1
 12495 ;; This function calls:
 12496 ;;		i1_Lcd_Port
 12497 ;; This function is called by:
 12498 ;;		i1_Lcd_Clear
 12499 ;;		i1_Lcd_Set_Cursor
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503     0802                     i1_Lcd_Cmd:	
 12504                           ;psect for function i1_Lcd_Cmd
 12505                           
 12506                           
 12507                           ;incstack = 0
 12508                           ; Regs used in i1_Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
 12509                           ;i1Lcd_Cmd@a stored from wreg
 12510     0802  00F2               	movwf	i1Lcd_Cmd@a
 12511                           
 12512                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATCbits.LATC1 = 0;
 12513     0803  0022               	movlb	2	; select bank2
 12514     0804  108E               	bcf	14,1	;volatile
 12515                           
 12516                           ;lcd.c: 14:     Lcd_Port(a);
 12517     0805  0872               	movf	i1Lcd_Cmd@a,w
 12518     0806  319C  24C6  3188   	fcall	i1_Lcd_Port
 12519                           
 12520                           ;lcd.c: 15:     LATCbits.LATC0 = 1;
 12521     0809  140E               	bsf	14,0	;volatile
 12522                           
 12523                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
 12524     080A  3006               	movlw	6
 12525     080B  00F1               	movwf	??i1_Lcd_Cmd
 12526     080C  3030               	movlw	48
 12527     080D                     u672_27:
 12528     080D  0B89               	decfsz	9,f
 12529     080E  280D               	goto	u672_27
 12530     080F  0BF1               	decfsz	??i1_Lcd_Cmd,f
 12531     0810  280D               	goto	u672_27
 12532     0811  3200               	nop2
 12533                           
 12534                           ;lcd.c: 17:     LATCbits.LATC0 = 0;
 12535     0812  0022               	movlb	2	; select bank2
 12536     0813  100E               	bcf	14,0	;volatile
 12537     0814  0008               	return
 12538     0815                     __end_ofi1_Lcd_Cmd:
 12539                           
 12540                           	psect	text47
 12541     1CC6                     __ptext47:	
 12542 ;; *************** function i1_Lcd_Port *****************
 12543 ;; Defined at:
 12544 ;;		line 3 in file "lcd.c"
 12545 ;; Parameters:    Size  Location     Type
 12546 ;;  a               1    wreg     unsigned char 
 12547 ;; Auto vars:     Size  Location     Type
 12548 ;;  a               1    0[COMMON] unsigned char 
 12549 ;; Return value:  Size  Location     Type
 12550 ;;                  1    wreg      void 
 12551 ;; Registers used:
 12552 ;;		wreg
 12553 ;; Tracked objects:
 12554 ;;		On entry : 1F/2
 12555 ;;		On exit  : 1F/2
 12556 ;;		Unchanged: 0/0
 12557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12558 ;;      Params:         0       0       0       0       0       0       0       0
 12559 ;;      Locals:         1       0       0       0       0       0       0       0
 12560 ;;      Temps:          0       0       0       0       0       0       0       0
 12561 ;;      Totals:         1       0       0       0       0       0       0       0
 12562 ;;Total ram usage:        1 bytes
 12563 ;; Hardware stack levels used: 1
 12564 ;; This function calls:
 12565 ;;		Nothing
 12566 ;; This function is called by:
 12567 ;;		i1_Lcd_Cmd
 12568 ;;		i1_Lcd_Write_Char
 12569 ;; This function uses a non-reentrant model
 12570 ;;
 12571                           
 12572     1CC6                     i1_Lcd_Port:	
 12573                           ;psect for function i1_Lcd_Port
 12574                           
 12575                           
 12576                           ;incstack = 0
 12577                           ; Regs used in i1_Lcd_Port: [wreg]
 12578                           ;i1Lcd_Port@a stored from wreg
 12579     1CC6  00F0               	movwf	i1Lcd_Port@a
 12580                           
 12581                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LATD4 = 1
      +                          ) : (LATDbits.LATD4 = 0);
 12582     1CC7  1C70               	btfss	i1Lcd_Port@a,0
 12583     1CC8  2CCB               	goto	i1l361
 12584     1CC9  160F               	bsf	15,4	;volatile
 12585     1CCA  2CCC               	goto	i1l4573
 12586     1CCB                     i1l361:
 12587     1CCB  120F               	bcf	15,4	;volatile
 12588     1CCC                     i1l4573:
 12589                           
 12590                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LATD5 = 1) : (LATDbits.LATD5 = 0);
 12591     1CCC  1CF0               	btfss	i1Lcd_Port@a,1
 12592     1CCD  2CD0               	goto	i1l365
 12593     1CCE  168F               	bsf	15,5	;volatile
 12594     1CCF  2CD1               	goto	i1l4577
 12595     1CD0                     i1l365:
 12596     1CD0  128F               	bcf	15,5	;volatile
 12597     1CD1                     i1l4577:
 12598                           
 12599                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LATD6 = 1) : (LATDbits.LATD6 = 0);
 12600     1CD1  1D70               	btfss	i1Lcd_Port@a,2
 12601     1CD2  2CD5               	goto	i1l369
 12602     1CD3  170F               	bsf	15,6	;volatile
 12603     1CD4  2CD6               	goto	i1l4581
 12604     1CD5                     i1l369:
 12605     1CD5  130F               	bcf	15,6	;volatile
 12606     1CD6                     i1l4581:
 12607                           
 12608                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LATD7 = 1) : (LATDbits.LATD7 = 0);
 12609     1CD6  1DF0               	btfss	i1Lcd_Port@a,3
 12610     1CD7  2CDA               	goto	i1l373
 12611     1CD8  178F               	bsf	15,7	;volatile
 12612     1CD9  0008               	return
 12613     1CDA                     i1l373:
 12614     1CDA  138F               	bcf	15,7	;volatile
 12615     1CDB  0008               	return
 12616     1CDC                     __end_ofi1_Lcd_Port:
 12617                           
 12618                           	psect	text48
 12619     1EA1                     __ptext48:	
 12620 ;; *************** function _strcmp *****************
 12621 ;; Defined at:
 12622 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\strcmp.c"
 12623 ;; Parameters:    Size  Location     Type
 12624 ;;  l               1    wreg     PTR const unsigned char 
 12625 ;;		 -> clave(5), 
 12626 ;;  r               1    0[COMMON] PTR const unsigned char 
 12627 ;;		 -> clave_enter(5), 
 12628 ;; Auto vars:     Size  Location     Type
 12629 ;;  l               1    3[COMMON] PTR const unsigned char 
 12630 ;;		 -> clave(5), 
 12631 ;; Return value:  Size  Location     Type
 12632 ;;                  2    0[COMMON] int 
 12633 ;; Registers used:
 12634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 12635 ;; Tracked objects:
 12636 ;;		On entry : 1F/2
 12637 ;;		On exit  : 1F/2
 12638 ;;		Unchanged: 1F/0
 12639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12640 ;;      Params:         2       0       0       0       0       0       0       0
 12641 ;;      Locals:         1       0       0       0       0       0       0       0
 12642 ;;      Temps:          1       0       0       0       0       0       0       0
 12643 ;;      Totals:         4       0       0       0       0       0       0       0
 12644 ;;Total ram usage:        4 bytes
 12645 ;; Hardware stack levels used: 1
 12646 ;; This function calls:
 12647 ;;		Nothing
 12648 ;; This function is called by:
 12649 ;;		_IOC
 12650 ;; This function uses a non-reentrant model
 12651 ;;
 12652                           
 12653     1EA1                     _strcmp:	
 12654                           ;psect for function _strcmp
 12655                           
 12656                           
 12657                           ;incstack = 0
 12658                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 12659                           ;strcmp@l stored from wreg
 12660     1EA1  00F3               	movwf	strcmp@l
 12661     1EA2  2EB2               	goto	i1l4821
 12662     1EA3                     i1l4823:
 12663     1EA3  0873               	movf	strcmp@l,w
 12664     1EA4  0086               	movwf	6
 12665     1EA5  3001               	movlw	1	; select bank2/3
 12666     1EA6  0087               	movwf	7
 12667     1EA7  0801               	movf	1,w
 12668     1EA8  1903               	btfsc	3,2
 12669     1EA9  2EBE               	goto	i1l4825
 12670     1EAA  3001               	movlw	1
 12671     1EAB  00F2               	movwf	??_strcmp
 12672     1EAC  0872               	movf	??_strcmp,w
 12673     1EAD  07F3               	addwf	strcmp@l,f
 12674     1EAE  3001               	movlw	1
 12675     1EAF  00F2               	movwf	??_strcmp
 12676     1EB0  0872               	movf	??_strcmp,w
 12677     1EB1  07F0               	addwf	strcmp@r,f
 12678     1EB2                     i1l4821:
 12679     1EB2  0870               	movf	strcmp@r,w
 12680     1EB3  0086               	movwf	6
 12681     1EB4  3001               	movlw	1	; select bank2/3
 12682     1EB5  0087               	movwf	7
 12683     1EB6  0873               	movf	strcmp@l,w
 12684     1EB7  0084               	movwf	4
 12685     1EB8  3001               	movlw	1	; select bank2/3
 12686     1EB9  0085               	movwf	5
 12687     1EBA  0800               	movf	0,w
 12688     1EBB  0601               	xorwf	1,w
 12689     1EBC  1903               	btfsc	3,2
 12690     1EBD  2EA3               	goto	i1l4823
 12691     1EBE                     i1l4825:
 12692     1EBE  0873               	movf	strcmp@l,w
 12693     1EBF  0086               	movwf	6
 12694     1EC0  3001               	movlw	1	; select bank2/3
 12695     1EC1  0087               	movwf	7
 12696     1EC2  0870               	movf	strcmp@r,w
 12697     1EC3  0084               	movwf	4
 12698     1EC4  3001               	movlw	1	; select bank2/3
 12699     1EC5  0085               	movwf	5
 12700     1EC6  0800               	movf	0,w
 12701     1EC7  0201               	subwf	1,w
 12702     1EC8  00F0               	movwf	?_strcmp
 12703     1EC9  01F1               	clrf	?_strcmp+1
 12704     1ECA  1C03               	skipc
 12705     1ECB  03F1               	decf	?_strcmp+1,f
 12706     1ECC  0008               	return
 12707     1ECD                     __end_of_strcmp:
 12708                           
 12709                           	psect	text49
 12710     1C94                     __ptext49:	
 12711 ;; *************** function _Keypad_Init *****************
 12712 ;; Defined at:
 12713 ;;		line 3 in file "kbd4x3.c"
 12714 ;; Parameters:    Size  Location     Type
 12715 ;;		None
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;		None
 12718 ;; Return value:  Size  Location     Type
 12719 ;;                  1    wreg      void 
 12720 ;; Registers used:
 12721 ;;		None
 12722 ;; Tracked objects:
 12723 ;;		On entry : 0/0
 12724 ;;		On exit  : 1F/1
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12727 ;;      Params:         0       0       0       0       0       0       0       0
 12728 ;;      Locals:         0       0       0       0       0       0       0       0
 12729 ;;      Temps:          0       0       0       0       0       0       0       0
 12730 ;;      Totals:         0       0       0       0       0       0       0       0
 12731 ;;Total ram usage:        0 bytes
 12732 ;; Hardware stack levels used: 1
 12733 ;; This function calls:
 12734 ;;		Nothing
 12735 ;; This function is called by:
 12736 ;;		_IOC
 12737 ;; This function uses a non-reentrant model
 12738 ;;
 12739                           
 12740     1C94                     _Keypad_Init:	
 12741                           ;psect for function _Keypad_Init
 12742                           
 12743                           
 12744                           ;kbd4x3.c: 5:     TRISBbits.TRISB4 = 1;
 12745                           
 12746                           ;incstack = 0
 12747                           ; Regs used in _Keypad_Init: []
 12748     1C94  0021               	movlb	1	; select bank1
 12749     1C95  160D               	bsf	13,4	;volatile
 12750                           
 12751                           ;kbd4x3.c: 6:     TRISBbits.TRISB5 = 1;
 12752     1C96  168D               	bsf	13,5	;volatile
 12753                           
 12754                           ;kbd4x3.c: 7:     TRISBbits.TRISB6 = 1;
 12755     1C97  170D               	bsf	13,6	;volatile
 12756                           
 12757                           ;kbd4x3.c: 8:     TRISBbits.TRISB7 = 1;
 12758     1C98  178D               	bsf	13,7	;volatile
 12759                           
 12760                           ;kbd4x3.c: 9:     TRISBbits.TRISB1 = 0;
 12761     1C99  108D               	bcf	13,1	;volatile
 12762                           
 12763                           ;kbd4x3.c: 10:     TRISBbits.TRISB2 = 0;
 12764     1C9A  110D               	bcf	13,2	;volatile
 12765                           
 12766                           ;kbd4x3.c: 11:     TRISBbits.TRISB3 = 0;
 12767     1C9B  118D               	bcf	13,3	;volatile
 12768     1C9C  0008               	return
 12769     1C9D                     __end_of_Keypad_Init:
 12770                           
 12771                           	psect	text50
 12772     069F                     __ptext50:	
 12773 ;; *************** function _Keypad_Get_Char *****************
 12774 ;; Defined at:
 12775 ;;		line 14 in file "kbd4x3.c"
 12776 ;; Parameters:    Size  Location     Type
 12777 ;;		None
 12778 ;; Auto vars:     Size  Location     Type
 12779 ;;		None
 12780 ;; Return value:  Size  Location     Type
 12781 ;;                  1    wreg      unsigned char 
 12782 ;; Registers used:
 12783 ;;		wreg
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/2
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12789 ;;      Params:         0       0       0       0       0       0       0       0
 12790 ;;      Locals:         0       0       0       0       0       0       0       0
 12791 ;;      Temps:          1       0       0       0       0       0       0       0
 12792 ;;      Totals:         1       0       0       0       0       0       0       0
 12793 ;;Total ram usage:        1 bytes
 12794 ;; Hardware stack levels used: 1
 12795 ;; This function calls:
 12796 ;;		Nothing
 12797 ;; This function is called by:
 12798 ;;		_IOC
 12799 ;; This function uses a non-reentrant model
 12800 ;;
 12801                           
 12802     069F                     _Keypad_Get_Char:	
 12803                           ;psect for function _Keypad_Get_Char
 12804                           
 12805                           
 12806                           ;kbd4x3.c: 16:     PORTBbits.RB1 = 1;
 12807                           
 12808                           ;incstack = 0
 12809                           ; Regs used in _Keypad_Get_Char: [wreg]
 12810     069F  0020               	movlb	0	; select bank0
 12811     06A0  148D               	bsf	13,1	;volatile
 12812                           
 12813                           ;kbd4x3.c: 17:     PORTBbits.RB2 = 0;
 12814     06A1  110D               	bcf	13,2	;volatile
 12815                           
 12816                           ;kbd4x3.c: 18:     PORTBbits.RB3 = 0;
 12817     06A2  118D               	bcf	13,3	;volatile
 12818                           
 12819                           ;kbd4x3.c: 19:     if(PORTBbits.RB4 == 1){
 12820     06A3  1E0D               	btfss	13,4	;volatile
 12821     06A4  2EB9               	goto	i1l299
 12822                           
 12823                           ;kbd4x3.c: 20:         _delay((unsigned long)((2)*(4000000/4000.0)));
 12824     06A5  3003               	movlw	3
 12825     06A6  00F0               	movwf	??_Keypad_Get_Char
 12826     06A7  3098               	movlw	152
 12827     06A8                     u673_27:
 12828     06A8  0B89               	decfsz	9,f
 12829     06A9  2EA8               	goto	u673_27
 12830     06AA  0BF0               	decfsz	??_Keypad_Get_Char,f
 12831     06AB  2EA8               	goto	u673_27
 12832     06AC                     i1l300:	
 12833                           ;kbd4x3.c: 21:         while(PORTBbits.RB4 == 1);
 12834                           
 12835     06AC  0020               	movlb	0	; select bank0
 12836     06AD  1A0D               	btfsc	13,4	;volatile
 12837     06AE  2EAC               	goto	i1l300
 12838                           
 12839                           ;kbd4x3.c: 22:         _delay((unsigned long)((5)*(4000000/4000.0)));
 12840     06AF  3007               	movlw	7
 12841     06B0  00F0               	movwf	??_Keypad_Get_Char
 12842     06B1  307D               	movlw	125
 12843     06B2                     u674_27:
 12844     06B2  0B89               	decfsz	9,f
 12845     06B3  2EB2               	goto	u674_27
 12846     06B4  0BF0               	decfsz	??_Keypad_Get_Char,f
 12847     06B5  2EB2               	goto	u674_27
 12848     06B6  0000               	nop
 12849                           
 12850                           ;kbd4x3.c: 23:         return '1';
 12851     06B7  3031               	movlw	49
 12852     06B8  0008               	return
 12853     06B9                     i1l299:	
 12854                           ;kbd4x3.c: 24:     }
 12855                           
 12856                           
 12857                           ;kbd4x3.c: 25:     if(PORTBbits.RB5 == 1){
 12858     06B9  1E8D               	btfss	13,5	;volatile
 12859     06BA  2ECF               	goto	i1l304
 12860                           
 12861                           ;kbd4x3.c: 26:         _delay((unsigned long)((2)*(4000000/4000.0)));
 12862     06BB  3003               	movlw	3
 12863     06BC  00F0               	movwf	??_Keypad_Get_Char
 12864     06BD  3098               	movlw	152
 12865     06BE                     u675_27:
 12866     06BE  0B89               	decfsz	9,f
 12867     06BF  2EBE               	goto	u675_27
 12868     06C0  0BF0               	decfsz	??_Keypad_Get_Char,f
 12869     06C1  2EBE               	goto	u675_27
 12870     06C2                     i1l305:	
 12871                           ;kbd4x3.c: 27:         while(PORTBbits.RB5 == 1);
 12872                           
 12873     06C2  0020               	movlb	0	; select bank0
 12874     06C3  1A8D               	btfsc	13,5	;volatile
 12875     06C4  2EC2               	goto	i1l305
 12876                           
 12877                           ;kbd4x3.c: 28:         _delay((unsigned long)((5)*(4000000/4000.0)));
 12878     06C5  3007               	movlw	7
 12879     06C6  00F0               	movwf	??_Keypad_Get_Char
 12880     06C7  307D               	movlw	125
 12881     06C8                     u676_27:
 12882     06C8  0B89               	decfsz	9,f
 12883     06C9  2EC8               	goto	u676_27
 12884     06CA  0BF0               	decfsz	??_Keypad_Get_Char,f
 12885     06CB  2EC8               	goto	u676_27
 12886     06CC  0000               	nop
 12887                           
 12888                           ;kbd4x3.c: 29:         return '4';
 12889     06CD  3034               	movlw	52
 12890     06CE  0008               	return
 12891     06CF                     i1l304:	
 12892                           ;kbd4x3.c: 30:     }
 12893                           
 12894                           
 12895                           ;kbd4x3.c: 31:     if(PORTBbits.RB6 == 1){
 12896     06CF  1F0D               	btfss	13,6	;volatile
 12897     06D0  2EE5               	goto	i1l308
 12898                           
 12899                           ;kbd4x3.c: 32:         _delay((unsigned long)((2)*(4000000/4000.0)));
 12900     06D1  3003               	movlw	3
 12901     06D2  00F0               	movwf	??_Keypad_Get_Char
 12902     06D3  3098               	movlw	152
 12903     06D4                     u677_27:
 12904     06D4  0B89               	decfsz	9,f
 12905     06D5  2ED4               	goto	u677_27
 12906     06D6  0BF0               	decfsz	??_Keypad_Get_Char,f
 12907     06D7  2ED4               	goto	u677_27
 12908     06D8                     i1l309:	
 12909                           ;kbd4x3.c: 33:         while(PORTBbits.RB6 == 1);
 12910                           
 12911     06D8  0020               	movlb	0	; select bank0
 12912     06D9  1B0D               	btfsc	13,6	;volatile
 12913     06DA  2ED8               	goto	i1l309
 12914                           
 12915                           ;kbd4x3.c: 34:         _delay((unsigned long)((5)*(4000000/4000.0)));
 12916     06DB  3007               	movlw	7
 12917     06DC  00F0               	movwf	??_Keypad_Get_Char
 12918     06DD  307D               	movlw	125
 12919     06DE                     u678_27:
 12920     06DE  0B89               	decfsz	9,f
 12921     06DF  2EDE               	goto	u678_27
 12922     06E0  0BF0               	decfsz	??_Keypad_Get_Char,f
 12923     06E1  2EDE               	goto	u678_27
 12924     06E2  0000               	nop
 12925                           
 12926                           ;kbd4x3.c: 35:         return '7';
 12927     06E3  3037               	movlw	55
 12928     06E4  0008               	return
 12929     06E5                     i1l308:	
 12930                           ;kbd4x3.c: 36:     }
 12931                           
 12932                           
 12933                           ;kbd4x3.c: 37:     if(PORTBbits.RB7 == 1){
 12934     06E5  1F8D               	btfss	13,7	;volatile
 12935     06E6  2EFB               	goto	i1l312
 12936                           
 12937                           ;kbd4x3.c: 38:         _delay((unsigned long)((2)*(4000000/4000.0)));
 12938     06E7  3003               	movlw	3
 12939     06E8  00F0               	movwf	??_Keypad_Get_Char
 12940     06E9  3098               	movlw	152
 12941     06EA                     u679_27:
 12942     06EA  0B89               	decfsz	9,f
 12943     06EB  2EEA               	goto	u679_27
 12944     06EC  0BF0               	decfsz	??_Keypad_Get_Char,f
 12945     06ED  2EEA               	goto	u679_27
 12946     06EE                     i1l313:	
 12947                           ;kbd4x3.c: 39:         while(PORTBbits.RB7 == 1);
 12948                           
 12949     06EE  0020               	movlb	0	; select bank0
 12950     06EF  1B8D               	btfsc	13,7	;volatile
 12951     06F0  2EEE               	goto	i1l313
 12952                           
 12953                           ;kbd4x3.c: 40:         _delay((unsigned long)((5)*(4000000/4000.0)));
 12954     06F1  3007               	movlw	7
 12955     06F2  00F0               	movwf	??_Keypad_Get_Char
 12956     06F3  307D               	movlw	125
 12957     06F4                     u680_27:
 12958     06F4  0B89               	decfsz	9,f
 12959     06F5  2EF4               	goto	u680_27
 12960     06F6  0BF0               	decfsz	??_Keypad_Get_Char,f
 12961     06F7  2EF4               	goto	u680_27
 12962     06F8  0000               	nop
 12963                           
 12964                           ;kbd4x3.c: 41:         return '*';
 12965     06F9  302A               	movlw	42
 12966     06FA  0008               	return
 12967     06FB                     i1l312:	
 12968                           ;kbd4x3.c: 42:     }
 12969                           
 12970                           
 12971                           ;kbd4x3.c: 44:     PORTBbits.RB1 = 0;
 12972     06FB  108D               	bcf	13,1	;volatile
 12973                           
 12974                           ;kbd4x3.c: 45:     PORTBbits.RB2 = 1;
 12975     06FC  150D               	bsf	13,2	;volatile
 12976                           
 12977                           ;kbd4x3.c: 46:     PORTBbits.RB3 = 0;
 12978     06FD  118D               	bcf	13,3	;volatile
 12979                           
 12980                           ;kbd4x3.c: 47:     if(PORTBbits.RB4 == 1){
 12981     06FE  1E0D               	btfss	13,4	;volatile
 12982     06FF  2F14               	goto	i1l316
 12983                           
 12984                           ;kbd4x3.c: 48:         _delay((unsigned long)((2)*(4000000/4000.0)));
 12985     0700  3003               	movlw	3
 12986     0701  00F0               	movwf	??_Keypad_Get_Char
 12987     0702  3098               	movlw	152
 12988     0703                     u681_27:
 12989     0703  0B89               	decfsz	9,f
 12990     0704  2F03               	goto	u681_27
 12991     0705  0BF0               	decfsz	??_Keypad_Get_Char,f
 12992     0706  2F03               	goto	u681_27
 12993     0707                     i1l317:	
 12994                           ;kbd4x3.c: 49:         while(PORTBbits.RB4 == 1);
 12995                           
 12996     0707  0020               	movlb	0	; select bank0
 12997     0708  1A0D               	btfsc	13,4	;volatile
 12998     0709  2F07               	goto	i1l317
 12999                           
 13000                           ;kbd4x3.c: 50:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13001     070A  3007               	movlw	7
 13002     070B  00F0               	movwf	??_Keypad_Get_Char
 13003     070C  307D               	movlw	125
 13004     070D                     u682_27:
 13005     070D  0B89               	decfsz	9,f
 13006     070E  2F0D               	goto	u682_27
 13007     070F  0BF0               	decfsz	??_Keypad_Get_Char,f
 13008     0710  2F0D               	goto	u682_27
 13009     0711  0000               	nop
 13010                           
 13011                           ;kbd4x3.c: 51:         return '2';
 13012     0712  3032               	movlw	50
 13013     0713  0008               	return
 13014     0714                     i1l316:	
 13015                           ;kbd4x3.c: 52:     }
 13016                           
 13017                           
 13018                           ;kbd4x3.c: 53:     if(PORTBbits.RB5 == 1){
 13019     0714  1E8D               	btfss	13,5	;volatile
 13020     0715  2F2A               	goto	i1l320
 13021                           
 13022                           ;kbd4x3.c: 54:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13023     0716  3003               	movlw	3
 13024     0717  00F0               	movwf	??_Keypad_Get_Char
 13025     0718  3098               	movlw	152
 13026     0719                     u683_27:
 13027     0719  0B89               	decfsz	9,f
 13028     071A  2F19               	goto	u683_27
 13029     071B  0BF0               	decfsz	??_Keypad_Get_Char,f
 13030     071C  2F19               	goto	u683_27
 13031     071D                     i1l321:	
 13032                           ;kbd4x3.c: 55:         while(PORTBbits.RB5 == 1);
 13033                           
 13034     071D  0020               	movlb	0	; select bank0
 13035     071E  1A8D               	btfsc	13,5	;volatile
 13036     071F  2F1D               	goto	i1l321
 13037                           
 13038                           ;kbd4x3.c: 56:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13039     0720  3007               	movlw	7
 13040     0721  00F0               	movwf	??_Keypad_Get_Char
 13041     0722  307D               	movlw	125
 13042     0723                     u684_27:
 13043     0723  0B89               	decfsz	9,f
 13044     0724  2F23               	goto	u684_27
 13045     0725  0BF0               	decfsz	??_Keypad_Get_Char,f
 13046     0726  2F23               	goto	u684_27
 13047     0727  0000               	nop
 13048                           
 13049                           ;kbd4x3.c: 57:         return '5';
 13050     0728  3035               	movlw	53
 13051     0729  0008               	return
 13052     072A                     i1l320:	
 13053                           ;kbd4x3.c: 58:     }
 13054                           
 13055                           
 13056                           ;kbd4x3.c: 59:     if(PORTBbits.RB6 == 1){
 13057     072A  1F0D               	btfss	13,6	;volatile
 13058     072B  2F40               	goto	i1l324
 13059                           
 13060                           ;kbd4x3.c: 60:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13061     072C  3003               	movlw	3
 13062     072D  00F0               	movwf	??_Keypad_Get_Char
 13063     072E  3098               	movlw	152
 13064     072F                     u685_27:
 13065     072F  0B89               	decfsz	9,f
 13066     0730  2F2F               	goto	u685_27
 13067     0731  0BF0               	decfsz	??_Keypad_Get_Char,f
 13068     0732  2F2F               	goto	u685_27
 13069     0733                     i1l325:	
 13070                           ;kbd4x3.c: 61:         while(PORTBbits.RB6 == 1);
 13071                           
 13072     0733  0020               	movlb	0	; select bank0
 13073     0734  1B0D               	btfsc	13,6	;volatile
 13074     0735  2F33               	goto	i1l325
 13075                           
 13076                           ;kbd4x3.c: 62:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13077     0736  3007               	movlw	7
 13078     0737  00F0               	movwf	??_Keypad_Get_Char
 13079     0738  307D               	movlw	125
 13080     0739                     u686_27:
 13081     0739  0B89               	decfsz	9,f
 13082     073A  2F39               	goto	u686_27
 13083     073B  0BF0               	decfsz	??_Keypad_Get_Char,f
 13084     073C  2F39               	goto	u686_27
 13085     073D  0000               	nop
 13086                           
 13087                           ;kbd4x3.c: 63:         return '8';
 13088     073E  3038               	movlw	56
 13089     073F  0008               	return
 13090     0740                     i1l324:	
 13091                           ;kbd4x3.c: 64:     }
 13092                           
 13093                           
 13094                           ;kbd4x3.c: 65:     if(PORTBbits.RB7 == 1){
 13095     0740  1F8D               	btfss	13,7	;volatile
 13096     0741  2F56               	goto	i1l328
 13097                           
 13098                           ;kbd4x3.c: 66:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13099     0742  3003               	movlw	3
 13100     0743  00F0               	movwf	??_Keypad_Get_Char
 13101     0744  3098               	movlw	152
 13102     0745                     u687_27:
 13103     0745  0B89               	decfsz	9,f
 13104     0746  2F45               	goto	u687_27
 13105     0747  0BF0               	decfsz	??_Keypad_Get_Char,f
 13106     0748  2F45               	goto	u687_27
 13107     0749                     i1l329:	
 13108                           ;kbd4x3.c: 67:         while(PORTBbits.RB7 == 1);
 13109                           
 13110     0749  0020               	movlb	0	; select bank0
 13111     074A  1B8D               	btfsc	13,7	;volatile
 13112     074B  2F49               	goto	i1l329
 13113                           
 13114                           ;kbd4x3.c: 68:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13115     074C  3007               	movlw	7
 13116     074D  00F0               	movwf	??_Keypad_Get_Char
 13117     074E  307D               	movlw	125
 13118     074F                     u688_27:
 13119     074F  0B89               	decfsz	9,f
 13120     0750  2F4F               	goto	u688_27
 13121     0751  0BF0               	decfsz	??_Keypad_Get_Char,f
 13122     0752  2F4F               	goto	u688_27
 13123     0753  0000               	nop
 13124                           
 13125                           ;kbd4x3.c: 69:         return '0';
 13126     0754  3030               	movlw	48
 13127     0755  0008               	return
 13128     0756                     i1l328:	
 13129                           ;kbd4x3.c: 70:     }
 13130                           
 13131                           
 13132                           ;kbd4x3.c: 72:     PORTBbits.RB1 = 0;
 13133     0756  108D               	bcf	13,1	;volatile
 13134                           
 13135                           ;kbd4x3.c: 73:     PORTBbits.RB2 = 0;
 13136     0757  110D               	bcf	13,2	;volatile
 13137                           
 13138                           ;kbd4x3.c: 74:     PORTBbits.RB3 = 1;
 13139     0758  158D               	bsf	13,3	;volatile
 13140                           
 13141                           ;kbd4x3.c: 75:     if(PORTBbits.RB4 == 1){
 13142     0759  1E0D               	btfss	13,4	;volatile
 13143     075A  2F6F               	goto	i1l332
 13144                           
 13145                           ;kbd4x3.c: 76:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13146     075B  3003               	movlw	3
 13147     075C  00F0               	movwf	??_Keypad_Get_Char
 13148     075D  3098               	movlw	152
 13149     075E                     u689_27:
 13150     075E  0B89               	decfsz	9,f
 13151     075F  2F5E               	goto	u689_27
 13152     0760  0BF0               	decfsz	??_Keypad_Get_Char,f
 13153     0761  2F5E               	goto	u689_27
 13154     0762                     i1l333:	
 13155                           ;kbd4x3.c: 77:         while(PORTBbits.RB4 == 1);
 13156                           
 13157     0762  0020               	movlb	0	; select bank0
 13158     0763  1A0D               	btfsc	13,4	;volatile
 13159     0764  2F62               	goto	i1l333
 13160                           
 13161                           ;kbd4x3.c: 78:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13162     0765  3007               	movlw	7
 13163     0766  00F0               	movwf	??_Keypad_Get_Char
 13164     0767  307D               	movlw	125
 13165     0768                     u690_27:
 13166     0768  0B89               	decfsz	9,f
 13167     0769  2F68               	goto	u690_27
 13168     076A  0BF0               	decfsz	??_Keypad_Get_Char,f
 13169     076B  2F68               	goto	u690_27
 13170     076C  0000               	nop
 13171                           
 13172                           ;kbd4x3.c: 79:         return '3';
 13173     076D  3033               	movlw	51
 13174     076E  0008               	return
 13175     076F                     i1l332:	
 13176                           ;kbd4x3.c: 80:     }
 13177                           
 13178                           
 13179                           ;kbd4x3.c: 81:     if(PORTBbits.RB5 == 1){
 13180     076F  1E8D               	btfss	13,5	;volatile
 13181     0770  2F85               	goto	i1l336
 13182                           
 13183                           ;kbd4x3.c: 82:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13184     0771  3003               	movlw	3
 13185     0772  00F0               	movwf	??_Keypad_Get_Char
 13186     0773  3098               	movlw	152
 13187     0774                     u691_27:
 13188     0774  0B89               	decfsz	9,f
 13189     0775  2F74               	goto	u691_27
 13190     0776  0BF0               	decfsz	??_Keypad_Get_Char,f
 13191     0777  2F74               	goto	u691_27
 13192     0778                     i1l337:	
 13193                           ;kbd4x3.c: 83:         while(PORTBbits.RB5 == 1);
 13194                           
 13195     0778  0020               	movlb	0	; select bank0
 13196     0779  1A8D               	btfsc	13,5	;volatile
 13197     077A  2F78               	goto	i1l337
 13198                           
 13199                           ;kbd4x3.c: 84:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13200     077B  3007               	movlw	7
 13201     077C  00F0               	movwf	??_Keypad_Get_Char
 13202     077D  307D               	movlw	125
 13203     077E                     u692_27:
 13204     077E  0B89               	decfsz	9,f
 13205     077F  2F7E               	goto	u692_27
 13206     0780  0BF0               	decfsz	??_Keypad_Get_Char,f
 13207     0781  2F7E               	goto	u692_27
 13208     0782  0000               	nop
 13209                           
 13210                           ;kbd4x3.c: 85:         return '6';
 13211     0783  3036               	movlw	54
 13212     0784  0008               	return
 13213     0785                     i1l336:	
 13214                           ;kbd4x3.c: 86:     }
 13215                           
 13216                           
 13217                           ;kbd4x3.c: 87:     if(PORTBbits.RB6 == 1){
 13218     0785  1F0D               	btfss	13,6	;volatile
 13219     0786  2F9B               	goto	i1l340
 13220                           
 13221                           ;kbd4x3.c: 88:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13222     0787  3003               	movlw	3
 13223     0788  00F0               	movwf	??_Keypad_Get_Char
 13224     0789  3098               	movlw	152
 13225     078A                     u693_27:
 13226     078A  0B89               	decfsz	9,f
 13227     078B  2F8A               	goto	u693_27
 13228     078C  0BF0               	decfsz	??_Keypad_Get_Char,f
 13229     078D  2F8A               	goto	u693_27
 13230     078E                     i1l341:	
 13231                           ;kbd4x3.c: 89:         while(PORTBbits.RB6 == 1);
 13232                           
 13233     078E  0020               	movlb	0	; select bank0
 13234     078F  1B0D               	btfsc	13,6	;volatile
 13235     0790  2F8E               	goto	i1l341
 13236                           
 13237                           ;kbd4x3.c: 90:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13238     0791  3007               	movlw	7
 13239     0792  00F0               	movwf	??_Keypad_Get_Char
 13240     0793  307D               	movlw	125
 13241     0794                     u694_27:
 13242     0794  0B89               	decfsz	9,f
 13243     0795  2F94               	goto	u694_27
 13244     0796  0BF0               	decfsz	??_Keypad_Get_Char,f
 13245     0797  2F94               	goto	u694_27
 13246     0798  0000               	nop
 13247                           
 13248                           ;kbd4x3.c: 91:         return '9';
 13249     0799  3039               	movlw	57
 13250     079A  0008               	return
 13251     079B                     i1l340:	
 13252                           ;kbd4x3.c: 92:     }
 13253                           
 13254                           
 13255                           ;kbd4x3.c: 93:     if(PORTBbits.RB7 == 1){
 13256     079B  1F8D               	btfss	13,7	;volatile
 13257     079C  2FB1               	goto	i1l4811
 13258                           
 13259                           ;kbd4x3.c: 94:         _delay((unsigned long)((2)*(4000000/4000.0)));
 13260     079D  3003               	movlw	3
 13261     079E  00F0               	movwf	??_Keypad_Get_Char
 13262     079F  3098               	movlw	152
 13263     07A0                     u695_27:
 13264     07A0  0B89               	decfsz	9,f
 13265     07A1  2FA0               	goto	u695_27
 13266     07A2  0BF0               	decfsz	??_Keypad_Get_Char,f
 13267     07A3  2FA0               	goto	u695_27
 13268     07A4                     i1l345:	
 13269                           ;kbd4x3.c: 95:         while(PORTBbits.RB7 == 1);
 13270                           
 13271     07A4  0020               	movlb	0	; select bank0
 13272     07A5  1B8D               	btfsc	13,7	;volatile
 13273     07A6  2FA4               	goto	i1l345
 13274                           
 13275                           ;kbd4x3.c: 96:         _delay((unsigned long)((5)*(4000000/4000.0)));
 13276     07A7  3007               	movlw	7
 13277     07A8  00F0               	movwf	??_Keypad_Get_Char
 13278     07A9  307D               	movlw	125
 13279     07AA                     u696_27:
 13280     07AA  0B89               	decfsz	9,f
 13281     07AB  2FAA               	goto	u696_27
 13282     07AC  0BF0               	decfsz	??_Keypad_Get_Char,f
 13283     07AD  2FAA               	goto	u696_27
 13284     07AE  0000               	nop
 13285                           
 13286                           ;kbd4x3.c: 97:         return '#';
 13287     07AF  3023               	movlw	35
 13288     07B0  0008               	return
 13289     07B1                     i1l4811:
 13290                           
 13291                           ;kbd4x3.c: 99:     return 0;
 13292     07B1  3000               	movlw	0
 13293     07B2  0008               	return
 13294     07B3                     __end_of_Keypad_Get_Char:
 13295     007E                     btemp	set	126	;btemp
 13296     007E                     int$flags	set	126
 13297     007E                     wtemp0	set	126
 13298                           
 13299                           	psect	config
 13300                           
 13301                           ;Config register CONFIG1 @ 0x8007
 13302                           ;	Oscillator Selection
 13303                           ;	FOSC = XT, XT Oscillator, Crystal/resonator connected between OSC1 and OSC2 pins
 13304                           ;	Watchdog Timer Enable
 13305                           ;	WDTE = OFF, WDT disabled
 13306                           ;	Power-up Timer Enable
 13307                           ;	PWRTE = OFF, PWRT disabled
 13308                           ;	MCLR Pin Function Select
 13309                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 13310                           ;	Flash Program Memory Code Protection
 13311                           ;	CP = OFF, Program memory code protection is disabled
 13312                           ;	Data Memory Code Protection
 13313                           ;	CPD = OFF, Data memory code protection is disabled
 13314                           ;	Brown-out Reset Enable
 13315                           ;	BOREN = OFF, Brown-out Reset disabled
 13316                           ;	Clock Out Enable
 13317                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 13318                           ;	Internal/External Switchover
 13319                           ;	IESO = ON, Internal/External Switchover mode is enabled
 13320                           ;	Fail-Safe Clock Monitor Enable
 13321                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 13322     8007                     	org	32775
 13323     8007  39E1               	dw	14817
 13324                           
 13325                           ;Config register CONFIG2 @ 0x8008
 13326                           ;	Flash Memory Self-Write Protection
 13327                           ;	WRT = OFF, Write protection off
 13328                           ;	Voltage Regulator Capacitor Enable
 13329                           ;	VCAPEN = OFF, All VCAP pin functionality is disabled
 13330                           ;	PLL Enable
 13331                           ;	PLLEN = OFF, 4x PLL disabled
 13332                           ;	Stack Overflow/Underflow Reset Enable
 13333                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 13334                           ;	Brown-out Reset Voltage Selection
 13335                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 13336                           ;	Low-Voltage Programming Enable
 13337                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
 13338     8008                     	org	32776
 13339     8008  1EFF               	dw	7935

Data Sizes:
    Strings     137
    Constant    0
    Data        5
    BSS         134
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     80      80
    BANK1            80     79      80
    BANK2            80     31      67
    BANK3            80      0      20
    BANK4            80      0      80
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    efgtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    Lcd_Write_String@a	PTR const unsigned char  size(2) Largest target is 20
		 -> buffer(BANK3[20]), STR_1(CODE[15]), STR_10(CODE[7]), STR_11(CODE[9]), 
		 -> STR_12(CODE[7]), STR_13(CODE[9]), STR_14(CODE[15]), STR_15(CODE[14]), 
		 -> STR_16(CODE[15]), STR_17(CODE[17]), STR_4(CODE[2]), STR_6(CODE[2]), 
		 -> STR_7(CODE[17]), STR_8(CODE[16]), STR_9(CODE[15]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    memcpy@d1	PTR void  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    memcpy@s1	PTR const void  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    S1229$buffer	PTR unsigned char  size(2) Largest target is 0

    S1229$source	PTR const unsigned char  size(2) Largest target is 0

    sp__memcpy	PTR void  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_3(CODE[7]), STR_5(CODE[7]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK3[20]), 

    strcmp@l	PTR const unsigned char  size(1) Largest target is 5
		 -> clave(BANK2[5]), 

    strcmp@r	PTR const unsigned char  size(1) Largest target is 5
		 -> clave_enter(BANK2[5]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK4[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_18(CODE[4]), STR_21(CODE[4]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_3(CODE[7]), STR_5(CODE[7]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_3(CODE[7]), STR_5(CODE[7]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_3(CODE[7]), STR_5(CODE[7]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK2[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _IOC in COMMON

    _IOC->i1_Lcd_Write_String
    i1_Lcd_Write_String->i1_Lcd_Write_Char
    i1_Lcd_Write_Char->i1_Lcd_Port
    i1_Lcd_Set_Cursor->i1_Lcd_Cmd
    i1_Lcd_Clear->i1_Lcd_Cmd
    i1_Lcd_Cmd->i1_Lcd_Port

Critical Paths under _main in BANK0

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _read_prec_or_width->___wmul
    _efgtoa->_floorf
    _floorf->___fldiv
    ___flsub->___flmul
    ___flmul->__Umul8_16
    ___flge->___flmul
    ___fldiv->___xxtofl
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    ___xxtofl->___wmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _IOC in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa

Critical Paths under _IOC in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_sprintf

Critical Paths under _IOC in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _IOC in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _IOC in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _IOC in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _IOC in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   32913
                                             77 BANK1      2     2      0
                                             13 BANK2     18    18      0
            _ADC_GetConversionResult
                     _ADC_Initialize
               _ADC_IsConversionDone
                _ADC_StartConversion
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___fldiv
                             ___wmul
                           ___xxtofl
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    16     14   26184
                                             62 BANK1     15     1     14
                                              0 BANK2     13    13      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             7     4      3   25652
                                             77 BANK0      3     0      3
                                             58 BANK1      4     4      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           15    13      2   25330
                                             75 BANK0      2     0      2
                                             45 BANK1     13    13      0
                               _dtoa
                             _efgtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   9     7      2     837
                                              6 BANK0      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     548
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _efgtoa                                              55    50      5   18861
                                             66 BANK0      9     4      5
                                              0 BANK1     45    45      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                               _labs
                             _memcpy
                                _pad
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     4      2     291
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _memcpy                                               8     5      3     328
                                              0 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (5) _labs                                                 4     0      4     294
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _floorf                                              20    16      4     490
                                             46 BANK0     20    16      4
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fpclassifyf                                       16    12      4     287
                                              0 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4     457
                                              0 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    2637
                                             35 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    2288
                                              0 BANK0     20    12      8
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     121
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             26    18      8    3178
                                              9 BANK0     26    18      8
                          __Umul8_16
 ---------------------------------------------------------------------------------
 (6) __Umul8_16                                            9     7      2     799
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8     942
                                             35 BANK0     12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fleq                                              12     4      8     394
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             26    18      8    2185
                                             20 BANK0     26    18      8
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                13    11      2    4006
                                             22 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     4      3    2445
                                             15 BANK0      7     4      3
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     6      1     888
                                              8 BANK0      7     6      1
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 BANK0      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              7     3      4     448
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              9     5      4     452
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) ___xxtofl                                            14    10      4     474
                                              6 BANK0     14    10      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     5     3      2    1274
                                              5 BANK0      5     3      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1    1806
                                              3 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     308
                                              3 BANK0      1     1      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _IOC                                                  2     2      0    2186
                                             10 COMMON     2     2      0
                    _Keypad_Get_Char
                        _Keypad_Init
                             _strcmp
                        i1_Lcd_Clear
                   i1_Lcd_Set_Cursor
                   i1_Lcd_Write_Char
                 i1_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (10) i1_Lcd_Write_String                                  5     3      2     554
                                              5 COMMON     5     3      2
                   i1_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (11) i1_Lcd_Write_Char                                    4     4      0     178
                                              1 COMMON     4     4      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i1_Lcd_Set_Cursor                                    6     5      1    1014
                                              3 COMMON     6     5      1
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (10) i1_Lcd_Clear                                         0     0      0     110
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (11) i1_Lcd_Cmd                                           2     2      0     110
                                              1 COMMON     2     2      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (12) i1_Lcd_Port                                          1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              4     2      2     330
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (10) _Keypad_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Keypad_Get_Char                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversionResult
   _ADC_Initialize
   _ADC_IsConversionDone
   _ADC_StartConversion
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Clear
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___fldiv
     ___wmul (ARG)
     ___xxtofl (ARG)
       ___wmul (ARG)
   ___wmul
   ___xxtofl
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _efgtoa
           ___fladd
           ___fldiv
           ___fleq
           ___flge
             ___flmul (ARG)
               __Umul8_16
           ___flmul
           ___flneg
           ___flsub
             ___fladd
             ___flmul (ARG)
           ___fltol
           ___fpclassifyf
           _floorf
             ___fldiv (ARG)
           _labs
           _memcpy
           _pad
           _strcpy
         _fputc
         _read_prec_or_width
           ___wmul

 _IOC (ROOT)
   _Keypad_Get_Char
   _Keypad_Init
   _strcmp
   i1_Lcd_Clear
     i1_Lcd_Cmd
       i1_Lcd_Port
   i1_Lcd_Set_Cursor
     i1_Lcd_Cmd
   i1_Lcd_Write_Char
     i1_Lcd_Port
   i1_Lcd_Write_String
     i1_Lcd_Write_Char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     155       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4F      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     1F      43      10       83.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      14      12       25.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      50      14      100.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     155      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Jan 29 15:14:26 2025

                   ___fldiv@aexp 004D                     ___fldiv@bexp 004C                     ___fldiv@sign 0045  
                    _SSPSTATbits 0214                     ___awdiv@sign 0026              ___wmul@multiplicand 0022  
            __Umul8_16@word_mpld 0026                              l200 02FE                              l203 0302  
                            l212 0309                              l221 0312                              l230 0320  
                            l206 0304                              l215 030C                              l224 0315  
                            l233 0328                              l209 0307                              l242 0336  
                            l218 0310                              l227 031D                              l236 032B  
                            l239 0333                              l361 1DC7                              l373 1DDF  
                            l365 1DCF                              l369 1DD7                              l901 17E2  
                            l566 1D2F                              l735 07CD                              l736 07E7  
                            l744 123C                              l923 0857                              l747 128A  
                            l909 17FA                              l871 1702                              l767 10BA  
                            l944 095E                              l945 0976                              l873 16E7  
                            l947 0981                              l867 1693                              l982 1D6F  
                            l975 0692                              l888 1783                              _IOC 0004  
                            _abs 1CA6                              _pad 1E76                              _hor 0136  
                            _min 0137                              _seg 00EF                     ___awmod@sign 0026  
                            wreg 0009                     ___flmul@aexp 0037                     ___flmul@bexp 003C  
                   ___flmul@sign 0036                     ___flmul@temp 0041                     ___flmul@prod 003D  
                           ?_IOC 0070                     ___fltol@exp1 0029                             l1020 1302  
                           l1021 130C                             l1013 12EE                             l1110 0BD0  
                           l1007 12BA                             l1120 0E08                             ?_abs 0027  
                           l1070 136A                             l1214 14B3                             l1058 1E7C  
                           l1227 1E0A                             l1156 14E6                             l1069 1350  
                           l1158 14F1                             l4021 05FE                             l4023 0615  
                           l4111 1004                             l4033 062E                             l4105 121D  
                           l5001 02ED                             l4211 1371                             l4043 0657  
                           l3411 166F                             l4053 0683                             l4029 062C  
                           l3405 1664                             l4141 1480                             l4047 066C  
                           l3503 1720                             l4311 0BCB                             l4303 0B95  
                           l4073 1E7E                             l4225 13DF                             l4209 13C4  
                           l3505 1722                             l3513 1731                             l3433 168B  
                           l3409 1667                             l4145 1496                             l4321 0BE8  
                           l4305 0BBA                             l4171 1DD9                             l4163 1DC9  
                           l4075 1E9A                             l4219 13D0                             l3531 1795  
                           l3523 177B                             l4139 146F                             l4411 0F70  
                           l4251 09EF                             l5043 03C7                             l3381 1F1B  
                           l3605 1D81                             l4181 1340                             l3429 1688  
                           l4341 0D37                             l4325 0BF0                             l4501 1552  
                           l5061 045F                             l4167 1DD1                             l3711 07F9  
                           l3439 169D                             l4095 11F5                             l4431 0FAB  
                           l4407 0F52                             l4335 0C02                             l4263 0A35  
                           l4239 09D6                             l5071 0495                             l3385 1F42  
                           l4185 1349                             l3721 1256                             l3553 17B4  
                           l3545 17A9                             l4433 0FDC                             l4337 0CE5  
                           l4257 0A15                             l4249 09E9                             l3609 1D29  
                           l4513 158C                             l4521 1596                             l3635 1FC4  
                           l4195 1364                             l3803 082D                             l3539 17A2  
                           l3547 17AB                             l4099 11FA                             l4371 0E96  
                           l4347 0D67                             l4283 0AA4                             l4275 0A7C  
                           l4451 1042                             l4531 15D9                             l4515 1591  
                           l4523 15A9                             l4611 1DA9                             l3661 1FFB  
                           l3653 1FEA                             l3645 1FCC                             l3629 1FB9  
                           l3805 0835                             l3725 1270                             l3557 17B6  
                           l3477 16ED                             l3469 16BB                             l4437 0FEB  
                           l4429 0FCC                             l4365 0E1B                             l4293 0B5C  
                           l4285 0AB1                             l4269 0A5C                             l4541 1615  
                           l4533 15E9                             l4525 15B2                             l4517 1594  
                           l4509 157C                             l4613 1DBC                             ?_pad 002F  
                           l3647 1FD8                             l4199 138E                             l3823 084F  
                           l3575 17F2                             l3495 1710                             l3479 16EF  
                           l3487 16FD                             l4391 0EAB                             l4295 0B66  
                           l4455 105E                             l4535 15F9                             l4527 15C5  
                           l4543 1626                             l4705 118F                             l4721 1D0E  
                           l3657 1FF3                             l3673 1ED7                             l3905 0946  
                           l3833 0876                             l3745 107C                             l4393 0EC3  
                           l4369 0E91                             l4289 0B09                             l4457 1070  
                           l3691 1EFC                             l3819 084C                             l3579 17F6  
                           l4547 1630                             l3685 1EE4                             l3677 1EDE  
                           l3589 1D69                             l3941 04BA                             l3765 10A8  
                           l3749 1085                             l5461 15E1                             l3687 1EF0  
                           l3695 1F05                             l3919 097D                             l3839 0882  
                           l3943 04C2                             l3775 10C7                             l3767 10B6  
                           l5463 1621                             l4495 1539                             l4487 14F3  
                           l4841 12C9                             l3865 08E2                             l3961 04E3  
                           l4489 1512                             l5457 150C                             l4835 12B2  
                           l3699 1F0D                             l3891 091B                             l3883 08ED  
                           l3859 08C9                             l3867 08AB                             l3939 04B8  
                           l5459 159E                             l4685 1159                             l4845 12CB  
                           l3885 0904                             l3869 08E7                             l3957 04D9  
                           l4695 1174                             l4855 1300                             l4847 12DB  
                           l3895 091D                             l3799 082A                             l3959 04DB  
                           l4857 12F3                             l3969 04F1                             l4869 1327  
                           l4995 028F                             STR_1 1832                             STR_2 1850  
                           STR_3 1871                             STR_4 1887                             STR_5 1871  
                           STR_6 1887                             STR_7 1811                             STR_8 1822  
                           STR_9 1813                             u3315 1F40                             u3420 16DA  
                           u4045 07F5                             u4125 108E                             u3430 16DB  
                           u3415 16CF                             u5040 1336                             u5105 13CE  
                           u4305 08B3                             u5050 1337                             u4315 08BA  
                           u4155 10A9                             u5125 137F                             u5135 138B  
                           u4335 08C3                             u3543 1743                             u3535 1726  
                           u4345 08D7                             u3465 16F3                             u4185 10BE  
                           u6125 1314                             u6045 12D4                             u4605 05D1  
                           u3805 1D30                             u4375 08F0                             u4615 05ED  
                           u5335 0C10                             u3815 1D35                             u6065 12E8  
                           u3905 1FEB                             u4465 0934                             u4625 0601  
                           u3585 1796                             u5450 0F9D                             u4475 094F  
                           u4395 08F9                             u4715 0645                             u5435 0F60  
                           u5460 0F9E                             u6085 12FA                             u4485 0968  
                           u3765 1D70                             u4725 0660                             u4645 060A  
                           u3685 17CD                             u4805 11E4                             u5445 0F6E  
                           u6405 0341                             u4910 1439                             u4735 0676  
                           u6415 0361                             u4840 1215                             u3865 1FCF  
                           u4585 055E                             u6425 0381                             u4850 1216  
                           u5715 117E                             u5635 1E5B                             u4595 0587  
                           u4835 1207                             u4915 1435                             u5395 0E74  
                           u6435 03C2                             u3885 1FD9                             u3965 1EE7  
                           u4765 1E88                             u5485 0FDA                             u6607 1F7B  
                           u5735 1199                             u3895 1FE3                             u4935 145E  
                           u5495 0FBA                             u6617 1F87                             u3985 1EF6  
                           u4785 11CB                             u6627 1CEA                             u5675 1148  
                           u3995 1EFD                             u4955 1489                             u4885 140B  
                           u6557 0285                             u5695 1163                             u4975 149F  
                           u4895 1426                             u6567 049B                             u6577 1E64  
                           u6587 1E70                             u6597 1F6E                             _WPUB 020D  
                           abs@a 0027                ?_Lcd_Write_String 0025                             _dbuf 0220  
                           _labs 1CB4                             _main 0246                             _dtoa 1330  
                           _prec 012E                             _temp 0128                             pad@i 0033  
                           pad@p 0030                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E                    ___fpclassifyf 11AA  
                           start 0216               ??_Lcd_Write_String 0027                  ___fldiv@new_exp 0046  
                __end_of_Lcd_Cmd 1CF2                            ??_IOC 007A                            ??_abs 0029  
                          ??_pad 0032                    ___fltol@sign1 0028                            ?_labs 0020  
                __end_of___fladd 1800                            ?_main 0070                            ?_dtoa 0036  
                __end_of___fldiv 0984                  __end_of___awdiv 2000                  __end_of___flneg 1CA6  
                          STR_10 1878                            STR_11 185F                            STR_12 1878  
                          STR_21 1883                            STR_13 1868                            STR_14 1813  
                          STR_15 1824                            STR_16 1841                            STR_17 1800  
                          STR_18 187F                  __end_of___awmod 1F12                  __end_of___flmul 069F  
                __end_of___flsub 1D5F                  __end_of___fltol 10D6                  ___awdiv@divisor 0020  
                          _IOCBF 0396                            _IOCBN 0395                            i1l300 06AC  
                          i1l320 072A                            i1l312 06FB                            i1l304 06CF  
                          i1l321 071D                            i1l313 06EE                            i1l305 06C2  
                          i1l340 079B                            i1l332 076F                            i1l324 0740  
                          i1l316 0714                            i1l308 06E5                            i1l341 078E  
                          i1l333 0762                            i1l325 0733                            i1l317 0707  
                          i1l309 06D8                            i1l336 0785                            i1l328 0756  
                          i1l345 07A4                            i1l337 0778                            i1l329 0749  
                          i1l361 1CCB                            i1l373 1CDA                            i1l365 1CD0  
                          i1l369 1CD5                            i1l299 06B9                ?i1_Lcd_Set_Cursor 0073  
                ___awdiv@counter 0025                    ??_Keypad_Init 0070                     vfpfcnvrt@fmt 006B  
                    ?i1_Lcd_Port 0070               ??i1_Lcd_Set_Cursor 0074                            _clave 0138  
                          _flags 007C              read_prec_or_width@c 002B              read_prec_or_width@n 002C  
                          _fputc 1F12                            _fputs 1D7E                            _tecla 007D  
                          labs@a 0020                            pad@fp 0035                            _width 012C  
                          _putch 0003                            dtoa@d 0036                            dtoa@i 0041  
                          dtoa@p 003C                            dtoa@s 0040                            dtoa@w 003E  
                          status 0003                            wtemp0 007E                  __end_of_sprintf 1E04  
                 ?___fpclassifyf 0020                 __end_of_Lcd_Init 1FAF                 __end_of_Lcd_Port 1DE2  
                __initialization 0218                     __end_of_labs 1CC6                     __end_of_main 04A3  
                   __end_of_dtoa 13EA                           ??_labs 0024                           ??_main 014C  
                         ??_dtoa 0038       __end_of_read_prec_or_width 1075                   _convertedValue 013D  
                         _ADCON0 009D                           _ADCON1 009E                           ?_fputc 0020  
                         ?_fputs 0028                           _ADRESH 009C                           _ADRESL 009B  
               ___awdiv@dividend 0022                           ?_putch 0070                           _ANSELB 018D  
            __end_of_Keypad_Init 1C9D                           i1l5101 0057                           i1l5103 005B  
                         i1l5121 0093                           i1l5141 00D9                           i1l5223 017F  
                         i1l5119 0068                           i1l5225 01AA                           i1l5155 0103  
                         i1l5091 003B                           i1l5093 003D                           i1l5239 01CC  
                         i1l5095 0043                           i1l5079 0019                           i1l5177 0115  
                         i1l4811 07B1                           i1l5195 0125                           i1l5179 0118  
                         i1l5099 0047                           i1l4821 1EB2                           i1l4581 1CD6  
                         i1l4573 1CCC                           i1l5277 01FC                           i1l5197 0150  
                         i1l4823 1EA3                           i1l5279 020D                           i1l4825 1EBE  
                         i1l4577 1CD1                           i1l4905 1124                           i1l4921 1CF4  
                         i1l5465 004F                           i1l5467 0202                           i1l4885 10F0  
                         i1l4895 110A                           u620_25 1114                           u622_25 112E  
                         u616_25 10E0                           u618_25 10FA                           u650_25 012F  
              ?i1_Lcd_Write_Char 0070                           u565_25 1E34                           u653_25 0189  
                         u670_27 1E3D                           u647_25 0072                           u671_27 1E48  
                         u663_27 0012                        ??_Lcd_Cmd 0021                           u680_27 06F4  
                         u672_27 080D                           u664_27 0098                    vfpfcnvrt@done 00D1  
                         u681_27 0703                           u673_27 06A8                           u665_27 00D2  
                         u690_27 0768                           u682_27 070D                           u674_27 06B2  
                         u666_27 00FC                           u691_27 0774                           u683_27 0719  
                         u675_27 06BE                           u667_27 0155                           u692_27 077E  
                         u684_27 0723                           u676_27 06C8                           u668_27 01AF  
                         u693_27 078A                           u685_27 072F                           u677_27 06D4  
                         u669_27 01E2                           u694_27 0794                           u686_27 0739  
                         u678_27 06DE                           u695_27 07A0                           u687_27 0745  
                         u679_27 06EA                           u696_27 07AA                           u688_27 074F  
                         u689_27 075E                           _SSPADD 0212                     ?i1_Lcd_Clear 0070  
                         _SSPBUF 0211                 __end_of___xxtofl 1330               ??i1_Lcd_Write_Char 0071  
              __end_ofi1_Lcd_Cmd 0815                     vfprintf@cfmt 00DC                           ___flge 1222  
                         ___fleq 07B3                i1Lcd_Write_Char@a 0074                i1Lcd_Write_Char@y 0073  
                      ??___fladd 0028                           ___wmul 1D27                        ??___fldiv 003C  
                      ??___awdiv 0024                        ??___flneg 0024                        ??___awmod 0024  
                      ??___flmul 0031                        ??___flsub 004B                        ??___fltol 0024  
                         _efgtoa 0984                           _buffer 01A0                           _floorf 13EA  
                         _estado 0130                           _memcpy 1E04             read_prec_or_width@ap 0026  
               ___awdiv@quotient 0027                  ___awmod@divisor 0020                  ___awmod@counter 0025  
                         pad@buf 002F                           dtoa@fp 003B                           _strcmp 1EA1  
                         _strcpy 1000                           fputc@c 0020                           fputs@c 002B  
                         fputs@i 002C                           fputs@s 002E                  ___fpclassifyf@e 002A  
                ___fpclassifyf@u 002C                  ___fpclassifyf@x 0020                           putch@c 0070  
               __end_of_vfprintf 1DC0                        ??_sprintf 00EC                  Lcd_Set_Cursor@a 0025  
                Lcd_Set_Cursor@b 0023                  Lcd_Set_Cursor@y 0027                  Lcd_Set_Cursor@z 0026  
                     ___flge@ff1 0043                       ___flge@ff2 0047                  ??___fpclassifyf 0024  
                   ___xxtofl@arg 0030                     ___xxtofl@exp 002F                     ___xxtofl@val 0026  
                     ___fleq@ff1 0020                       ___fleq@ff2 0024          __end_of__initialization 0242  
                     ___flneg@f1 0020                __end_of_Lcd_Clear 1C94                       ___fltol@f1 0020  
                 __pcstackCOMMON 0070                     __pidataBANK2 07FB                    __end_of_fputc 1F60  
                  __end_of_fputs 1D9F                    __end_of_putch 0004          _ADC_GetConversionResult 1C7C  
                 _Lcd_Set_Cursor 113E                   _OPTION_REGbits 0095                      _Keypad_Init 1C94  
                      ?_Lcd_Init 0070                        ?_Lcd_Port 0070                          ??_fputc 0023  
                        ??_fputs 0029                          ??_putch 0020                       __pbssBANK1 00EF  
                     __pbssBANK2 0120                       __pbssBANK3 01A0                       __pbssBANK4 0220  
              __end_of__Umul8_16 1D7E                       __pmaintext 0246                          ?___flge 0043  
                        ?___fleq 0020                          ?___wmul 0020                       __pintentry 0004  
                        ?_efgtoa 0062                          ?_floorf 004E                          ?_memcpy 0020  
         __end_of_Lcd_Set_Cursor 11AA                          ?_strcmp 0070                          ?_strcpy 0020  
                      ?___xxtofl 0026                     ??i1_Lcd_Port 0070                       ??_Lcd_Init 0023  
                     ??_Lcd_Port 0020                 main@contadorTemp 00ED                   _Lcd_Write_Char 1E4E  
                        _Lcd_Cmd 1CDC             _ADC_InterruptHandler 0134               __end_ofi1_Lcd_Port 1CDC  
                        ___fladd 164F                          ___fldiv 0815                          ___awdiv 1FAF  
                        ___flneg 1C9D                          ___awmod 1ECD                          ___flmul 04A3  
                        ___flsub 1D42                          ___fltol 1075                        ?_vfprintf 006D  
      ??_ADC_GetConversionResult 0022                  ?_Lcd_Set_Cursor 0023                          __ptext1 1DE2  
                        __ptext2 1D9F                          __ptext3 14BC                          __ptext4 101A  
                        __ptext5 1D27                          __ptext6 0984                          __ptext7 1000  
                        __ptext8 1E04                          __ptext9 1CB4            read_prec_or_width@fmt 002E  
                     ??___xxtofl 002A                 ___awmod@dividend 0022                          efgtoa@c 0066  
                        efgtoa@d 00AB                          efgtoa@e 00B0                          efgtoa@f 0062  
                        efgtoa@g 00C3                          efgtoa@h 00B8                          efgtoa@i 00C0  
                        efgtoa@l 00BC                          efgtoa@m 00AD                          efgtoa@n 00C7  
                        efgtoa@p 00A2                          efgtoa@t 00A4                          efgtoa@u 00C9  
                        efgtoa@w 00B2       __end_ofi1_Lcd_Write_String 1D0C                          _sprintf 1DE2  
                        clrloop0 1C68           __end_of_Lcd_Write_Char 1E76             end_of_initialization 0242  
                        floorf@e 005C                          floorf@m 0058                          floorf@u 005E  
                        floorf@x 004E                ??_Keypad_Get_Char 0070                          memcpy@d 0026  
                        memcpy@n 0021                          memcpy@s 0027                          fputc@fp 0022  
                        fputs@fp 0028               _read_prec_or_width 101A     __end_of_ADC_IsConversionDone 1C74  
              __end_of_vfpfcnvrt 164F                       efgtoa@mode 00A9                       efgtoa@sign 00C2  
            ?_read_prec_or_width 0026                 vfpfcnvrt@convarg 00D2                        Lcd_Port@a 0020  
                     ??_vfprintf 00DA                          strcmp@l 0073                          strcmp@r 0070  
                      i1_Lcd_Cmd 0802                          strcpy@d 0024                        _PORTBbits 000D  
                    ___fladd@grs 0033                    ___xxtofl@sign 002E                        _TRISAbits 008C  
                      _TRISBbits 008D                        _TRISCbits 008E                        _TRISDbits 008F  
            _ADC_StartConversion 1C64             ??_read_prec_or_width 0028                      ___fldiv@grs 0048  
                    ___fldiv@rem 0041                  ?_Lcd_Write_Char 0070                Lcd_Write_String@a 0025  
              Lcd_Write_String@i 0028                      ___flmul@grs 0038             ?_ADC_StartConversion 0070  
                      _Lcd_Clear 1C8C                   __end_of___flge 129D                   __end_of___fleq 07FB  
                    vfpfcnvrt@ap 006C                      vfpfcnvrt@cp 00D8                      vfpfcnvrt@fp 00D7  
                 __end_of___wmul 1D42                       ?i1_Lcd_Cmd 0070                 _Lcd_Write_String 1D0C  
                 __end_of_efgtoa 1000                   _ADC_Initialize 1C84                   __end_of_floorf 14BC  
                 __end_of_memcpy 1E28                       floorf@F521 0120                     ?_Keypad_Init 0070  
                 __end_of_strcmp 1ECD                   __end_of_strcpy 101A              start_initialization 0218  
                    __end_of_IOC 0216                      __end_of_abs 1CB4                      __end_of_pad 1EA1  
               i1_Lcd_Set_Cursor 10D6            __end_of___fpclassifyf 1222            ??_ADC_StartConversion 0020  
                    vfprintf@fmt 006D                       ?_Lcd_Clear 0070                         ??___flge 004B  
                       ??___fleq 0028                         ??___wmul 0024                         ??_efgtoa 0067  
         __end_of_ADC_Initialize 1C8C                        __Umul8_16 1D5F                      __pdataBANK2 015E  
                       ??_floorf 0052                         ??_memcpy 0023                  Lcd_Write_Char@a 0024  
                Lcd_Write_Char@y 0023                         ??_strcmp 0072                         ??_strcpy 0022  
                      ___fladd@a 0024                        ___fladd@b 0020                        ___fldiv@a 0034  
                      ___fldiv@b 0038                        ___flmul@a 002D                        ___flmul@b 0029  
                    __pbssCOMMON 007C                        ___flsub@a 0043                        ___flsub@b 0047  
                      ___latbits 0002                    __pcstackBANK0 0020                    __pcstackBANK1 00A0  
                  __pcstackBANK2 013F             _ADC_IsConversionDone 1C6D             i1Lcd_Write_Char@temp 0072  
                       ?_Lcd_Cmd 0070                      _efgtoa$1370 00A6                        _dtoa$1339 0039  
               ??_Lcd_Set_Cursor 0024                         ?___fladd 0020                         ?___fldiv 0034  
                       ?___awdiv 0020                         ?___flneg 0020                         ?___awmod 0020  
                       ?___flmul 0029                         ?___flsub 0043                         ?___fltol 0020  
                     ?__Umul8_16 0020                  ?_ADC_Initialize 0070                      _clave_enter 015E  
               i1_Lcd_Write_Char 1E28                      ??i1_Lcd_Cmd 0071             i1Lcd_Set_Cursor@temp 0078  
                _Keypad_Get_Char 069F            ?_ADC_IsConversionDone 0070                         ?_sprintf 00DE  
                  ??i1_Lcd_Clear 0073                   ___wmul@product 0024                         _LATAbits 010C  
                       _LATBbits 010D                         _LATCbits 010E                         _LATDbits 010F  
                      clear_ram0 1C67               i1_Lcd_Write_String 1CF2                         Lcd_Cmd@a 0022  
                    ??_Lcd_Clear 0023              ?i1_Lcd_Write_String 0075                        _vfpfcnvrt 14BC  
                     _ADCON0bits 009D                ___wmul@multiplier 0020                 ??_Lcd_Write_Char 0021  
                       _Lcd_Init 1F60                         _Lcd_Port 1DC0                       vfpfcnvrt@c 00D6  
           ??i1_Lcd_Write_String 0077         __end_of_Lcd_Write_String 1D27                        memcpy@tmp 0024  
                     vfprintf@ap 006F                       vfprintf@fp 00DB         ?_ADC_GetConversionResult 0020  
            __end_ofi1_Lcd_Clear 1C7C          __end_of_Keypad_Get_Char 07B3                      ??__Umul8_16 0022  
                     ?_vfpfcnvrt 006B         __end_ofi1_Lcd_Set_Cursor 113E               ___fpclassifyf@F465 0124  
         ??_ADC_IsConversionDone 0020                       sprintf@fmt 00DE                         ___xxtofl 129D  
              i1Lcd_Set_Cursor@a 0075                i1Lcd_Set_Cursor@b 0073                i1Lcd_Set_Cursor@y 0077  
              i1Lcd_Set_Cursor@z 0076                         __ptext10 13EA                         __ptext11 11AA  
                       __ptext20 0815                         __ptext12 1075                         __ptext21 1330  
                       __ptext13 1D42                         __ptext30 1D0C                         __ptext22 1E76  
                       __ptext14 164F                         __ptext31 1E4E                         __ptext23 1D7E  
                       __ptext15 1C9D                         __ptext40 1C7C                         __ptext32 113E  
                       __ptext24 1F12                         __ptext16 04A3                         __ptext33 1F60  
                       __ptext25 0003                         __ptext17 1D5F                         __ptext50 069F  
                       __ptext42 1CF2                         __ptext34 1C8C                         __ptext26 1CA6  
                       __ptext18 1222                         __ptext43 1E28                         __ptext35 1CDC  
                       __ptext27 1ECD                         __ptext19 07B3                         __ptext44 10D6  
                       __ptext36 1DC0                         __ptext28 1FAF                         __ptext45 1C74  
                       __ptext37 1C64                         __ptext29 129D                         __ptext46 0802  
                       __ptext38 1C6D                         __ptext47 1CC6                         __ptext39 1C84  
                       __ptext48 1EA1                         __ptext49 1C94                         _cont_key 0132  
                     strcpy@dest 0025                      i1Lcd_Port@a 0070                         efgtoa@fp 00AF  
                       efgtoa@ne 00A0                         efgtoa@pp 00A8                         efgtoa@ou 00B4  
                       int$flags 007E                         _vfprintf 1D9F              i1Lcd_Write_String@a 0075  
            i1Lcd_Write_String@i 0078                       _INTCONbits 000B                         memcpy@d1 0025  
                       memcpy@s1 0020                   __pstringtext10 1878                   __pstringtext11 187F  
                 __pstringtext12 1883                   __pstringtext13 1887                   __pstringtext14 0000  
             Lcd_Write_Char@temp 0022                         intlevel1 0000                        sprintf@ap 0140  
       __end_ofi1_Lcd_Write_Char 1E4E      __end_of_ADC_StartConversion 1C67                      i1_Lcd_Clear 1C74  
__end_of_ADC_GetConversionResult 1C84                       i1Lcd_Cmd@a 0072                        strcpy@src 0020  
               ??_ADC_Initialize 0020                      efgtoa@nmode 00AA                 ?_Keypad_Get_Char 0070  
                    ??_vfpfcnvrt 00CD               Lcd_Set_Cursor@temp 0028                    __pstringtext1 1800  
                  __pstringtext2 1811                    __pstringtext3 1822                    __pstringtext4 1832  
                  __pstringtext5 1841                    __pstringtext6 1850                    __pstringtext7 185F  
                  __pstringtext8 1868                    __pstringtext9 1871           __Umul8_16@multiplicand 0020  
                       sprintf@f 0141                         sprintf@s 013F                       i1_Lcd_Port 1CC6  
                    _SSPCON1bits 0215                      _SSPCON2bits 0216                    ___fladd@signs 0030  
                   ___fladd@aexp 0031                     ___fladd@bexp 0032             __Umul8_16@multiplier 0028  
                     _SSPCONbits 0215                __Umul8_16@product 0024  
